{
  "dim": 384,
  "count": 2683,
  "chunks": [
    " Getting Started > Initial Setup > Installation\ninstallation, cds toolkit, npm, Node.js, CLI\nThis command installs the @sap/cds-dk toolkit globally using npm. The toolkit provides the 'cds' command line interface required for SAP Cloud Application Programming Model (CAP) development.\n\n```shell\nnpm add -g @sap/cds-dk\n```\n",
    " Getting Started > Initial Setup > Installation\ninstallation, verify, cds CLI\nRunning this command verifies that the 'cds' command line interface has been installed successfully. The output displays usage information and available commands for CAP projects.\n\n```shell\ncds\n```\n",
    " Getting Started > Starting Projects\ninit, project setup, cds CLI\nInitializes a new CAP project named 'bookshop' with the required directory structure and configuration files. This is the entry point for starting CAP-based projects.\n\n```shell\ncds init bookshop\n```\n",
    " Getting Started > Starting Projects\neditor, VS Code, project open\nOpens the newly initialized 'bookshop' CAP project in Visual Studio Code. Assumes you have set up the 'code' command for VS Code.\n\n```shell\ncode bookshop\n```\n",
    " Getting Started > Project Structure\nproject structure, scaffolding\nShows the default folder structure of a CAP project generated by 'cds init'. Directories include app, srv, db, and configuration files like package.json and readme.md.\n\n```shell\nbookshop/        # Your project's root folder\n├─ app/          # UI-related content\n├─ srv/          # Service-related content\n├─ db/           # Domain models and database-related content\n├─ package.json  # Configuration for cds + cds-dk\n└─ readme.md     # A readme placeholder\n```\n",
    " Getting Started > Project Structure\nconfiguration, package.json, custom project layout\nThis JSON snippet demonstrates how to override the default CAP project folder layout by specifying custom directories for db, srv, and app through the 'cds.folders' property in package.json.\n\n```json\n{ ...\n  \"cds\": {\n    \"folders\": {\n       \"db\": \"database/\",\n       \"srv\": \"services/\",\n       \"app\": \"uis/\"\n    }\n  }\n}\n```\n",
    " Getting Started > Project Structure\ncds CLI, environment, defaults, list\nLists the default environment configurations and directory structure used by cds in the current CAP project. Useful for exploring and understanding CAP project conventions.\n\n```shell\ncds env ls defaults\n```\n",
    "Jumpstart & Grow As You Go... > Jumpstarting Projects\nCLI, cds CLI, init, project setup, verify\nThese two shell commands are used to rapidly initialize and start a new CAP (Cloud Application Programming Model) project. 'cds init' scaffolds a minimalistic new project with default configuration, while 'cds watch' starts a server with live reload for fast development. Used to jumpstart CAP development by following the convention over configuration principle.\n\n```shell\ncds init\ncds watch\n```\n",
    "Jumpstart & Grow As You Go... > Growing as You Go...\nCLI, cds CLI, add, project setup, configuration, environment\nThis shell command allows you to add features or integrations to a CAP project only as needed. Common options include database adapters (hana, redis), deployed artifact types (mta, helm), and capabilities like multitenancy or extensibility. This approach supports incremental project evolution and iterative workflow in CAP projects, avoiding premature decisions.\n\n```shell\ncds add hana,redis,mta,helm,mtx,multitenancy,extensibility...\n```\n",
    " Best Practices > Single-Purposed Services > DO: One Service Per Use Case\nservice definition, srv/catalog-service.cds, Books, Orders, projection, authorization, entities, projection, readonly, insertonly\nDefines a CatalogService for browsing books and placing orders. The Books entity is exposed as readonly with selected fields, while Orders is exposed as insertonly for authenticated users. Each entity is projected from the domain model.\n\n```cds\nusing { my.domain as my } from './db/schema';\n\n/** Serves end users browsing books and place orders */\nservice CatalogService {\n  @readonly entity Books as select from my.Books {\n    ID, title, author.name as author\n  };\n  @requires: 'authenticated-user'\n  @insertonly entity Orders as projection on my.Orders;\n}\n```\n",
    " Best Practices > Single-Purposed Services > DO: One Service Per Use Case\nservice definition, srv/users-service.cds, Orders, projection, authorization, actions, restrict, readonly\nDefines a UsersService for registered users to manage their own orders. Only orders belonging to the authenticated user can be read, and an action 'cancelOrder' is provided to allow users to cancel their orders.\n\n```cds\n/** Serves registered users managing their account and their orders */\n@requires: 'authenticated-user'\nservice UsersService {\n  @restrict: [{ grant: 'READ', where: 'buyer = $user' }] // limit to own ones\n  @readonly entity Orders as projection on my.Orders;\n  action cancelOrder ( ID:Orders.ID, reason:String );\n}\n```\n",
    " Best Practices > Single-Purposed Services > DO: One Service Per Use Case\nservice definition, srv/admin-service.cds, Books, Authors, Orders, projection, authorization\nDefines an AdminService for administrators to manage all aspects of the application. The service exposes Books, Authors, and Orders entities as projections for full administrative access, restricted to authenticated users.\n\n```cds\n/** Serves administrators managing everything */\n@requires: 'authenticated-user'\nservice AdminService {\n  entity Books   as projection on my.Books;\n  entity Authors as projection on my.Authors;\n  entity Orders  as projection on my.Orders;\n}\n```\n",
    " Transaction Management > Automatic Transactions\nautomatic transactions, db.read, Service-managed Transactions, cds CLI, SQL\nExample of an automatic transaction using CAP's db.read API in JavaScript. The CAP framework manages transaction boundaries automatically, including connection acquisition and release, so no explicit transaction code is needed.\n\n```js\nawait db.read('Books')\n```\n",
    " Transaction Management > Automatic Transactions\nautomatic transactions, SQL, connection pool\nSQL-level representation of a transaction managed automatically by CAP when executing a db.read('Books') operation. Illustrates connection pooling, transaction begin/commit, and release.\n\n```sql\n-- ACQUIRE connection from pool\nCONNECT; -- if no pooled one\nBEGIN;\nSELECT * from Books;\nCOMMIT;\n-- RELEASE connection to pool\n```\n",
    " Transaction Management > Nested Transactions\nevent handler, nested transactions, service-to-service calls\nShows handling of nested transactions inside an event handler for a bank transfer scenario. CAP runtime manages a root transaction for the event and nested ones for DB and log service interactions.\n\n```js\nconst log = cds.connect.to('log')\nconst db = cds.connect.to('db')\n\nBankingService.on ('transfer', req => {\n  let { from, to, amount } = req.data\n  await db.update('BankAccount',from).set('balance -=', amount),\n  await db.update('BankAccount',to).set('balance +=', amount),\n  await log.insert ({ kind:'Transfer', from, to, amount })\n})\n```\n",
    " Transaction Management > Manual Transactions\nmanual transactions, cds.tx, transaction handling\nManually starting and committing a transaction using cds.tx() to insert an author and a book in a single transactional context. CAP will handle commit/rollback for all operations within the supplied function.\n\n```js\ncds.tx (async ()=>{\n  const [ Emily ] = await db.insert (Authors, {name:'Emily Brontë'})\n  await db.insert (Books, { title: 'Wuthering Heights', author: Emily })\n})\n```\n",
    " Transaction Management > Background Jobs\nbackground jobs, cds.spawn, async operations\nCreates a background job using cds.spawn() to process outbox mails periodically under a privileged user. Each run executes in a fresh transaction, independent of the main event context.\n\n```js\ncds.spawn ({ user: cds.User.privileged, every: 1000 /* ms */ }, async ()=>{\n  const mails = await SELECT.from('Outbox')\n  await MailServer.send(mails)\n  await DELETE.from('Outbox').where (`ID in ${mails.map(m => m.ID)}`)\n})\n```\n",
    " Transaction Management > cds. context {event-contexts .property} > Accessing Context\ncontext, cds.context, user, tenant\nAccesses the current user from cds.context to check for admin role. Demonstrates accessing runtime event context for authorization and logic branching.\n\n```js\nconst { user } = cds.context\nif (user.is('admin')) ...\n```\n",
    " Transaction Management > cds. context {event-contexts .property} > Accessing Context\ncontext, cds.context, http, request, response\nShows how to access HTTP request and response objects from cds.context in CAP. Can be used for content negotiation and protocol-level handling within service operations or handlers.\n\n```js\nconst { req, res } = cds.context.http\nif (!req.is('application/json')) res.send(415)\n```\n",
    " Transaction Management > cds. context {event-contexts .property} > Setting Contexts\ncontext, cds.context, middleware, custom authentication\nExample of custom Express middleware that sets cds.context based on incoming HTTP headers for tenant and user. Used for custom authentication or context propagation in CAP applications.\n\n```js\napp.use ((req, res, next) => {\n  const { 'x-tenant':tenant, 'x-user-id':user } = req.headers\n  cds.context = { tenant, user } // Setting cds.context\n  next()\n})\n```\n",
    " Transaction Management > cds. context {event-contexts .property} > Context Propagation\ncontext propagation, transaction context, cds.tx, user, tenant\nIllustrates how a new transaction context inherits properties from cds.context, and how you can override some (like user) while maintaining others (like tenant). Shows transaction and context independence.\n\n```js\ncds.context = { tenant:'t1', user:'u1' }\ncds.context.user.id === 'u1'          //> true\nlet tx = cds.tx({ user:'u2' })\ntx.context !== cds.context            //> true\ntx.context.tenant === 't1'            //> true\ntx.context.user.id === 'u2'           //> true\ntx.context.user !== cds.context.user  //> true\ncds.context.user.id === 'u1'          //> true\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method}\ncds.tx, srv.tx, method signature, service, transaction\nTypeScript signatures for CAP's srv.tx method showing function overloads for starting transactions manually and optionally providing a context and/or a function to execute transactional code.\n\n```ts\nfunction srv.tx ( ctx?, fn? : tx<srv> => {...} ) => Promise\nfunction srv.tx ( ctx? ) => tx<srv>\nvar ctx : { tenant, user, locale }\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method}\nsrv.tx, manual transaction, transaction object, commit, rollback\nManual transaction management with srv.tx(): creates a transaction object used to run several queries, with explicit commit/rollback handling.\n\n```js\nconst tx = srv.tx()\ntry {\n  let exists = await tx.run ( SELECT(1).from(Books,201).forUpdate() )\n  if (exists) await tx.update (Books,201).with(data)\n  else await tx.create (Books,{ ID:201,...data })\n  await tx.commit()\n} catch(e) {\n  await tx.rollback(e)\n}\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method} > srv.tx  <i>  (context?, fn?) → tx<srv> </i>\nsrv.tx, db.tx, manual transaction, commit, rollback, Service API\nStarts a manual transaction on a database service, executes multiple operations, and manages commit/rollback explicitly. Demonstrates proper lifecycle management for transactions outside of event handlers.\n\n```js\nlet db = await cds.connect.to('db')\nlet tx = db.tx()\ntry {\n  await tx.run (SELECT.from(Foo))\n  await tx.create (Foo, {...})\n  await tx.read (Foo)\n  await tx.commit()\n} catch(e) {\n  await tx.rollback(e)\n}\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method} > srv.tx  <i>  ({ tenant?, user?, ... }) → tx<srv> </i> {srv-tx-ctx}\nsrv.tx, context, user, tenant\nCreates a new transaction (tx) on the database service with a specific tenant and user context, overriding any ambient context.\n\n```js\nlet tx = db.tx ({ tenant:'t1' user:'u2' })\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method} > srv.tx  <i>  ((tx)=>{...}) → tx<srv> </i> {srv-tx-fn}\nsrv.tx, function callback, auto commit, auto rollback\nRuns a transaction using db.tx with an async function argument: automatically commits if the function completes, or rolls back if there's an error.\n\n```js\nawait db.tx (async tx => {\n  await tx.run (SELECT.from(Foo))\n  await tx.create (Foo, {...})\n  await tx.read (Foo)\n})\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method} > srv.tx  <i>  ((tx)=>{...}) → tx<srv> </i> {srv-tx-fn}\nsrv.tx, manual transaction, commit, rollback\nEquivalent manual transaction management using db.tx: explicit try/catch with commit/rollback, functionally similar to the auto-commit variant but with more control over error handling.\n\n```js\nlet tx = db.tx()\ntry {\n  await tx.run (SELECT.from(Foo))\n  await tx.create (Foo, {...})\n  await tx.read (Foo)\n  await tx.commit()\n} catch(e) {\n  await tx.rollback(e)\n}\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method} > srv.tx  <i>  (ctx) → tx<srv> </i> {srv-tx-context}\ncds.tx, context, nested transaction, root transaction\nCreates a new root transaction with CDS, inheriting context properties from cds.context. Useful for performing work under explicit context.\n\n```js\ncds.context = { tenant:'t1', user:'u2' }\nconst tx = cds.tx (cds.context)\n//> tx is a new root transaction\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method} > srv.tx  <i>  (ctx) → tx<srv> </i> {srv-tx-context}\ncds.tx, nested transaction, context propagation\nDemonstrates creating a nested transaction with explicit event context. Shows how nested transactions are created and how context is handled.\n\n```js\nconst tx = cds.context = cds.tx ({ tenant:'t1', user:'u2' })\nconst tx1 = cds.tx (cds.context)\n//> tx1 is a new nested transaction to tx\n```\n",
    " Transaction Management > cds/srv. tx() {srv-tx .method} > _↳_ <span>tx</span>.commit  <i>  (res?) ⇢ res </i> {commit }\ntransaction object, commit, rollback, promise chaining\nShows use of promise chaining for commit and rollback methods on a transaction object (tx), which are both bound to the transaction instance and return or propagate their argument.\n\n```js\nlet tx = cds.tx()\ntx.run(...) .then (tx.commit, tx.rollback)\n```\n",
    " Transaction Management > cds.spawn() {cds-spawn .method}\nbackground jobs, cds.spawn, periodic task, event context\nSpawns a periodic background job in a specific tenant context using cds.spawn(). Each execution receives its own root transaction and runs isolated from the main event processing.\n\n```js\ncds.spawn ({ tenant:'t0', every: 1000 /* ms */ }, async (tx) => {\n  const mails = await SELECT.from('Outbox')\n  await MailServer.send(mails)\n  await DELETE.from('Outbox').where (`ID in ${mails.map(m => m.ID)}`)\n})\n```\n",
    " Transaction Management > cds.spawn() {cds-spawn .method}\nbackground jobs, cds.spawn, event emitter, interval control\nDemonstrates starting a recurring job with cds.spawn and programmatically stopping it using clearInterval on the job's timer property.\n\n```js\nlet job = cds.spawn({ every:111 }, ...)\nawait sleep (11111)\nclearInterval (job.timer) // stops the background job loop\n```\n",
    " Transaction Management > DEPRECATED APIs\nDEPRECATED, srv.tx, context propagation, event handler\nLegacy/deprecated usage for transaction/context propagation in event handlers, where you manually created a transaction per request. This approach is no longer necessary from CAP v5 onwards.\n\n```js\nthis.on('READ','Books', req => {\n  const tx = cds.tx(req)\n  return tx.read ('Books')\n})\n```\n",
    " Authentication > cds. User\ncds.User, custom authentication, user instantiation\nExample showing how to set cds.context.user with a custom user instance in custom authentication middleware. Here, DummyUser is a subclass of cds.User that always returns true for 'is', bypassing role checks.\n\n```js\nconst cds = require('@sap/cds')\nconst DummyUser = new class extends cds.User { is:()=>true }\nmodule.exports = (req,res,next) => {\n  cds.context.user = new DummyUser('dummy')\n  next()\n}\n```\n",
    " Authentication > cds. User\ncds.User, user instantiation, user id, roles, attributes\nShows multiple ways to create user instances using cds.User: directly with an id, cloning an existing user, or initializing from an object with id, roles, and attributes. Used to populate cds.context.user or for manual checks.\n\n```js\nconst cds = require('@sap/cds')\n// with user ID as string\nconst user = new cds.User('userId')\n// a user instance\nconst anotherUser = new cds.User(user)\n// a user instance like object\nconst yetAnotherUser = new cds.User({id: user.id, roles: user.roles, attr: user.attr})\n```\n",
    " Authentication > cds. User > .is (role)\nauthorization, user role check, .is, cds.User\nChecks if the current user has the 'admin' role using the .is method on a cds.User instance. Used in hooks or logic that needs role-based access enforcement.\n\n```js\nif (req.user.is('admin')) ...\n```\n",
    " Authentication > cds.User.Privileged\nUser.Privileged, authorization bypass, local service, transaction\nCreates and uses a privileged user for a service transaction, bypassing authorization checks. Used for special flows like local logs or system-level inserts in event handlers.\n\n```js\nthis.before('*', function (req) {\n  const user = new cds.User.Privileged\n  return this.tx({ user }, tx => tx.run(\n    INSERT.into('RequestLog').entries({\n      url: req._.req.url,\n      user: req.user.id\n    })\n  )\n})\n```\n",
    " Authentication > cds.User.Privileged\nUser.Privileged, authorization bypass, privileged instance\nShows how to use the built-in ready-to-use privileged user instance cds.User.privileged, which allows operations without standard authorization.\n\n```js\nconst user = cds.User.privileged\n```\n",
    " Authentication > cds.User.Anonymous\nUser.Anonymous, anonymous user\nCreate a new anonymous user instance. Useful for custom authentication flows where an unidentified user context is needed.\n\n```js\nconst user = new cds.User.Anonymous\n```\n",
    " Authentication > cds.User.Anonymous\nUser.Anonymous, anonymous user, predefined instance\nShows how to use the built-in anonymous user instance cds.User.anonymous for requests with no authenticated user.\n\n```js\nconst user = cds.User.anonymous\n```\n",
    " Authentication > cds.User.default\nUser.default, fallback user, unauthenticated\nRefers to the default user instance used as a fallback if requests cannot be authenticated. Usually points to Anonymous, but can be changed as needed.\n\n```js\ncds.User.default\n```\n",
    " Authentication > Authorization Enforcement\nauthorization enforcement, cds.context.user, programmatic enforcement, service\nDemonstrates how to enforce authorization logic in hook handlers using cds.context.user. It checks role and attribute-based access before proceeding with service operations.\n\n```js\nconst cds = require('@sap/cds')\ncds.serve ('CustomerService') .with (function(){\n  this.before ('*', req =>\n    req.user.is('authenticated') || req.reject(403)\n  )\n  this.before (['READ', 'CREATE'], 'Orders', req =>\n    req.user.is('admin') || req.reject(403)\n  )\n  this.before ('*', 'Approval', req =>\n    req.user.attr.level > 2 || req.reject(403)\n  )\n})\n```\n",
    " Authentication > Authentication Strategies > JWT-based Authentication\nauthentication strategy, cds.env, jwt, mocked, configuration\nConfigures CAP to use JWT authentication strategy by setting the 'auth' property in cds.requires section in package.json or .cdsrc.json files.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"auth\": \"jwt\"\n  }\n}\n```\n",
    " Authentication > Authentication Strategies > Mocked Authentication\nauthentication strategy, mocked, development, package.json, users\nDemonstrates how to set the authentication strategy to 'mocked' in the cds.requires section, enabling basic authentication with mock users in development.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"auth\": \"mocked\"\n  }\n}\n```\n",
    " Authentication > Authentication Strategies > Mocked Authentication > Pre-defined Mock Users\nauthentication strategy, mocked, users, default configuration\nThe default user mapping shipped for mocked authentication strategy. Provides users (alice, bob, etc.) with specified tenants and roles.\n\n```jsonc\n\"users\": {\n  \"alice\": { \"tenant\": \"t1\", \"roles\": [ \"admin\" ] },\n  \"bob\":   { \"tenant\": \"t1\", \"roles\": [ \"cds.ExtensionDeveloper\" ] },\n  \"carol\": { \"tenant\": \"t1\", \"roles\": [ \"admin\", \"cds.ExtensionDeveloper\", \"cds.UIFlexDeveloper\" ] },\n  \"dave\":  { \"tenant\": \"t1\", \"roles\": [ \"admin\" ], \"features\": [] },\n  \"erin\":  { \"tenant\": \"t2\", \"roles\": [ \"admin\", \"cds.ExtensionDeveloper\", \"cds.UIFlexDeveloper\" ] },\n  \"fred\":  { \"tenant\": \"t2\", \"features\": [ \"isbn\" ] },\n  \"me\":    { \"tenant\": \"t1\", \"features\": [ \"*\" ] },\n  \"yves\":  { \"roles\": [ \"internal-user\" ] },\n  \"*\":     true\n}\n```\n",
    " Authentication > Authentication Strategies > Mocked Authentication > Pre-defined Mock Users\nauthentication strategy, mocked, users, overwrite\nOverrides the default mocked users configuration to explicitly restrict which users are allowed to log in.\n\n```jsonc\n\"users\": {\n  \"alice\": { \"roles\": [] },\n  \"bob\": { \"roles\": [] },\n  \"*\": false\n}\n```\n",
    " Authentication > Authentication Strategies > Basic Authentication\nauthentication strategy, basic, users, package.json\nSets the CAP authentication strategy to use HTTP basic auth with potential mock users. No default users will be provisioned automatically.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"auth\": \"basic\"\n  }\n}\n```\n",
    " Authentication > Authentication Strategies > Basic Authentication\nauthentication strategy, basic, users, custom users\nShows how to configure HTTP basic authentication with custom user credentials, roles, and attributes in the CAP configuration.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"auth\": {\n      \"kind\": \"basic\",\n      \"users\": {\n        \"<user.id>\": {\n          \"password\": \"<password>\",\n          \"roles\": [ \"<role-name>\", ... ],\n          \"attr\": { ... }\n        }\n      }\n    }\n  }\n}\n```\n",
    " Authentication > Authentication Strategies > IAS-based Authentication > Token Validation\nauthentication strategy, ias, jwt, token validation\nDisables x5t and proofToken validation for IAS-based authentication strategy by updating validation parameters in custom configuration.\n\n```json\n\"requires\": {\n  \"auth\": {\n    \"kind\": \"ias\",\n    \"config\": {\n      \"validation\": {\n        \"x5t\": { \"enabled\": false },\n        \"proofToken\": { \"enabled\": false }\n      }\n    }\n  }\n}\n```\n",
    " Authentication > Authentication Strategies > Custom Authentication\nauthentication strategy, custom authentication, cds.context.user, cds.context.tenant\nSample implementation for a custom authentication middleware setting cds.context.user and cds.context.tenant for multi-tenant scenarios in CAP.\n\n```js\nmodule.exports = function custom_auth (req, res, next) {\n  // do your custom authentication\n  cds.context.user = new cds.User({\n    id: '<user-id>',\n    roles: ['<role-a>', '<role-b>'],\n    attr: {\n      <user-attribute-a>: '<value>',\n      <user-attribute-b>: '<value>'\n    }\n  })\n  cds.context.tenant = '<tenant>'\n}\n```\n",
    " Authentication > Authentication Strategies > Custom Authentication\nauthentication strategy, custom authentication, cds.context.user, typescript, default export\nTypeScript version of a custom authentication handler for CAP, using default export and typed request object including user and tenant.\n\n```ts\nimport cds from \"@sap/cds\";\nimport {Request, Response, NextFunction} from \"express\";\ntype Req = Request & { user: cds.User, tenant: string };\n\nexport default function custom_auth(req: Req, res: Response, next: NextFunction) {\n  // do your custom authentication ...\n}\n```\n",
    " Authentication > Authentication Strategies > JWT-based Authentication\nxsuaa, Cloud Foundry, local development, service instance, npm\nInstalls the SAP authorization middleware dependency needed for JWT, XSUAA, or IAS-based authentication strategies in a CAP Node.js project.\n\n```shell\nnpm add @sap/xssec\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Prepare Local Environment\nxsuaa, Cloud Foundry, local development, cf CLI\nLogs in to Cloud Foundry with the provided API endpoint using the cf CLI. Needed to prepare the environment for XSUAA authentication.\n\n```shell\ncf l -a <api-endpoint>\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Prepare Local Environment\nhybrid, xsuaa, local development, CAP CLI\nAdds XSUAA support for hybrid development setup in a CAP project. Generates xs-security.json and updates package dependencies.\n\n```shell\ncds add xsuaa --for hybrid\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Prepare Local Environment\nxsuaa, xs-security.json, tenant-mode, configuration\nExample excerpt for xs-security.json ensuring a dedicated tenant mode for XSUAA service configuration.\n\n```json\n{\n  \"xsappname\": \"bookshop-hybrid\",\n  \"tenant-mode\": \"dedicated\",\n  ...\n  }\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Prepare Local Environment\nxsuaa, xs-security.json, redirect-uris, oauth2-configuration\nConfigures allowed OAuth2 redirect URIs for local development in xs-security.json. Required for using App Router with local CAP services.\n\n```json\n\"oauth2-configuration\": {\n  \"redirect-uris\": [\n    \"http://localhost:5000/login/callback\"\n  ]\n}\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Prepare Local Environment\nxsuaa, service instance, cf CLI\nCreates a new XSUAA service instance in Cloud Foundry, binding it with the provided xs-security.json for authentication setup.\n\n```shell\ncf create-service xsuaa application bookshop-uaa -c xs-security.json\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Configure the Application\nxsuaa, service key, cf CLI\nCreates a service key for the XSUAA instance, enabling local CAP app access to service credentials.\n\n```shell\ncf create-service-key bookshop-uaa bookshop-uaa-key\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Configure the Application\nxsuaa, cds bind, service binding, CAP CLI\nBinds XSUAA service credentials to the local environment using cds bind, so that CAP app and tools can authenticate using local or hybrid profile.\n\n```shell\ncds bind -2 bookshop-uaa\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Configure the Application\nxsuaa, cds CLI, configuration check\nDisplays the authentication configuration, including resolved service bindings, for the hybrid profile in a CAP application.\n\n```shell\ncds env list requires.auth --resolve-bindings --profile hybrid\n```\n",
    " Authentication > Authentication Enforced in Production\ncds CLI, authorization enforcement, env, feature flag\nFeature flag to disable automatic authorization enforcement on all services, making endpoints accessible unless explicitly restricted.\n\n```txt\nConfig>cds.requires.auth.restrict_all_services: false</Config>\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Running App Router\napprouter, CAP, cds add, hybrid, shell\nAdds App Router to the app folder of the project. App Router is used for authentication user flows (OAuth2) when connecting frontend and backend in hybrid or production setups.\n\n```shell\ncds add approuter\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Running App Router\napprouter, CAP, npm, install\nInstalls npm dependencies for App Router in the specified app/router folder.\n\n```shell\nnpm install --prefix app/router\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Running App Router\napprouter, CAP, cds bind --exec, hybrid\nRuns App Router with the appropriate VCAP_SERVICES environment variable for hybrid authentication integration with CAP, using the cds bind --exec command.\n\n```shell\ncds bind --exec -- npm start --prefix app/router\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Running App Router\nCAP, hybrid, cds watch\nStarts the CAP backend service with the 'hybrid' profile to use local XSUAA or other hybrid settings for authentication.\n\n```shell\ncds watch --profile hybrid\n```\n",
    " Authentication > XSUAA in Hybrid Setup > Running App Router\napprouter, xs-app.json, disable authentication, development\nDisables any authentication requirement for App Router by setting authenticationMethod to 'none' in xs-app.json, useful for local UI testing.\n\n```json\n\"authenticationMethod\": \"none\"\n```\n",
    " Testing with `cds.test` > Overview\ninstallation, npm, cds.test\nInstalls the '@cap-js/cds-test' library as a development dependency in your CAP Node.js project. This provides test utilities and helpers designed specifically for CAP applications.\n\n```shell\nnpm add -D @cap-js/cds-test\n```\n",
    " Testing with `cds.test` > Running a CAP Server\nproject setup, test file, cds.test, server\nStarts the CAP server from the project's root directory for test purposes. Use this snippet in your test files located under the 'test' folder to programmatically launch and shut down the server using cds.test.\n\n```js\nconst cds = require('@sap/cds')\ndescribe(()=>{\n  const test = cds.test(__dirname+'/..')\n})\n```\n",
    " Testing with `cds.test` > Testing Service APIs\nverify, Node.js Service APIs, programmatic testing, cds.connect\nDemonstrates unit-testing service APIs by connecting to an internal service and verifying that different ways of data retrieval yield equivalent results. This is a pattern to test programmatic APIs in CAP.\n\n```js\nit('Allows testing programmatic APIs', async () => {\n  const AdminService = await cds.connect.to('AdminService')\n  const { Authors } = AdminService.entities\n  expect (await SELECT.from(Authors))\n  .to.eql(await AdminService.read(Authors))\n  .to.eql(await AdminService.run(SELECT.from(Authors)))\n})\n```\n",
    " Testing with `cds.test` > Testing HTTP APIs\nHTTP, sample request, integration testing, cds.test, GET, POST\nMakes HTTP GET and POST requests via the test instance, simulating calls to your API endpoints. Use GET and POST for integration-style tests of exposed HTTP endpoints.\n\n```js\nconst { GET, POST } = cds.test(...)\nconst { data } = await GET ('/browse/Books')\nawait POST (`/browse/submitOrder`, { book: 201, quantity: 5 })\n```\n",
    " Testing with `cds.test` > Testing HTTP APIs > Authenticated Endpoints\nHTTP, authentication, mock user, Authenticated Endpoints\nPerforms an authenticated HTTP GET request using mock user credentials, which maps to basic authentication in tests for authenticated endpoints.\n\n```js\nawait GET('/admin/Books', { auth: { username: 'alice', password: '' } })\n```\n",
    " Testing with `cds.test` > Testing HTTP APIs > Authenticated Endpoints\nHTTP, sample request, authentication, curl, test.http\nSimulates a raw HTTP GET request with a basic authentication header, corresponding to the JavaScript mock user test.\n\n```http\nGET http://localhost:4004/admin/Books\nAuthorization: Basic alice:\n```\n",
    " Testing with `cds.test` > Using Jest or Mocha\nJest, Mocha, test runner, chai, portable tests\nShows how to structure CAP tests that work with both Jest and Mocha by using portable APIs and the Chai assertion library. Enables flexible test execution with either runner.\n\n```js\ndescribe('my test suite', ()=>{\n  const { GET, expect } = cds.test(...)\n  it ('should test', async ()=>{   // Jest & Mocha\n    const { data } = await GET ('/browse/Books')\n    expect(data.value).to.eql([ // chai style expect\n      { ID: 201, title: 'Wuthering Heights', author: 'Emily Brontë' },\n      { ID: 252, title: 'Eleonora', author: 'Edgar Allen Poe' },\n      //...\n    ])\n  })\n})\n```\n",
    " Testing with `cds.test` > Using Test Watchers\ntest watcher, Jest, continuous testing\nRuns Jest in watch mode to continually re-run tests on changes, recommended for test-driven development and rapid feedback when working in cap/samples.\n\n```shell\njest --watchAll\n```\n",
    " Testing with `cds.test` > Using Test Watchers\ntest watcher, Mocha, continuous testing\nRuns Mocha in watch mode for continuous testing, automatically rerunning tests when changes are detected.\n\n```shell\nmocha -w\n```\n",
    " Testing with `cds.test` > Class `cds.test.Test`\ncds.test, class, Test, programmatic API\nShows how to directly instantiate and use the cds.test.Test class for custom test setups, including running the test server inside a specific directory.\n\n```js\nconst { Test } = cds.test\nlet test = new Test\ntest.run().in(_dirname)\n```\n",
    " Testing with `cds.test` > cds.test() {.method}\ncds.test, utility, test server, convenience\nDefines cds.test as a convenience factory function to create and run a Test instance, simplifying the process of starting a test server for each test file.\n\n```js\nconst { Test } = cds.test\ncds.test = (...args) => (new Test).run(...args)\n```\n",
    " Testing with `cds.test` > .chai, ... {.property}\nchai, assertion, expect, setup\nInstalls the Chai assertion library with commonly used plugins for expect-based assertions in both Mocha and Jest CAP tests.\n\n```shell\nnpm add -D chai@4 chai-as-promised@7 chai-subset jest\n```\n",
    " Testing with `cds.test` > .expect { .property}\nchai, expect, assertion\nDemonstrates using Chai's expect style for assertions within CAP Node.js tests, recommended for compatibility between Mocha and Jest.\n\n```js\nconst { expect } = cds.test(), foobar = {foo:'bar'}\nit('should support chai.except style', ()=>{\n  expect(foobar).to.have.property('foo')\n  expect(foobar.foo).to.equal('bar')\n})\n```\n",
    " Testing with `cds.test` > .expect { .property}\nchai, expect, jest, assertion\nUsing Jest's global expect() assertions directly as an alternative to Chai's expect in CAP Node.js testing scenarios.\n\n```js\ncds.test()\nit('should use jest.expect', ()=>{\n  expect({foo:'bar'}).toHaveProperty('foo')\n})\n```\n",
    " Testing with `cds.test` > .assert { .property}\nchai, assert, assertion\nUsing Chai's assert style for assertions in CAP Node.js tests.\n\n```js\nconst { assert } = cds.test(), foobar = {foo:'bar'}\nit('should use chai.assert style', ()=>{\n  assert.property(foobar,'foo')\n  assert.equal(foobar.foo,'bar')\n})\n```\n",
    " Testing with `cds.test` > .should { .property}\nchai, should, assertion\nDemonstrates the usage of Chai's should assertion style in CAP tests.\n\n```js\nconst { should } = cds.test(), foobar = {foo:'bar'}\nit('should support chai.should style', ()=>{\n  foobar.should.have.property('foo')\n  foobar.foo.should.equal('bar')\n  should.equal(foobar.foo,'bar')\n})\n```\n",
    " Testing with `cds.test` > .chai {.property}\nchai, plugin, setup\nProvides a getter for the Chai assertion library, pre-configured with the chai-subset and chai-as-promised plugins for extended assertion capabilities in CAP tests.\n\n```js\nget chai() {\n  return require('chai')\n  .use (require('chai-subset'))\n  .use (require('chai-as-promised'))\n}\n```\n",
    " Testing with `cds.test` > .axios {.property}\naxios, setup, dependency\nInstalls Axios as a development dependency to allow HTTP requests to be made within CAP tests.\n\n```shell\nnpm add -D axios\n```\n",
    " Testing with `cds.test` > GET / PUT / POST ... {http-bound .method}\nHTTP, bound function, test helpers, GET, POST\nShows usage of bound HTTP helper methods provided by cds.test for concise HTTP API testing; supports tagged template strings for URLs as well.\n\n```js\nconst { GET, POST } = cds.test()\nconst { data } = await GET('/browse/Books')\nawait POST('/browse/submitOrder',\n  { book:201, quantity:1 },\n  { auth: { username: 'alice' }}\n)\n```\n",
    " Testing with `cds.test` > test. get/put/post/...() {http-methods .method}\naxios, test helpers, HTTP methods, GET, POST\nUtilizes the underlying Axios instance methods provided by the test object for making HTTP requests to endpoints of the running CAP test server.\n\n```js\nconst test = cds.test() //> served at localhost with an arbitrary port\nconst { data } = await test.get('/browse/Books')\nawait test.post('/browse/submitOrder',\n  { book:201, quantity:1 },\n  { auth: { username: 'alice' }}\n)\n```\n",
    " Testing with `cds.test` > test .data .reset() {.method}\ntest data, database, reset, test lifecycle\nUses the bound reset method to reset and redeploy the database automatically before each test case, ensuring state isolation in tests.\n\n```js\nconst { test } = cds.test()\nbeforeEach (test.data.reset)\n```\n",
    " Testing with `cds.test` > test .data .reset() {.method}\ntest data, database, reset, test lifecycle\nExplicitly resets test data with await inside a beforeEach hook, for more flexible or additional logic around database resets between tests.\n\n```js\nbeforeEach (async()=>{\n  await test.data.reset()\n  //...\n})\n```\n",
    " Testing with `cds.test` > test. log() {.method}\nlogging, test log, capture, console output\nShows how to use cds.test.log() to capture console output within test scopes, clear logs, and release capture. Useful for testing logging behavior.\n\n```js\ndescribe('cds.test.log()', ()=>{\n  let log = cds.test.log()\n\n  it ('should capture log output', ()=>{\n    expect (log.output.length).to.equal(0)\n    console.log('foo',{bar:2})\n    expect (log.output.length).to.be.greaterThan(0)\n    expect (log.output).to.contain('foo')\n  })\n\n  it('should support log.clear()', ()=> {\n    log.clear()\n    expect (log.output).to.equal('')\n  })\n\n  it('should support log.release()', ()=> {\n    log.release() // releases captured log\n    console.log('foobar') // not captured\n    expect (log.output).to.equal('')\n  })\n})\n```\n",
    " Testing with `cds.test` > test. run (...) {.method}\ncds.test, programmatic API, test server, run\nTwo equivalent ways to launch the CAP test server. The run method creates and starts a new Test instance with the provided arguments.\n\n```js\ncds.test(...)\n// or\n'test = new cds.test.Test().run(...)'\n```\n",
    " Testing with `cds.test` > test. run (...) {.method}\ncds.test, CLI, serve, custom service\nShows how to start a specific service or file when spinning up a test server using the 'serve' command.\n\n```js\ncds.test('serve','srv/cat-service.cds')\ncds.test('serve','CatalogService')\n```\n",
    " Testing with `cds.test` > test. run (...) {.method}\ncds.test, project structure, test in folder, custom root\nStarts the test server for a specific service file and sets the working directory as the root, allowing context-sensitive testing against different application folders.\n\n```js\ncds.test('serve','srv/cat-service.cds').in('/cap/samples/bookshop')\n```\n",
    " Testing with `cds.test` > test. run (...) {.method}\ncds.test, project structure, test in folder, custom root\nA shortcut to start a CAP test server in a specific directory, equivalent to running cds.test().in(target_folder), for quick tests in sample projects.\n\n```js\ncds.test('/cap/samples/bookshop')\n```\n",
    " Testing with `cds.test` > test. in (folder, ...) {.method}\ncds.test, project structure, test in folder, custom root\nSafely sets the cds.root context to the specified folder, usually combined with running tests or loading configuration from the project structure.\n\n```js\ncds.test.in(__dirname)\n```\n",
    " Testing with `cds.test` > `CDS_TEST_ENV_CHECK`\nenvironment, CDS_TEST_ENV_CHECK, debug, cds.env\nEnables environment checking for correct loading of cds.env in tests, helping to detect hard-to-debug environment/configuration issues.\n\n```shell\nCDS_TEST_ENV_CHECK=y jest cds.test.test.js\n```\n",
    " Testing with `cds.test` > `CDS_TEST_ENV_CHECK`\nenvironment, CDS_TEST_ENV_CHECK, execution order\nEnsures correct execution order so that the test server is started and cds.env is loaded from the right folder before accessing any global services or configuration.\n\n```js\ncds.test(__dirname) //> always should go first\n// anything else goes after that:\ncds.env.fiori.lean_draft = true        // [!code ++]\nclass MyService extends cds.Service {} // [!code ++]\n```\n",
    " Testing with `cds.test` > Best Practices > Check Status Codes Last\nbest practices, status code, error handling, HTTP, expect\nBest practice snippet showing how to assert on HTTP status codes after asserting on the response data, leading to better error diagnostics in tests.\n\n```js\nconst { data, status } = await GET `/catalog/Books`\nexpect(status).to.equal(200)   //> DON'T do that upfront // [!code --]\nexpect(data).to.equal(...)     //> do this to see what's wrong\nexpect(status).to.equal(200)   //> Do it at the end, if at all // [!code ++]\n```\n",
    " Testing with `cds.test` > Best Practices > Minimal Assumptions\nbest practices, error handling, minimal assertion, expect\nPreferred style for asserting on expected error messages using regular expressions, to make tests robust against changes in error text formatting.\n\n```js\nawait expect(POST(`/catalog/Books`,...)).to.be.rejectedWith(\n  /readonly/i\n)\n```\n",
    " Testing with `cds.test` > Best Practices > Keep Test Code Environment Agnostic\ntest code, environment-agnostic, best practices\nAdvocates for keeping environment setup outside of test files to ensure reusable and isolated tests, delegating such configuration to CI/CD scripts.\n\n```js\ndescribe(() => { cds.test(...) })\n// NO service bindings, env. variables, profiles, etc. here\n```\n",
    " Testing with `cds.test` > Using `cds.test` in REPL\nREPL, interactive shell, cds.test\nShows how to start the CAP test environment programmatically in the Node.js REPL (via cds repl), enabling interactive experimentation with a running CAP server.\n\n```js\nvar test = await cds.test('bookshop')\n```\n",
    " Testing with `cds.test` > Using `cds.test` in REPL\nsql, js, REPL, SELECT, querying\nExecutes a SELECT query in the CAP REPL environment, verifying the presence of books whose authors' names match a pattern. Useful for interactive and integration test scenarios.\n\n```js\nawait SELECT `title` .from `Books` .where `exists author[name like '%Poe%']`\n```\n",
    " Testing with `cds.test` > Using `cds.test` in REPL\nREPL, service API, read, querying\nReads book titles and authors from a service API in the REPL environment, illustrating programmatic testing and interaction with the CAP runtime for manual exploration or debugging.\n\n```js\nvar { CatalogService } = cds.services\nawait CatalogService.read `title, author` .from `ListOfBooks`\n```\n",
    " Best Practices > Managing Dependencies > Always Use the _Latest Minor_ Releases\ndependencies, package.json, npm, versioning, best practices\nDemonstrates package.json dependencies using the caret (^) to specify the latest minor versions for both SAP and open source packages. This practice allows receiving feature and security updates automatically and leverages npm's deduplication for minimal bundle sizes.\n\n```json\n\"dependencies\": {\n  \"@sap/cds\": \"^9.1.0\",\n  \"@sap/some-reuse-package\": \"^1.1.0\",\n  \"express\": \"^4.17.0\"\n}\n```\n",
    " Best Practices > Managing Dependencies > Keep Open Ranges When *Publishing* for Reuse > Bad\ndependencies, package.json, reuse, bad example, exact versions\nShows a bad practice for reusable packages: declaring exact versions for dependencies. This leads to duplicate dependencies, inhibits receiving fixes, and makes model sharing impossible when consumed in other projects.\n\n```json\n\"name\": \"@sap/your-reuse-package\",\n\"version\": \"1.1.2\",\n\"dependencies\": {\n  \"@sap/cds\": \"3.0.3\",\n  \"@sap/foundation\": \"2.0.1\",\n  \"express\": \"4.16.3\"\n}\n```\n",
    " Best Practices > Managing Dependencies > Lock Dependencies Before *Deploying*\ndependencies, npm, deployment, package-lock.json, best practices\nOutlines the recommended steps before deploying CAP applications: ensure package-lock.json is enabled, update dependencies, and add the lock file to version control. This practice guarantees a reproducible deployment matching your tested environment.\n\n```shell\nnpm config set package-lock true  # enables package-lock.json\nnpm update   # update it with latest versions\ngit add package-lock.json # add it to version control\n```\n",
    "Securing Your Application\nexpress, security, middleware, helmet, bootstrap, Node.js, cds server, example\nShows how to apply security best practices by mounting the 'helmet' Express middleware during the CAP bootstrapping phase. This is implemented in a local server.js file, and is recommended for securing Node.js applications built with CAP.\n\n```js\n// local ./server.js\nconst cds = require('@sap/cds')\nconst helmet = require('helmet')\n\ncds.on('bootstrap', app => {\n  app.use(helmet())\n})\n\nmodule.exports = cds.server // > delegate to default server.js\n```\n",
    "Securing Your Application > Content Security Policy (CSP)\nhelmet, Content Security Policy, CSP, express, Node.js, security, customization\nCustomizes the Content Security Policy (CSP) using helmet's CSP middleware during CAP app bootstrapping. Allows extending or overriding the default CSP directives for enhanced security.\n\n```js\ncds.on('bootstrap', app => {\n  app.use(\n    helmet({\n      contentSecurityPolicy: {\n        directives: {\n          ...helmet.contentSecurityPolicy.getDefaultDirectives()\n          // custom settings\n        }\n      }\n    })\n  )\n})\n```\n",
    "Securing Your Application > Cross-Site Request Forgery (CSRF) Token > Manual Implementation\ncsrf, security, express, cookie-parser, manual implementation, App Router, backend, Node.js\nImplements manual CSRF token handling for Express in CAP apps. Protects endpoints by requiring a CSRF token, sets appropriate cache-control headers, and handles token errors by responding with status 403 and appropriate headers. Shows use of csurf, cookie-parser, and error handling middleware.\n\n```js\nconst csrfProtection = csrf({ cookie: true })\nconst parseForm = express.urlencoded({ extended: false })\n\ncds.on('bootstrap', app => {\n  app.use(cookieParser())\n\n  // Must: Provide actual <service endpoint>s of served services.\n  // Optional: Adapt for non-Fiori Elements UIs.\n  .head('/<service endpoint>', csrfProtection, (req, res) => {\n    res.set({\n      'X-CSRF-Token': req.csrfToken(),\n      'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate'\n    }).send()\n  })\n\n  // Must: Provide actual <service endpoint>s of served services.\n  // Optional: Adapt for non-Fiori Elements UIs.\n  .post('/<service endpoint>/$batch', parseForm, csrfProtection, (req, res, next) => next())\n\n  .use((err, req, res, next) => {\n    if (err.code !== 'EBADCSRFTOKEN') return next(err)\n    res.status(403).set('X-CSRF-Token', 'required').send()\n  })\n})\n```\n",
    "Securing Your Application > Cross-Origin Resource Sharing (CORS) > Custom CORS Implementation\nCORS, Cross-Origin Resource Sharing, express, Node.js, security, custom implementation\nCustom CORS implementation for Express/CAP server. Restricts allowed origins and handles preflight (OPTIONS) requests with appropriate 'access-control-allow-methods' headers. Intended for production use for managing which domains can access the API.\n\n```js\nconst ORIGINS = { 'https://example.com': 1 }\ncds.on('bootstrap', app => app.use ((req, res, next) => {\n  if (req.headers.origin in ORIGINS) {\n    res.set('access-control-allow-origin', req.headers.origin)\n    if (req.method === 'OPTIONS') // preflight request\n      return res.set('access-control-allow-methods', 'GET,HEAD,PUT,PATCH,POST,DELETE').end()\n  }\n  next()\n})\n```\n",
    "Availability Checks > Anonymous Ping\nhealth check, availability, monitoring, /health endpoint, express, cds server\nOverrides the default /health endpoint for availability monitoring in a CAP Node.js server. Responds with a plain text message and HTTP status 200. Allows customizing the health check route as needed.\n\n```js\ncds.on('bootstrap', app => app.get('/health', (_, res) => {\n  res.status(200).send(`I'm fine, thanks.`)\n}))\n```\n",
    "Error Handling > Don't Hide Origins of Errors\nerror handling, Error augmentation, re-throw, exception, best practice, Node.js\nShows the best practice for handling exceptions in Node.js: augment the error with additional context but re-throw the same error object, preserving the stack trace and original details.\n\n```js\ntry {\n  // something\n} catch (e) {\n  // augment instead of replace details\n  e.message = 'Oh no! ' + e.message\n  e.additionalInfo = 'This is just an example.'\n  // re-throw same object\n  throw e\n}\n```\n",
    "Timestamps\ntimestamps, req.timestamp, managed dates, Node.js, CAP, CDS, Date handling\nDemonstrates usage of req.timestamp property in CAP service handlers to set managed dates/timestamps using a consistent Date instance per request, improving reliability in update or audit scenarios.\n\n```js\nsrv.before(\"UPDATE\", \"EntityName\", (req) => {\n  const now = req.timestamp;\n  req.data.createdAt = now;\n});\n```\n",
    "Custom Streaming <Beta />\nCDS, media data, custom streaming, stream.Readable, content disposition, Node.js, response headers\nServes media data (e.g., images) for entity 'Books' in a CAP service read handler. Uses req.reply with a Readable stream and content metadata such as mimetype and filename, controlling response headers.\n\n```js\nsrv.on('READ', 'Books', (req, next) => {\n  req.reply(myReadable, {\n    mimetype: 'image/jpeg', // > optional\n    filename: 'cover.jpg', // > optional\n  })\n})\n```\n",
    "Custom Streaming <Beta />\nCDS, media data, stream.Readable, content disposition, Node.js, response headers, alternative\nAlternative approach for streaming custom media data in a CAP service, directly assigning mimetype and filename properties to a stream.Readable instance within a handler for custom response headers.\n\n```js\nsrv.on('READ', 'Books', (req, next) => {\n  if (coverImageIsRequested) {\n    return Object.assign(myReadable, {\n      mimetype: 'image/jpeg', // > optional\n      filename: 'cover.jpg', // > optional\n    })\n  }\n  return next()\n})\n```\n",
    "Custom Streaming <Beta />\nCDS, media data, compatibility, stream.Readable, content disposition, Node.js\nServes a media response object for compatibility, specifying the content type and content disposition alongside the stream value. Used in custom CDS function on-handlers, especially where explicit headers are needed.\n\n```js\nsrv.on('getCoverImageFunction', 'Books', (req) => {\n  return {\n    value: myReadable,\n    $mediaContentType: 'image/jpeg',\n    $mediaContentDispositionFilename: 'cover.jpg', // > optional\n    $mediaContentDispositionType: 'inline' // > optional\n  }\n})\n```\n",
    "Custom Streaming <Beta />\nCDS, media data, custom headers, Node.js, streaming, response headers\nDemonstrates manually setting HTTP headers for content-type and content-disposition before returning a custom stream in a CAP unbound action handler. Allows explicit control over streaming response headers.\n\n```js\nsrv.on('unboundAction', (req) => {\n  cds.context.http?.res.setHeader('content-type', 'image/jpeg')\n  cds.context.http?.res.setHeader('content-disposition', 'inline; filename=\"cover.jpg\"')\n\n  return myReadable\n})\n```\n",
    "Custom $count\nCDS, custom $count, odata, READ handler, list count, Node.js\nImplements support for custom $count requests in a CAP READ on-handler. Handles both direct '/$count' and query parameter-based cases, ensuring correct OData response for entity set size queries.\n\n```js\nsrv.on('READ', 'Books', function (req) {\n  // simple '/$count' request\n  if (req.query.SELECT.columns?.length === 1 && req.query.SELECT.columns[0].as === '$count')\n    return [{ $count: 100 }]\n  // support other '/$count' requests\n  ...\n\n  const resultSet = [ ... ]\n\n  // request contains $count=true \n  if (req.query.SELECT.count === true) resultSet.$count = 100\n\n  return resultSet\n})\n```\n",
    "Custom Streaming <Beta />\ncds, Core.MediaType, media data, csv, action, function, annotation, CDS modeling\nCDS model declaration with action 'csvExport' that returns media data of type LargeBinary, annotated for CSV export and with a specific MIME type and filename using Core.MediaType and ContentDisposition annotations.\n\n```cds\n@(Core.MediaType: 'text/csv', Core.ContentDisposition.Filename: 'Books.csv')\ntype csv:  LargeBinary;\nentity Books { ... } actions {\n  function csvExport () returns csv;\n}\n```\n",
    "Custom Streaming <Beta />\ncds, media data, function, annotation, Core.MediaType\nDefines a CDS function for exporting media data with an inline Core.MediaType annotation, specifying the data will be served with an appropriate MIME type.\n\n```cds\nfunction csvExport () returns @Core.MediaType LargeBinary;\n```\n",
    " Getting Started > Setting Up Local Development\nverify, cds toolkit, Java, Maven, CLI, setup\nVerifies that CDS tools, Java (at least version 17), and Maven (at least version 3.6.3) are correctly installed and available in your environment for CAP Java development.\n\n```shell\ncds --version\njava --version\nmvn --version\n```\n",
    " Getting Started > Starting a New Project > Run the Maven Archetype\nproject setup, Maven, init, CAP Java, CLI\nBootstraps a new CAP Java project using the CAP Java Maven archetype. This generates a new Maven-based project structure and prompts you for the group ID and artifact ID.\n\n```shell\nmvn archetype:generate -DarchetypeArtifactId=\"cds-services-archetype\" -DarchetypeGroupId=\"com.sap.cds\" -DarchetypeVersion=\"RELEASE\" -DinteractiveMode=true\n```\n",
    " Getting Started > Starting a New Project > Run the Maven Archetype\nproject setup, cds toolkit, init, CAP Java, CLI\nInitializes a new CAP Java project using the CDS CLI. The <PROJECT-ROOT> placeholder specifies the root directory name. Afterwards, switch to the created directory before proceeding.\n\n```shell\ncds init <PROJECT-ROOT> --java\n```\n",
    " Getting Started > Starting a New Project > Add a Sample CDS Model\ncds modeling, samples, Maven, CLI, cds-maven-plugin\nAdds a sample CDS model to your CAP Java project using the CDS Maven plugin. Run this command from your project root to generate an example domain model for quick evaluation.\n\n```shell\nmvn com.sap.cds:cds-maven-plugin:add -Dfeature=TINY_SAMPLE\n```\n",
    " Getting Started > Starting a New Project > Add CloudFoundry target platform\nconfiguration, Cloud Foundry, Maven, cds-maven-plugin, platform support, pom.xml\nEnhances a CAP Java project with Cloud Foundry as a deployment target. This adds the necessary dependencies for Cloud Foundry support using the CDS Maven plugin.\n\n```shell\nmvn com.sap.cds:cds-maven-plugin:add -Dfeature=CF\n```\n",
    " Getting Started > Starting a New Project > Add CloudFoundry target platform\nconfiguration, Cloud Foundry, pom.xml, dependencies\nDependency snippet added to pom.xml to enable Cloud Foundry support in your CAP Java project. This is automatically inserted by the previous Maven command.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-starter-cloudfoundry</artifactId>\n</dependency>\n```\n",
    " Getting Started > Starting a New Project > Project Layout\nproject structure, scaffolding, CAP Java\nLayout of the generated CAP Java project showing the main folders for database artifacts, service code, generated sources, and dependencies.\n\n```txt\n<PROJECT-ROOT>/\n├─ db/\n└─ srv/\n   ├─ src/main/java/\n   ├─ src/gen/java/\n   └─ node_modules/\n```\n",
    " Getting Started > Starting a New Project > Add an Integration Test Module (Optional)\ntesting, Maven, integration tests, cds-maven-plugin, project structure\nAdds a new Maven module to your CAP Java project for integration testing. This creates an integration-tests folder with example test classes in src/test/java.\n\n```shell\nmvn com.sap.cds:cds-maven-plugin:add -Dfeature=INTEGRATION_TEST\n```\n",
    " Getting Started > Starting a New Project > Build and Run\nbuild, run server, Maven, Spring Boot, CLI\nBuilds and runs the CAP Java project using Spring Boot. This launches the application locally on http://localhost:8080.\n\n```shell\nmvn spring-boot:run\n```\n",
    " Getting Started > Starting a New Project > Source Path Configuration and CDS build\ncompilation, IDE, Maven, Java, generated sources\nRuns a full build of your CAP Java project, including CDS model compilation, code generation, and Java compilation. Necessary to resolve missing generated files in IDEs.\n\n```shell\nmvn compile\n```\n",
    " Versions & Dependencies > Maintain Dependencies > Consistent Versions\nmaven, BOM, dependencies, bill of material, consistent versions, CAP Java, Cloud SDK, SAP Cloud Security, pom.xml\nThis snippet shows how to import BOM (Bill of Material) poms for com.sap.cds, com.sap.cloud.sdk, and com.sap.cloud.security into your project's parent pom.xml file using Maven's <dependencyManagement>. This ensures consistent versioning for all artifacts provided by these SDKs in CAP Java projects.\n\n```xml\n<dependencyManagement>\n\t<dependencies>\n\t\t\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-services-bom</artifactId>\n\t\t\t<version>${cds.services.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\n\t\t\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cloud.sdk</groupId>\n\t\t\t<artifactId>sdk-modules-bom</artifactId>\n\t\t\t<version>${cloud.sdk.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\n\t\t\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cloud.security</groupId>\n\t\t\t<artifactId>java-bom</artifactId>\n\t\t\t<version>${xsuaa.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\t</dependencies>\n</dependencyManagement>\n```\n",
    " Versions & Dependencies > Maintain Dependencies > Update Versions\nmaven, update, dependency, pom.xml, versions\nThis Maven pom.xml snippet demonstrates how to explicitly specify a dependency version in your application's dependencyManagement section. It can be used to override a transitive dependency version, for example to resolve a security vulnerability before an upstream fix is released.\n\n```xml\n<dependencyManagement>\n   […]\n   <dependency>\n       <groupId>…</groupId>\n       <artifactId>…</artifactId>\n       <version>…</version>\n   </dependency>\n</dependencyManagement>\n```\n",
    " Working with CDS Models > The CDS Model\nJava, CDS model, EventContext, dependency injection, model reflection, Spring\nShows two ways to obtain the CdsModel in CAP Java: (1) from the EventContext within an event handler, and (2) via dependency injection in a Spring context.\n\n```java\nimport com.sap.cds.services.handler.annotations.On;\nimport com.sap.cds.services.EventContext;\nimport com.sap.cds.reflect.CdsModel;\n\n@On(event = \"READ\", entity = \"CatalogService.Books\")\npublic void readBooksVerify(EventContext context) {\n    CdsModel model = context.getModel();\n   ...\n}\n\n// or, in Spring, be injected:\n\n@Autowired\nCdsModel model;\n```\n",
    " Working with CDS Models > The CDS Model\nCDS model, Java, InputStream, CSN, model reflection\nDemonstrates reading a CDS model programmatically from a CSN InputStream, bypassing the context-based approaches.\n\n```java\nInputStream csnJson = ...;\nCdsModel model = CdsModel.read(csnJson);\n```\n",
    " Working with CDS Models > Examples\ncds modeling, domain model, Books, Authors, Orders, sample\nSample CDS model defining Books, Authors, and Orders entities, used for demonstration of reflection API usage.\n\n```cds\nnamespace my.bookshop;\n\nentity Books {\n  title  : localized String(111);\n  author : Association to Authors;\n  ...\n}\n\nentity Authors {\n  key ID : Integer;\n  ...\n}\n\nentity Orders {\n  OrderNo  : String @title:'Order Number';\n  ...\n}\n```\n",
    " Working with CDS Models > Examples > Get and Inspect an Element of an Entity\nCDS model, Java, element, type, inspect, reflection\nExample of Java reflection for a CDS entity element: checks key status, localization, simple type details, and access to meta-properties like length.\n\n```java\nCdsEntity books = model.getEntity(\"my.bookshop.Books\");\nCdsElement title = books.getElement(\"title\");\n\nboolean key = title.isKey();      // false\nboolean localized = title.isLocalized(); // true\nCdsType type = title.getType();   // CdsSimpleType\n\nif (type.isSimple()) {   // true\n  CdsSimpleType simple = type.as(CdsSimpleType.class);\n\n  String typeName = simple.getQualifiedName();  // \"cds.String\"\n  CdsBaseType baseType = simple.getType();      // CdsBaseType.STRING\n  Class<?> javaType = simple.getJavaType();     // String.class\n  Integer length = simple.get(\"length\");        // 111\n}\n```\n",
    " Working with CDS Models > Examples > Get and Inspect All Elements of an Entity\nCDS model, Java, elements, stream\nRetrieves all elements of a CDS entity as a stream; order is stable on repeated reads but not guaranteed to match CSN source.\n\n```java\nCdsEntity books = model.getEntity(\"my.bookshop.Books\");\nStream<CdsElement> elements = books.elements();\n```\n",
    " Working with CDS Models > Examples > Get and Inspect an Association Element of an Entity\nCDS model, Java, association, inspect, reflection, Cardinality\nAnalyzes a CDS association, retrieves its target entity, checks type (association/composition), extracts cardinality, and keys of the association.\n\n```java\nCdsElement authorElement = book.getAssociation(\"author\");\nCdsAssociationType toAuthor = authorElement.getType();\n\nCdsEntity author = toAuthor.getTarget(); // Entity: my.bookshop.Authors\nboolean association = toAuthor.isAssociation();   // true\nboolean composition = toAuthor.isComposition();   // false\n\nCardinality cardinality = toAuthor.getCardinality();\nString sourceMax = cardinality.getSourceMax();    // \"*\"\nString targetMin = cardinality.getTargetMin();    // \"0\"\nString targetMax = cardinality.getTargetMax();    // \"1\"\n\nStream<CdsElement> keys = toAuthor.keys();  // Stream: [ ID ]\nOptional<CqnExpression> onCondition = toAuthor.onCondition(); // empty\n```\n",
    " Working with CDS Models > Examples > Find an Annotation by Name and Get Its Value\nCDS model, Java, annotation, read annotation, OrderNo\nReads a specific annotation (title) on a CDS entity element and uses its value or falls back to the element name.\n\n```java\nCdsEntity order = model.getEntity(\"my.bookshop.Orders\");\nCdsElement orderNo = order.getElement(\"OrderNo\");\n\nOptional<CdsAnnotation<String>> annotation = orderNo\n        .findAnnotation(\"title\");\nString displayName = annotation.map(CdsAnnotation::getValue)\n        .orElse(orderNo.getName());   // \"Order Number\"\n```\n",
    " Working with CDS Models > Examples > Filter a Stream of Entities by Namespace\nCDS model, Java, namespace, filter, stream\nFilters a stream of CDS entities to include only those from a particular namespace using a static predicate utility.\n\n```java\nimport static com.sap.cds.reflect.CdsDefinition.byNamespace;\n...\nStream<CdsEntity> entities = model.entities()\n    .filter(byNamespace(\"my.bookshop\"));\n```\n",
    " Working with CDS Models > Examples > Get All Elements with Given Annotation\nCDS model, Java, annotation, filter, stream\nShows how to filter a stream of elements in a CDS entity to only those that have a certain annotation, using a provided static predicate.\n\n```java\nimport static com.sap.cds.reflect.CdsAnnotatable.byAnnotation;\n...\nCdsEntity order = model.getEntity(\"my.bookshop.Orders\");\nStream<CdsElement> elements = order.elements()\n    .filter(byAnnotation(\"title\"));\n```\n",
    " Working with CDS Models > Feature Toggles > Feature Toggles and Active Feature Set > From Mock User Configuration\nfeature toggles, Spring, mock user, application.yaml, yaml, features, user\nYAML configuration for CAP Java that assigns feature toggles to mock users to simulate feature availability during development/testing.\n\n```yaml\ncds:\n  security:\n    mock:\n      users:\n        - name: Bob\n          tenant: CrazyCars\n          features:\n            - wobble\n        - name: Alice\n          tenant: SmartCars\n          features:\n            - cruise\n            - parking\n```\n",
    " Working with CDS Models > Feature Toggles > Feature Toggles and Active Feature Set > Custom Implementation\nfeature toggles, Java, custom provider, role-based, Spring, FeatureTogglesInfoProvider\nImplements a custom FeatureTogglesInfoProvider to assign features based on user role. Used in Spring as a component, allowing per-request feature availability logic.\n\n```java\n@Component\npublic class DemoFTProvider implements FeatureTogglesInfoProvider {\n    @Override\n    public FeatureTogglesInfo get(UserInfo userInfo, ParameterInfo paramInfo) {\n        Map<String, Boolean> featureToggles = new HashMap<>();\n        if (userInfo.hasRole(\"expert\")) {\n            featureToggles.put(\"isbn\", true);\n        }\n        return FeatureTogglesInfo.create(featureToggles);\n    }\n}\n```\n",
    " Working with CDS Models > Feature Toggles > Feature Toggles and Active Feature Set > Defining Feature Toggles for Internal Service Calls\nfeature toggles, Java, thread, request context, runtime, manual, FeatureTogglesInfo\nShows how to define feature toggles explicitly on a manually created request context, e.g., when running code in a new thread outside the scope of the main request.\n\n```java\n@Autowired\nCdsRuntime runtime;\n\n@Autowired\nPersistenceService db;\n\nFeatureTogglesInfo isbn = FeatureTogglesInfo.create(Collections.singletonMap(\"isbn\", true));\n\n...\n\nFuture<Result> result = Executors.newSingleThreadExecutor().submit(() -> {\n  return runtime.requestContext().featureToggles(isbn).run(rc -> {\n    return db.run(Select.from(Books_.CDS_NAME));\n  });\n});\n```\n",
    " Working with CDS Models > Feature Toggles > Using Feature Toggles in Custom Code\nfeature toggles, Java, RequestContext, EventContext, custom code, isEnabled\nChecks in custom code whether a feature is active using FeatureTogglesInfo, and conditionally executes logic depending on the toggle status.\n\n```java\n@After\nprotected void subtractDiscount(CdsReadEventContext context) {\n    if (context.getFeatureTogglesInfo().isEnabled(\"discount\")) {\n        // Custom coding executed when feature \"discount\" is active\n        // ...\n    }\n}\n```\n",
    " Working with CDS Data > Structured Data\ncds modeling, samples, entity, association, composition, aspect\nSample CDS model demonstrating bidirectional associations and compositions between Books, Authors, Orders, OrderHeaders, and the use of managed aspects for OrderItems. Used to illustrate structured data and relationships in CAP Java.\n\n```cds\nentity Books {\n    key ID     : Integer;\n        title  : String;\n        author : Association to one Authors;\n}\n\nentity Authors {\n    key ID    : Integer;\n        name  : String;\n        books : Association to many Books on books.author = $self;\n}\n\nentity Orders {\n    key ID     : Integer;\n        header : Composition of one  OrderHeaders;\n        items  : Composition of many OrderItems;\n}\n\nentity OrderHeaders {\n    key ID     : Integer;\n        status : String;\n}\n\naspect OrderItems {\n    key ID     : Integer;\n        book   : Association to one Books;\n}\n```\n",
    " Working with CDS Data > Entities and Structured Types\nstructured data, entity, java, Map\nJava code to construct a simple entity (Book) as a Map<String, Object> mirroring its JSON structure. Shows basic population of entity attributes for use in CAP Java.\n\n```java\nMap<String, Object> book = new HashMap<>();\nbook.put(\"ID\", 97);\nbook.put(\"title\", \"Dracula\");\n```\n",
    " Working with CDS Data > Nested Structures and Associations\nstructured data, nested, association, java, Map, CdsData\nConstructs nested data for a Book entity referencing an Author entity via a map, illustrating how associations are represented in Java maps within CAP.\n\n```java\nMap<String, Object> author = new HashMap<>();\nauthor.put(\"ID\", 23);\nauthor.put(\"name\", \"Bram Stoker\");\n\nMap<String, Object> book = new HashMap<>();\nbook.put(\"ID\", 97);\nbook.put(\"author\", author);\n```\n",
    " Working with CDS Data > Nested Structures and Associations\nstructured data, nested, association, CdsData, convenience API\nShows using CdsData and the putPath method to construct nested data and associations with path notation. Enables convenient, null-safe creation of deeply structured objects.\n\n```java\nCdsData book = Struct.create(CdsData.class);\nbook.put(\"ID\", 97);\nbook.putPath(\"author.ID\", 23);\nbook.putPath(\"author.name\", \"Bram Stoker\");\n```\n",
    " Working with CDS Data > Nested Structures and Associations\nstructured data, nested, association, generated accessor interface\nDemonstrates use of generated accessor interfaces (Authors and Books) for constructing structured entities with associations. Provides typed, code-completion-friendly data access in CAP Java.\n\n```java\nAuthors author = Authors.create();\nauthor.setId(23);\nauthor.setName(\"Bram Stoker\");\nBooks book = Books.create();\nbook.setId(97);\nbook.setAuthor(author);\n```\n",
    " Working with CDS Data > Nested Structures and Associations\nstructured data, association, to-many, java, List\nRepresents a to-many association (Author with many Books) using a List<Map<String, Object>>. Illustrates JSON-to-Java construction of nested collections for associations in CAP Java.\n\n```java\nMap<String, Object> book1 = new HashMap<>();\nbook1.put(\"ID\", 97);\nbook1.put(\"title\", \"Dracula\");\n\nMap<String, Object> book2 = new HashMap<>();\nbook2.put(\"ID\", 98);\nbook2.put(\"title\", \"Miss Betty\");\n\nMap<String, Object> author = new HashMap<>();\nauthor.put(\"ID\", 23);\nauthor.put(\"name\", \"Bram Stoker\");\nauthor.put(\"books\", Arrays.asList(book1, book2));\n```\n",
    " Working with CDS Data > CDS Data\nCdsData, struct, accessor, interface, conversion\nConverts an existing Map<String, Object> to a CdsData interface using Struct.access, allowing CAP Java convenience methods on arbitrary maps.\n\n```java\nMap<String, Object> map = new HashMap<>();\nCdsData data = Struct.access(map).as(CdsData.class);\n```\n",
    " Working with CDS Data > CDS Data\nCdsData, struct, create, initialization\nCreates an empty CdsData map using Struct.create for straightforward data manipulation and path access in CAP Java.\n\n```java\nCdsData data = Struct.create(CdsData.class);\n```\n",
    " Working with CDS Data > Path Access\nCdsData, putPath, nested, path access\nDemonstrates using putPath to create or update nested structure ('author' -> 'name') in CdsData. Automatically creates intermediate maps as needed. Useful for handling deeply nested entity data.\n\n```java\ndata.putPath(\"author.name\", \"Bram Stoker\");\n```\n",
    " Working with CDS Data > Path Access\nCdsData, getPath, nested, read path\nReads a nested value (e.g., author name) from structured data using CdsData's getPath method in CAP Java.\n\n```java\nString authorName = data.getPath(\"author.name\");\n```\n",
    " Working with CDS Data > Path Access\nCdsData, containsPath, nested, check path\nChecks if a nested property exists in a CdsData object using containsPath for convenient validation.\n\n```java\nboolean b = data.containsPath(\"author.name\");\n```\n",
    " Working with CDS Data > Path Access\nCdsData, removePath, nested, remove\nRemoves a nested path from CdsData while also cleaning up empty nested maps. Supports deep structural modifications.\n\n```java\nString authorName = data.removePath(\"author.name\");\n```\n",
    " Working with CDS Data > Serialization\nserialization, CdsData, toJson, debugging, nested\nExemplifies serialization of CdsData to JSON using toJson(), handy for debugging and logging structured/nested CAP Java data.\n\n```java\nCdsData person = Struct.create(CdsData.class);\nperson.put(\"salutation\", \"Mr.\");\nperson.putPath(\"name.first\", \"Frank\"); // path access\n\nperson.toJson(); // { \"salutation\" : \"Mr.\", name : { \"first\" : \"Frank\" } }\n```\n",
    " Working with CDS Data > Vector Embeddings\nvector embeddings, cds.Vector, CdsVector, float[], string, SAP GenAI Hub, LangChain4j\nShows how to create vector embeddings in CAP Java as CdsVector objects, supporting float[] or JSON string representations for AI features such as semantic search.\n\n```java\nfloat[] embedding = embeddingModel.embed(bookDescription).content().vector();\n\nCdsVector v1 = CdsVector.of(embedding); // float[] format\nCdsVector v2 = CdsVector.of(\"[0.42, 0.73, 0.28, ...]\"); // String format\n```\n",
    " Working with CDS Data > Vector Embeddings\nvector embeddings, CQL, similarity search, cosineSimilarity, query\nPerforms a semantic similarity search using vector embeddings in a CQL query with cosineSimilarity. Returns books with high similarity to a given embedding.\n\n```java\nCqnVector v = CQL.vector(embedding);\n\nResult similarBooks = service.run(Select.from(BOOKS).where(b ->\n  CQL.cosineSimilarity(b.embedding(), v).gt(0.9))\n);\n```\n",
    " Working with CDS Data > Vector Embeddings\nvector embeddings, CQL, parameterized query\nShows how to pass vector parameters into CQL queries for similarity computations, useful for AI/semantic queries in CAP Java.\n\n```java\nvar similarity = CQL.cosineSimilarity(CQL.get(Books.EMBEDDING), CQL.param(0).type(VECTOR));\n\nCqnSelect query = Select.from(BOOKS)\n  .columns(b -> b.title(), b -> similarity.as(\"similarity\"))\n  .where(b -> b.ID().ne(bookId).and(similarity.gt(0.9)))\n  .orderBy(b -> b.get(\"similarity\").desc());\n\nResult similarBooks = db.run(select, CdsVector.of(embedding));\n```\n",
    " Working with CDS Data > Vector Embeddings\nvector embeddings, CQL, select list, explicit select\nIllustrates explicit selection of vector embedding field in a query; vector fields in CAP Java must be added explicitly to select lists.\n\n```java\nCdsVector embedding = service.run(Select.from(BOOKS).byId(101)\n  .columns(b -> b.embedding())).single(Books.class).getEmbedding();\n```\n",
    " Working with CDS Data > Data in CDS Query Language (CQL) > Deep Inserts through Compositions and Cascading Associations\ndeep insert, composition, Insert, Order, header, cascade\nDemonstrates how to construct a deep insert with compositions (Order and OrderHeader) where new related entities are created and inserted in one operation in CAP Java.\n\n```java\nOrderHeaders header = OrderHeaders.create();\nheader.setId(11);\nheader.setStatus(\"open\");\n\nOrders order = Orders.create();\norder.setId(1);\norder.setHeader(header);\n\nInsert insert = Insert.into(ORDERS).entry(order);\n```\n",
    " Working with CDS Data > Data in CDS Query Language (CQL) > Setting Managed Associations to Existing Target Entities\nmanaged association, insert, flat, association to existing, Books, Authors\nHow to insert a book and set its managed association to an existing Author. Only association keys are provided; useful for flat inserts not cascading over associations.\n\n```java\nAuthors author = Authors.create();\nauthor.setId(100);\n\nBooks book = Books.create();\nbook.setId(101);\nbook.setAuthor(author);\n\nInsert insert = Insert.into(BOOKS).entry(book);\n```\n",
    " Working with CDS Data > Data in CDS Query Language (CQL) > Inserts through Compositions via Paths\ncomposition, insert, path expression, OrderItems\nDemonstrates adding a child entity via a path expression through a composition, specifically inserting an order item for a given order by its Id.\n\n```java\nOrderItems orderItem = OrderItems.create();\norderItem.setId(1);\norderItem.putPath(\"book.ID\", 201); // set association to book 201\n\nInsert.into(ORDERS, o -> o.filter(o.Id().eq(100)).items())\n      .entry(orderItem);\n```\n",
    " Working with CDS Data > Data in CDS Query Language (CQL) > Select Managed Associations\nselect, managed association, query, access mapping element\nShows how to select managed association fields (e.g., Author ID from Book) with CQL by explicitly adding associations to the select list and reading the path via row.getPath().\n\n```java\nCqnSelect select = Select.from(BOOKS).byId(123)\n                         .columns(b -> b.author());\n\nRow row = persistence.run(select).single();\n\nInteger authorId = row.getPath(\"author.ID\");\n```\n",
    " Working with CDS Data > Data in CDS Query Language (CQL) > Select with Paths in Matching\nselect, path matching, CqnSelect, status filter\nIllustrates how to use a path to match on a nested property (header.status='canceled') during a select query for filtering orders by status.\n\n```java\nMap<String, Object> order = new HashMap<>();\norder.put(\"header.status\", \"canceled\");\n\nCqnSelect select = Select.from(\"bookshop.Orders\").matching(order);\nResult canceledOrders = persistence.run(select);\n```\n",
    " Working with CDS Data > Typed Access > Struct\ntyped access, accessor interface, Books, struct, hybrid access\nShows use of Struct.access to wrap a generic Map in a generated accessor interface for typed and code-completion-friendly read/write. Allows hybrid typed and map-based access.\n\n```java\nBooks book = access(data).as(Books.class);\n\nString title = book.getTitle();   // read the value of the element 'title' from the underlying map\nbook.setTitle(\"Miss Betty\");      // update the element 'title' in the underlying map\n\ntitle = data.get(\"title\");        // direct access to the underlying map\n\ntitle = book.get(\"title\");        // hybrid access to the underlying map through the accessor interface\n```\n",
    " Working with CDS Data > Generated Accessor Interfaces > Renaming Elements in Java\naccessor interface, generation, annotation, name mapping\nExample accessor interface for an entity with an element named after a Java reserved keyword. It uses the @CdsName annotation to map CDS 'class' to Java 'clazz'.\n\n```java\ninterface Equity {\n\n  @CdsName(\"class\")\n  String getClazz();\n\n  @CdsName(\"class\")\n  void setClazz(String clazz);\n\n}\n```\n",
    " Working with CDS Data > Generated Accessor Interfaces > Renaming Types in Java\naccessor interface, generation, annotation, type renaming\nExample of renaming structured types and entities in Java using @cds.java.this.name for accessor interface generation, keeping underlying map keys unchanged.\n\n```java\n@CdsName(\"Name\")\npublic interface MyName extends CdsData {\n  // ...\n}\n\n@CdsName(\"Person\")\npublic interface Person extends CdsData {\n  String PUBLIC_NAME = \"publicName\";\n  String SECRET_NAME = \"secretName\";\n\n  MyName getPublicName();\n  void setPublicName(MyName publicName);\n\n  MyName getSecretName();\n  void setSecretName(MyName secretName);\n}\n```\n",
    " Working with CDS Data > Generated Accessor Interfaces > Entity Inheritance in Java\naccessor interface, entity inheritance, aspect, extends annotation\nShows how to have a generated accessor interface for an entity extend an interface for an aspect using @cds.java.extends, for shared or common properties inclusion.\n\n```java\n@CdsName(\"AuthorManager\")\npublic interface AuthorManager extends CdsData, Temporal {\n  String ID = \"ID\";\n  String NAME = \"name\";\n\n  @CdsName(ID)\n  Integer getId();\n  @CdsName(ID)\n  void setId(Integer id);\n  String getName();\n  void setName(String name);\n\n  static AuthorManager create() {\n    return Struct.create(AuthorManager.class);\n  }\n}\n```\n",
    " Working with CDS Data > Creating a Data Container for an Interface\nstruct, create, data container, typed\nDemonstrates creation and usage of a typed data container with a generated accessor interface for a Book entity using Struct.create.\n\n```java\nimport static com.sap.cds.Struct.create;\n...\nBook book = create(Book.class);\n\nbook.setTitle(\"Dracula\");\nString title = book.getTitle();   // title: \"Dracula\"\n```\n",
    " Working with CDS Data > Creating a Data Container for an Interface\ngenerated accessor interfaces, static factory, single key\nShows use of a static factory method on a generated accessor interface (Books) to instantiate a typed entity with a single key.\n\n```java\nBook book = Books.create(\"9780141439846\");\n\nString id = book.getId(); // id: \"9780141439846\"\n```\n",
    " Working with CDS Data > Read-Only Access\naccess, read-only, Struct, Exception\nIllustrates the creation of a typed, read-only proxy for a data map using Struct.asReadOnly, providing immutable access and throwing exceptions on setter calls.\n\n```java\nBook book = access(data).asReadOnly(Book.class);\n\nString title = book.getTitle();\nbook.setTitle(\"CDS4j\");           // throws Exception\n```\n",
    " Working with CDS Data > Typed Streaming of Data\nstream, typed streaming, data, Iterable, Collectors\nDemonstrates how to create a typed Java Stream out of a collection of entity data using stream().as(<Type>.class), enabling idiomatic Java stream processing in CAP.\n\n```java\nStream<Book> books = stream(data).as(Book.class);\n\nList<Book> bookList = books.collect(Collectors.toList());\n```\n",
    " Working with CDS Data > Data Processor\nCdsDataProcessor, validator, converter, generator, processing, data validation\nShows how to use CdsDataProcessor in CAP Java to validate data structure, here warning for negative quantity values. Demonstrates registration of a custom validator.\n\n```java\nCdsDataProcessor processor = CdsDataProcessor.create();\n\nprocessor.addValidator(\n   (path, element, type) -> element.getName().equals(\"quantity\"), // filter\n   (path, element, value) -> {                               // validator\n      if ((int) value < 0) {\n         log.warn(\"Negative quantity: \" + path.toRef());\n      }\n   });\n```\n",
    " Working with CDS Data > Data Processor\nCdsDataProcessor, data converter, remove association values\nIllustrates adding a data converter to remove association/composition values from structured data, using the Converter.REMOVE return value.\n\n```java\nprocessor.addConverter(\n   (path, element, type)  -> element.getType().isAssociation(), // filter\n   (path, element, value) -> Converter.REMOVE);                // remover\n```\n",
    " Working with CDS Data > Data Processor\nCdsDataProcessor, generator, UUID, random value\nDefines a generator for UUID elements missing from the data, supplying a random UUID if a field is missing or null.\n\n```java\nprocessor.addGenerator(\n   (path, element, type)   -> type.isSimpleType(UUID),       // filter\n   (path, element, isNull) -> isNull ? null : randomUUID()); // generator\n```\n",
    " Working with CDS Data > Diff Processor\nCdsDiffProcessor, diff, processing, comparison\nShows initialization and execution of CdsDiffProcessor to detect differences (additions, removals, changes) between two sets of structured data following a certain type.\n\n```java\nCdsDiffProcessor diff = CdsDiffProcessor.create();\n\nList<Map<String, Object>> newImage;\nList<Map<String, Object>> oldImage;\nCdsStructuredType type;\n\ndiff.process(newImage, oldImage, type);\n```\n",
    " Working with CDS Data > Diff Processor\nCdsDiffProcessor, visitor, change detection\nImplements a DiffVisitor for CdsDiffProcessor to react to changes, additions, or removals between two entity snapshots or images.\n\n```java\ndiff.add(new DiffVisitor() {\n  @Override\n  public void changed(Path newPath, Path oldPath, CdsElement element, Object newValue, Object oldValue) {\n      // changes\n  }\n\n  @Override\n  public void added(Path newPath, Path oldPath, CdsElement association, Map<String, Object> newValue) {\n      // additions\n  }\n\n  @Override\n  public void removed(Path newPath, Path oldPath, CdsElement association, Map<String, Object> oldValue) {\n      // removals\n  }\n});\n```\n",
    " Working with CDS Data > Filtering for DiffVisitor\nCdsDiffProcessor, filter, Authors, association\nDefines an element filter for a CdsDiffProcessor that restricts change detection to associations targeting Authors or paths within the Authors type.\n\n```java\ndiff.add(new Filter() {\n  @Override\n  public boolean test(Path path, CdsElement element, CdsType type) {\n    return element.getType().isAssociation()\n            && element.getType().as(CdsAssociationType.class).getTarget().getQualifiedName().equals(Authors_.CDS_NAME)\n            || path.target().type().equals(Authors_.CDS_NAME);\n  }\n}, ...);\n```\n",
    " Working with CDS Data > Media Type Processing > Pre- or Post-Processing Using a Stream Proxy > Media Upload\nmedia type, InputStream, custom event handler, before event\nShows how to wrap an original media stream (InputStream) with a custom FilterInputStream (CoverImagePreProcessor) in a Before handler for upload pre-processing.\n\n```java\n@Before(event = CqnService.EVENT_UPDATE)\npublic void preProcessCoverImage(CdsUpdateEventContext context, List<Books> books) {\n\tbooks.forEach(book -> {\n\t\tbook.setCoverImage(new CoverImagePreProcessor(book.getCoverImage()));\n\t});\n}\n```\n",
    " Working with CDS Data > Media Type Processing > Pre- or Post-Processing Using a Stream Proxy > Media Upload\nmedia type, InputStream, custom event handler, on event\nImplements custom upload handler for media type properties, wrapping the stream for custom processing, and persists via CQN service run in CAP Java.\n\n```java\n@On(event = CqnService.EVENT_UPDATE)\npublic Result processCoverImage(CdsUpdateEventContext context, List<Books> books) {\n\tbooks.forEach(book -> {\n\t\tbook.setCoverImage(new CoverImagePreProcessor(book.getCoverImage()));\n\t});\n\n\t// example for invoking some CQN-based service\n\treturn service.run(Update.entity(Books_.CDS_NAME).entries(books));\n}\n```\n",
    " Working with CDS Data > Media Type Processing > Pre- or Post-Processing Using a Stream Proxy > Media Download\nmedia type, InputStream, custom event handler, after event, download\nDemonstrates a post-processing scenario for media download by wrapping the InputStream in an After handler with a custom FilterInputStream for CAP Java.\n\n```java\n@After(event = CdsService.EVENT_READ)\npublic void preProcessCoverImage(CdsReadEventContext context, List<Books> books) {\n\tbooks.forEach(book -> {\n\t\tbook.setCoverImage(new CoverImagePreProcessor(book.getCoverImage()));\n\t});\n}\n```\n",
    " Working with CDS Data > Media Type Processing > Pre- or Post-Processing Using a Stream Proxy\nmedia type, InputStream, FilterInputStream, custom proxy\nCustom FilterInputStream implementation (CoverImagePreProcessor) for pre- or post-processing bytes during InputStream read operations in upload/download handlers.\n\n```java\npublic class CoverImagePreProcessor extends FilterInputStream {\n\n\tpublic CoverImagePreProcessor(InputStream wrapped) {\n\t\tsuper(wrapped);\n\t}\n\n\t@Override\n\tpublic int read() throws IOException {\n\t\tint nextByte = super.read();\n\n\t\t// ... your custom processing code on nextByte\n\n\t\treturn nextByte;\n\t}\n\n\t@Override\n\tpublic int read(byte[] bts, int off, int len) throws IOException {\n\t\tint bytesRead = super.read(bts, off, len);\n\n\t\t// ... your custom processing code on bts array\n\n\t\treturn bytesRead;\n\t}\n}\n```\n",
    " Install Dependencies\ninstallation, npm, Node.js, dependencies\nInstalls required Node.js dependencies for consuming remote services in a CAP project using the SAP Cloud SDK. This is necessary for enabling HTTP client, connectivity, and resilience features.\n\n```shell\nnpm add @sap-cloud-sdk/http-client@4.x @sap-cloud-sdk/connectivity@4.x @sap-cloud-sdk/resilience@4.x\n```\n",
    " Get and Import an External Service API >  For a Remote CAP Service\ncds CLI, compilation, EDMX, OData, export, project setup\nCompiles the 'OrdersService' CAP service to OData EDMX format. Produces an EDMX definition for sharing or importing into other projects, typically for remote service consumption or mocking.\n\n```shell\ncds compile srv -s OrdersService -2 edmx > OrdersService.edmx\n```\n",
    " Get and Import an External Service API >  Import API Definition\ncds CLI, import, API definition, project setup\nImports a service definition (OData EDMX, OpenAPI, or AsyncAPI) into a CAP project, converting it to a CDS file and placing it in the appropriate location (e.g. srv/external). Enables working with remote service APIs locally.\n\n```shell\ncds import <input_file> --as cds\n```\n",
    " Get and Import an External Service API >  Import API Definition\nconfiguration, package.json, external service, OData, project setup\nDeclares an external OData service in package.json for Node.js CAP projects. Specifies service kind and CDS model location to enable connectivity and service wiring.\n\n```json\n{\n    \"cds\": {\n        \"requires\": {\n            \"API_BUSINESS_PARTNER\": {\n                \"kind\": \"odata-v2\",\n                \"model\": \"srv/external/API_BUSINESS_PARTNER\"\n            }\n        }\n    }\n}\n```\n",
    " Get and Import an External Service API >  Import API Definition\nconfiguration, .cdsrc.json, cds import, project setup\nSets options for the 'cds import' command in .cdsrc.json, controlling format, force-overwrite, and included namespaces for API imports.\n\n```json\n{\n    \"import\": {\n        \"as\": \"cds\",\n        \"force\": true,\n        \"include_namespaces\": \"sap,c4c\"\n    }\n}\n```\n",
    " Get and Import an External Service API >  Import API Definition\nconfiguration, application.yaml, Java, Spring Boot, external service\nConfigures the remote service 'API_BUSINESS_PARTNER' as OData v2 in Spring Boot application.yaml, for use with CAP Java projects.\n\n```yaml\nspring:\n  config.activate.on-profile: cloud\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      type: \"odata-v2\"\n```\n",
    " Get and Import an External Service API >  Import API Definition\ndependency, pom.xml, Java, external service\nAdds the SAP CAP Java dependency needed for consuming remote OData services, to be included with runtime scope in Maven projects.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-remote-odata</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " Local Mocking >  Add Mock Data\ncsv, mock data, initial data, testing, external service\nSample CSV mock data for the 'A_BusinessPartner' entity in a remote service, used for local design-time mocking.\n\n```csv\nBusinessPartner;BusinessPartnerFullName;BusinessPartnerIsBlocked\n1004155;Williams Electric Drives;false\n1004161;Smith Batteries Ltd;false\n1004100;Johnson Automotive Supplies;true\n```\n",
    " Local Mocking >  Mock Associations\ncds, association, mock, editing external service\nShows an imported external service CDS model with an association lacking ON condition (empty key group), typical after import. Used to explain why associations must be enriched for proper mocking.\n\n```cds\nentity API_BUSINESS_PARTNER.A_BusinessPartner {\n  key BusinessPartner : LargeString;\n  BusinessPartnerFullName : LargeString;\n  BusinessPartnerType : LargeString;\n  ...\n  to_BusinessPartnerAddress :\n    Association to many API_BUSINESS_PARTNER.A_BusinessPartnerAddress {  };  // Association lacks ON condition\n};\n\nentity API_BUSINESS_PARTNER.A_BusinessPartnerAddress {\n  key BusinessPartner : String(10);\n  key AddressID : String(10);\n  ...;\n};\n```\n",
    " Local Mocking >  Mock Associations\ncds CLI, import, association, editing, mock\nRe-imports an EDMX to a new CDS file to update associations. Used as a step before merging association ON conditions for proper mocking.\n\n```shell\ncds import ~/Downloads/API_BUSINESS_PARTNER.edmx --keep-namespace \\\n    --as cds --out srv/external/API_BUSINESS_PARTNER-new.cds\n```\n",
    " Local Mocking >  Mock Associations\ncds, association, ON condition, mock, editing external service\nDemonstrates how to add an ON condition to an association in an imported CDS model, necessary for mocking associations between imported entities.\n\n```cds\nentity API_BUSINESS_PARTNER.A_BusinessPartner {\n  // ...\n  to_BusinessPartnerAddress :\n      Association to many API_BUSINESS_PARTNER.A_BusinessPartnerAddress\n      on to_BusinessPartnerAddress.BusinessPartner = BusinessPartner;\n};\n```\n",
    " Execute Queries >  Execute Queries with Node.js\nservice consumer, Node.js, connect, querying, CQN, OData\nConnects to the remote 'API_BUSINESS_PARTNER' service in a CAP Node.js application, preparing for sending queries.\n\n```js\nconst bupa = await cds.connect.to('API_BUSINESS_PARTNER');\n```\n",
    " Execute Queries >  Execute Queries with Node.js\nservice consumer, Node.js, querying, CQN, OData\nQueries the remote 'A_BusinessPartner' entity and limits the results to 100 records. Exemplifies how to use CAP's querying API for remote OData services.\n\n```js\nconst { A_BusinessPartner } = bupa.entities;\nconst result = await bupa.run(SELECT(A_BusinessPartner).limit(100));\n```\n",
    " Execute Queries >  Execute Queries with Node.js\nservice consumer, Node.js, querying, associations, OData\nQueries the remote OData service's 'A_BusinessPartner' entity and expands associated 'A_BusinessPartnerAddress' records. Demonstrates association traversal for remote APIs.\n\n```js\nconst { A_BusinessPartner } = bupa.entities;\nconst result = await bupa.run(SELECT.from(A_BusinessPartner, bp => {\n    bp('BusinessPartner'),\n    bp.to_BusinessPartnerAddress(addresses => {\n      addresses('*')\n    })\n  }).limit(100));\n```\n",
    " Execute Queries >  Execute Queries with Java\nservice consumer, Java, Spring, dependency injection, OData, CQN\nShows usage of dependency injection in CAP Java to access the remote service 'API_BUSINESS_PARTNER' as a CqnService. Prerequisite for executing queries against the remote entity.\n\n```java\n@Autowired\n@Qualifier(ApiBusinessPartner_.CDS_NAME)\nCqnService bupa;\n```\n",
    " Execute Queries >  Execute Queries with Java\nservice consumer, Java, querying, CQN, OData\nExample query to a remote OData service in CAP Java, fetching up to 100 business partners, leveraging the querying API with CQN.\n\n```java\nCqnSelect select = Select.from(ABusinessPartner_.class).limit(100);\nList<ABusinessPartner> businessPartner = bupa.run(select).listOf(ABusinessPartner.class);\n```\n",
    " Execute Queries >  Model Projections\ncds modeling, projection, remote service, OData, mashup\nDefines a CDS projection 'Suppliers' on a remote OData entity, aliasing fields for local use. This encapsulates the remote API, decoupling the local model.\n\n```cds\nusing {  API_BUSINESS_PARTNER as bupa } from '../srv/external/API_BUSINESS_PARTNER';\n\nentity Suppliers as projection on bupa.A_BusinessPartner {\n  key BusinessPartner as ID,\n  BusinessPartnerFullName as fullName,\n  BusinessPartnerIsBlocked as isBlocked,\n}\n```\n",
    " Execute Queries >  Execute Queries on Projections to a Remote Service\nservice consumer, Node.js, projection, querying, OData\nQueries the remote service via a projection entity, mapping conditions and results transparently for the developer. The projection hides remote field names and schemas.\n\n```js\nconst suppliers = await bupa.run(SELECT(Suppliers).where({ID}));\n```\n",
    " Execute Queries >  Building Custom Requests with Node.js\nservice consumer, Node.js, custom request, HTTP, OData\nShows how to build and send a custom HTTP request (PATCH) to a remote OData service when CAP's querying API is insufficient. Useful for advanced or non-standard API operations.\n\n```js\nbupa.send({\n  method: 'PATCH',\n  path: A_BusinessPartner,\n  data: {\n    BusinessPartner: 1004155,\n    BusinessPartnerIsBlocked: true\n  }\n})\n```\n",
    " Expose Remote Services with Associations\ncds modeling, projection, remote service, association, redirection\nDefines projections with redirected associations for exposure in a CAP service, mapping and renaming associations from the remote OData service to custom local names.\n\n```cds\nusing { API_BUSINESS_PARTNER as bupa } from '../srv/external/API_BUSINESS_PARTNER';\n\nextend service RiskService with {\n  entity Suppliers as projection on bupa.A_BusinessPartner {\n    key BusinessPartner as ID,\n    BusinessPartnerFullName as fullName,\n    BusinessPartnerIsBlocked as isBlocked,\n    to_BusinessPartnerAddress as addresses: redirected to SupplierAddresses\n  }\n\n  entity SupplierAddresses as projection on bupa.A_BusinessPartnerAddress {\n    BusinessPartner as bupaID,\n    AddressID as ID,\n    CityName as city,\n    StreetName as street,\n    County as county\n  }\n}\n```\n",
    " Expose Remote Services\nservice implementation, Node.js, handler, projection, remote service\nDefines a CAP Node.js service handler that proxies READ events for 'BusinessPartners' to the remote API. Required for entities whose data source is remote, not local DB.\n\n```js\nmodule.exports = cds.service.impl(async function() {\n  const bupa = await cds.connect.to('API_BUSINESS_PARTNER');\n\n  this.on('READ', 'BusinessPartners', req => {\n      return bupa.run(req.query);\n  });\n});\n```\n",
    " Integrate and Extend >  Mashing up with Remote Services >  Integrate Remote into Local Services\ncds modeling, mashup, association, managed association, integration\nDemonstrates a CAP service with a managed association from a local entity ('Risks') to a projection on a remote OData entity ('Suppliers'), integrating local and remote data models.\n\n```cds\n@path: 'service/risk'\nservice RiskService {\n  entity Risks : managed {\n    key ID      : UUID  @(Core.Computed : true);\n    title       : String(100);\n    prio        : String(5);\n    supplier    : Association to Suppliers;\n  }\n\n  entity Suppliers as projection on BusinessPartner.A_BusinessPartner {\n    key BusinessPartner as ID,\n    BusinessPartnerFullName as fullName,\n    BusinessPartnerIsBlocked as isBlocked,\n  };\n}\n```\n",
    " Integrate and Extend >  Mashing up with Remote Services >  Extend a Remote by a Local Service\ncds modeling, mashup, association, extension, remote service, local service\nExtends a projection on a remote OData entity by adding an association ('risks') back to a local entity, mashing up remote and local service data.\n\n```cds\nentity Suppliers as projection on bupa.A_BusinessPartner {\n  key BusinessPartner as ID,\n  BusinessPartnerFullName as fullName,\n  BusinessPartnerIsBlocked as isBlocked,\n  risks : Association to many Risks on risks.supplier.ID = ID,\n};\n```\n",
    " Connect to Remote Services Locally >  Bind to Remote Destinations\nconnectivity, cds CLI, hybrid testing, BTP, destination, local development\nCloud Foundry commands to setup necessary service instances (XSUAA and Destination), create service keys, and bind them to the local CAP application for hybrid testing scenarios.\n\n```shell\ncf create-service xsuaa application cpapp-xsuaa\ncf create-service-key cpapp-xsuaa cpapp-xsuaa-key\ncf create-service destination lite cpapp-destination\ncf create-service-key cpapp-destination cpapp-destination-key\ncds bind -2 cpapp-xsuaa,cpapp-destination\n```\n",
    " Connect to Remote Services Locally >  Run a Node.js Application with a Destination\nconnectivity, Node.js, configuration, hybrid testing, cdsrc-private.json\nConfigures the remote destination for the 'API_BUSINESS_PARTNER' service in a hybrid profile, used for local development and testing.\n\n```json\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"auth\": {\n        /* ... */\n      },\n      \"destinations\": {\n        /* ... */\n      },\n      \"API_BUSINESS_PARTNER\": {\n        \"credentials\": {\n          \"path\": \"/sap/opu/odata/sap/API_BUSINESS_PARTNER\",\n          \"destination\": \"cpapp-bupa\"\n        }\n      }\n    }\n  }\n}\n```\n",
    " Connect to Remote Services Locally >  Run a Node.js Application with a Destination\nconnectivity, Node.js, cds CLI, hybrid testing, local development\nRun CAP Node.js application with the 'hybrid' profile enabled, using the locally bound destination for remote service consumption.\n\n```shell\ncds watch --profile hybrid\n```\n",
    " Connect to an Application Using the Same XSUAA (Forward Authorization Token) >  Forward Authorization Token with Node.js\nauthorization, connectivity, Node.js, forwardAuthToken, OData, configuration\nEnables forwarding of the authorization token when connecting from one CAP Node.js microservice to another using OData; avoids the need for an SAP BTP destination in certain microservice architectures.\n\n```json\n{\n  \"requires\": {\n    \"kind\": \"odata\",\n    \"model\": \"./srv/external/OrdersService\",\n    \"credentials\": {\n      \"url\": \"<set via env var in deployment>\",\n      \"forwardAuthToken\": true\n    }\n  }\n}\n```\n",
    " Connect to an Application Using the Same XSUAA (Forward Authorization Token) >  Forward Authorization Token with Java\nauthorization, connectivity, Java, forwardAuthToken, OData, configuration\nConfigures a remote OData destination in CAP Java to use token forwarding for authentication, useful for mutual trust between microservices sharing the same XSUAA.\n\n```yaml\ncds:\n  remote.services:\n    order-service:\n      type: \"odata-v4\"\n      destination:\n        properties:\n          url: \"<set via env var in deployment>\"\n          authentication: TokenForwarding\n```\n",
    " Deployment >  Add Required Services to MTA Deployments\ndeployment, MTA, xsuaa, destination, connectivity, manifest, Cloud Foundry\nAdds required backing services (XSUAA, Destination, and Connectivity) to your MTA yaml configuration for deploying a CAP application to Cloud Foundry with external connectivity.\n\n```shell\ncds add xsuaa,destination,connectivity\n```\n",
    " Building CQL Statements > The CQL Statement Builders\nCQL, Java, Select, builder, columns, byId, dynamic\nDemonstrates how to use the CQL Select builder in Java to construct a dynamic query selecting the column 'title' from the entity 'bookshop.Books' with key ID 101. This is the dynamic, string-based approach.\n\n```java\nSelect.from(\"bookshop.Books\").columns(\"title\").byId(101);\n```\n",
    " Building CQL Statements > The CQL Statement Builders\nCQL, Java, Select, builder, columns, byId, static, static model\nShows the static style usage of the Select builder in Java, referencing entities and elements using constants and interfaces generated from the CDS model. The query selects the 'title' of Books with ID 101.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\nSelect.from(BOOKS).columns(b -> b.title()).byId(101);\n```\n",
    " Building CQL Statements > Lambda Expressions\nCQL, Java, Select, lambda, predicate, where, columns, alias\nIllustrates use of lambda expressions in the CQL Select builder for projecting columns with aliasing and specifying complex predicates in the where clause.\n\n```java\nSelect.from(BOOKS)\n    .columns(b -> b.title().as(\"Book\"))\n    .where(b -> b.year().lt(2000));\n```\n",
    " Building CQL Statements > Path Expressions\nCQL, Java, Select, static, dynamic, path expression, where, to, get\nDemonstrates accessing related entity elements via path expressions in both the static and dynamic styles of Java CQL statement building, including filtering on associated elements.\n\n```java\n// Java CQL (static)\nSelect.from(BOOKS)\n    .columns(b -> b.title(), b -> b.author().name().as(\"author\"))\n    .where(b -> b.author().name().startsWith(\"A\"));\n\n// Java CQL (dynamic)\nSelect.from(\"bookshop.Books\")\n    .columns(b -> b.get(\"title\"), b -> b.get(\"author.name\").as(\"author\"))\n    .where(b -> b.to(\"author\").get(\"name\").startsWith(\"A\"));\n```\n",
    " Building CQL Statements > Target Entity Sets\nCQL, Java, Insert, Update, Select, target entity set, entity reference, infix filter\nShows how to specify the target entity set in CQL statements for Select, Insert, and Update by referencing the entity directly, both statically and dynamically.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\n\n// static\nSelect.from(BOOKS);\n\n// dynamic\nInsert.into(\"bookshop.Books\").entry(book);\n\nUpdate.entity(\"bookshop.Authors\").data(author);\n```\n",
    " Building CQL Statements > Target Entity Sets\nCQL, Java, Select, entity reference, infix filter, path expression, filter\nShows how to use an infix filter to define the entity reference for the target set in a Select CQL statement in Java, targeting items of a specific order (where ID = 3).\n\n```java\nSelect.from(ORDERS, o -> o.filter(o.id().eq(3)).items())\n    .columns(i -> i.quantity(),\n             i -> i.book().title().as(\"book\"));\n```\n",
    " Building CQL Statements > Filters > Using `where`\nCQL, Java, Select, filter, where, complex predicate\nDemonstrates advanced filtering using the 'where' clause with composed predicates combining AND, OR for element comparison in CQL Java statements.\n\n```java\nSelect.from(BOOKS)\n   .where(b -> b.author().name().eq(\"Twain\")\n     .and(b.title().startsWith(\"A\").or(b.title().endsWith(\"Z\"))));\n```\n",
    " Building CQL Statements > Filters > Using `byID`\nCQL, Java, Select, byId, single key\nExample of using 'byId' for retrieving an entity with a single key in a dynamic CQL Select statement in Java.\n\n```java\nSelect.from(\"bookshop.Authors\").byId(101);\n```\n",
    " Building CQL Statements > Filters > Using `matching`\nCQL, Java, Select, matching, filter map, query-by-example\nDefines a filter using a key-value map for matching elements and path expressions, and applies it to a CQL Select in Java with the 'matching' method.\n\n```java\nMap<String, Object> filter = new HashMap<>();\nfilter.put(\"author.name\", \"Edgar Allen Poe\");\nfilter.put(\"stock\", 0);\n\nSelect.from(\"bookshop.Books\").matching(filter);\n```\n",
    " Building CQL Statements > Filters > Using `byParams`\nCQL, Java, Select, byParams, parameterized query\nCompares two ways to define parameterized filters in a Java CQL Select, explicitly with 'where' and implicitly with 'byParams', supporting named placeholders for parameterized execution.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\n\n// using where\nSelect.from(BOOKS)\n    .where(b -> b.title().eq(param(\"title\"))\n           .and(b.author().name().eq(param(\"author.name\"))));\n\n// using byParams\nSelect.from(BOOKS).byParams(\"title\", \"author.name\");\n```\n",
    " Building CQL Statements > Parameters\nCQL, Java, Select, parameters, param, execute\nShows how to use positional parameters in a Java CQL Select statement for parameterized execution with the underlying data store.\n\n```java\nimport static com.sap.cds.ql.CQL.param;\n\nCqnSelect q = Select.from(BOOKS).where(b -> b.author().name().eq(param(0)));\ndataStore.execute(q, \"Jules Verne\");\n```\n",
    " Building CQL Statements > Parameters\nCQL, Java, Insert, parameters, byParams, execute\nDemonstrates use of 'byParams' for named parameter substitution in a CQL Select statement in Java, followed by execution with the parameter map.\n\n```java\nCqnSelect q = Select.from(BOOKS).byParams(\"author.name\");\ndataStore.execute(q, singletonMap(\"author.name\", \"Jules Verne\"));\n```\n",
    " Building CQL Statements > Parameters\nCQL, Java, Select, parameters, infix filter, filterByParams\nShows parameterized infix filters using 'filterByParams' method in path expressions, then executing the query with provided parameter values.\n\n```java\nCqnSelect q = Select.from(AUTHORS, o -> o.filterByParams(\"ID\").books());\ndataStore.execute(q, singletonMap(\"ID\", 101));\n```\n",
    " Building CQL Statements > Constant and Non-Constant Literal Values\nCQL, Java, Select, literal values, constant, val\nDemonstrates using literal values in Java CQL statements; 'val()' for design-time known values that may vary at runtime, useful for SQL binding parameters.\n\n```java\nimport static com.sap.cds.ql.CQL.val;\n\nSelect.from(BOOKS).columns(b -> b.title(), val(\"available\").as(\"status\"))\n\t.where(b -> b.stock().gt(0));\n```\n",
    " Building CQL Statements > Constant and Non-Constant Literal Values\nCQL, Java, Select, constant, constant literal\nShows use of 'CQL.constant()' to inject a constant literal at query construction time which is directly inlined into generated SQL and must not include external input.\n\n```java\nimport static com.sap.cds.ql.CQL.constant;\n\nSelect.from(BOOKS).columns(b -> b.title())\n\t.where(b -> b.cover().eq(constant(\"paperback\")));\n```\n",
    " Building CQL Statements > Select > Projections\nCQL, Java, Select, columns, projection, dynamic usage\nIllustrates basic projection using the columns method in dynamic Java CQL Select statements, fetching 'title' and nested 'author.name'.\n\n```java\nCqnSelect query = Select.from(\"bookshop.Books\")\n    .columns(\"title\", \"author.name\");\n```\n",
    " Building CQL Statements > Select > Projections\nCQL, Java, Select, columns, projection, dynamic, lambda\nDemonstrates projecting columns with custom aliases using lambda expressions and dot-paths for nested properties in dynamic Java CQL.\n\n```java\nSelect.from(\"bookshop.Books\")\n    .columns(b -> b.get(\"title\"),\n             b -> b.get(\"author.name\").as(\"authorName\"));\n```\n",
    " Building CQL Statements > Select > Projections\nCQL, Java, Select, columns, projection, static, lambda\nShows type-safe, code-completion-enabled static column projection and aliasing in a Java CQL Select statement using lambda expressions.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\n\nSelect.from(BOOKS)\n    .columns(b -> b.title(),\n             b -> b.author().name().as(\"authorName\"));\n```\n",
    " Building CQL Statements > Select > Deep Read with `expand`\nCQL, Java, expand, deep read, columns, association, substructure\nDemonstrates deep reads using expand to include associated entities as substructures in the query result, showing books of an author.\n\n```java\nimport static bookshop.Bookshop_.AUTHORS;\n\nSelect.from(AUTHORS)\n    .columns(a -> a.name().as(\"author\"),\n             a -> a.books().expand(\n                      b -> b.title().as(\"book\"),\n                      b -> b.year()));\n```\n",
    " Building CQL Statements > Select > Deep Read with `expand`\nCQL, Java, expand, infix filter, columns\nShows how to use infix filters on associations during expansion to filter sub-entities before expanding them in the result structure.\n\n```java\nSelect.from(AUTHORS)\n    .columns(a -> a.name(),\n             a -> a.books()\n                   .filter(b -> b.year().eq(1897))\n                   .expand(b -> b.title()))\n    .where(a -> name().in(\"Bram Stroker\", \"Edgar Allen Poe\"));\n```\n",
    " Building CQL Statements > Select > Deep Read with `expand`\nCQL, Java, expand, association, nested substructure\nIllustrates nested expand to return multi-level deep structured results, expanding from authors to books to publishers.\n\n```java\nSelect.from(AUTHORS)\n    .columns(a -> a.name(),\n             a -> a.books().as(\"novels\").expand(\n                      b -> b.title(),\n                      b -> b.publisher().expand(p -> p.name())));\n```\n",
    " Building CQL Statements > Select > Deep Read with `expand`\nCQL, Java, expand, all elements, association\nExpands all non-association elements of an associated entity in the result for a single association.\n\n```java\nSelect.from(BOOKS)\n      .columns(b -> b.title(),\n               b -> b.author().expand());\n```\n",
    " Building CQL Statements > Select > Deep Read with `expand`\nCQL, Java, expand, entity level, all associations\nExpands all first-level associations of an entity using expand on the entity itself.\n\n```java\nSelect.from(BOOKS).columns(b -> b.expand());\n```\n",
    " Building CQL Statements > Select > Flattened Results with `inline`\nCQL, Java, inline, flattened result, columns, association\nDemonstrates how to use 'inline' on association columns to flatten associated entity fields into the root result set.\n\n```java\nSelect.from(AUTHORS)\n    .columns(a -> a.name(),\n             a -> a.books().inline(\n                      b -> b.title().as(\"book\"),\n                      b -> b.year()));\n```\n",
    " Building CQL Statements > Select > Managed Associations on the Select List\nCQL, Java, managed association, columns, select key elements\nSelecting managed to-one associations in the select list automatically includes the key elements of the target entity as structured results.\n\n```java\n// dynamic\nSelect.from(\"bookshop.Books\")\n      .columns(b -> b.get(\"author\"));\n\n// static\nimport static bookshop.Bookshop_.BOOKS;\nCqnSelect q = Select.from(BOOKS)\n    .columns(b -> b.author());\n\nRow book = dataStore.execute(q).single();\nObject authorId = book.get(\"author.Id\"); // path access\n```\n",
    " Building CQL Statements > Filtering and Searching\nCQL, Java, Select, search, search term, search expression\nAdds a full-text search predicate searching for a term ('Allen') over all searchable fields of the 'bookshop.Books' entity.\n\n```java\nSelect.from(\"bookshop.Books\")\n        .columns(\"id\", \"name\")\n        .search(\"Allen\");\n```\n",
    " Building CQL Statements > Filtering and Searching\nCQL, Java, Select, search, search expression, has, or\nBuilds a complex search expression with multiple terms combined by logical OR using 'search' in Java CQL.\n\n```java\nSelect.from(\"bookshop.Books\")\n        .columns(\"id\", \"name\")\n        .search(term -> term.has(\"Allen\").or(term.has(\"Heights\")));\n```\n",
    " Building CQL Statements > Filtering and Searching > Using `where` Clause\nCQL, Java, Select, where, or, predicate\nComposes complex WHERE clause predicates using OR, matching either on ID or on a title prefix.\n\n```java\nSelect.from(\"bookshop.Books\")\n\t.where(b -> b.get(\"ID\").eq(251).or(\n              b.get(\"title\").startsWith(\"Wuth\")));\n```\n",
    " Building CQL Statements > Grouping > Group By\nCQL, Java, Select, groupBy, aggregate function, count\nGroups records by author name and counts how many authors have each name using groupBy and count aggregate function.\n\n```java\nimport com.sap.cds.ql.CQL;\n\nSelect.from(\"bookshop.Authors\")\n\t.columns(c -> c.get(\"name\"), c -> CQL.count(c.get(\"name\")).as(\"count\"))\n\t.groupBy(g -> g.get(\"name\"));\n```\n",
    " Building CQL Statements > Grouping > Having\nCQL, Java, Select, groupBy, having, aggregate, filter\nSelects authors grouped by name and filters to those where the count of each group is greater than 2, using having.\n\n```java\nSelect.from(\"bookshop.Authors\")\n    .columns(c -> c.get(\"name\"), c -> func(\"count\", c.get(\"name\")).as(\"count\"))\n    .groupBy(c -> c.get(\"name\"))\n    .having(c -> func(\"count\", c.get(\"name\")).gt(2));\n```\n",
    " Building CQL Statements > Ordering and Pagination > Order By\nCQL, Java, Select, orderBy, asc, desc, nulls\nShows ordering the result by ID descending and title ascending using orderBy with multiple columns.\n\n```java\nSelect.from(\"bookshop.Books\")\n    .columns(c -> c.get(\"ID\"), c -> c.get(\"title\"))\n    .orderBy(c -> c.get(\"ID\").desc(), c -> c.get(\"title\").asc());\n```\n",
    " Building CQL Statements > Ordering and Pagination > Order By\nCQL, Java, Select, orderBy, alias, columns\nDemonstrates using a column alias in orderBy for sorting and referencing that alias in the sort specification.\n\n```java\nSelect.from(\"bookshop.Person\")\n    .columns(p -> p.get(\"name\").toUpper().as(\"aliasForName\"))\n    .orderBy(p -> p.get(\"aliasForName\").asc());\n```\n",
    " Building CQL Statements > Ordering and Pagination > Order By\nCQL, Java, Select, orderBy, nulls, ascNullsLast\nSpecifies custom sort order for columns including controlling the sort position of null values using ascNullsLast.\n\n```java\nSelect.from(\"bookshop.Person\")\n    .orderBy(p -> p.get(\"name\").asc(), p -> c.get(\"nickname\").ascNullsLast());\n```\n",
    " Building CQL Statements > Ordering and Pagination > Pagination\nCQL, Java, Select, limit, pagination\nImplements result set pagination, skipping the first 20 rows and returning the next 10 in a query.\n\n```java\nSelect.from(\"bookshop.Books\").limit(10, 20);\n```\n",
    " Building CQL Statements > Pessimistic Locking\nCQL, Java, Select, lock, pessimistic locking, update\nDemonstrates pessimistic locking in a select statement followed by an update, acquiring an exclusive lock with a timeout.\n\n```java\nSelect.from(\"bookshop.Books\").byId(1).lock(5);\n...\nUpdate.entity(\"bookshop.Books\").data(\"price\", 18).byId(1);\n```\n",
    " Building CQL Statements > Pessimistic Locking\nCQL, Java, Select, lock, shared, locking mode\nAcquires a shared (read) row-level lock on selected entity using the SHARED lock mode.\n\n```java\nimport static com.sap.cds.ql.cqn.CqnLock.Mode.SHARED;\n\nSelect.from(\"bookshop.Books\").byId(1).lock(SHARED);\n```\n",
    " Building CQL Statements > Insert > Single Insert\nCQL, Java, Insert, entry, single insert\nShows creating a single insert statement with input data as a map for the target entity.\n\n```java\nMap<String, Object> book = new HashMap<>();\nbook.put(\"ID\", 101);\nbook.put(\"title\", \"Capire\");\n\nCqnInsert insert = Insert.into(\"bookshop.Books\").entry(book);\n```\n",
    " Building CQL Statements > Insert > Bulk Insert\nCQL, Java, Insert, entries, bulk insert, List, static model\nPerforms a bulk insert, passing an iterable list of records to insert multiple entities in one statement.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\n\nvar data = List.of(\n\tMap.of(\"ID\", 101, \"title\", \"Capire\"),\n\tMap.of(\"ID\", 103, \"title\", \"CAP Java\"));\n\nCqnInsert insert = Insert.into(BOOKS).entries(data);\n```\n",
    " Building CQL Statements > Insert > Deep Insert\nCQL, Java, Insert, deep insert, compositions\nShows a deep insert operation where nested composition entities are included in the insert data map.\n\n```java\nimport static bookshop.Bookshop_.ORDERS;\n\nvar items = List.of(Map.of(\"ID\", 1, \"book_ID\", 101, \"quantity\", 1));\nvar order = Map.of(\"OrderNo\", \"1000\", \"Items\", items);\n\nCqnInsert insert = Insert.into(ORDERS).entry(order);\n```\n",
    " Building CQL Statements > Upsert > Single Upsert\nCQL, Java, Upsert, entry, single upsert, static model\nPerforms a single upsert (update or insert) for a record using a statically typed accessor for the entity.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\nimport bookshop.Books;\n\nBooks book = Books.create();\nbook.setId(101);\nbook.setTitle(\"CAP for Beginners\");\n\nCqnUpsert upsert = Upsert.into(BOOKS).entry(book);\n```\n",
    " Building CQL Statements > Upsert > Bulk Upsert\nCQL, Java, Upsert, entries, bulk upsert, static model\nExecutes a bulk upsert for multiple statically typed entity records in the database.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\nimport bookshop.Books;\n\nBooks b1 = Books.create(101);\nb1.setTitle(\"Odyssey\");\n\nBooks b2 = Books.create(103);\nb2.put(\"title\", \"Ulysses\");\n\nList<Books> data = Arrays.asList(b1, b2);\n\nCqnUpsert upsert = Upsert.into(BOOKS).entries(data);\n```\n",
    " Building CQL Statements > Update > Updating Individual Entities\nCQL, Java, Update, entity, static model, data\nUpdates an entity by passing update data including key (ID) using statically typed entity interface, with implicit filter derived from keys.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\nimport bookshop.Books;\n\nBooks book = Books.create();\nbook.setId(100); // key value filter in data\nbook.setTitle(\"CAP Matters\");\n\nCqnUpdate update = Update.entity(BOOKS).data(book);\n```\n",
    " Building CQL Statements > Update > Updating Individual Entities\nCQL, Java, Update, where, byId, matching, set\nShows alternate way of updating a single entity by using 'byId' filter explicitly, applicable for entities with a single key.\n\n```java\nUpdate.entity(BOOKS)\n   .data(\"title\", \"CAP Matters\").byId(100);\n```\n",
    " Building CQL Statements > Update > Update with Expressions\nCQL, Java, Update, where, set, expression\nUpdates a record using an expression (decrementing stock) with the set method, both for dynamic and static styles.\n\n```java\n// dynamic\nUpdate.entity(BOOKS).byId(101).set(\"stock\", CQL.get(\"stock\").minus(1));\n\n// static\nUpdate.entity(BOOKS).byId(101).set(b -> b.stock(), s -> s.minus(1));\n```\n",
    " Building CQL Statements > Update > Bulk Update\nCQL, Java, Update, bulk update, entries, static model\nIllustrates updating multiple records with individual update data—possibly deep updates—using entries with statically generated accessor interfaces.\n\n```java\nOrders o1 = Orders.create(1);\no1.setStatus(\"canceled\");\n\nOrders o2 = Orders.create(2);\no2.setStatus(\"in process\");\n\nOrders o3 = Orders.create(3);\no3.put(\"header.comment\", \"Deliver with Order 2\");\n\nList<Orders> orders = Arrays.asList(o1, o2, o3);\nCqnUpdate update = Update.entity(ORDERS).entries(orders);\n```\n",
    " Building CQL Statements > Update > Searched Update\nCQL, Java, Update, searched update, where, data\nPerforms a searched/batch update, setting the same value ('stock' = 100) for all matching records whose title contains 'CAP'.\n\n```java\nUpdate.entity(BOOKS).data(\"stock\", 100)\n   .where(b -> b.title().contains(\"CAP\"));\n```\n",
    " Building CQL Statements > Update > Parameterized Batch Update\nCQL, Java, Update, parameterized batch update, byParams, where, execute\nShows constructing a parameterized batch update, with parameter placeholders in 'where' or with 'byParams', and running the statement with multiple parameter sets.\n\n```java\n// using where\nCqnUpdate update = Update.entity(BOOKS).data(\"stock\", 0)\n    .where(b -> b.title().eq(CQL.param(\"title\"))\n           .and(b.author().name().eq(CQL.param(\"author.name\"))));\n\n// using byParams\nCqnUpdate update = Update.entity(BOOKS).data(\"stock\", 0)\n    .byParams(\"title\", \"author.name\");\n\nMap<String, Object> paramSet1 = new HashMap<>();\nparamSet1.put(\"author.name\", \"Victor Hugo\");\nparamSet1.put(\"title\", \"Les Misérables\");\nMap<String, Object> paramSet2 = new HashMap<>();\nparamSet2.put(\"author.name\", \"Emily Brontë\");\nparamSet2.put(\"title\", \"Wuthering Heights\");\n\nResult result = service.run(update, asList(paramSet1, paramSet2));\n```\n",
    " Building CQL Statements > Delete\nCQL, Java, Delete, where, static, dynamic, composition\nIllustrates how to construct delete statements using where filters, both dynamically and with static model referencing.\n\n```java\n// dynamic\nCqnDelete delete = Delete.from(\"my.bookshop.Orders\")\n    .where(b -> b.get(\"OrderNo\").eq(1000));\n\n// static\nimport static bookshop.Bookshop_.ORDERS;\n\nCqnDelete delete = Delete.from(ORDERS)\n    .where(b -> b.OrderNo().eq(1000));\n```\n",
    " Building CQL Statements > Delete > Using `matching`\nCQL, Java, Delete, matching, composite primary key, parameters\nDeletes records based on composite key using either 'matching' or 'where', then executes with multiple parameter sets.\n\n```java\nimport static com.sap.cds.ql.CQL.param;\n\nMap<String, Object> params = new HashMap<>();\nparams.put(\"ID\", param(\"ID\"));\nparams.put(\"journalID\", 101);\n\n// using matching\nCqnDelete delete = Delete.from(\"bookshop.Article\").matching(params);\n\n// using where\nCqnDelete delete = Delete.from(\"bookshop.Article\")\n\t.where(t -> t.get(\"ID\").eq(param(\"ID\"))\n\t.and(t.get(\"journalID\").eq(101)));\n\n// execution\nMap<String, Object> row1 = singletonMap(\"ID\", 1);\nMap<String, Object> row2 = singletonMap(\"ID\", 2);\ndataStore.execute(delete, asList(row1, row2));\n```\n",
    " Executing CQL Statements > Query Execution\nquery execution, CQL, CQN, Java, select, Result, run\nExecutes a CQL (CDS Query Language) select statement on a CqnService in Java. Returns a Result object after fetching title and price columns from 'bookshop.Books'. Core example on how to submit CQN queries with CAP Java.\n\n```java\nCqnService service = ...\n\nCqnSelect query = Select.from(\"bookshop.Books\")\n    .columns(\"title\", \"price\");\n\nResult result = service.run(query);\n```\n",
    " Executing CQL Statements > Parameterized Execution > Named Parameters\nparameterized execution, named parameters, CQL, CQN, Java, delete\nPerforms a parameterized batch delete on 'bookshop.Books' using named parameters. Parameter values are supplied as a Map<String, Object>. Demonstrates safe, reusable query operations with named parameter binding in Java.\n\n```java\nimport static com.sap.cds.ql.CQL.param;\n\nCqnDelete delete = Delete.from(\"bookshop.Books\")\n    .where(b -> b.get(\"ID\").eq(param(\"id1\"))\n            .or(b.get(\"ID\").eq(param(\"id2\"))));\n\nMap<String, Object> paramValues = new HashMap<>();\nparamValues.put(\"id1\", 101);\nparamValues.put(\"id2\", 102);\n\nResult result = service.run(delete, paramValues);\n```\n",
    " Executing CQL Statements > Parameterized Execution > Indexed Parameters\nparameterized execution, indexed parameters, CQL, CQN, Java, delete\nShows how to execute a delete statement using indexed parameters (param(0), param(1)) in Java with the CAP CQN API. Multiple indexed input values are passed for parameter binding.\n\n```java\nimport static com.sap.cds.ql.CQL.param;\n\nCqnDelete delete = Delete.from(\"bookshop.Books\")\n    .where(b -> b.get(\"ID\").in(param(0), param(1)));\n\nResult result = service.run(delete, 101, 102);\n```\n",
    " Executing CQL Statements > Parameterized Execution > Batch Execution\nparameterized execution, batch, delete, CQL, CQN, Java\nExecutes a batch delete operation on 'bookshop.Books'. A statement is executed multiple times with different named parameter sets using a batch list. The total number of deleted rows is retrieved from result.rowCount().\n\n```java\nimport static com.sap.cds.ql.CQL.param;\n\nCqnDelete delete = Delete.from(\"bookshop.Books\").byParams(\"ID\");\n\nMap<String, Object> paramSet1 = singletonMap(\"ID\", 101);\nMap<String, Object> paramSet2 = singletonMap(\"ID\", 102);\n\nResult result = service.run(query, asList(paramSet1, paramSet2));\nlong deletedRows = result.rowCount();\n```\n",
    " Executing CQL Statements > Parameterized Execution > Querying Parameterized Views on SAP HANA\nparameterized execution, SAP HANA, views, named parameter, select, CQL, CQN, Java\nExecutes a select query against a parameterized view ('BooksView') on SAP HANA, passing named parameter values for the view's input parameters. Shows correct usage of view parameters on CAP Java.\n\n```java\nCqnSelect query = Select.from(\"BooksView\");\nvar params = Map.of(\"minStock\", 100);\n\nResult result = service.run(query, params);\n```\n",
    " Executing CQL Statements > Query Hints\nSAP HANA, query hints, CQL, hint, Java\nAdds SAP HANA-specific query hints to a CQN Select statement in CAP Java by prefixing hint names with 'hdb.'. This allows optimization or diagnostic hints to be included in generated SQL for SAP HANA.\n\n```java\nSelect.from(BOOKS).hints(\"hdb.USE_HEX_PLAN\", \"hdb.ESTIMATION_SAMPLES(0)\");\n```\n",
    " Executing CQL Statements > Data Manipulation > Update\ndata manipulation, update, CQL, CQN, Java\nPerforms an update on the 'bookshop.Books' entity setting the title to 'CAP' for id 101. The returned Result object represents the outcome of the update operation.\n\n```java\nMap<String, Object> book = Map.of(\"title\", \"CAP\");\n\nCqnUpdate update = Update.entity(\"bookshop.Books\").data(book).byId(101);\nResult updateResult = service.run(update);\n```\n",
    " Executing CQL Statements > Data Manipulation > Update\ndata manipulation, row count, update, CQL, Java\nRetrieves the number of rows affected by an update operation using rowCount() on the Result. Used after executing a CQN update to confirm how many rows were updated.\n\n```java\nCqnUpdate update = ...;\n\nlong rowCount = service.run(update).rowCount();\n```\n",
    " Executing CQL Statements > Structured Documents > Deep Insert / Upsert\ndeep insert, deep upsert, compositions, cascading, insert, upsert, CQL, Java\nDemonstrates deep insert and upsert operations in CAP Java. Cascading is supported by including composition targets in the inserted/upserted data structure.\n\n```java\nIterable<Map<String, Object>> books;\n\nCqnInsert insert = Insert.into(\"bookshop.Books\").entries(books);\nResult result = service.run(insert);\n\nCqnUpsert upsert = Upsert.into(\"bookshop.Books\").entries(books);\nResult result = service.run(upsert);\n```\n",
    " Executing CQL Statements > Structured Documents > Cascading Delete\ncascading delete, compositions, delete, CQL, Java\nPerforms a cascading delete operation on 'bookshop.Orders' by OrderNo, deleting the order and all composition targets (e.g., items) in a single step.\n\n```java\nCqnDelete delete = Delete.from(\"bookshop.Orders\").matching(singletonMap(\"OrderNo\", 1000));\nlong deleteCount = service.run(delete).rowCount();\n```\n",
    " Executing CQL Statements > Concurrency Control > Optimistic Locking > The ETag Predicate\noptimistic concurrency, etag, update, CQN, Java\nShows how to use an ETag predicate to enable optimistic concurrency control for an update statement in Java. The update only succeeds if the expected timestamp (ETag) matches, protecting data against concurrent modifications.\n\n```java\nPersistenceService db = ...;\nInstant expectedLastModification = ...;\nCqnUpdate update = Update.entity(ORDER).entry(newData)\n                         .where(o -> o.id().eq(85).and(\n                                     o.eTag(expectedLastModification)));\n\nResult rs = db.execute(update);\n\nif (rs.rowCount() == 0) {\n    // order 85 does not exist or was modified concurrently\n}\n```\n",
    " Executing CQL Statements > Concurrency Control > Optimistic Locking > Optimistic Concurrency Control in OData\noptimistic concurrency, etag, @cds.on.update, cds model, Java\nCAP CDS model for the Order entity with a managed ETag. The 'modifiedAt' field is automatically updated on each update due to @cds.on.update annotation. Used for optimistic concurrency via ETag in OData and Java.\n\n```cds\nentity Order : cuid {\n    @odata.etag\n    @cds.on.update : $now\n    @cds.on.insert : $now\n    modifiedAt : Timestamp;\n    product : Association to Product;\n}\n```\n",
    " Executing CQL Statements > Concurrency Control > Optimistic Locking > Runtime-Managed Versions <Beta />\noptimistic concurrency, version, @cds.java.version, cds model, Java\nCDS model for runtime-managed versioning with @cds.java.version, which supports optimistic concurrency using a version field (integer counter) as ETag.\n\n```cds\nentity Order : cuid {\n    @odata.etag\n    @cds.java.version\n    version : Int32;\n    product : Association to Product;\n}\n```\n",
    " Executing CQL Statements > Concurrency Control > Optimistic Locking > Expected Version from Data\noptimistic concurrency, versioned update, Java\nUpdates an order using a version element (optimistic locking): if the version value is outdated, the update affects no rows, allowing detection of concurrent updates. The version value is populated from previously selected data.\n\n```java\nPersistenceService db = ...;\nCqnSelect select = Select.from(ORDER).byId(85);\nOrder order = db.run(select).single(Order.class);\n\norder.setAmount(5000);\n\nCqnUpdate update = Update.entity(ORDER).entry(order);\nResult rs = db.execute(update);\n\nif (rs.rowCount() == 0) {\n    // order 85 does not exist or was modified concurrently\n}\n```\n",
    " Executing CQL Statements > Concurrency Control > Optimistic Locking > Expected Version from Data\noptimistic concurrency, bulk update, versioned, Java\nPerforms a bulk update using optimistic locking via version elements. Each update's rowCount is checked to confirm successful update per row, detecting concurrent modifications or missing rows.\n\n```java\nCqnSelect select = Select.from(ORDER).where(o -> amount().gt(1000));\nList<Order> orders = db.run(select).listOf(Order.class);\n\norders.forEach(o -> o.setStatus(\"cancelled\"));\n\nResult rs = db.execute(Update.entity(ORDER).entries(orders));\n\nfor(int i = 0; i < orders.size(); i++) if (rs.rowCount(i) == 0) {\n    // order does not exist or was modified concurrently\n}\n```\n",
    " Executing CQL Statements > Concurrency Control > Pessimistic Locking\npessimistic locking, lock, select, update, CQN, Java\nDemonstrates pessimistic locking by acquiring a lock on a book entity (ID=1) before updating its title in the same transaction. Shows use of lock() in select and protected update.\n\n```java\n// Start transaction\n// Obtain and set a write lock on the book with id 1\n\tservice.run(Select.from(\"bookshop.Books\").byId(1).lock());\n\t...\n// Update the book locked earlier\n\tMap<String, Object> data = Collections.singletonMap(\"title\", \"new title\");\n\tservice.run(Update.entity(\"bookshop.Books\").data(data).byId(1));\n// Finish transaction\n```\n",
    " Executing CQL Statements > Using I/O Streams in Queries\nI/O streams, media, insert, LargeBinary, Java, coverImage\nShows how to insert a book with a binary cover image using java.io.InputStream for a @Core.MediaType annotated LargeBinary element ('coverImage'). Demonstrates data streaming capabilities for media types in CAP Java.\n\n```java\n// Transaction started\n\nResult result;\ntry (InputStream resource = getResource(\"IMAGE.PNG\")) {\n    Map<String, Object> book = new HashMap<>();\n    book.put(\"title\", \"My Fancy Book\");\n    book.put(\"coverImage\", resource);\n\n    CqnInsert insert = Insert.into(\"bookshop.Books\").entry(book);\n    result = service.run(insert);\n}\n\n// Transaction finished\n```\n",
    " Executing CQL Statements > Query Result Processing\nresult processing, Result, Row, Java, iterating\nIterates over the Result object returned from a query, printing the 'title' property of each row. Shows the basic iteration pattern of result processing.\n\n```java\nResult result = ...;\n\nfor (Row row : result) {\n  System.out.println(row.get(\"title\"));\n}\n```\n",
    " Executing CQL Statements > Query Result Processing\nresult processing, stream API, Result, Java\nProcesses the Result set using Java's Stream API: prints the 'title' field for each row both with forEach and stream-map patterns.\n\n```java\nResult result = ...;\n\nresult.forEach(r -> System.out.println(r.get(\"title\")));\n\nresult.stream().map(r -> r.get(\"title\")).forEach(System.out::println);\n```\n",
    " Executing CQL Statements > Query Result Processing\nresult processing, single row, Java\nFetches a single row from a Result set, typically used for queries expected to return exactly one result row.\n\n```java\nResult result = ...;\n\nRow row = result.single();\n```\n",
    " Executing CQL Statements > Query Result Processing\nresult processing, optional row, first, Java\nFetches the first row (if any) from a query result using Optional. Useful for queries which may or may not yield results.\n\n```java\nResult result = ...;\n\nOptional<Row> row = result.first();\nrow.ifPresent(r -> System.out.println(r.get(\"title\")));\n```\n",
    " Executing CQL Statements > Query Result Processing\nnested result, getPath, to-one, expand, Java\nSelects a book and its expanded author, retrieving a nested property ('author.name') using getPath(). Demonstrates simple navigation in nested query results.\n\n```java\nCqnSelect select = Select.from(BOOKS).columns(\n     b -> b.title(), b -> b.author().expand()).byId(101);\nRow book = dataStore.execute(select).single();\n\nString author = book.getPath(\"author.name\");\n```\n",
    " Executing CQL Statements > Query Result Processing > Null Values\nresult processing, null values, Java\nHandles null values in result rows by explicitly checking for null with row.get(). Recommended approach to safely access result data that might be absent.\n\n```java\nif (row.get(\"name\") == null) {\n   // handle mising value for name\n}\n```\n",
    " Executing CQL Statements > Query Result Processing > Typed Result Processing\ntyped result, interface, typed access, Java\nDefines a typed Java interface for query projection, and maps an untyped Row to the interface for strongly-typed property access (property getters).\n\n```java\ninterface Book {\n  String getTitle();\n  Integer getStock();\n}\n\nRow row = ...;\nBook book = row.as(Book.class);\n\nString title = book.getTitle();\nInteger stock = book.getStock();\n```\n",
    " Executing CQL Statements > Query Result Processing > Typed Result Processing\ntyped result, list, interface, Java\nShows how to retrieve a list of typed results and use streamOf for mapping results to a custom map using Java's Stream collectors.\n\n```java\nResult result = ...;\n\nList<Book> books = result.listOf(Book.class);\n\nMap<String, String> titleToDescription =\n  result.streamOf(Book.class).collect(Collectors.toMap(Book::getTitle, Book::getDescription));\n```\n",
    " Executing CQL Statements > Query Result Processing > Entity References\nentity reference, ref, typed, Java\nShows how to obtain a typed entity reference from a query result, after retrieving the Author[101] data. The reference (author.ref()) can be used for building further queries.\n\n```java\n// SELECT from Author[101]\nCqnSelect query = Select.from(AUTHOR).byId(101);\nAuthor authorData = service.run(query).single(Author.class);\n\nString authorName = authorData.getName();    // data access\nAuthor_ author    = authorData.ref();        // typed reference to Author[101]\n```\n",
    " Executing CQL Statements > Query Result Processing > Entity References\nentity reference, ref, untyped, Java\nRetrieves an untyped entity reference from a result Row for further CQN query composition.\n\n```java\nRow authorData = service.run(query).single();\nStructuredType<?> author = authorData.ref(); // untyped reference to Author[101]\n```\n",
    " Executing CQL Statements > Query Result Processing > Entity References\nentity reference, insert, update, ref, Java\nDemonstrates obtaining a typed entity reference from the result of an update operation, useful for chained query construction.\n\n```java\nCqnUpdate update = Update.entity(AUTHOR).data(\"name\", \"James Joyce\").byId(101);\nAuthor_ joyce = service.run(update).single(Author.class).ref();\n```\n",
    " Executing CQL Statements > Query Result Processing > Entity References\nentity reference, proceed, follow-up query, Java\nDemonstrates the use of an entity reference to perform follow-up select, insert, update, and delete operations scoped to a specific entity instance.\n\n```java\n// SELECT from Author[101].books { sum(stock) as stock }\nCqnSelect q = Select.from(joyce.books())\n     .columns(b -> func(\"sum\", b.stock()).as(\"stock\"));\n\nCqnInsert i = Insert.into(joyce.books())\n     .entry(\"title\", \"Ulysses\");\n\nCqnUpdate u = Update.entity(joyce.biography())\n     .data(\"price\", 29.95);\n\nCqnDelete d = Delete.from(joyce.address())\n     .where(b -> b.stock().lt(1));\n```\n",
    " Executing CQL Statements > Query Result Processing > Introspecting the Row Type\nrow type introspection, rowType, CdsStructuredType, Java\nShows how to use the rowType method on a Result to introspect field names and types of the result structure after a query. Useful for dynamic/runtime inspection of result metadata.\n\n```java\nCqnSelect query = Select.from(AUTHOR)\n     .columns(a -> a.name().as(\"authorName\"), a -> a.age());\n\nResult result = service.run(query);\n\nCdsStructuredType rowType = result.rowType();\nrowType.elements(); // \"authorName\", \"age\"\nrowType.getElement(\"age\").getType().getQualifiedName();  // \"cds.Integer\"\nrowType.findElement(\"ID\"); // Optional.empty()\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer\nCqnAnalyzer, CDS model, API, Java, introspection, cds modeling\nInstantiate a CqnAnalyzer for analyzing CQL statements, based on a given CDS model. Used in handler implementations to introspect and extract structural and value information from CQN queries.\n\n```java\nimport com.sap.cds.ql.cqn.CqnAnalyzer;\n\nCdsModel cdsModel = context.getModel();\nCqnAnalyzer cqnAnalyzer = CqnAnalyzer.create(cdsModel);\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer\nCqnAnalyzer, isCountQuery, count, CQL, Java, utility\nCheck if a given CQL query only returns a single count using the static isCountQuery method of CqnAnalyzer. Useful for query optimizations or flow control in handlers.\n\n```java\n// cqn: Select.from(\"Books\").columns(CQL.count().as(\"bookCount\"));\nboolean isCount = CqnAnalyzer.isCountQuery(cqn);  // true\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer\nCqnAnalyzer, analyze, CQN, analysis, Java\nAnalyze a CQN statement using the analyze() method of CqnAnalyzer. Produces an AnalysisResult object for further introspection of CDS entities, keys, and filter values.\n\n```java\nCqnStatement cqn = context.getCqn();\n\nAnalysisResult result = cqnAnalyzer.analyze(cqn.ref());\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer > Resolving CDS Entities\nCqnAnalyzer, CDS entities, Reflection API, rootEntity, targetEntity, CDS model, Java\nUse the AnalysisResult to access the root and target CDS entities referenced by the analyzed CQN statement using the Reflection API.\n\n```java\nCdsEntity order = result.rootEntity();   // Orders\nCdsEntity item  = result.targetEntity(); // OrderItems\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer > Extracting Filter Values\nCqnAnalyzer, filter extraction, rootKeys, targetKeys, targetValues, filters, Java\nExtract key and filter values from an AnalysisResult after analyzing a CQN statement using CqnAnalyzer. Supports rootKeys, targetKeys, and complete filterValues extraction for use in handler logic.\n\n```java\nMap<String, Object> rootKeys = result.rootKeys();\nString orderNo = (String) rootKeys.get(\"OrderNo\"); // 42\n\nMap<String, Object> targetKeys  = result.targetKeys();\nInteger itemId = (Integer) targetKeys.get(\"ID\");   // 1\n\nMap<String, Object> filterValues = result.targetValues();\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer > Extracting Filter Values\nCqnAnalyzer, where clause, filter extraction, CqnSelect, CQL, Java\nDemonstrates extracting key and additional filter values for CqnSelect/CqnUpdate/CqnDelete statements with a WHERE clause using CqnAnalyzer's AnalysisResult methods.\n\n```java\nCqnSelect select = context.getCqn();\nAnalysisResult result = cqnAnalyzer.analyze(select);\n\nMap<String, Object> targetKeys = result.targetKeys();\nInteger itemId = (Integer) targetKeys.get(\"ID\");   // 3\n\nMap<String, Object> filterValues = result.targetValues();\nString status = (String) filterValues.get(\"status\");   // 'open'\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer > Using the Iterator\nCqnAnalyzer, ResolvedSegment, iterator, reference segment, Java\nUse AnalysisResult's iterator to traverse and analyze each resolved segment (entity or reference) of a multi-segment CQN statement.\n\n```java\nIterator<ResolvedSegment> iterator = result.iterator();\nCdsEntity order = iterator.next().entity();\nCdsEntity item  = iterator.next().entity();\nCdsEntity book  = iterator.next().entity();\n```\n",
    " Introspecting CQL Statements > CqnAnalyzer > Using the Iterator\nCqnAnalyzer, ResolvedSegment, reverse traversal, reference segment, Java\nTraverse resolved segments of a CQN reference in reverse order using AnalysisResult's reverse iterator. Useful for handling nested or deeply referenced queries.\n\n```java\nIterator<ResolvedSegment> iterator = result.reverse();\nCdsEntity book  = iterator.next().entity();\nCdsEntity item  = iterator.next().entity();\nCdsEntity order = iterator.next().entity();\n```\n",
    " Introspecting CQL Statements > CqnVisitor > Usage\nCqnVisitor, Visitor Pattern, CQL, predicate evaluation, Java\nA CqnVisitor implementation to evaluate if a given data entry matches a filter predicate by maintaining a stack for intermediate results. The class can be extended to stack and evaluate CQN trees.\n\n```java\nclass CheckDataVisitor implements CqnVisitor {\n    private final Map<String, Object> data;\n    private final Deque<Object> stack = new ArrayDeque<>();\n\n    CheckDataVisitor(Map<String, Object> data) {\n        this.data = data;\n    }\n\n    boolean matches() {\n        return (Boolean) stack.pop();\n    }\n    ...\n}\n```\n",
    " Introspecting CQL Statements > CqnVisitor > Usage\nCqnVisitor, element reference, CQL, predicate tree, Java\nOverrides for CqnVisitor to handle leaf nodes: element references (extract value from data) and literals (push value), building the basis for evaluating predicates.\n\n```java\n@Override\npublic void visit(CqnElementRef ref) {\n    Object dataValue = data.get(ref.displayName());\n    stack.push(dataValue);\n}\n\n@Override\npublic void visit(CqnLiteral<?> literal) {\n    stack.push(literal.value());\n}\n```\n",
    " Introspecting CQL Statements > CqnVisitor > Usage\nCqnVisitor, predicate evaluation, comparison, IN, stack, Java\nImplement visit methods to perform IN and comparison predicate evaluation by popping stack values and pushing result. Allows runtime evaluation of CQN filters against in-memory data.\n\n```java\n@Override\npublic void visit(CqnInPredicate in) {\n    List<Object> values = in.values().stream()\n            .map(v -> stack.pop()).collect(toList());\n    Object value = stack.pop();\n    stack.push(values.stream().anyMatch(value::equals));\n}\n\n@Override\npublic void visit(CqnComparisonPredicate comparison) {\n    Comparable rhs = (Comparable) stack.pop();\n    Comparable lhs = (Comparable) stack.pop();\n    int cmp = lhs.compareTo(rhs);\n    switch (comparison.operator()) {\n    case EQ:\n        stack.push(cmp == 0);\n        break;\n    case GT:\n        stack.push(cmp > 0);\n        break;\n    // ...\n    }\n}\n```\n",
    " Introspecting CQL Statements > CqnVisitor > Usage\nCqnVisitor, connective predicate, logical AND/OR, predicate evaluation, stack, Java\nImplements the visit method for logical connective predicates (AND/OR) in CqnVisitor, combining results from stack-popped child evaluations. Used in evaluating complex filter trees.\n\n```java\n@Override\npublic void visit(CqnConnectivePredicate connect) {\n    Boolean rhs = (Boolean) stack.pop();\n    Boolean lhs = (Boolean) stack.pop();\n    switch (connect.operator()) {\n    case AND:\n        stack.push(lhs && rhs);\n        break;\n    case OR:\n        stack.push(lhs || rhs);\n        break;\n    }\n}\n```\n",
    " Introspecting CQL Statements > CqnVisitor > Usage\nCqnVisitor, predicate evaluation, usage example, Java, in-memory filtering\nExample of using a CqnVisitor implementation to iterate and evaluate a filter expression against a list of data. Shows how to traverse and reduce a predicate tree for in-memory filtering.\n\n```java\nfor (Map<String, Object> book : books) {\n    CheckDataVisitor v = new CheckDataVisitor(book);\n    filter.accept(v);\n    System.out.println(book.get(\"title\") + \" \" +\n            (v.matches() ? \"match\" : \"no match\"));\n}\n```\n",
    " Services > Using Services\nservice catalog, ServiceCatalog, Java, lookup, ApplicationService, service discovery\nThis snippet demonstrates how to access the ServiceCatalog from an EventContext, retrieve all services, and filter services by type (e.g., ApplicationService) in CAP Java SDK. Useful for dynamic service discovery and interaction.\n\n```java\nServiceCatalog catalog = context.getServiceCatalog();\nStream<Service> allServices = catalog.getServices();\nStream<ApplicationService> appServices = catalog.getServices(ApplicationService.class);\n```\n",
    " Services > Using Services\nservice catalog, ApplicationService, lookup, Java, service name\nShows how to look up an ApplicationService by its CDS name in the ServiceCatalog. Essential when you know the CDS definition service name and want to obtain a typed reference.\n\n```java\nApplicationService adminService = catalog.getService(ApplicationService.class, \"AdminService\");\n```\n",
    " Services > Using Services\nservice catalog, AdminService, specific interface, Java, typed services\nIllustrates using a generated specific service interface (AdminService) from the CAP Java SDK Maven Plugin to retrieve the typed service from the ServiceCatalog by name.\n\n```java\nAdminService adminService = catalog.getService(AdminService.class, \"AdminService\");\n```\n",
    " Services > Using Services\nPersistenceService, service catalog, DEFAULT_NAME, Java, database service\nDemonstrates how to retrieve the default PersistenceService from the ServiceCatalog using the DEFAULT_NAME constant. Generic approach for built-in technical services.\n\n```java\nPersistenceService db = catalog.getService(PersistenceService.class, PersistenceService.DEFAULT_NAME);\n```\n",
    " Services > Using Services\nSpring, dependency injection, PersistenceService, ApplicationService, Java, service access\nShows dependency injection of CAP services in a Spring component. PersistenceService and a named ApplicationService (with @Qualifier) are injected as Spring beans for convenient access.\n\n```java\n@Component\npublic class EventHandlerClass implements EventHandler {\n\n    @Autowired\n    private PersistenceService db;\n\n    @Autowired\n    @Qualifier(\"AdminService\")\n    private ApplicationService adminService;\n\n}\n```\n",
    " Services > Using Services\nSpring, dependency injection, PersistenceService, AdminService, Java, specific interface injection\nDepicts dependency injection in a Spring-managed bean using the specific AdminService interface. @Qualifier is not required for specific interfaces; injection is resolved by type.\n\n```java\n@Component\npublic class EventHandlerClass implements EventHandler {\n\n    @Autowired\n    private PersistenceService db;\n\n    @Autowired\n    private AdminService adminService;\n\n}\n```\n",
    " CQN Services > Application Services\njava, CQN, Application Service, service implementation, event handler\nDefines a custom event handler class for an Application Service in CAP Java. Demonstrates how to handle CQN-based read (SELECT) events. Additional business logic or validation can be added inside the handler. Application Services expose APIs from CDS models and only accept CQN targeting their defined entities.\n\n```java\nimport com.sap.cds.services.cds.ApplicationService;\nimport com.sap.cds.services.handler.EventHandler; // marker annotation\nimport com.sap.cds.services.handler.EventListener;\nimport com.sap.cds.ql.cqn.CqnSelect;\nimport com.sap.cds.Result;\n\n@EventHandler(service = ApplicationService.class)\npublic class MyApplicationServiceHandler {\n    @EventListener\n    public void onRead(CqnSelect select, ApplicationService srv) {\n        Result result = srv.run(select);\n        // custom logic or validation can be added here\n    }\n}\n```\n",
    " CQN Services > Persistence Services\njava, CQN, Persistence Service, transaction, database, service implementation\nShows how to use the Persistence Service in CAP Java to handle CQN-based UPDATE events. The Persistence Service is a CQN client to the database, not limited to a specific CDS service definition and supports transactions. Useful for adding custom data operations or implementing event handlers for Application Services.\n\n```java\nimport com.sap.cds.services.persistence.PersistenceService;\nimport com.sap.cds.ql.cqn.CqnUpdate;\nimport com.sap.cds.Result;\n\npublic class MyPersistenceServiceHandler {\n    private final PersistenceService db;\n    public MyPersistenceServiceHandler(PersistenceService db) {\n        this.db = db;\n    }\n    public void onUpdate(CqnUpdate update) {\n        db.run(update);\n    }\n}\n```\n",
    " CQN Services > Application Services > Draft Services\njava, CQN, Draft Service, draft entity, fiori\nIllustrates how to obtain and use the DraftService in CAP Java when the service definition contains draft-enabled entities. DraftService provides APIs for managing Fiori draft-enabled entities, e.g., creating drafts, patching, saving, and canceling.\n\n```java\nimport com.sap.cds.services.draft.DraftService;\nimport com.sap.cds.services.cds.ApplicationService;\n\npublic class MyDraftHandler {\n    private final DraftService draftService;\n    public MyDraftHandler(ApplicationService appService) {\n        // If the service definition has a draft-enabled entity, it also offers DraftService\n        this.draftService = appService.draft();\n    }\n    public void createDraftEntity() {\n        // Example of creating a draft, refer to DraftService API for details\n        draftService.newDraftEntity(/* ... */);\n    }\n}\n```\n",
    " CQN Services > Remote Services\njava, CQN, Remote Service, OData, service integration\nDemonstrates how to connect to a remote API using CAP Java's RemoteService, executing a CQN SELECT statement against a remote OData or similar endpoint. Remote Services are configured explicitly, based on imported CDS service definitions, and are used for synchronous or asynchronous service integration.\n\n```java\nimport com.sap.cds.services.cds.RemoteService;\nimport com.sap.cds.ql.cqn.CqnSelect;\nimport com.sap.cds.Result;\n\npublic class MyRemoteServiceHandler {\n    private final RemoteService remote;\n    public MyRemoteServiceHandler(RemoteService remote) {\n        this.remote = remote;\n    }\n    public Result fetchRemoteData(CqnSelect select) {\n        return remote.run(select);\n    }\n}\n```\n",
    " Persistence Services > Database Support > SAP HANA Cloud\nCDS modeling, SAP HANA, collation, annotation\nDefines a CDS entity 'Books' where the 'isbn' element disables locale-specific collation by using '@cds.collate: false'. This is essential for performance optimization in SAP HANA when locale-sensitive ordering is not required for specific String fields.\n\n```cds\nentity Books : cuid {\n    title        : localized String(111);\n    descr        : localized String(1111);\n    @cds.collate : false // [!code focus]\n    isbn         : String(40);  // does not require locale-specific handling // [!code focus]\n}\n```\n",
    " Persistence Services > Datasource Configuration\nconfiguration, application.yaml, connection pool, HikariCP\nConfigures the HikariCP connection pool with a maximum pool size of 20 for a datasource named 'my-service-instance'. This snippet is part of controlling database connection pooling in Spring Boot for CAP Java.\n\n```yaml\ncds:\n  dataSource:\n    my-service-instance:\n      hikari:\n        maximum-pool-size: 20\n```\n",
    " Persistence Services > Datasource Configuration\nconfiguration, application.yaml, HANA, connection, JDBC\nAdds a SAP HANA-specific JDBC property 'packetSize' (set to 300000) to a datasource configuration using the Hikari pool in application.yaml. Used to fine-tune the SAP HANA connection from CAP Java.\n\n```yaml\ncds:\n  dataSource:\n    my-service-instance:\n      hikari:\n        data-source-properties:\n          packetSize: 300000\n```\n",
    " Persistence Services > SAP HANA > Configure the DDL generation\nconfiguration, CDS compiler, SAP HANA, .cdsrc.json\nConfigures the CDS compiler to not generate native SAP HANA associations in the SQL model, as associations are not utilized natively by CAP Java for SAP HANA. Placed in .cdsrc.json.\n\n```json\n{ \"sql\": { \"native_hana_associations\" : false } }\n```\n",
    " Persistence Services > SAP HANA > SQL Optimization Mode\nconfiguration, application.yaml, sql.hana.optimizationMode\nYAML configuration to set the SAP HANA SQL optimization mode to 'legacy', allowing generation of SQL statements compatible with HANA 2.x or SAP HANA Cloud environments when using CAP Java.\n\n```yaml\ncds.sql.hana.optimizationMode: legacy\n```\n",
    " Persistence Services > PostgreSQL > Initial Database Schema\nschema generation, PostgreSQL, schema.sql, cds-maven-plugin, Maven\nConfigures the cds-maven-plugin in pom.xml to generate a schema.sql for PostgreSQL by running 'cds deploy --to postgres --dry'. The output file will be placed in 'src/main/resources/schema.sql'.\n\n```xml\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to postgres --dry --out \"${project.basedir}/src/main/resources/schema.sql\"</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n",
    " Persistence Services > PostgreSQL > Initial Database Schema\nnpm, CLI, postgres, cds-dk\nShell command using CDS CLI to add PostgreSQL support to a CAP Java project. Installs all necessary dependencies and configuration.\n\n```shell\ncds add postgres\n```\n",
    " Persistence Services > PostgreSQL > Configure the Connection Data Explicitly\nconfiguration, application.yaml, PostgreSQL, JDBC\nExplicitly configures connection data for PostgreSQL in application.yaml for a specific profile. This includes URL, credentials, and the JDBC driver class name.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: postgres\n  datasource:\n    url: <url>\n    username: <user>\n    password: <password>\n    driver-class-name: org.postgresql.Driver\n```\n",
    " Persistence Services > H2\nschema generation, H2, schema.sql, cds-maven-plugin\nConfigures the cds-maven-plugin to generate H2 database schema (schema.sql) by running a dry run deployment for the 'h2' dialect.\n\n```xml\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to h2 --dry --out \"${project.basedir}/src/main/resources/schema.sql\"</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n",
    " Persistence Services > H2\nnpm, CLI, H2, cds-dk\nCLI command to add H2 in-memory/database support to CAP Java project with the CDS toolkit.\n\n```shell\ncds add h2\n```\n",
    " Persistence Services > SQLite > Initial Database Schema\nschema generation, SQLite, schema.sql, cds-maven-plugin\nMaven configuration for the cds-maven-plugin to generate a schema.sql file for SQLite by performing a dry deployment.\n\n```xml\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to sqlite --dry --out \"${project.basedir}/src/main/resources/schema.sql\"</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n",
    " Persistence Services > SQLite > Initial Database Schema\nnpm, CLI, SQLite, cds-dk\nCLI command for adding SQLite database support to your CAP Java project using the CDS toolkit.\n\n```shell\ncds add sqlite\n```\n",
    " Persistence Services > SQLite > File-Based Storage\nconfiguration, application.yaml, SQLite, file-based\nConfigures SQLite in file-based mode for a CAP Java Spring Boot application. Disables automatic schema initialization and uses a single connection in the Hikari pool. Database file is 'sqlite.db'.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: sqlite\n  sql:\n    init:\n      mode: never\n  datasource:\n    url: \"jdbc:sqlite:sqlite.db\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n```\n",
    " Persistence Services > SQLite > In-Memory Storage\nconfiguration, application.yaml, SQLite, in-memory\nConfigures SQLite to run as an in-memory database for local development and testing. Uses Spring Boot, Hikari pool (max 1, no lifetime limit), and schema is initialized automatically.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: default\n  sql:\n    init:\n      mode: always\n  datasource:\n    url: \"jdbc:sqlite:file::memory:?cache=shared\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n      max-lifetime: 0\n```\n",
    " Persistence Services > Additional Persistence Services\nconfiguration, application.yaml, Persistence Service, Multiple Databases\nMaps a logical Persistence Service name (\"my-ps\") to a database service binding (\"my-hana-hdi\"). Allows explicit naming and selection of additional (non-default) persistence services for multi-database scenarios.\n\n```yaml\ncds:\n  persistence.services:\n    my-ps:\n      binding: \"my-hana-hdi\"\n```\n",
    " Persistence Services > Additional Persistence Services\nconfiguration, application.yaml, Persistence Service, disable\nDisables automatic creation of a Persistence Service for the service binding named 'my-hana-hdi'. Useful for fine-grained control over which database bindings have services exposed in CAP Java.\n\n```yaml\ncds:\n  persistence.services:\n    my-hana-hdi:\n      enabled: false\n```\n",
    " Persistence Services > Additional Persistence Services\nJava, Spring, DataSource, bean, custom datasource\nDemonstrates creating a custom DataSource bean in Java (Spring). Can be used for registering additional non-default datasources in CAP Java applications.\n\n```java\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    public DataSource customDataSource() {\n        return DataSourceBuilder.create()\n            .url(\"jdbc:sqlite:sqlite.db\")\n            .build();\n    }\n\n}\n```\n",
    " Persistence Services > Additional Persistence Services\nconfiguration, application.yaml, Persistence Service, custom datasource\nBinds a logical Persistence Service ('my-ps') to a custom DataSource bean ('customDataSource'). Needed for linking non-default data sources registered as Spring beans in CAP Java.\n\n```yaml\ncds:\n  persistence.services:\n    my-ps:\n      dataSource: \"customDataSource\"\n```\n",
    " Persistence Services > Example: Multitenant Application with Tenant-independent Datasource\nconfiguration, application.yaml, multitenancy, Persistence Service, Service Manager\nConfigures the Service Manager binding as the primary datasource in a multitenant CAP Java application, ensuring the default Persistence Service is created from it.\n\n```yaml\nspring:\n  config.activate.on-profile: cloud\ncds:\n  dataSource:\n    binding: \"my-service-manager-binding\"\n```\n",
    " Persistence Services > Example: Multitenant Application with Tenant-independent Datasource > Local Development and Testing with MTX\nJava, Spring, DataSource, multitenancy, DataSourceInitializer\nConfigures an in-memory, tenant-independent datasource for local development/testing in CAP Java multitenancy. Initializes the schema using schema.sql on startup using Spring DataSourceInitializer.\n\n```java\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    @ConfigurationProperties(\"app.datasource.tenant-independent\")\n    public DataSourceProperties tenantIndependentDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    public DataSource tenantIndependentDataSource() {\n        return tenantIndependentDataSourceProperties()\n            .initializeDataSourceBuilder()\n            .build();\n    }\n\n    @Bean\n    public DataSourceInitializer tenantIndependentInitializer() {\n        ResourceDatabasePopulator resourceDatabasePopulator = new ResourceDatabasePopulator();\n        resourceDatabasePopulator.addScript(new ClassPathResource(\"schema.sql\"));\n\n        DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n        dataSourceInitializer.setDataSource(tenantIndependentDataSource());\n        dataSourceInitializer.setDatabasePopulator(resourceDatabasePopulator);\n        return dataSourceInitializer;\n    }\n\n}\n```\n",
    " Persistence Services > Example: Multitenant Application with Tenant-independent Datasource > Local Development and Testing with MTX\nconfiguration, application.yaml, Persistence Service, tenant-independent\nBinds the 'tenant-independent' Persistence Service to the 'tenantIndependentDataSource' bean and marks 'mtx-sqlite' as the primary datasource for a local MTX development/testing environment.\n\n```yaml\nspring:\n  config.activate.on-profile: local-mtxs\ncds:\n  persistence.services:\n    tenant-independent:\n      dataSource: \"tenantIndependentDataSource\"\n  dataSource:\n    binding: \"mtx-sqlite\"\n```\n",
    " Persistence Services > Example: Multitenant Application with Tenant-independent Datasource > Local Development and Testing without MTX\nJava, Spring, DataSource, multitenancy, transaction manager\nDefines two in-memory datasources and transaction manager beans using Spring Boot Java Config for single-tenant (without MTX) testing in CAP Java: one as primary for tenant-dependent data and another for tenant-independent persistence. Ensures both are initialized with the schema.\n\n```java\n@Configuration\npublic class DataSourceConfig {\n\n    /**\n     * Configuration of tenant-dependant persistence\n     */\n\n    @Bean\n    @Primary\n    @ConfigurationProperties(\"app.datasource.tenant-dependent\")\n    public DataSourceProperties tenantDependentDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    @Primary\n    public DataSource tenantDependentDataSource() {\n        return tenantDependentDataSourceProperties()\n            .initializeDataSourceBuilder()\n            .build();\n    }\n\n    @Bean\n    @Primary\n    public DataSourceTransactionManager tenantDependentTransactionManager() {\n        return new DataSourceTransactionManager(tenantDependentDataSource());\n    }\n\n    /**\n     * Configuration of tenant-independent persistence\n     */\n\n    @Bean\n    @ConfigurationProperties(\"app.datasource.tenant-independent\")\n    public DataSourceProperties tenantIndependentDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    @Bean\n    public DataSource tenantIndependentDataSource() {\n        return tenantIndependentDataSourceProperties()\n            .initializeDataSourceBuilder()\n            .build();\n    }\n\n    @Bean\n    public DataSourceInitializer tenantIndependentInitializer() {\n        ResourceDatabasePopulator resourceDatabasePopulator = new ResourceDatabasePopulator();\n        resourceDatabasePopulator.addScript(new ClassPathResource(\"schema.sql\"));\n\n        DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n        dataSourceInitializer.setDataSource(tenantIndependentDataSource());\n        dataSourceInitializer.setDatabasePopulator(resourceDatabasePopulator);\n        return dataSourceInitializer;\n    }\n\n}\n```\n",
    " Persistence Services > Example: Multitenant Application with Tenant-independent Datasource > Local Development and Testing without MTX\nconfiguration, application.yaml, Persistence Service, tenant-independent\nConfigures the 'tenant-independent' Persistence Service to use the 'tenantIndependentDataSource' bean for a single-tenant local testing scenario (no MTX) in CAP Java.\n\n```yaml\nspring:\n  config.activate.on-profile: local\ncds:\n  persistence.services:\n    tenant-independent:\n      dataSource: \"tenantIndependentDataSource\"\n```\n",
    " Persistence Services > Native SQL > Native SQL with JDBC Templates\nJava, Spring, jdbcTemplate, native SQL\nIllustrates using Spring's JdbcTemplate for native SQL execution and stored procedure calls in a CAP Java handler. Operations are managed within Spring's transaction context.\n\n```java\n@Autowired\nJdbcTemplate jdbcTemplate;\n...\n\npublic void setStockForBook(int id, int stock) {\n   jdbcTemplate.update(\"call setStockForBook(?,?)\", id, stock);  // Run the stored procedure `setStockForBook(id in number, stock in number)`\n}\n\npublic int countStock(int id) {\n   SqlParameterSource namedParameters = new MapSqlParameterSource().addValue(\"id\", id);\n   return jdbcTemplate.queryForObject(\n      \"SELECT stock FROM Books WHERE id = :id\", namedParameters, Integer.class); // Run native SQL\n}\n```\n",
    " Persistence Services > Using CQL with a Static CDS Model > Model Interfaces\nCDS modeling, Java, static model, accessor interfaces\nDefines CDS entities Books and Authors with associations, to demonstrate the static model interface and accessor interface generation in CAP Java.\n\n```cds\nnamespace my.bookshop;\n\nentity Books {\n  key ID : Integer;\n  title  : String(111);\n  author : Association to Authors;\n}\n\nentity Authors {\n  key ID : Integer;\n  name   : String(111);\n  books  : Association to many Books on books.author = $self;\n}\n```\n",
    " Persistence Services > Using CQL with a Static CDS Model > Model Interfaces\nJava, static model, model interface\nA generated static model interface (Books_) for a CDS entity, enabling type-safe CQL query construction for 'Books' in CAP Java.\n\n```java\n@CdsName(\"my.bookshop.Books\")\npublic interface Books_ extends StructuredType<Books_> {\n  ElementRef<Integer> ID();\n  ElementRef<String> title();\n  Authors_ author();\n  Authors_ author(Function<Authors_, Predicate> filter);\n}\n```\n",
    " Persistence Services > Using CQL with a Static CDS Model > Model Interfaces\nJava, static model, model interface\nGenerated static model interface (Authors_) for describing entity structure and providing type-safe query capabilities for 'Authors' entity in CAP Java.\n\n```java\n@CdsName(\"my.bookshop.Authors\")\npublic interface Authors_ extends StructuredType<Authors_> {\n  ElementRef<Integer> ID();\n  ElementRef<String> name();\n  Books_ books();\n  Books_ books(Function<Books_, Predicate> filter);\n}\n```\n",
    " Persistence Services > Using CQL with a Static CDS Model > Accessor Interfaces\nJava, accessor interface, static model\nAccessor interface generated for the 'Books' entity in static model; provides getters and setters matching the CDS structure, enabling conversion of query results to typed Java objects.\n\n```java\n@CdsName(\"my.bookshop.Books\")\npublic interface Books extends CdsData {\n\n  String ID = \"ID\";\n  String TITLE = \"title\";\n  String AUTHOR = \"author\";\n\n  Integer getID();\n  void setID(Integer id);\n\n  String getTitle();\n  void setTitle(String title);\n\n  Authors getAuthor();\n  void setAuthor(Map<String, ?> author);\n}\n```\n",
    " Persistence Services > Using CQL with a Static CDS Model > Javadoc comments\nCDS modeling, Javadoc comments, Java, static model\nCDS entity model (Authors) with doc comments. These Javadoc comments are carried to the generated Java accessor interfaces for enhanced documentation.\n\n```cds\nnamespace my.bookshop;\n/**\n * The creator/writer of a book, article, or document.\n */\nentity Authors {\n  key ID : Integer;\n  /**\n   * The name of the author.\n   */\n  name : String(30);\n}\n```\n",
    " Persistence Services > Using CQL with a Static CDS Model > Javadoc comments\nJava, accessor interface, Javadoc comments\nGenerated Java accessor interface, complete with transferred Javadoc comments, for a CDS entity with doc comments in the model (Authors).\n\n```java\n/**\n * The creator/writer of a book, article, or document.\n */\n@CdsName(\"my.bookshop.Authors\")\npublic interface Authors extends CdsData {\n\n  String ID = \"ID\";\n  String NAME = \"name\";\n\n  Integer getId();\n  void setId(Integer id);\n  /**\n   * The name of the author.\n   */\n  String getName();\n  /**\n   * The name of the author.\n   */\n  void setName(String name);\n}\n```\n",
    " Persistence Services > Using CQL with a Static CDS Model > Usage\nJava, static model, query builder, type safe, query\nShows how to build a type-safe CQL query using static model interfaces (Books_) and execute it, converting the result to a list of the accessor interface (Books) in CAP Java.\n\n```java\n// Note the usage of model interface `Books_` here\nSelect<Books_> query = Select.from(Books_.class)\n  .columns(book -> book.title())\n  .where  (book -> book.author().name().eq(\"Edgar Allan Poe\"));\n\n// After executing the query the result can be converted to\n// a typed representation List of Books.\nList<Books> books = dataStore.execute(query).listOf(Books.class);\n```\n",
    " Application Services > Handling CRUD Events\nJava, event handler, CRUD, application service, CqnService, Books, create event, event context\nRegisters a 'before CREATE' event handler for the 'Books' entity in an Application Service. Receives the CdsCreateEventContext and a list of Books entities, enabling business logic extension before entity creation.\n\n```java\n@Before(event = CqnService.EVENT_CREATE, entity = Books_.CDS_NAME)\npublic void createBooks(CdsCreateEventContext context, List<Books> books) { }\n```\n",
    " Application Services > Handling CRUD Events > OData Requests\nOData, URL, service endpoint, configuration\nShows the generic access URL pattern for OData APIs exposed by CAP Java Application Services. The <base_path> can be configured by properties, and <service_name> is the fully qualified CDS service name or overridden via @path.\n\n```txt\nhttp(s)://<application_url>/<base_path>/<service_name>\n```\n",
    " Application Services > Handling CRUD Events > Deeply Structured Documents\nJava, deep validation, composition, event handler, CRUD, order validation, OrderItems, Orders\nImplements deep validation by registering handlers for parent ('Orders') and composed child ('OrderItems') entities. Custom logic walks through order items during order creation, and invalid business data (e.g., quantity <= 0) is rejected with an exception.\n\n```java\n@Before(event = CqnService.EVENT_CREATE, entity = Orders_.CDS_NAME)\npublic void validateOrders(List<Orders> orders) {\n    for(Orders order : orders) {\n        if (order.getItems() != null) {\n            validateItems(order.getItems());\n        }\n    }\n}\n\n@Before(event = CqnService.EVENT_CREATE, entity = OrderItems_.CDS_NAME)\npublic void validateItems(List<OrderItems> items) {\n    for(OrderItems item : items) {\n        if (item.getQuantity() <= 0) {\n            throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid quantity\");\n        }\n    }\n}\n```\n",
    " Application Services > Result Handling > READ Result\nJava, READ handler, count, OData $count, CqnAnalyzer, event context, result\nCustom READ event handler for handling OData $count requests in CAP Java. When an inline count request is detected via CqnAnalyzer, returns the count as a Map with key 'count'.\n\n```java\n@On(entity = MyEntity_.CDS_NAME)\nList<Map<String, Object>> readMyEntity(CdsReadEventContext context) {\n\tif (CqnAnalyzer.isCountQuery(context.getCqn())) {\n\t\tint count = 100; // determine correct count value\n\t\treturn List.of(Collections.singletonMap(\"count\", count));\n\t}\n\t// handle non /$count requests\n}\n```\n",
    " Application Services > Result Handling > Result Builder\nJava, ResultBuilder, selectedRows, read result, setResult, hashmap, event context\nIllustrates using the ResultBuilder.selectedRows to construct and set a result for a READ event handler in CAP Java. Returns a single row result with field 'title'.\n\n```java\nimport static java.util.Arrays.asList;\nimport static com.sap.cds.ResultBuilder.selectedRows;\n\nMap<String, Object> row = new HashMap<>();\nrow.put(\"title\", \"Capire\");\nResult res = selectedRows(asList(row)).result();\ncontext.setResult(res);   // CdsReadEventContext\n```\n",
    " Application Services > Result Handling > Result Builder\nJava, ResultBuilder, inlineCount, read result, OData $count\nShows setting the inline count property on a Result object for query results with inlined entity counts, important for OData $count scenarios.\n\n```java\nResult r = selectedRows(asList(row)).inlineCount(inlineCount).result();\n```\n",
    " Application Services > Result Handling > Result Builder\nJava, ResultBuilder, updatedRows, update result\nCreates a result for an UPDATE event handler, including the number of updated rows and the updated data. Uses ResultBuilder.updatedRows.\n\n```java\nimport static com.sap.cds.ResultBuilder.updatedRows;\n\nint updateCount = 1;  // number of updated rows\nMap<String, Object> data = new HashMap<>();\ndata.put(\"title\", \"CAP Java\");\nResult r = updatedRows(updateCount, data).result();\n```\n",
    " Application Services > Result Handling > Result Builder\nJava, ResultBuilder, deletedRows, delete result\nShows how to create a result representing the number of rows deleted in a custom DELETE event handler, using ResultBuilder.deletedRows.\n\n```java\nimport static com.sap.cds.ResultBuilder.deletedRows;\n\nint deleteCount = 7;\nResult r = deletedRows(deleteCount).result();\n```\n",
    " Application Services > Actions and Functions > Implement Event Handler\ncds modeling, actions, functions, review action, CatalogService, bound action\nDefines a CAP CatalogService with an entity Books and a bound custom action 'review' that takes an integer parameter and returns Reviews. The action is attached to the Books entity.\n\n```cds\nservice CatalogService {\n    entity Books {\n        key ID: UUID;\n        title: String;\n    } actions {\n      action review(stars: Integer) returns Reviews;\n    };\n\n    entity Reviews {\n        book : Association to Books;\n        stars: Integer;\n    }\n}\n```\n",
    " Application Services > Actions and Functions > Implement Event Handler\nJava, event context, action handler, review, bound action, ReviewEventContext\nRegisters and implements a handler for the custom 'review' action on Books. Accesses the parameter and result through the generated ReviewEventContext interface. Used for adding custom business logic to a bound action.\n\n```java\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class CatalogServiceHandler implements EventHandler {\n\n    @On(event = \"review\", entity = Books_.CDS_NAME)\n    public void reviewAction(ReviewEventContext context) {\n        CqnSelect selectBook = context.getCqn();\n        Integer stars = context.getStars();\n        Reviews review = ...; // create the review\n        context.setResult(review);\n    }\n\n}\n```\n",
    " Application Services > Actions and Functions > Trigger Action or Function\nJava, service interface, CAP Java SDK, action, function, review, Books_ ref, generated API\nAuto-generated Java service interface for CatalogService. Provides a type-safe review method for the custom action. Incorporates typed access for bound actions/functions as of CAP Java SDK 2.4.0.\n\n```java\n@CdsName(CatalogService_.CDS_NAME)\npublic interface CatalogService extends CqnService {\n\n  @CdsName(ReviewContext.CDS_NAME)\n  Reviews review(Books_ ref, @CdsName(ReviewContext.STARS) Integer stars);\n\n  interface Application extends ApplicationService, CatalogService {\n  }\n\n  interface Remote extends RemoteService, CatalogService {\n  }\n}\n```\n",
    " Application Services > Actions and Functions > Trigger Action or Function\nJava, action call, service injection, Books_ ref, catalog service, review\nDemonstrates calling a typed, bound action (review) on CatalogService from Java handler code, using generated API and reference entity. Illustrates programmatically triggering custom actions.\n\n```java\n@Autowired\nprivate CatalogService catService;\n...\nprivate void someCustomMethod() {\n  String bookId = \"myBookId\";\n  Books_ ref = CQL.entity(Books_.class).filter(b -> b.ID().eq(bookId));\n  this.catService.review(ref, 5);\n}\n```\n",
    " Application Services > Actions and Functions > Trigger Action or Function\nJava, event context, emit, action/function, generic API\nGeneric programmatic invocation of an action ('review') using EventContext and the emit method, useful for cases where generated typed interfaces are not available.\n\n```java\nEventContext context = EventContext.create(\"review\", \"CatalogService.Books\");\ncontext.put(\"cqn\", Select.from(\"CatalogService.Books\").byId(\"myBookId\"));\ncontext.put(\"rating\", review.getRating());\n\nthis.catService.emit(context);\n\nMap<String, Object> result = (Map<String, Object>) context.get(\"result\");\n```\n",
    " Application Services > Serve Configuration > Configure Base Path\nyaml, application.yaml, OData base path, protocol adapter, cds.odataV4.endpoint.path, cds.odataV2.endpoint.path\nShows how to configure the base paths for OData V4 and V2 protocol adapters in application.yaml, overriding default values using cds.odataV4.endpoint.path and cds.odataV2.endpoint.path.\n\n```yaml\ncds:\n  odataV4.endpoint.path: '/api'\n  odataV2.endpoint.path: '/api-v2'\n\n```\n",
    " Application Services > Serve Configuration > Configure Path and Protocol\ncds modeling, path, protocol, CatalogService, service annotation\nDefines service-level annotations in CDS to specify the relative URL path ('browse') and explicitly restrict serving to OData V4 and V2 protocol adapters for CatalogService.\n\n```cds\n@path : 'browse'\n@protocols: [ 'odata-v4', 'odata-v2' ]\nservice CatalogService {\n    ...\n}\n```\n",
    " Application Services > Serve Configuration > Configure Path and Protocol\nyaml, application.yaml, service path, protocols, serve configuration, CatalogService\nConfigures service path and protocols for a service at runtime in application.yaml under cds.application.services.<key>.serve. Controls which URL and which protocols will serve CatalogService.\n\n```yaml\ncds.application.services.CatalogService.serve:\n  path: 'browse'\n  protocols:\n    - 'odata-v4'\n    - 'odata-v2'\n\n```\n",
    " Application Services > Serve Configuration > Configure Path and Protocol\ncds modeling, disable serving, protocol, internal service, path\nDisables serving of a CDS service by setting @protocol: 'none', regardless of path. Useful for internal or implementation services not meant to be exposed.\n\n```cds\n@path : 'browse'\n@protocol: 'none'\nservice InternalService {\n    ...\n}\n```\n",
    " Application Services > Serve Configuration > Configure Endpoints\ncds modeling, endpoints, protocol-specific path, CatalogService\nShows protocol-specific endpoint configuration in CDS using @endpoints annotation, so the same service is available at different paths depending on protocol adapter.\n\n```cds\n@endpoints: [\n  {path : 'browse', protocol: 'odata-v4'},\n  {path : 'list', protocol: 'odata-v2'}\n]\nservice CatalogService {\n    ...\n}\n```\n",
    " Application Services > Serve Configuration > Configure Endpoints\nyaml, application.yaml, endpoints, protocol-specific path, CatalogService\nConfigures service endpoints for different protocol adapters directly in application.yaml, mapping CatalogService to protocol-specific paths.\n\n```yaml\ncds.application.services.CatalogService.serve.endpoints:\n  - path: 'browse'\n    protocol: 'odata-v4'\n  - path: 'list'\n    protocol: 'odata-v2'\n\n```\n",
    " Remote Services > Remote OData Services\ninstallation, Java, SAP Cloud SDK, remote service, OData\nAdd this Maven dependency to your project to enable Remote Services for OData V2 or V4 APIs in a CAP Java application. It provides core support for consuming OData remote APIs.\n\n```xml\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-remote-odata</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n",
    " Remote Services > Remote OData Services\nconfiguration, Spring Boot, application.yaml, remote service, OData, destination\nConfigures a Remote Service for the OData V2 API in Spring Boot's application.yaml. Specifies the CDS model service name and the destination name used for connection. The destination is typically defined in SAP BTP Destination Service.\n\n```yaml\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      type: \"odata-v2\"\n      destination:\n        name: \"s4-business-partner-api\"\n```\n",
    " Remote Services > Remote OData Services > Configuring CDS Service Name\nconfiguration, custom project layout, Spring Boot, application.yaml, service definition, multiple destinations\nConfigures two distinct Remote Services, bupa-abc and bupa-def, both referring to the same CDS service definition (API_BUSINESS_PARTNER) but targeting different destinations. Useful for consuming the same remote API via multiple endpoints (destinations).\n\n```yaml\ncds:\n  remote.services:\n    bupa-abc:\n      model: \"API_BUSINESS_PARTNER\"\n      destination:\n        name: \"s4-business-partner-api-abc\"\n    bupa-def:\n      model: \"API_BUSINESS_PARTNER\"\n      destination:\n        name: \"s4-business-partner-api-def\"\n```\n",
    " Remote Services > Using Service Bindings > Binding to a Reuse Service\nconfiguration, application.yaml, service binding, reuse service, BTP\nConfigures a Remote Service to bind to a BTP service instance by specifying the binding name in application.yaml. Used when consuming APIs exposed as BTP reuse services, relying on service binding metadata (like URL and authentication).\n\n```yaml\ncds:\n  remote.services:\n    SomeReuseService:\n      binding:\n        name: some-service-binding\n```\n",
    " Remote Services > Using Service Bindings > Binding to a Reuse Service\nJava, Cloud SDK, PropertySupplier, customization, service binding\nRegisters a custom PropertySupplier for service bindings with a specific tag. This enables the SAP Cloud SDK to understand and map custom service bindings when the standard structure is insufficient.\n\n```java\nstatic {\n    OAuth2ServiceBindingDestinationLoader.registerPropertySupplier(\n        options -> options.getServiceBinding().getTags().contains(\"<bindingTag>\"),\n            SomeReuseServiceOAuth2PropertySupplier::new);\n}\n```\n",
    " Remote Services > Using Service Bindings > Binding to a Service with Shared Identity\nconfiguration, service binding, IAS, XSUAA, application.yaml, shared identity\nConfigures a Remote Service using a shared identity service instance (such as XSUAA). Since the service binding does not contain the remote URL, the API URL is explicitly provided in the options section.\n\n```yaml\ncds:\n  remote.services:\n    OtherCapService:\n      binding:\n        name: shared-xsuaa\n        options:\n          url: https://url-of-the-second-cap-application\n```\n",
    " Remote Services > Using Service Bindings > Configuring the Authentication Strategy\nconfiguration, service binding, authentication strategy\nDemonstrates setting the authentication strategy for a Remote Service via the 'onBehalfOf' property. Possible values include 'currentUser', 'systemUser', or 'systemUserProvider' to control user propagation and principal selection.\n\n```yaml\ncds:\n  remote.services:\n    SomeService:\n      binding:\n        onBehalfOf: currentUser\n```\n",
    " Remote Services > Using Destinations\nconfiguration, destination, application.yaml, OData\nConfigures a Remote Service that connects to an OData V2 API using a named destination as registered in the SAP BTP Destination Service.\n\n```yaml\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      type: \"odata-v2\"\n      destination:\n        name: s4-business-partner-api\n```\n",
    " Remote Services > Configuring the URL\nconfiguration, application.yaml, url suffix, endpoint\nAdds a URL suffix to the endpoint configuration in the Remote Service definition. The service URL is constructed from the destination base URL, optional suffix, and CDS service name.\n\n```yaml\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      http:\n        suffix: \"/sap/opu/odata/sap\"\n      destination:\n        name: s4-business-partner-api\n```\n",
    " Remote Services > Consuming Remote Services\nJava, API consumption, CQN, remote call\nShows how to inject and use a CqnService for a remote API. Executes a CQN SELECT statement against an OData Remote Service and fetches a single business partner address. Used for consuming Remote Services via the CQN API in a CAP Java application.\n\n```java\n@Autowired\n@Qualifier(ApiBusinessPartner_.CDS_NAME)\nCqnService bupa;\n\nCqnSelect select = Select.from(ABusinessPartnerAddress_.class)\n    .where(a -> a.BusinessPartner().eq(\"4711\"));\n\nABusinessPartnerAddress address = bupa.run(select)\n    .single(ABusinessPartnerAddress.class);\n```\n",
    " Remote Services > Consuming Remote Services > Consuming Media Elements > Reading Media Elements\ncds modeling, media, LargeBinary, OData\nDefines a CDS entity that includes a media element. 'image' is annotated with @Core.MediaType, marking it as a media property (e.g., for OData media streaming).\n\n```cds\nentity Media {\n   key ID: UUID;\n\n   @Core.MediaType: 'image/png'\n   image: LargeBinary;\n}\n```\n",
    " Remote Services > Consuming Remote Services > Consuming Media Elements > Reading Media Elements\nJava, CQN, media, select, InputStream\nCreates a CQN SELECT to retrieve only the media element ('image') by primary key from a remote service. The result will be an InputStream for the media content.\n\n```java\nSelect.from(Media_.class, m -> m.filter(f -> f.ID().eq(\"...\"))).columns(Media_::image);\n```\n",
    " Remote Services > Consuming Remote Services > Consuming Media Elements > Writing Media Elements\nJava, CQN, media, update\nShows how to update a media element in a remote service. Sets the media content and issues an Update statement using the CQN API. Setting the media value to null would trigger a delete request for that media element.\n\n```java\nMedia payload = Media.create();\npayload.setId(...);\npayload.setImage(...);\n\nUpdate.entity(Media_.class).entry(payload);\n```\n",
    " Remote Services > Cloud SDK Integration > Maven Dependencies\ninstallation, Java, SAP Cloud SDK, BOM\nAdds the SAP Cloud SDK BOM to the Maven dependencyManagement section. This ensures version alignment for all SAP Cloud SDK dependencies in your project.\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.sap.cloud.sdk</groupId>\n            <artifactId>sdk-bom</artifactId>\n            <version>use-latest-version-here</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n",
    " Remote Services > Cloud SDK Integration > Maven Dependencies\ninstallation, Java, SAP Cloud SDK, connectivity, programmatic destination\nAdds the SAP Cloud SDK connectivity library to enable programmatic destination registration. Necessary for building and registering custom destinations at runtime.\n\n```xml\n<dependency>\n    <groupId>com.sap.cloud.sdk.cloudplatform</groupId>\n    <artifactId>cloudplatform-connectivity</artifactId>\n</dependency>\n```\n",
    " Remote Services > Cloud SDK Integration > Maven Dependencies\ninstallation, Java, SAP Cloud SDK, destination service, Cloud Foundry\nAdds the SAP Cloud SDK support for SAP BTP Destination Service integration on Cloud Foundry environments.\n\n```xml\n<dependency>\n    <groupId>com.sap.cloud.sdk.cloudplatform</groupId>\n    <artifactId>scp-cf</artifactId>\n</dependency>\n```\n",
    " Remote Services > Cloud SDK Integration > Configuring Destination Strategies\nconfiguration, destination, retrieval strategy, token exchange, application.yaml\nSets configuration for destination retrieval and token exchange strategies when resolving destinations from SAP BTP Destination Service. Controls the lookup scope and authentication token processing behavior.\n\n```yaml\ncds:\n  remote.services:\n    API_BUSINESS_PARTNER:\n      destination:\n        name: \"s4-business-partner-api\"\n        retrievalStrategy: \"AlwaysProvider\"\n        tokenExchangeStrategy: \"ExchangeOnly\"\n```\n",
    " Remote Services > Cloud SDK Integration > Programmatic Destination Registration\nJava, programmatic API, destination registration, CAP lifecycle\nRegisters a new destination programmatically during CAP application startup. The created HTTP destination includes a custom API key header and is registered with the DestinationAccessor for subsequent remote service usage.\n\n```java\n@Component\n@ServiceName(ApplicationLifecycleService.DEFAULT_NAME)\npublic class DestinationConfiguration implements EventHandler {\n\n    @Value(\"${api-hub.api-key:}\")\n    private String apiKey;\n\n    @Before(event = ApplicationLifecycleService.EVENT_APPLICATION_PREPARED)\n    public void initializeDestinations() {\n        if(apiKey != null && !apiKey.isEmpty()) {\n            DefaultHttpDestination httpDestination = DefaultHttpDestination\n                .builder(\"https://sandbox.api.sap.com/s4hanacloud\")\n                .header(\"APIKey\", apiKey)\n                .name(\"s4-business-partner-api\").build();\n\n            DestinationAccessor.prependDestinationLoader(\n                new DefaultDestinationLoader().registerDestination(httpDestination));\n        }\n    }\n\n}\n```\n",
    " Remote Services > Native Service Consumption > Using Service Bindings\nJava, Cloud SDK, service binding, HttpClient\nShows how to use a service binding to create a Cloud SDK HttpDestination, which is then used to acquire an HttpClient for native API consumption, including OnBehalfOf options for token handling.\n\n```java\nServiceBinding binding = ...;\nHttpDestination destination = ServiceBindingDestinationLoader.defaultLoaderChain().getDestination(\n        ServiceBindingDestinationOptions\n          .forService(binding)\n          .onBehalfOf(OnBehalfOf.TECHNICAL_USER_CURRENT_TENANT)\n          .build());\n\nHttpClient httpClient = HttpClientAccessor.getHttpClient(destination);\n```\n",
    " Remote Services > Native Service Consumption > Using Service Bindings\nJava, Cloud SDK, PropertySupplier, service binding\nRegisters a custom OAuth2PropertySupplier for a service binding with specific tags for Cloud SDK, enabling support for custom or unusual service bindings for authentication.\n\n```java\nstatic {\n    OAuth2ServiceBindingDestinationLoader.registerPropertySupplier(\n        options -> options.getServiceBinding().getTags().contains(\"<bindingTag>\"),\n            BizPartnerOAuth2PropertySupplier::new);\n}\n```\n",
    " Remote Services > Native Service Consumption > Using Destinations\nJava, Cloud SDK, DestinationAccessor, HttpClient\nRetrieves a destination by name using Cloud SDK's DestinationAccessor and creates an HttpClient for native API requests. Shows versions for both v4 and v5 of the Cloud SDK.\n\n```java\n// Cloud SDK v4\nHttpDestination destination = DestinationAccessor.getDestination(\"<destinationName>\").asHttp();\nHttpClient httpClient = HttpClientAccessor.getHttpClient(destination);\n\n// Cloud SDK v5\nDestination destination = DestinationAccessor.getDestination(\"<destinationName>\");\nHttpClient httpClient = HttpClientAccessor.getHttpClient(destination);\n```\n",
    " Remote Services > Native Service Consumption > Programmatic Destinations\nJava, Cloud SDK, destination, basic authentication\nProgrammatically creates a basic authentication destination for use with Cloud SDK API or as a Remote Service.\n\n```java\nDefaultHttpDestination\n  .builder(\"https://example.org\")\n\t.basicCredentials(\"user\", \"password\")\n\t.name(\"my-destination\").build();\n```\n",
    " Remote Services > Native Service Consumption > Programmatic Destinations\nJava, Cloud SDK, destination, token forwarding\nBuilds a destination using token forwarding based on the current security context for authentication when calling the remote API.\n\n```java\nDefaultHttpDestination\n  .builder(\"https://example.org\")\n\t.authenticationType(AuthenticationType.TOKEN_FORWARDING)\n\t.name(\"my-destination\").build();\n```\n",
    " Remote Services > Native Service Consumption > Programmatic Destinations\nJava, Cloud SDK, OAuth2, technical user, programmatic destination\nCreates an OAuth2 destination for using a technical user, suitable for connecting to APIs that require this authentication method.\n\n```java\nClientCredentials clientCredentials =\n        new ClientCredentials(\"clientid\", \"clientsecret\");\n\nOAuth2DestinationBuilder\n        .forTargetUrl(\"https://example.org\")\n        .withTokenEndpoint(\"https://xsuaa.url\")\n        .withClient(clientCredentials, OnBehalfOf.TECHNICAL_USER_CURRENT_TENANT)\n        .property(\"name\", \"my-destination\")\n        .build();\n```\n",
    " Remote Services > Native Service Consumption > Programmatic Destinations\nJava, Cloud SDK, OAuth2, token exchange, named user, programmatic destination\nCreates an OAuth2 destination that performs token exchange for a named user in the current tenant. Used when a user token must be exchanged for an OAuth grant on outgoing API calls.\n\n```java\nClientCredentials clientCredentials =\n        new ClientCredentials(\"clientid\", \"clientsecret\");\n\nOAuth2DestinationBuilder\n        .forTargetUrl(\"https://example.org\")\n        .withTokenEndpoint(\"https://xsuaa.url\")\n        .withClient(clientCredentials, OnBehalfOf.NAMED_USER_CURRENT_TENANT)\n        .property(\"name\", \"my-destination\")\n        .build();\n```\n",
    " Event Handlers > Event Contexts\nevent context, event handler, core API\nDemonstrates creating a generic EventContext, setting parameters, emitting an event to the service, and retrieving the result. Shows use of get/put for key-value access.\n\n```java\nEventContext context = EventContext.create(\"myEvent\", null);\n\n// set parameters\ncontext.put(\"parameter1\", \"MyParameter1\");\ncontext.put(\"parameter2\", 2);\n\nsrv.emit(context); // process event\n\n// access return value\nObject result = context.get(\"result\");\n```\n",
    " Event Handlers > Event Contexts\nevent context, typed event context, CQN, CSN, Result\nShows overlaying a generic EventContext with an event-specific CdsReadEventContext for type-safe access to CQN statement and result objects.\n\n```java\nCdsReadEventContext context = genericContext.as(CdsReadEventContext.class);\nCqnSelect select = context.getCqn();\ncontext.setResult(Collections.emptyList());\nResult result = context.getResult();\n```\n",
    " Event Handlers > Completing the Event Processing\nevent completion, On phase, setCompleted\nCompletes synchronous event processing for events without a return value. Should be called in On-phase handlers.\n\n```java\ncontext.setCompleted();\n```\n",
    " Event Handlers > Completing the Event Processing\nevent completion, On phase, setResult\nSets the return value and completes the event processing for synchronous events with a return value.\n\n```java\ncontext.setResult(myResult);\n```\n",
    " Event Handlers > Explicitly Proceeding the On Handler Execution\nOn phase, proceed, event handler chain\nIllustrates using proceed() to delegate processing to further On-phase handlers while enclosing pre/post logic. Useful for handler chaining and wrapping.\n\n```java\n@On(event = \"myEvent\")\nvoid wrapMyEvent(EventContext context) {\n    context.put(\"param\", \"Adjusted\"); // pre-process\n    context.proceed(); // delegate to underlying handler\n    context.put(\"result\", 42); // post-process\n}\n```\n",
    " Event Handlers > Defining Custom EventContext Interfaces\ncustom event context, EventContext interface, annotations, extensibility\nDefines a custom, event-specific EventContext interface for type-safe parameter and result access, using @EventName and @CdsName annotations.\n\n```java\n@EventName(\"myEvent\")\npublic interface MyEventContext extends EventContext {\n\n    static MyEventContext create() {\n        return EventContext.create(MyEventContext.class, null);\n    }\n\n    @CdsName(\"Param\")\n    String getParam();\n    void setParam(String param);\n\n    void setResult(Integer result);\n    Integer getResult();\n\n}\n```\n",
    " Event Handlers > Event Handler Classes\nevent handler class, Spring Boot, Java, service mapping\nShows a typical Spring Boot event handler class for CAP: uses @Component for bean registration, @ServiceName for service binding, and implements EventHandler.\n\n```java\n@Component\n@ServiceName(\"AdminService\")\npublic class AdminServiceHandler implements EventHandler {\n  // ...\n}\n```\n",
    " Event Handlers > Event Handler Classes\nevent handler class, multi-service, service type\nDemonstrates annotating an event handler class with multiple services via @ServiceName.\n\n```java\n@ServiceName({\"AdminService\", \"CatalogService\"})\n```\n",
    " Event Handlers > Event Handler Classes\nevent handler class, service type, wildcard\nRegisters the event handler on all services of the specified type (e.g., ApplicationService) using a wildcard.\n\n```java\n@ServiceName(value = \"*\", type = ApplicationService.class)\n```\n",
    " Event Handlers > Event Handler Annotations\nannotations, event handler, event/entity registration\nDemonstrates different usages of event handler annotations: multiple events/entity, overriding service, and recommended use of constants.\n\n```java\n// registers on multiple events\n@Before(event = { \"CREATE\", \"UPDATE\" }, entity = \"AdminService.Books\")\n\n// overrides the default service on class-level\n// registers on any entity\n@On(service = \"CatalogService\", event = \"READ\")\n\n// usage of String constants is recommended\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n```\n",
    " Event Handlers > Event Handler Method Signatures > Event Context Arguments\nevent context, handler signature\nMinimal event handler method signature using general EventContext for accessing event meta-data and state.\n\n```java\n@Before(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\npublic void readBooks(EventContext context) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Event Context Arguments\ntyped event context, handler signature\nHandler signature with event-specific EventContext argument for type-safe data access (e.g., for READ events).\n\n```java\n@Before(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\npublic void readBooks(CdsReadEventContext context) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Data Arguments\nentity data argument, CdsData, handler signature\nShows registering a handler with a generic access to entity data via a list of CdsData; suitable for CREATE and UPDATE.\n\n```java\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE },\n        entity = Books_.CDS_NAME)\npublic void changeBooks(List<CdsData> data) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Data Arguments\nentity data argument, typed entity, handler signature\nHandler signature using generated entity accessor interface for typed access to Books records; more type safety.\n\n```java\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE },\n        entity = Books_.CDS_NAME)\npublic void changeBooks(List<Books> books) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Data Arguments\nentity data argument, inferred entity, handler signature\nHandler with typed List<Books> argument, letting CAP infer the entity via the argument type.\n\n```java\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE })\npublic void changeBooks(List<Books> books) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Data Arguments\nentity data argument, stream\nUses Java Stream for accessing/updating Books data in the event handler, rather than a List.\n\n```java\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE })\npublic void changeBooks(Stream<Books> books) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Data Arguments\nentity data argument, single entity\nHandler method with argument for a single Book entity; throws if multiple data entries are present.\n\n```java\n@Before(event = { CqnService.EVENT_CREATE, CqnService.EVENT_UPDATE })\npublic void changeBook(Books book) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Reference Arguments\nentity reference argument, query builder\nHandler method argument for an entity reference reflecting the CQN statement, useful for further queries.\n\n```java\n@After(event = CqnService.EVENT_UPDATE, entity = Books_.CDS_NAME)\npublic void changedBook(CqnStructuredTypeRef ref) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Reference Arguments\nentity reference argument, typed query builder\nShows use of a generated query builder interface (Books_) as handler argument for type-safe queries.\n\n```java\n@After(event = CqnService.EVENT_UPDATE, entity = Books_.CDS_NAME)\npublic void changedBook(Books_ ref) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Reference Arguments\nentity reference argument, inferred entity\nLets CAP infer the entity for handler registration using the argument type (Books_).\n\n```java\n@After(event = CqnService.EVENT_UPDATE)\npublic void changedBook(Books_ ref) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Entity Reference Arguments\nentity reference argument, type-safe query, Select\nBuilds a type-safe query using the Books_ reference, within an event handler method.\n\n```java\n@After(event = CqnService.EVENT_UPDATE)\npublic void changedBook(Books_ ref) {\n  var select = Select.from(ref).columns(b -> b.title());\n}\n```\n",
    " Event Handlers > Event Handler Method Signatures > Service Arguments\nservice argument, service interface injection\nInjects a generated service interface (AdminService) to the handler method for accessing CAP service APIs.\n\n```java\n@After(event = CqnService.EVENT_UPDATE)\npublic void changedBook(Books book, AdminService service) { }\n```\n",
    " Event Handlers > Event Handler Method Signatures > Return Values\nOn phase, return value, Result\nA typical On-phase handler that runs a CQN query and returns a Result, automatically completing the event.\n\n```java\n@On(entity = Books_.CDS_NAME)\npublic Result readBooks(CdsReadEventContext context) {\n    return db.run(context.getCqn());\n}\n```\n",
    " Event Handlers > Event Handler Method Signatures > Return Values\nOn phase, return value, typed result\nReturns a typed result (list of Books) from an On handler, matching the CRUD return type contract.\n\n```java\n@On(entity = Books_.CDS_NAME)\npublic List<Books> readBooks(CdsReadEventContext context) {\n    Books book = Struct.create(Books.class);\n    // ...\n    return Arrays.asList(book);\n}\n```\n",
    " Event Handlers > Event Handler Method Signatures > Return Values\nactions, functions, custom event handler\nShows defining a handler for a CDS-defined function, returning a String matching the function's return type.\n\n```java\n// CDS model\ndservice World {\n  function hello() returns String;\n}\n\n// Handler implementation\n@On(event = \"hello\")\npublic String hello() {\n  return \"Hello World\";\n}\n```\n",
    " Event Handlers > Ordering of Event Handler Methods\nhandler order, HandlerOrder annotation\nDemonstrates how to explicitly control handler ordering within the same phase using @HandlerOrder(EARLY/LATE). Default is between early and late.\n\n```java\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n@HandlerOrder(HandlerOrder.EARLY)\npublic void firstHandler(EventContext context) {\n    // This handler is executed first\n}\n\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\npublic void defaultHandler(EventContext context) {\n    // This one is the second\n}\n\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\n@HandlerOrder(HandlerOrder.LATE)\npublic void lastHandler(EventContext context) {\n    // This one is the last\n}\n\n```\n",
    " Events and Messaging > Ubiquitous Events in CAP > Intrinsic Eventing in CAP Core\nevent handler, cds, intrinsic eventing, emit event, event listener\nDemonstrates intrinsic event handling in CAP core: registering event listeners with `srv.on` and emitting an event with `srv.emit`. Each listener is invoked when the event is emitted. Suitable for `cds repl` or as inline code in a CAP project.\n\n```js\nlet srv = new cds.Service\n// Receiving Events\nsrv.on ('some event', msg => console.log('1st listener received:', msg))\nsrv.on ('some event', msg => console.log('2nd listener received:', msg))\n// Emitting Events\nawait srv.emit ('some event', { foo:11, bar:'12' })\n```\n",
    " Events and Messaging > Ubiquitous Events in CAP > Typical Emitter and Receiver Roles\nevent handler, emitter, receiver, class, emit event, event listener\nShows a CAP Service class implementation that emits an event named 'some event' to inform potential listeners. Typical use: generic emitter pattern decoupled from receivers.\n\n```js\nclass Emitter extends cds.Service { async someMethod() {\n  // inform unknown receivers about something happened\n  await this.emit ('some event', { some:'payload' })\n}}\n```\n",
    " Events and Messaging > Ubiquitous Events in CAP > Typical Emitter and Receiver Roles\nevent handler, emitter, receiver, connect, event listener\nShows how a CAP Service acts as an event receiver. It connects to an external event emitter via `cds.connect.to()` and registers a handler for a specific event. Typical for cross-service/event-driven architectures.\n\n```js\nclass Receiver extends cds.Service { async init() {\n  // connect to and register for events from Emitter\n  const Emitter = await cds.connect.to('Emitter')\n  Emitter.on ('some event', msg => {...})\n}}\n```\n",
    " Events and Messaging > Books Reviews Sample > Declaring Events in CDS\ncds modeling, service definition, event, declaration, asynchronous API, srv/reviews-service.cds\nDefines a CAP service including both synchronous API (entity, actions) and an asynchronous API (event declaration). The asynchronous `reviewed` event communicates subject, count, and new average rating, to be emitted when ratings change.\n\n```cds\nservice ReviewsService {\n\n  // Sync API\n  entity Reviews as projection on my.Reviews excluding { likes }\n  action like (review: Reviews:ID);\n  action unlike (review: Reviews:ID);\n\n  // Async API\n  event reviewed : {\n    subject : Reviews:subject;\n    count   : Integer;\n    rating  : Decimal; // new avg rating\n  }\n\n}\n```\n",
    " Events and Messaging > Books Reviews Sample > Emitting Events\nevent handler, service implementation, emit event, after, ReviewsService, srv/reviews-service.js\nImplements emission of the 'reviewed' event in ReviewsService after create/update/delete operations on the Reviews entity. It emits the event to notify listeners when a review changes.\n\n```js\nclass ReviewsService extends cds.ApplicationService { async init() {\n\n  // Emit a `reviewed` event whenever a subject's avg rating changes\n  this.after (['CREATE','UPDATE','DELETE'], 'Reviews', (_, req) => {\n    let { subject } = req.data, count, rating //= ...\n    return this.emit ('reviewed', { subject, count, rating })\n  })\n\n}}\n```\n",
    " Events and Messaging > Books Reviews Sample > Receiving Events\nevent handler, receive event, ReviewsService, integration, bookstore, srv/mashup.js\nEvent receiver code that updates books' average ratings upon receiving a 'reviewed' event from ReviewsService. The payload is extracted from `msg.data`. Intended for the bookstore service's integration with reviews.\n\n```js\n  // Update Books' average ratings when reviews are updated\n  ReviewsService.on ('reviewed', (msg) => {\n    const { subject, count, rating } = msg.data\n    // ...\n  })\n```\n",
    " Events and Messaging > In-Process Eventing > 1. Start a Single Server Process\nCLI, local server, watch, invoke, cds watch, run server\nStarts the CAP Bookstore app (with reviews) as an all-in-one development server. Useful to observe in-process eventing and local integration.\n\n```shell\ncds watch bookstore\n```\n",
    " Events and Messaging > Using Message Channels > 1. Use `file-based-messaging` in Development\nmessaging, file-based-messaging, configuration, development, package.json, cds.env\nConfigures CAP to use the built-in file-based-messaging service for event transport in development, as set in `package.json` or `.cdsrc.json`. Enables testing message passing across separate processes.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"[development]\": { \"kind\": \"file-based-messaging\" }\n    },\n  }\n}\n```\n",
    " Events and Messaging > Using Message Channels > 2. Start the `reviews` Service and `bookstore` Separately\nCLI, local server, watch, run server, reviews\nStarts the CAP Reviews service in a dedicated server process using file-based messaging (useful for simulating microservices and message queues in local development).\n\n```shell\ncds watch reviews\n```\n",
    " Events and Messaging > Using Message Channels > 2. Start the `reviews` Service and `bookstore` Separately\nCLI, local server, watch, run server, bookstore\nStarts the CAP Bookstore service as a separate process. Demonstrates separation of emitter/receiver with message passing via file-based messaging. Should be started after the reviews service.\n\n```shell\ncds watch bookstore\n```\n",
    " Events and Messaging > Using Multiple Channels > Configuring Individual Channels and Routes\nmessaging, composite-messaging, configuration, package.json, advanced messaging, channels\nShows advanced messaging setup in CAP using composite-messaging. Defines multiple channels and route event patterns to different message brokers/services. Enables complex message routing scenarios.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": \"composite-messaging\",\n      \"routes\": {\n        \"ChannelA\": [\"**/ReviewsService/*\"],\n        \"ChannelB\": [\"**/sap/s4/**\"]\n        \"ChannelC\": [\"**/bookshop/**\"]\n      }\n    },\n    \"ChannelA\": {\n      \"kind\": \"enterprise-messaging\", ...\n    },\n    \"ChannelB\": {\n      \"kind\": \"enterprise-messaging\", ...\n    },\n    \"ChannelC\": {\n      \"kind\": \"enterprise-messaging\", ...\n    }\n  }\n}\n```\n",
    " Events and Messaging > Low-Level Messaging > Configure Messaging Services\nmessaging, cds.env, configuration, package.json, low-level messaging\nGeneric configuration snippet to define a messaging service in CAP. Set the `kind` property to the desired broker or implementation (e.g., enterprise-messaging, event-broker, file-based-messaging).\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": // ...\n    },\n  }\n}\n```\n",
    " Events and Messaging > Low-Level Messaging > Connect to the Messaging Service\nmessaging, service consumer, connect, cds.connect.to, low-level messaging\nEstablishes a client connection to the messaging service. Used for low-level messaging scenarios where events are sent or received via the messaging service directly, not through local service APIs.\n\n```js\nconst messaging = await cds.connect.to('messaging')\n```\n",
    " Events and Messaging > Low-Level Messaging > Emit Events to Messaging Service\nmessaging, emit event, low-level messaging, topic, event emission\nEmits an event using the fully qualified event name to the messaging service. Used in low-level messaging scenarios for explicit topic-based event delivery.\n\n```js\nawait messaging.emit ('ReviewsService.reviewed', { ... })\n```\n",
    " Events and Messaging > Low-Level Messaging > Receive Events from Messaging Service\nmessaging, event handler, receive event, low-level messaging, topic\nRegisters a handler for a specific event (with fully qualified event name) on the messaging service. Suitable for low-level, broker-centric event subscriptions.\n\n```js\nmessaging.on ('ReviewsService.reviewed', msg => console.log(msg))\n```\n",
    " Events and Messaging > Low-Level Messaging > Declared Events and `@topic` Names\ncds modeling, service definition, event, topic, namespace, annotation, cds\nDeclares an event in a CAP service under a specific namespace. Used for integration with message brokers (topic names use the fully qualified name unless overridden).\n\n```cds\nnamespace my.namespace;\nservice SomeEventEmitter {\n  event SomeEvent { ... }\n}\n```\n",
    " Events and Messaging > Low-Level Messaging > Declared Events and `@topic` Names\ncds modeling, event, topic, annotation, custom topic name\nDemonstrates how to use the `@topic` annotation in CDS to specify a custom topic name for an event, overriding the default namespace-based topic.\n\n```cds\n//...\n@topic: 'some.very.different.topic-name'\nevent SomeEvent { ... }\n```\n",
    " Events and Messaging > CloudEvents Standard\nmessaging, cloud events, configuration, cloudevents, cds.env, package.json\nConfigures the messaging service to use CloudEvents format for event data, automatically filling all standard CloudEvents headers and structuring the event payload as required by the CloudEvents standard.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"format\": \"cloudevents\"\n    }\n  }\n}\n```\n",
    " Events and Messaging > [Using SAP Cloud Application Event Hub](./event-broker)\nmessaging, SAP Cloud Application Event Hub, event-broker, production, configuration, cds.env, package.json\nObtains SAP Cloud Application Event Hub integration by setting the messaging 'kind' to 'event-broker' for the production profile. Used for out-of-the-box event brokering in SAP BTP deployments.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"[production]\": {\n        \"kind\": \"event-broker\"\n      }\n    }\n  }\n}\n```\n",
    " Events and Messaging > [Using SAP Event Mesh](./event-mesh)\nmessaging, SAP Event Mesh, enterprise-messaging, production, cloudevents, configuration, cds.env, package.json\nConfigures CAP to use SAP Event Mesh (enterprise-messaging) as its broker with CloudEvents payload format, active in the production profile, as recommended for BTP integration.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"[production]\": {\n        \"kind\": \"enterprise-messaging\",\n        \"format\": \"cloudevents\"\n      }\n    }\n  }\n}\n```\n",
    " Events and Messaging > [Events from SAP S/4HANA](./s4)\ncds modeling, external service, S/4HANA, event, extend, annotation, topic, integration, API_BUSINESS_PARTNER\nExtends an external S/4HANA BusinessPartner service definition to declare missing events with specific topic annotations, enabling SAP Event Mesh/Event Hub integration for receiving S/4HANA events in CAP.\n\n```cds\n// filling in missing events as found on SAP Business Accelerator Hub\nusing { API_BUSINESS_PARTNER as S4 } from './API_BUSINESS_PARTNER';\nextend service S4 with {\n  event BusinessPartner.Created @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Created.v1') {\n    BusinessPartner : String\n  }\n  event BusinessPartner.Changed @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Changed.v1') {\n    BusinessPartner : String\n  }\n}\n```\n",
    " Events and Messaging > [Events from SAP S/4HANA](./s4)\nservice consumer, connect, external service, S/4HANA, event handler, API_BUSINESS_PARTNER\nShows how to connect to an imported S/4HANA OData API and register an event handler for BusinessPartner change events. Demonstrates event-driven S/4HANA integration in a CAP application.\n\n```js\nconst S4Bupa = await cds.connect.to ('API_BUSINESS_PARTNER')\nS4Bupa.on ('BusinessPartner.Changed', msg => {...})\n```\n",
    " Indicating Errors > Exceptions\nexceptions, ServiceException, error status, error handling, CAP Java, event handler\nDemonstrates different ways of throwing a ServiceException in CAP Java event handlers, optionally specifying error statuses and including the causing exception. Exceptions abort the current event and roll back the transaction.\n\n```java\n// default error status\nthrow new ServiceException(\"An internal server error occurred\", originalException);\n// specifying an error status\nthrow new ServiceException(ErrorStatuses.CONFLICT, \"Not enough stock available\");\n// specifying an error status and the original exception\nthrow new ServiceException(ErrorStatuses.BAD_REQUEST, \"No book title specified\", originalException);\n```\n",
    " Indicating Errors > Messages\nmessages, Messages API, event context, dependency injection, Spring, logging\nShows how to add a success message to the current request using the Messages API acquired from the event context in a handler.\n\n```java\n// Using Messages API from event context\ncontext.getMessages().success(\"The order was successfully placed\");\n```\n",
    " Indicating Errors > Messages\nmessages, Messages API, event context, dependency injection, Spring, logging\nAccesses the Messages API via Spring Dependency Injection and adds warning and error messages. The error message includes extra metadata for code and documentation URL.\n\n```java\n@Autowired\nMessages messages;\n\nmessages.warn(\"No book title specified\");\nmessages.error(\"The book is no longer available\").code(\"BNA\").longTextUrl(\"/help/book-not-available\");\n```\n",
    " Indicating Errors > Messages > Throwing a ServiceException from Error Messages\nmessages, throwIfError, ServiceException, validation, error aggregation\nThrows a ServiceException if error messages have been collected using the Messages API. Used for aggregated validation and cleanup after complex checks.\n\n```java\n// throw a ServiceException, if any error messages have been added to the current request\nmessages.throwIfError();\n```\n",
    " Indicating Errors > Formatting and Localization\nformatting, localization, SLF4J, parameterized message, exception message\nShows how to use SLF4J-style placeholders in log and exception messages, supporting dynamic message formatting.\n\n```java\n// message with placeholders\nmessages.warn(\"Can't order {} books: Not enough on stock\", orderQuantity);\n// on ServiceException last argument can always be the causing exception\nthrow new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid number: '{}'\", wrongNumber, originalException);\n```\n",
    " Indicating Errors > Formatting and Localization\nlocalization, properties file, message key, internationalization, messages.properties\nDefines a localized message with a placeholder in the default messages.properties. Used for internationalization with CAP Java's message handling.\n\n```properties\nmy.message.key = This is a localized message with {0} parameters\n```\n",
    " Indicating Errors > Formatting and Localization\nlocalization, properties file, message key, internationalization, messages.properties\nDefines the German translation for a message key in messages_de.properties, enabling locale-specific messages in CAP Java.\n\n```properties\nmy.message.key = Das ist ein übersetzter Text mit {0} Parametern\n```\n",
    " Indicating Errors > Formatting and Localization\nlocalization, parameterized messages, ServiceException, message key\nShows how to reference localized messages by key with parameters, in both info/warn and exception messages, using CAP Java's built-in i18n resource bundle support.\n\n```java\n// localized message with placeholders\nmessages.warn(\"my.message.key\", paramNumber);\n// localized message with placeholders and additional exception\nthrow new ServiceException(ErrorStatuses.BAD_REQUEST, \"my.message.key\", paramNumber, originalException);\n```\n",
    " Indicating Errors > Target > CRUD Events\nServiceException, message target, CRUD events, CQN, target property\nDemonstrates different ways to attach a target property for an error message in CRUD event handlers, making errors show up next to the affected field in SAP Fiori UI.\n\n```java\n@Before\npublic void validateTitle(CdsCreateEventContext context, Books book) {\n    // ...\n\n    // implicitly referring to cqn\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(b -> b.get(\"title\"));\n\n    // which is equivalent to explicitly referring to cqn\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(\"cqn\", b -> b.get(\"title\"));\n\n    // which is the same as using plain string\n    // assuming direct POST request\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(\"title\");\n\n    // which is the same as using plain string\n    // assuming surrounding bound action request with binding parameter \"in\",\n    // e.g. draftActivate\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(\"in/title\");\n}\n```\n",
    " Indicating Errors > Target > CRUD Events\nServiceException, message target, typed API, Books_, target property\nShows type-safe way to set error message target property to a field using the generated Books_ class, improving maintainability and refactoring support.\n\n```java\n@Before\npublic void validateTitle(CdsCreateEventContext context, Books book) {\n    // ...\n\n    // implicitly referring to cqn\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(Books_.class, b -> b.title());\n}\n```\n",
    " Indicating Errors > Target > CRUD Events\nServiceException, message target, typed API, association, nested path\nDemonstrates targeting nested fields via associations for error messages, both with the generic and typed (Books_) API.\n\n```java\n@Before\npublic void validateAuthorName(CdsCreateEventContext context, Books book) {\n    // ...\n\n    // using un-typed API\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No title specified\")\n        .messageTarget(b -> b.to(\"author\").get(\"name\"));\n\n    // using typed API\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"No author name specified\")\n        .messageTarget(Books_.class, b -> b.author().name());\n}\n```\n",
    " Indicating Errors > Target > Bound Actions and Functions\nServiceException, message target, bound actions, function input parameter\nShows how to use message targets with action/function parameters, using both string and typed APIs, to display errors adjacent to input fields in Fiori.\n\n```java\n@Before\npublic void validateReview(BooksAddReviewContext context) {\n    // ...\n\n    // referring to action parameter \"reviewer\", targeting \"firstName\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid reviewer first name\")\n        .messageTarget(\"reviewer\", r -> r.get(\"firstName\"));\n\n    // which is equivalent to using the typed API\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid reviewer first name\")\n        .messageTarget(BooksAddReviewContext.REVIEWER, Reviewer_.class, r -> r.firstName());\n\n    // targeting \"rating\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid review rating\")\n        .messageTarget(\"rating\");\n\n    // targeting \"title\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid review title\")\n        .messageTarget(\"title\");\n\n     // targeting \"text\"\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid review text\")\n        .messageTarget(\"text\");\n}\n```\n",
    " Indicating Errors > Target > Bound Actions and Functions\nServiceException, message target, bound entity, CQN, typed API\nIllustrates how to set message targets for properties on a bound entity, using both generic and typed APIs, supporting Fiori's inline error display.\n\n```java\n@Before\npublic void validateReview(BooksAddReviewContext context) {\n    // ...\n\n    // referring to the bound entity `Books`\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid book description\")\n        .messageTarget(b -> b.get(\"descr\"));\n\n    // or (using the typed API, referring to \"cqn\" implicitly)\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid book description\")\n        .messageTarget(Books_.class, b -> b.descr());\n\n    // which is the same as using plain string\n    throw new ServiceException(ErrorStatuses.BAD_REQUEST, \"Invalid book description\")\n        .messageTarget(\"in/descr\");\n}\n```\n",
    " Indicating Errors > Error Handler\nerror handler, ERROR_RESPONSE, lifecycle event, custom error message, authorization error\nOverrides the standard message for authorization errors by replacing the first error message with a custom text in the ERROR_RESPONSE event handler.\n\n```java\n@Component\n@ServiceName(ApplicationLifecycleService.DEFAULT_NAME)\npublic class SimpleExceptionHandler implements EventHandler {\n\n  @After\n  public void overrideMissingAuthMessage(ErrorResponseEventContext context) {\n    if (context.getException().getErrorStatus().equals(CdsErrorStatuses.EVENT_FORBIDDEN)) {\n        context.getResult().getMessages().set(0,\n            Message.create(Message.Severity.ERROR,\n            \"You cannot execute this action\"));\n    }\n  }\n}\n```\n",
    " Indicating Errors > Error Handler\nerror handler, validation error, ERROR_RESPONSE, custom error messages, field-level error\nHandles the ERROR_RESPONSE event and customizes validation error messages for specific fields (price, stock) on the Books entity, while copying metadata for proper UI display.\n\n```java\n@Component\n@ServiceName(ApplicationLifecycleService.DEFAULT_NAME)\npublic class ExceptionServiceErrorMessagesHandler implements EventHandler {\n\n  @After\n  public void overrideValidationMessages(ErrorResponseEventContext context) {\n    context.getException().getEventContexts().stream().findFirst().ifPresent(originalContext -> {\n      if (Books_.CDS_NAME.equals(originalContext.getTarget().getQualifiedName())) { // filter by entity\n        List<Message> messages = context.getResult().getMessages();\n        for(int i=0; i<messages.size(); ++i) {\n          Message message = messages.get(i);\n          if (CdsErrorStatuses.VALUE_OUT_OF_RANGE.getCodeString().equals(message.getCode())) { // filter by error code\n            if (Books.PRICE.equals(message.getTarget().getRef().targetSegment().id())) { // filter by target\n              messages.set(i, Message.create(Message.Severity.ERROR, \"The exceptional price is not in defined range!\", message));\n            } else if (Books.STOCK.equals(message.getTarget().getRef().targetSegment().id())) {\n              messages.set(i, Message.create(Message.Severity.ERROR, \"The exceptional stock of specified items is not available!\", message));\n            }\n          }\n        }\n      }\n    });\n  }\n}\n```\n",
    " Request Contexts > Accessing Request Contexts\nJava, event handler, Request Context, UserInfo, ParameterInfo, AuthenticationInfo, FeatureTogglesInfo\nDemonstrates accessing Request Context data like user info, locale, authentication token, and feature toggles within a Java event handler. Use in a @Before event handler for CqnService events.\n\n```java\n@Before(event = CqnService.EVENT_READ)\npublic void beforeRead(CdsReadEventContext context) {\n    UserInfo userInfo = context.getUserInfo();\n    boolean isAuthenticated = userInfo.isAuthenticated();\n\n    ParameterInfo parameterInfo = context.getParameterInfo();\n    Locale locale = parameterInfo.getLocale();\n\n    // OAuth2 authentication provided:\n    AuthenticationInfo authInfo = context.getAuthenticationInfo();\n    JwtTokenAuthenticationInfo jwtTokenInfo = authInfo.as(JwtTokenAuthenticationInfo.class);\n    String jwtToken = jwtTokenInfo.getToken();\n\n    FeatureTogglesInfo ftsInfo = context.getFeatureTogglesInfo();\n    if (ftsInfo.isEnabled(\"experimental\")) {\n      // ...\n    }\n}\n```\n",
    " Request Contexts > Accessing Request Contexts\nJava, Spring, Dependency Injection, UserInfo, ParameterInfo, AuthenticationInfo, FeatureTogglesInfo\nShows how to use Spring Dependency Injection to access UserInfo, ParameterInfo, AuthenticationInfo, and FeatureTogglesInfo in a CAP Java event handler. Use in Spring-based CAP Java projects.\n\n```java\n@Autowired\nUserInfo userInfo;\n\n@Autowired\nParameterInfo parameterInfo;\n\n@Autowired\nAuthenticationInfo authInfo;\n\n@Autowired\nFeatureTogglesInfo ftsInfo;\n\n@Before(event = CqnService.EVENT_READ)\npublic void beforeRead() {\n    boolean isAuthenticated = userInfo.isAuthenticated();\n    Locale locale = parameterInfo.getLocale();\n    // ...\n}\n```\n",
    " Request Contexts > Accessing Request Contexts\nJava, UserInfo, XsuaaUserInfo, type-safe access, CAP Java, authorization\nIllustrates how to access XSUAA-specific user attributes via type-safe XsuaaUserInfo in CAP Java for enhanced authorization or custom logic.\n\n```java\n@Autowired\nXsuaaUserInfo xsuaaUserInfo;\n\n@Before(event = CqnService.EVENT_READ)\npublic void beforeRead() {\n\tboolean isAuthenticated = xsuaaUserInfo.isAuthenticated();\n\tString email = xsuaaUserInfo.getEmail();\n\tString givenName = xsuaaUserInfo.getGivenName();\n\tString familyName = xsuaaUserInfo.getFamilyName();\n    // ...\n}\n```\n",
    " Request Contexts > Defining New Request Contexts > Switching to Technical User\nJava, RequestContextRunner, technical user, systemUser, After handler, CAP Java\nShows how to switch from a named user context to a technical user context using systemUser() in an After event handler. Useful for calling external technical services without user propagation.\n\n```java\n@After(entity = Books_.CDS_NAME)\npublic void afterHandler(EventContext context){\n    runtime.requestContext().systemUser().run(reqContext -> {\n        // call technical service\n        ...\n    });\n}\n```\n",
    " Request Contexts > Defining New Request Contexts > Switching to Technical Provider Tenant\nJava, RequestContextRunner, technical provider tenant, systemUserProvider, CAP Java, action handler\nSwitches to a technical user context on the provider tenant for an action handler, enabling backend communication with internal pseudo-role endpoints.\n\n```java\n@On(entity = Books_.CDS_NAME)\npublic void onAction(AddToOrderContext context){\n    runtime.requestContext().systemUserProvider().run(reqContext -> {\n        // call remote CAP service\n        ...\n    });\n}\n```\n",
    " Request Contexts > Defining New Request Contexts > Switching to a Specific Technical Tenant\nJava, RequestContextRunner, technical tenant, systemUser, background job, multi-tenant, CAP Java\nCreates a Request Context for a technical user for a specific tenant, e.g., for multi-tenant background job execution. Ensures correct tenant separation for DB queries.\n\n```java\nruntime.requestContext().systemUser(tenant).run(reqContext -> {\n    return persistenceService.run(Select.from(Books_.class))\n        .listOf(Books.class);\n});\n```\n",
    " Request Contexts > Modifying Request Contexts\nJava, modifying request context, locale, parameters, nested context\nShows how to modify parameters when creating a nested Request Context, e.g., to temporarily remove locale information for unlocalized reads. Uses modifyParameters().\n\n```java\nList<Books> readBooksNotLocalized(EventContext context) {\n  return context.getCdsRuntime().requestContext()\n    .modifyParameters(param -> param.setLocale(null))\n    .run(newContext -> {\n      return persistenceService.run(Select.from(Books_.class))\n        .listOf(Books.class);\n    });\n}\n```\n",
    " Request Contexts > Registering Global Providers\nJava, UserInfoProvider, custom provider, Spring, Header-based user, CAP Java\nDefines a custom UserInfoProvider in Spring to initialize UserInfo from custom HTTP headers, useful when authentication is handled externally.\n\n```java\n@Component\n@Order(1)\npublic class HeaderBasedUserInfoProvider implements UserInfoProvider {\n\n    @Autowired\n    HttpServletRequest req; // accesses current HTTP request\n\n    @Override\n    public UserInfo get() {\n        if (RequestContextHolder.getRequestAttributes() != null) {\n            // only within request thread req is available\n            return UserInfo.create()\n                .setTenant(req.getHeader(\"custom-tenant-header\"))\n                .setName(req.getHeader(\"custom-username-header\"));\n        }\n        return UserInfo.create();\n    }\n}\n```\n",
    " Request Contexts > Registering Global Providers\nJava, UserInfoProvider, chaining, customization, user name normalization\nDemonstrates chaining UserInfoProviders and customizing UserInfo, e.g., normalizing user names. This pattern is used to augment or adjust user information based on previous providers' data.\n\n```java\n@Component\npublic class CustomUserInfoProvider implements UserInfoProvider {\n\n    private UserInfoProvider previousProvider;\n\n    @Override\n    public UserInfo get() {\n        ModifiableUserInfo userInfo = UserInfo.create();\n        if (previousProvider != null) {\n            UserInfo previous = previousProvider.get();\n            if (previous != null) {\n                userInfo = previous.copy();\n            }\n        }\n        if (userInfo != null) {\n            // Normalize user name\n            userInfo.setName(userInfo.getName().toLowerCase(Locale.ENGLISH));\n        }\n\n        return userInfo;\n    }\n\n    @Override\n    public void setPrevious(UserInfoProvider previous) {\n        this.previousProvider = previous;\n    }\n}\n```\n",
    " Request Contexts > Passing Request Contexts to Threads\nJava, threading, RequestContext, RequestContextRunner, multi-threading\nDemonstrates how to propagate the Request Context to a child thread using RequestContextRunner. Necessary for multi-threaded service calls requiring contextual info such as tenant.\n\n```java\nRequestContextRunner runner = runtime.requestContext();\nFuture<Result> result = Executors.newSingleThreadExecutor().submit(() -> {\n\treturn runner.run(threadContext -> {\n\t\treturn persistenceService.run(Select.from(Books_.class));\n\t});\n});\n```\n",
    " ChangeSet Contexts > Overview\nevent context, ChangeSetContext, transactional boundaries, change set, EventContext API\nAccess the currently active ChangeSet Context from the Event Context in CAP Java. Allows querying or interacting with the transactional boundaries for the current event.\n\n```java\ncontext.getChangeSetContext();\n```\n",
    " ChangeSet Contexts > Defining ChangeSet Contexts\ndefining changeset context, ChangeSetContext, transactions, CdsRuntime API, nesting\nExplicitly define a new ChangeSet Context using the CdsRuntime API. Any code inside the provided lambda runs with its own transactional boundaries, supporting nested ChangeSet Contexts.\n\n```java\nruntime.changeSetContext().run(context -> {\n    // executes inside a dedicated ChangeSet Context\n});\n```\n",
    " ChangeSet Contexts > Reacting on ChangeSets\nChangeSetListener, register listener, transaction commit, rollback, beforeClose, afterClose\nRegister a ChangeSetListener on the ChangeSet Context to react to lifecycle events: before the changeset is closed or after it was committed/rolled back. Enables custom actions during transactional phases.\n\n```java\nChangeSetContext changeSet = context.getChangeSetContext();\nchangeSet.register(new ChangeSetListener() {\n\n    @Override\n    public void beforeClose() {\n        // do something before changeset is closed\n    }\n\n    @Override\n    public void afterClose(boolean completed) {\n        // do something after changeset is closed\n    }\n\n});\n```\n",
    " ChangeSet Contexts > Cancelling ChangeSets\nChangeSetContext, cancel changeset, markForCancel, rollback transaction, beforeClose listener\nCancels the current ChangeSet Context programmatically, marking it for rollback without throwing an exception. Can be used inside ChangeSetListener.beforeClose() to roll back the transaction after processing.\n\n```java\nChangeSetContext changeSet = context.getChangeSetContext();\n// cancel changeset without throwing an exception\nchangeSet.markForCancel();\n```\n",
    " ChangeSet Contexts > Database Transactions in Spring Boot\nSpring Boot, transaction, JdbcTemplate, DataSource, transaction management, PersistenceService, @Transactional, plain JDBC\nShows integration of Spring Boot transaction management with CAP Java using the @Transactional annotation and JDBC access via JdbcTemplate and DataSource. Ensures that plain JDBC ops run within a managed transaction context.\n\n```java\n@Autowired\nprivate JdbcTemplate jdbc;\n\n@Autowired\nprivate DataSource ds;\n\n@Before(event = CqnService.EVENT_CREATE, entity = Books_.CDS_NAME)\n@Transactional // ensure transaction is initialized\npublic void beforeCreateBooks(List<Books> books) {\n    // JDBC template\n    jdbc.queryForList(\"SELECT 1 FROM DUMMY\");\n\n    // Connection object\n    Connection conn = DataSourceUtils.getConnection(ds);\n    conn.prepareCall(\"SELECT 1 FROM DUMMY\").executeQuery();\n}\n```\n",
    " ChangeSet Contexts > Setting Session Context Variables\nSpring Boot, session context, custom event handler, PersistenceService, ChangeSetContext, ChangeSetListener, set session variable, DataSourceUtils\nA custom EventHandler for CAP Java (with Spring Boot) sets session context variables on a JDBC connection for the duration of a ChangeSet Context/transaction, clearing them before close. Useful for influencing database-level session properties per-transaction.\n\n```java\n@Component\n@ServiceName(value = \"*\", type = PersistenceService.class)\npublic class SessionContextHandler implements EventHandler {\n\n    private final static Set<ChangeSetContext> handled = Collections.synchronizedSet(new HashSet<>());\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Before\n    protected void setSessionContextVariables(EventContext context) {\n        ChangeSetContext changeSet = context.getChangeSetContext();\n        // handle every transaction only once\n        if(handled.add(changeSet)) {\n            // set the session variable\n            setSessionContextVariable(\"foo\", \"bar\");\n\n            changeSet.register(new ChangeSetListener(){\n\n                @Override\n                public void beforeClose() {\n                    // clear the session variable\n                    setSessionContextVariable(\"foo\", null);\n                    handled.remove(changeSet);\n                }\n\n            });\n        }\n    }\n\n    private void setSessionContextVariable(String name, String value) {\n        Connection con = null;\n        try {\n            // obtains the transaction connection\n            con = DataSourceUtils.getConnection(dataSource);\n            con.setClientInfo(name, value);\n        } catch (SQLClientInfoException e) {\n            // handle appropriately\n        } finally {\n            // only releases the obtained connection\n            // the transaction connection is still kept open with the\n            // session variables set\n            DataSourceUtils.releaseConnection(con, dataSource);\n        }\n    }\n\n}\n```\n",
    " Fiori Drafts > Reading Drafts\ndrafts, Java, event handler, remote service, ACTIVE_READ, draft persistence\nCustom @On event handler for reading active entities in draft-enabled scenarios with 'cds.drafts.persistence' set to 'split'. Delegates the read to a remote S/4HANA system. Useful when draft and active data are managed in different persistences (e.g., local draft, remote active entity). Should be combined with delegation of CREATE/UPDATE/DELETE events.\n\n```java\n@On(entity = MyRemoteDraftEnabledEntity_.CDS_NAME)\npublic Result delegateToS4(ActiveReadEventContext context) {\n    return remoteS4.run(context.getCqn());\n}\n```\n",
    " Fiori Drafts > Editing Drafts\ndrafts, Java, event handler, prefill, DRAFT_NEW\nRegisters a @Before handler for the DRAFT_NEW event, allowing default values to be set on a new draft entity before editing. Works for draft-enabled entities, kicking in as part of the draft-creation flow.\n\n```java\n@Before\npublic void prefillOrderItems(DraftNewEventContext context, OrderItems orderItem) {\n    // Pre-fill fields with default values\n}\n```\n",
    " Fiori Drafts > Activating Drafts\ndrafts, Java, event handler, CREATE, validation\nRegisters a @Before handler for the CREATE event. Used to validate user input or entity state before an active entity is created or updated as part of draft activation (Save action). Applies to activation flow of SAP Fiori draft-enabled entities.\n\n```java\n@Before\npublic void validateOrderItem(CdsCreateEventContext context, OrderItems orderItem) {\n    // Add validation logic\n}\n```\n",
    " Fiori Drafts > Working with Draft-Enabled Entities\nhttp, sample request, drafts, entity, read draft\nSample OData HTTP GET request to fetch an active entity by key, using the special IsActiveEntity=true key in draft-enabled services.\n\n```http\nGET /v4/myservice/myentity(IsActiveEntity=true,ID=<key>);\n```\n",
    " Fiori Drafts > Working with Draft-Enabled Entities\nhttp, sample request, drafts, entity, read draft\nSample OData HTTP GET request for retrieving the draft version of a specific entity, using IsActiveEntity=false in the key.\n\n```http\nGET /v4/myservice/myentity(IsActiveEntity=false,ID=<key>);\n```\n",
    " Fiori Drafts > Working with Draft-Enabled Entities\nhttp, sample request, drafts, entity, read active entities\nSample OData HTTP GET request using a $filter parameter to retrieve all active entities (where IsActiveEntity equals true) in a draft-enabled service.\n\n```http\nGET /v4/myservice/myentity?$filter=IsActiveEntity eq true\n```\n",
    " Fiori Drafts > Draft Lock\nconfiguration, yaml, drafts, lock, timeout\nConfiguration property in application.yaml to set the draft lock timeout for draft-enabled entities. The example sets the lock release after 1 hour.\n\n```yaml\ncds.drafts.cancellationTimeout: 1h\n```\n",
    " Fiori Drafts > Draft Lock\nconfiguration, yaml, drafts, lock, disable\nConfiguration property in application.yaml to completely disable draft protection (locking).\n\n```yaml\ncds.security.draftProtection.enabled: false\n```\n",
    " Fiori Drafts > Draft Garbage Collection\nconfiguration, yaml, drafts, garbage collection, timeout\nSets the garbage collection timeout for stale drafts in application.yaml. This example configures drafts to be deleted after 8 weeks.\n\n```yaml\ncds.drafts.deletionTimeout: 8w\n```\n",
    " Fiori Drafts > Draft Garbage Collection\nconfiguration, yaml, drafts, garbage collection, disable\nCompletely disables automatic garbage collection of drafts by setting the property to false in application.yaml.\n\n```yaml\ncds.drafts.gc.enabled: false\n```\n",
    " Fiori Drafts > Overriding SAP Fiori's Draft Creation Behaviour\ncds modeling, cds, OData, actions, drafts, Fiori, entity\nDefines a draft-enabled Orders entity with a custom OData action 'createDraft', which can be invoked by SAP Fiori instead of the default POST for draft creation. 'NewAction' annotation tells Fiori to use this action.\n\n```cds\nservice AdminService {\n  @odata.draft.enabled\n  @Common.DraftRoot.NewAction: 'AdminService.createDraft'\n  entity Orders as projection on my.Orders actions {\n    action createDraft(in: many $self, orderNo: String) returns Orders;\n  };\n}\n```\n",
    " Fiori Drafts > Overriding SAP Fiori's Draft Creation Behaviour\nJava, drafts, action implementation, DraftService, createDraft\nImplements a custom Java handler for the createDraft action of a draft-enabled Orders entity. Uses the DraftService.newDraft API to create and return a draft instance with preset values. Part of custom draft creation with SAP Fiori.\n\n```java\n@On(entity = Orders_.CDS_NAME)\npublic void createDraft(CreateDraftContext context) {\n    Orders order = Orders.create();\n    order.setOrderNo(context.getOrderNo());\n    context.setResult(adminService.newDraft(Insert.into(Orders_.class).entry(order)).single(Orders.class));\n}\n```\n",
    " Fiori Drafts > Validating Drafts <Beta />\nconfiguration, json, drafts, draftMessages, .cdsrc.json, state messages\nEnables draftMessages (state messages) support in CAP Java for immediate UI validation. Should be set in .cdsrc.json. Adds draft message persistence, enabling enhanced error message feedback for draft-enabled entities.\n\n```json\n{\n  \"cdsc\": {\n    \"draftMessages\": true\n  }\n}\n```\n",
    " Fiori Drafts > Validating Drafts <Beta />\ncds modeling, cds, annotations, SideEffects, draftMessages\nDisables the side-effect annotation for always fetching messages in the EDMX for a specific entity (MyEntity). Prevents automatic reload of state messages after every PATCH request (OData).\n\n```cds\n// Setting `null` disables the side-effect annotation for always fetching messages.\nannotate MyService.MyEntity with @Common.SideEffects #alwaysFetchMessages: null;\n```\n",
    " Fiori Drafts > Consuming Draft Services\ndrafts, Java, DraftService, API, usage, CQN\nDemonstrates usage of the CAP Java DraftService API: creating a draft, patching it, saving (activating) the draft, reading drafts and active entities, and putting drafts back into edit mode. Showcases interaction with draft-aware APIs in application/synchronous use cases.\n\n```java\nimport static bookshop.Bookshop_.ORDERS;\n\nDraftService adminService = ...;\n// create draft\nOrders order = adminService.newDraft(Insert.into(ORDERS)).single(Orders.class);\n// set values\norder.setOrderNo(\"DE-123456\");\n// patch draft\nadminService.patchDraft(Update.entity(ORDERS).data(order)\n    .where(o -> o.ID().eq(order.getId()).and(o.IsActiveEntity().eq(false))));\n// save draft\nCqnSelect orderDraft = Select.from(ORDERS)\n    .where(o -> o.ID().eq(order.getId()).and(o.IsActiveEntity().eq(false)));\nadminService.saveDraft(orderDraft);\n// read draft\nOrders draftOrder = adminService.run(orderDraft).single().as(Order.class);\n// put draft back to edit mode\nCqnSelect orderActive = Select.from(ORDERS)\n    .where(o -> o.ID().eq(order.getId()).and(o.IsActiveEntity().eq(true)));\nadminService.editDraft(orderActive, true);\n// read entities in draft mode and activated entities\nadminService.run(Select.from(ORDERS).where(o -> o.ID().eq(order.getId())));\n```\n",
    " Audit Logging > AuditLog Service > Use AuditLogService > Get AuditLogService Instance\naudit logging, AuditLogService, Spring Boot, service injection, service catalog, Java\nThis code snippet demonstrates how to inject the AuditLogService into a Spring Boot-based CAP Java application. The AuditLogService can be used for emitting audit log events. For non-Spring Boot projects, the service can be retrieved from the ServiceCatalog.\n\n```java\nimport com.sap.cds.services.auditlog.AuditLogService;\n\n@Autowired\nprivate AuditLogService auditLogService;\n```\n",
    " Audit Logging > AuditLog Service > Use AuditLogService > Get AuditLogService Instance\naudit logging, AuditLogService, service catalog, Java\nThis code obtains an instance of the AuditLogService from the ServiceCatalog in a CAP Java context. Useful when injection is not available (e.g., in non-Spring Boot environments).\n\n```java\nServiceCatalog catalog = context.getServiceCatalog();\nauditLogService = (AuditLogService) catalog.getService(AuditLogService.DEFAULT_NAME);\n```\n",
    " Audit Logging > AuditLog Service > Use AuditLogService > Emit Personal Data Access Event\naudit logging, personal data access, logDataAccess, AuditLogService, Java\nThis snippet emits a personal data access event using the logDataAccess() method of the AuditLogService. The Access object(s) should be filled with relevant data access details.\n\n```java\nList<Access> accesses = new ArrayList<>();\nAccess access = Access.create();\n// fill access object with data\naccesses.add(access);\nauditLogService.logDataAccess(accesses);\n```\n",
    " Audit Logging > AuditLog Service > Use AuditLogService > Emit Personal Data Modification Event\naudit logging, personal data modification, logDataModification, AuditLogService, Java\nThis example shows how to emit a personal data modification event using logDataModification() on AuditLogService. Each DataModification object should be populated as appropriate.\n\n```java\nList<DataModification> dataModifications = new ArrayList<>();\nDataModification modification = DataModification.create();\n// fill data modification object with data\ndataModifications.add(modification);\nauditLogService.logDataModification(dataModifications);\n```\n",
    " Audit Logging > AuditLog Service > Use AuditLogService > Emit Configuration Change Event\naudit logging, configuration change, logConfigChange, AuditLogService, Java\nThis shows how to emit a configuration change audit event using logConfigChange() of the AuditLogService. An action (like Action.UPDATE) and a list of ConfigChange objects are passed.\n\n```java\nList<ConfigChange> configChanges = new ArrayList<>();\nConfigChange configChange = ConfigChange.create();\n// fill config change object with data\nconfigChanges.add(configChange);\nauditLogService.logConfigChange(Action.UPDATE, configChanges);\n```\n",
    " Audit Logging > AuditLog Service > Use AuditLogService > Emit Security Event\naudit logging, security event, logSecurityEvent, AuditLogService, Java\nEmit a security event audit log entry by calling logSecurityEvent() on AuditLogService with details about the action and related data.\n\n```java\nString action = \"login\";\nString data = \"user-name\";\nauditLogService.logSecurityEvent(action, data);\n```\n",
    " Audit Logging > AuditLog Service > Deferred AuditLog Events\naudit logging, outbox, deferred, persistent outbox, data privacy, Java\nDeferred audit log events are stored in the outbox and sent asynchronously. Security events are always sent synchronously. Persistent outbox is preferred over in-memory for transactional guarantees. Be aware of compliance/data privacy when persisting audit entries with personal data.\n\n```txt\n\n```\n",
    " Audit Logging > AuditLog Handlers > Default Handler\naudit logging, default handler, logging, application.yaml, YAML\nThis yaml snippet shows how to enable DEBUG log level for the default audit log handler. By default, audit logs are only output at DEBUG, so this increases visibility in the application log.\n\n```yaml\nlogging:\n  level:\n    com.sap.cds.auditlog: DEBUG\n```\n",
    " Audit Logging > AuditLog Handlers > AuditLog v2 Handler\naudit logging, AuditLog v2 handler, cds-feature-auditlog-v2, pom.xml, dependency, Java\nAdd this dependency to pom.xml to enable the AuditLog v2 handler, which forwards audit log entries to the SAP Audit Log service via API v2.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-auditlog-v2</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " Audit Logging > AuditLog Handlers > AuditLog v2 Handler\naudit logging, AuditLog v2 handler, disable, cds.auditlog.v2.enabled, application.yaml, YAML\nTo disable the AuditLog v2 handler, set cds.auditlog.v2.enabled to false in application.yaml. By default the handler is enabled if all requirements are met.\n\n```yaml\ncds:\n  auditlog.v2.enabled: false\n```\n",
    " Audit Logging > AuditLog Handlers > Custom AuditLog Handler\naudit logging, custom handler, EventHandler, AuditLogService, Java, Spring Boot\nExample of a custom AuditLog event handler in a CAP Java Spring Boot project. Implements EventHandler, registers methods for each AuditLog event type (@On annotation), and can provide custom post-processing of audit log events.\n\n```java\nimport com.sap.cds.services.auditlog.*;\nimport com.sap.cds.services.handler.*;\nimport com.sap.cds.services.handler.annotations.*;\nimport org.springframework.stereotype.*;\n\n@Component\n@ServiceName(value = \"*\", type = AuditLogService.class)\nclass CustomAuditLogHandler implements EventHandler {\n\n\t@On\n\tpublic void handleDataAccessEvent(DataAccessLogContext context) {\n\t\t// custom handler code\n\t}\n\n\t@On\n\tpublic void handleDataModificationEvent(DataModificationLogContext context) {\n\t\t// custom handler code\n\t}\n\n\t@On\n\tpublic void handleConfigChangeEvent(ConfigChangeLogContext context) {\n\t\t// custom handler code\n\t}\n\n\t@On\n\tpublic void handleSecurityEvent(SecurityLogContext context) {\n\t\t// custom handler code\n\t}\n}\n```\n",
    " Change Tracking > Enabling Change Tracking\ninstallation, dependency, cds-feature-change-tracking, pom.xml, enable\nThis XML code snippet shows how to add the cds-feature-change-tracking dependency to the srv/pom.xml file of a CAP Java project in order to enable change tracking. The dependency scope is set to 'runtime'.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-change-tracking</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " Change Tracking > Annotating Entities\ncds modeling, extend, aspect, change tracking, service definition\nThis CDS code demonstrates how to enable change tracking for an entity (model.Books) by extending it with the changelog.changeTracked aspect. The changelog model must be imported from the 'com.sap.cds/change-tracking' package.\n\n```cds\nusing {sap.changelog as changelog} from 'com.sap.cds/change-tracking';\nextend model.Books with changelog.changeTracked;\n```\n",
    " Change Tracking > Annotating Entities\ncds modeling, annotation, changelog, projections, service definition\nThis code snippet shows how to use the @changelog annotation to indicate which elements (title and stock) of the service projection Bookshop.Books should be tracked for changes.\n\n```cds\nannotate Bookshop.Books {\n  title @changelog;\n  stock @changelog;\n};\n```\n",
    " Change Tracking > Annotating Entities\ncds modeling, composition, changelog, deep update, order example\nThis CDS model shows how to apply change tracking to entities with compositions. The Orders entity and its items expose elements with the @changelog annotation so their changes are individually tracked, including in deep updates.\n\n```cds\nentity OrderItems : cuid {\n  parent    : Association to Orders;\n  [...]\n  quantity: Integer @changelog;\n}\n\nentity Orders : cuid {\n  customerName: String @changelog;\n  [...]\n  items: Composition of many OrderItems on items.parent = $self;\n}\n```\n",
    " Change Tracking > Identifiers for Entities\ncds modeling, entity identifier, changelog, annotation\nThis annotation defines a human-readable identifier for the change log by storing the 'title' element with each tracked change for the Book entity.\n\n```cds\nannotate Bookshop.Book with @changelog: [\n  title\n];\n```\n",
    " Change Tracking > Identifiers for Compositions\ncds modeling, composition identifier, changelog, deep update\nThese CDS annotations specify human-readable identifiers for Orders (using OrderNo) and OrderItems (using the parent Order's OrderNo and supplierName) to store with each change log entry.\n\n```cds\nannotate Orders with @changelog: [OrderNo];\n\nannotate OrderItems with @changelog: [\n  parent.OrderNo,\n  supplierName,\n];\n```\n",
    " Change Tracking > Human-readable values for associations\ncds modeling, association, changelog, human-readable, foreign key\nThis annotation specifies that instead of storing the technical foreign key for the customer association in the changelog, the value of customer.name should be used for a more human-readable entry.\n\n```cds\nannotate Orders {\n  customer @changelog: [ customer.name ]\n}\n```\n",
    " Change Tracking > Displaying Changes\ncds modeling, UI, facet, display changelog, Bookshop.Books\nThis CDS annotation adds a facet for the change history to the UI of Bookshop.Books, allowing the change log to be displayed on the object page in the Fiori interface.\n\n```cds\nannotate Bookshop.Books with @(\n  UI : { ...\n    Facets : [ ...\n       {\n          $Type               : 'UI.ReferenceFacet',\n          ID                  : 'ChangeHistoryFacet',\n          Label               : '{i18n>ChangeHistory}',\n          Target              : 'changes/@UI.PresentationVariant',\n          ![@UI.PartOfPreview]: false\n        } ...\n   ] ...\n  } ...);\n```\n",
    " Change Tracking > Reacting on Changes\njava, custom logic, event handler, change tracking, observe changelog\nThis Java code shows how to implement an event handler to observe new entries in the change log. The handler class listens to the CREATE_CHANGES event in the ChangeTrackingService and processes each new Changes entry.\n\n```java\nimport cds.gen.sap.changelog.Changes;\n\n@Component\n@ServiceName(ChangeTrackingService.DEFAULT_NAME)\npublic class ChangeTrackingHandler implements EventHandler {\n\n  @After(event = ChangeTrackingService.CREATE_CHANGES)\n  void afterCreate(CreateChangesEventContext context) {\n    context.getResult().listOf(Changes.class).forEach(c -> {\n      // Do something with the change log entry\n    });\n  }\n}\n```\n",
    " Change Tracking > Reacting on Changes\ninstallation, dependency, cds-feature-change-tracking, pom.xml, react\nThis dependency declaration updates the scope of the change tracking feature to 'compile' in the POM file, which is needed for programmatically reacting to changes in Java code.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-change-tracking</artifactId>\n  <scope>compile</scope>\n</dependency>\n```\n",
    " Transactional Outbox > Persistent Outbox\npersistent outbox, configuration, cds.requires, package.json, cdsrc.json\nConfigures the CAP Java application to use a persistent outbox by specifying the outbox service of kind 'persistent-outbox' in either package.json or cdsrc.json. Essential to enable transactional consistency for message emitting.\n\n```jsonc\n{\n  // ...\n  \"cds\": {\n    \"requires\": {\n      \"outbox\": {\n        \"kind\": \"persistent-outbox\"\n      }\n    }\n  }\n}\n```\n",
    " Transactional Outbox > Persistent Outbox\npersistent outbox, configuration, YAML, application.yaml\nShows how to configure persistent outbox services in a CAP Java application using application.yaml. Sets maxAttempts for DefaultOutboxOrdered and DefaultOutboxUnordered, the two default persistent outbox services.\n\n```yaml\ncds:\n  outbox:\n    services:\n      DefaultOutboxOrdered:\n        maxAttempts: 10\n        # ordered: true\n      DefaultOutboxUnordered:\n        maxAttempts: 10\n        # ordered: false\n```\n",
    " Transactional Outbox > Configuring Custom Outboxes\npersistent outbox, custom outbox, configuration, YAML, application.yaml\nExample configuration of custom persistent outbox services in application.yaml for CAP Java applications. Each custom outbox can have different maxAttempts settings.\n\n```yaml\ncds:\n  outbox:\n    services:\n      MyCustomOutbox:\n        maxAttempts: 5\n      MyOtherCustomOutbox:\n        maxAttempts: 10\n```\n",
    " Transactional Outbox > Configuring Custom Outboxes\npersistent outbox, custom outbox, service catalog, Java, service access\nRetrieving custom OutboxService instances by name from the CAP Java service catalog, enabling further operations or outboxing on them.\n\n```java\nOutboxService myCustomOutbox = cdsRuntime.getServiceCatalog().getService(OutboxService.class, \"MyCustomOutbox\");\nOutboxService myOtherCustomOutbox = cdsRuntime.getServiceCatalog().getService(OutboxService.class, \"MyOtherCustomOutbox\");\n```\n",
    " Transactional Outbox > Configuring Custom Outboxes\npersistent outbox, custom outbox, Spring, dependency injection, Java\nShows how to inject a custom OutboxService instance into a Spring component by name using the @Qualifier annotation in a CAP Java application.\n\n```java\n@Component\npublic class MySpringComponent {\n  private final OutboxService myCustomOutbox;\n\n  public MySpringComponent(@Qualifier(\"MyCustomOutbox\") OutboxService myCustomOutbox) {\n    this.myCustomOutbox = myCustomOutbox;\n  }\n}\n```\n",
    " Transactional Outbox > Outbox Event Versions\nevent version, deployment, maven, filtering, pom.xml\nEnables Maven resource filtering to inject the Maven project version as deployment version for outbox event versioning in CAP Java. Required for version-based processing logic.\n\n```xml\n<build>\n  ...\n\t<resources>\n\t\t<resource>\n\t\t\t<directory>src/main/resources</directory>\n\t\t\t<filtering>true</filtering>\n\t\t</resource>\n\t</resources>\n  ...\n```\n",
    " Transactional Outbox > Outbox Event Versions\nevent version, deployment, startup log, version verification, shell\nExample log output at application startup showing the resolved application deployment version, which is used by the outbox for event versioning and compatibility checks.\n\n```shell\n2024-12-19T11:21:33.253+01:00 INFO 3420 --- [main] cds.services.impl.utils.BuildInfo : application.deployment.version: 1.0.0-SNAPSHOT\n```\n",
    " Transactional Outbox > Outboxing CAP Service Events\noutbox service, decoupled event, outboxing CAP services, Java, AsyncCqnService\nWraps a target CAP (Cqn) service with outbox handling. All events triggered on 'outboxedS4' are stored in the outbox and executed asynchronously. Ensures decoupled processing of CAP service calls.\n\n```java\nOutboxService myCustomOutbox = ...;\nCqnService remoteS4 = ...;\nCqnService outboxedS4 = myCustomOutbox.outboxed(remoteS4);\n```\n",
    " Transactional Outbox > Outboxing CAP Service Events\noutbox service, AsyncCqnService, outboxing CAP services, Java\nWraps a CqnService as an AsyncCqnService using outboxing. Calls to outboxedS4 are asynchronous, and API matches AsyncCqnService interface with void return types.\n\n```java\nOutboxService myCustomOutbox = ...;\nCqnService remoteS4 = ...;\nAsyncCqnService outboxedS4 = myCustomOutbox.outboxed(remoteS4, AsyncCqnService.class);\n```\n",
    " Transactional Outbox > Outboxing CAP Service Events\noutbox service, AsyncCqnService, Java, factory method\nAlternative way to wrap a CqnService into an asynchronous outboxed variant using AsyncCqnService's static factory method. Supports flexible outboxing API creation.\n\n```java\nOutboxService myCustomOutbox = ...;\nCqnService remoteS4 = ...;\nAsyncCqnService outboxedS4 = AsyncCqnService.of(remoteS4, myCustomOutbox);\n```\n",
    " Transactional Outbox > Technical Outbox API\noutbox service, technical API, submit, custom message, Java\nDemonstrates programmatic submission of a custom OutboxMessage with parameters to a named OutboxService. The message is stored and processed asynchronously via the outbox mechanism.\n\n```java\nOutboxService outboxService = runtime.getServiceCatalog().getService(OutboxService.class, \"<OutboxServiceName>\");\n\nOutboxMessage message = OutboxMessage.create();\nmessage.setParams(Map.of(\"name\", \"John\", \"lastname\", \"Doe\"));\n\noutboxService.submit(\"myEvent\", message);\n```\n",
    " Transactional Outbox > Technical Outbox API\noutbox service, event handler, OutboxMessageEventContext, Java\nRegisters a handler for a custom outbox event, accesses parameters from the OutboxMessage, processes the event, and calls setCompleted() to signal completion to the outbox.\n\n```java\n@On(service = \"<OutboxServiceName>\", event = \"myEvent\")\nvoid processMyEvent(OutboxMessageEventContext context) {\n  OutboxMessage message = context.getMessage();\n  Map<String, Object> params = message.getParams();\n  String name = (String) param.get(\"name\");\n  String lastname = (String) param.get(\"lastname\");\n\n  // Perform processing logic for myEvent\n\n  context.setCompleted();\n}\n```\n",
    " Transactional Outbox > Handling Outbox Errors\noutbox service, error handling, retry suppression, Java\nError handling pattern for outbox event processing. Retries only on recoverable errors by rethrowing the exception, while unrecoverable semantic errors are acknowledged with setCompleted() to prevent retry.\n\n```java\n@On(service = \"<OutboxServiceName>\", event = \"myEvent\")\nvoid processMyEvent(OutboxMessageEventContext context) {\n  try {\n    // Perform processing logic for myEvent\n  } catch (Exception e) {\n    if (isUnrecoverableSemanticError(e)) {\n      // Perform application-specific counter-measures\n      context.setCompleted(); // indicate message deletion to outbox\n    } else {\n      throw e; // indicate error to outbox\n    }\n  }\n}\n```\n",
    " Transactional Outbox > Handling Outbox Errors\noutbox service, error handling, proceed, EventContext, Java\nShows how to add additional error handling around default outbox event processing using context.proceed(), selectively suppressing or allowing retries based on error type.\n\n```java\n@On(service = OutboxService.PERSISTENT_ORDERED_NAME, event = AuditLogService.DEFAULT_NAME)\nvoid handleAuditLogProcessingErrors(OutboxMessageEventContext context) {\n  try {\n    context.proceed(); // wrap default logic\n  } catch (Exception e) {\n    if (isUnrecoverableSemanticError(e)) {\n      // Perform application-specific counter-measures\n      context.setCompleted(); // indicate message deletion to outbox\n    } else {\n      throw e; // indicate error to outbox\n    }\n  }\n}\n```\n",
    " Transactional Outbox > Outbox Dead Letter Queue > Define the Service\ndead letter queue, CDS, service definition, readonly, projection\nDefines a CDS service OutboxDeadLetterQueueService exposing a readonly entity DeadOutboxMessages, projecting cds.outbox.Messages and offering revive() and delete() actions for dead letter processing.\n\n```cds\nusing from '@sap/cds/srv/outbox';\n\n@requires: 'internal-user'\nservice OutboxDeadLetterQueueService {\n\n  @readonly\n  entity DeadOutboxMessages as projection on cds.outbox.Messages\n    actions {\n      action revive();\n      action delete();\n    };\n\n}\n```\n",
    " Transactional Outbox > Outbox Dead Letter Queue > Filter for Dead Entries\ndead letter queue, Java, @After handler, read filter\nImplements an @After READ handler in CAP Java to filter only dead outbox entries for a Dead Letter Queue service. Compares entry attempts with configured maxAttempts to identify dead entries.\n\n```java\n@Component\n@ServiceName(OutboxDeadLetterQueueService_.CDS_NAME)\npublic class DeadOutboxMessagesHandler implements EventHandler {\n\n\t@After(entity = DeadOutboxMessages_.CDS_NAME)\n\tpublic void filterDeadEntries(CdsReadEventContext context) {\n\t\tCdsProperties.Outbox outboxConfigs = context.getCdsRuntime().getEnvironment().getCdsProperties().getOutbox();\n\t\tList<DeadOutboxMessages> deadEntries = context\n\t\t\t\t.getResult()\n\t\t\t\t.listOf(DeadOutboxMessages.class)\n\t\t\t\t.stream()\n\t\t\t\t.filter(entry -> entry.getAttempts() >= outboxConfigs.getService(entry.getTarget()).getMaxAttempts())\n\t\t\t\t.toList();\n\n\t\tcontext.setResult(deadEntries);\n\t}\n}\n```\n",
    " Transactional Outbox > Outbox Dead Letter Queue > Implement Bound Actions\ndead letter queue, bound actions, Java, revive, delete, PersistenceService\nHandler implementations for revive and delete actions on DeadOutboxMessages. Revive resets the attempts count for retry; delete removes the entry from the outbox. Uses CqnAnalyzer for key extraction and PersistenceService for persistence operations.\n\n```java\n@Autowired\n@Qualifier(PersistenceService.DEFAULT_NAME)\nprivate PersistenceService db;\n\n@On\npublic void reviveOutboxMessage(DeadOutboxMessagesReviveContext context) {\n  CqnAnalyzer analyzer = CqnAnalyzer.create(context.getModel());\n  AnalysisResult analysisResult = analyzer.analyze(context.getCqn());\n  Map<String, Object> key = analysisResult.rootKeys();\n  Messages deadOutboxMessage = Messages.create((String) key.get(Messages.ID));\n\n  deadOutboxMessage.setAttempts(0);\n\n  this.db.run(Update.entity(Messages_.class).entry(key).data(deadOutboxMessage));\n  context.setCompleted();\n}\n\n@On\npublic void deleteOutboxEntry(DeadOutboxMessagesDeleteContext context) {\n  CqnAnalyzer analyzer = CqnAnalyzer.create(context.getModel());\n  AnalysisResult analysisResult = analyzer.analyze(context.getCqn());\n  Map<String, Object> key = analysisResult.rootKeys();\n\n  this.db.run(Delete.from(Messages_.class).byId(key.get(Messages.ID)));\n  context.setCompleted();\n}\n```\n",
    " Multitenancy > React on Tenant Events > Subscribe Tenant\nmultitenancy, DeploymentService, event handler, subscription, custom logic, Java\nRegisters Java event handlers for the SUBSCRIBE event on DeploymentService in CAP Java, allowing custom logic during tenant onboarding. The @Before handler executes actions before the tenant database container is created. The @After handler can be used for post-processing such as notifications.\n\n```java\n@Before\npublic void beforeSubscription(SubscribeEventContext context) {\n    // Activities before tenant database container is created\n}\n\n@After\npublic void afterSubscribe(SubscribeEventContext context) {\n    // For example, send notification, ...\n}\n```\n",
    " Multitenancy > React on Tenant Events > Subscribe Tenant > Defining a Database ID\nmultitenancy, database_id, subscription, DeploymentService, custom handler, Java\nShows how to set the target database_id in a custom @Before handler for tenant subscription, which is required when multiple SAP HANA instances are registered in a BTP space. This tells CAP Java where to create the tenant-specific container.\n\n```java\n@Before\npublic void beforeSubscription(SubscribeEventContext context) {\n    context.getOptions().put(\"provisioningParameters\",\n        Collections.singletonMap(\"database_id\", \"<database ID>\"));\n}\n```\n",
    " Multitenancy > React on Tenant Events > Unsubscribe Tenant\nmultitenancy, unsubscription, DeploymentService, event handler, Java\nRegisters event handlers for the UNSUBSCRIBE event in DeploymentService. Executes logic before and after the tenant's database container is deleted during offboarding of a tenant.\n\n```java\n@Before\npublic void beforeUnsubscribe(UnsubscribeEventContext context) {\n    // Activities before offboarding\n}\n\n@After\npublic void afterUnsubscribe(UnsubscribeEventContext context) {\n    // Notify offboarding finished\n}\n```\n",
    " Multitenancy > React on Tenant Events > Unsubscribe Tenant > Skipping Deletion of Tenant Data\nmultitenancy, unsubscription, skip deletion, custom handler, DeploymentService, Java\nCustomizes the UNSUBSCRIBE behavior to conditionally skip deletion of tenant-specific resources (i.e., database containers). If keepResources returns true, the event is completed early and deletion is avoided.\n\n```java\n@Before\npublic void beforeUnsubscribe(UnsubscribeEventContext context) {\n    if (keepResources(context.getTenant())) {\n      context.setCompleted(); // avoid @On handler phase\n    }\n}\n```\n",
    " Multitenancy > React on Tenant Events > Define Dependent Services\nmultitenancy, dependencies, DeploymentService, custom handler, Java\nImplements a custom handler for the DEPENDENCIES event in DeploymentService for CAP Java multitenancy. This allows you to declare dependencies on SAP reuse services (e.g., for correct SaaS provisioning), returning required xsappnames. The handler uses DI for CdsRuntime and obtains service credentials programmatically.\n\n```java\n@Component\n@Profile(\"cloud\")\n@ServiceName(DeploymentService.DEFAULT_NAME)\npublic class SubscriptionHandler implements EventHandler {\n\tprivate static final String SERVICE_NAME = \"my-service\";\n\n\t@Autowired\n\tprivate CdsRuntime cdsRuntime;\n\n\t@On\n\tpublic void onDependencies(DependenciesEventContext context) {\n\t\tList<Map<String, Object>> dependencies = new ArrayList<>();\n\t\tOptional<ServiceBinding> service = cdsRuntime.getEnvironment().\n                getServiceBindings().filter(binding -> binding.getServiceName().\n                        get().equals(SERVICE_NAME)).findFirst();\n\t\t\n\t\tif (service.isPresent()) {\n\t\t\tString xsappname = extractXsappname(service.get().getCredentials());\n\t\t\tdependencies.add(SaasRegistryDependency.create(xsappname));\n\t\t}\n\t\tcontext.setResult(dependencies);\n\t}\n\n\tprivate String extractXsappname(Map<String, Object> credentials) {\n\t\t// location of the `xsappname` in the credentials is service specific\n\t}\n}\n```\n",
    " Multitenancy > Database Schema Update > Deploy Main Method\nmultitenancy, database schema update, upgrade, command line, database upgrade, main method, deployment, Java\nRuns the CAP Java Deploy main method to upgrade schema for tenants before starting new application code. Accepts optional tenant IDs as arguments (defaults to all tenants). For Spring Boot >= 3.2.0, uses PropertiesLauncher. Must be executed when CAP Java backend is stopped but MTX Sidecar is running.\n\n```shell\njava -cp <jar-file> -Dloader.main=com.sap.cds.framework.spring.utils.Deploy org.springframework.boot.loader.launch.PropertiesLauncher [<tenant 1>] ... [<tenant n>]\n```\n",
    " Multitenancy > Database Schema Update > Deploy Main Method\nmultitenancy, database schema update, upgrade, Cloud Foundry, deployment, Java\nCloud Foundry command to run the Deploy main method or another custom command as a one-off task (e.g., for multi-tenant database schema upgrades or lifecycle tasks in the MTX scenario). The <command> argument must be adapted to set the loader main and use the correct Spring Boot launcher.\n\n```shell\ncf run-task <application_name> \"<command>\"\n```\n",
    " Multitenancy > Database Schema Update > Deploy Main Method\nmultitenancy, database schema update, upgrade, Cloud Foundry, Spring Boot, deployment, Java\nScript for running CAP Java's Deploy main method in Cloud Foundry, replacing the default startup with PropertiesLauncher and setting loader.main, suitable for Spring Boot >= 3.2.0. Used for upgrading tenants in MTX scenario on SAP BTP.\n\n```shell\nsed -i 's/org.springframework.boot.loader.launch.JarLauncher/org.springframework.boot.loader.launch.PropertiesLauncher/g' /home/vcap/staging_info.yml && \\\n  sed -i 's/-Dsun.net.inetaddr.negative.ttl=0/-Dsun.net.inetaddr.negative.ttl=0 -Dloader.main=com.sap.cds.framework.spring.utils.Deploy/g' /home/vcap/staging_info.yml && \\\n  jq -r .start_command /home/vcap/staging_info.yml | bash\n```\n",
    " Multitenancy > Database Schema Update > Deploy Main Method\nmultitenancy, database schema update, upgrade, VS Code, Java\nVS Code launch configuration for running CAP Java Deploy main method, used for triggering tenant upgrades or schema changes in a developer environment. You can specify tenants and set required Spring profiles.\n\n```json\n{\n   \"type\": \"java\",\n   \"name\": \"MTX Update tenants\",\n   \"request\": \"launch\",\n   \"mainClass\": \"com.sap.cds.framework.spring.utils.Deploy\",\n   \"args\": \"\", // optional: specify the tenants to upgrade, defaults to all\n   \"projectName\": \"<your project>\",\n   \"vmArgs\": \"-Dspring.profiles.active=local-mtxs\" // or any other profile required for MTX\n}\n```\n",
    " Multitenancy > Development Aspects > Working with Tenants > Switching to Provider Tenant\nmultitenancy, tenant switch, RequestContextRunner, provider tenant, Java\nSwitches the RequestContext to the provider tenant ('technical tenant'), which is useful for cross-tenant operations or configuration tasks that require provider scope.\n\n```java\nruntime.requestContext().systemUserProvider().run(context -> {\n   // call technical service\n   ...\n});\n```\n",
    " Multitenancy > Development Aspects > Working with Tenants > Switching to Subscriber Tenants\nmultitenancy, tenant switch, RequestContextRunner, subscriber tenant, Java\nExecutes code under a specific subscriber tenant by creating a nested RequestContext for that tenant, commonly used in background jobs or cross-tenant tasks.\n\n```java\nruntime.requestContext().systemUser(tenant).run(context -> {\n   // call technical service\n   ...\n});\n```\n",
    " Multitenancy > Development Aspects > Working with Tenants > Enumerating Subscriber Tenants\nmultitenancy, tenant enumeration, TenantProviderService, Java\nUses TenantProviderService to enumerate all available business tenants, returning a list of TenantInfo. Useful for provider-tenant scoped overview or batch operations.\n\n```java\n@Autowired\nTenantProviderService tenantProvider;\n...\nList<TenantInfo> tenantInfo = tenantProvider.readTenants();\n```\n",
    " Security > Authentication > Custom Authentication\nsecurity, authentication, custom authentication, UserInfoProvider, Java\nImplements a custom UserInfoProvider in CAP Java to adapt user information for incoming requests (e.g. setting a custom user name based on XSUAA claims). This example provides an overlay on top of the default XSUAA-based provider.\n\n```java\n@Component\npublic class CustomUserInfoProvider implements UserInfoProvider {\n\n    private UserInfoProvider defaultProvider;\n\n    @Override\n    public UserInfo get() {\n        ModifiableUserInfo userInfo = UserInfo.create();\n        if (defaultProvider != null) {\n            UserInfo prevUserInfo = defaultProvider.get();\n            if (prevUserInfo != null) {\n                userInfo = prevUserInfo.copy();\n            }\n        }\n        if (userInfo != null) {\n           XsuaaUserInfo xsuaaUserInfo = userInfo.as(XsuaaUserInfo.class);\n           userInfo.setName(xsuaaUserInfo.getEmail() + \"/\" +\n                            xsuaaUserInfo.getOrigin()); // adapt name\n        }\n\n        return userInfo;\n    }\n\n    @Override\n    public void setPrevious(UserInfoProvider prev) {\n        this.defaultProvider = prev;\n    }\n}\n```\n",
    " Security > Authentication > Mock User Authentication with Spring Boot\nsecurity, mock user, test, Spring Boot, Java\nJunit test class using explicit mock users in Spring Boot for security tests. Demonstrates usage of @WithMockUser and verifies authorization behavior for a CAP Java service endpoint.\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class BookServiceOrdersTest {\n\tString ORDERS_URL = \"/odata/v4/BooksService/Orders\";\n\n\t@Autowired\n\tprivate MockMvc mockMvc;\n\n\t@Test\n\t@WithMockUser(username = \"Viewer-User\")\n\tpublic void testViewer() throws Exception {\n\t\tmockMvc.perform(get(ORDERS_URL)).andExpect(status().isOk());\n\t}\n\t@Test\n\tpublic void testUnauthorized() throws Exception {\n\t\tmockMvc.perform(get(ORDERS_URL)).andExpect(status().isUnauthorized());\n\t}\n}\n```\n",
    " Security > Authentication > Mock User Authentication with Spring Boot > Explicitly Defined Mock Users\nsecurity, mock user, test, configuration, yaml, Spring Boot\nYAML configuration for defining explicit mock users with roles, tenants, user attributes, additional properties (e.g., email), and enabled features. Used for local testing or Spring Boot test profiles in CAP Java.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: test\ncds:\n  security:\n    mock:\n      users:\n        - name: Viewer-User\n          password: viewer-pass\n          tenant: CrazyCars\n          roles:\n            - Viewer\n          attributes:\n            Country: [GER, FR]\n          additional:\n            email: myviewer@crazycars.com\n          features:\n            - cruise\n            - park\n\n        - name: Privileged-User\n          password: privileged-pass\n          privileged: true\n          features:\n            - \"*\"\n```\n",
    " Security > Authentication > Mock User Authentication with Spring Boot > Mock Tenants\nsecurity, mock tenant, test, configuration, yaml, Spring Boot\nYAML configuration for defining mock tenants and assigning features to them in CAP Java, used for feature toggles or custom test scenarios involving tenant-specific settings.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: test\ncds:\n  security:\n    mock:\n      users:\n        - name: Alice\n          tenant: CrazyCars\n      tenants:\n        - name: CrazyCars\n          features:\n            - cruise\n            - park\n```\n",
    " Security > Authorization > Enforcement API & Custom Handlers\nsecurity, authorization, enforcement, UserInfo, custom handler, Java\nShows two approaches for accessing the authenticated user information within event handlers in CAP Java: a) via EventContext.getUserInfo(), b) via dependency injection, enabling fine-grained checks or custom logic.\n\n```java\nEventContext context;\nUserInfo user = context.getUserInfo();\n// ...\n@Autowired\nUserInfo user;\n// ...\n```\n",
    " Security > Authorization > Enforcement API & Custom Handlers\nsecurity, authorization, privileged access, UserInfo, RequestContextRunner, Java\nDemonstrates executing service calls in a privileged mode in CAP Java. The code switches context to a privileged user so that inner service calls bypass generic authorization handlers.\n\n```java\ncdsRuntime.requestContext().privilegedUser().run(privilegedContext -> {\n\tassert privilegedContext.getUserInfo().isPrivileged();\n\t// ... Service calls in this scope pass generic authorization handler\n});\n```\n",
    " IAS Authorization via AMS  > Streamlined AMS Integration\nCLI, setup, IAS, AMS, configuration\nUse the CDS CLI to add IAS (Identity Authentication Service) and AMS (Authorization Management Service) integration to your CAP project. This sets up authentication and authorization configuration automatically.\n\n```shell\ncds add ias\ncds add ams\n```\n",
    " IAS Authorization via AMS  > Streamlined AMS Integration > Define your CDS model along with technical authorization rules\ncds modeling, authorization, restrict, aspect, entity\nDefines a CDS model with an `aspect` for a system type and an `Issues` entity using it. Enforces technical authorization with a restrict annotation, granting specific roles access to read or write issues.\n\n```cds\naspect fromSystem {\n  systemType : String enum { DEV; QS; PROD; };\n}\n\nentity Issues : fromSystem {\n  key ID: UUID;\n      description: String;\n      resolved: Boolean;\n}\n\nannotate Issues with @(restrict: [\n    { grant: ['READ'], to: 'ReviewIssues' },\n    { grant: ['READ', 'WRITE'], to: 'ManageIssues' }\n]);\n```\n",
    " IAS Authorization via AMS  > Streamlined AMS Integration > Optionally, link your CDS model to AMS attributes by `@ams` annotation\ncds modeling, AMS, attributes, annotation\nLinks the `fromSystem` aspect property (`systemType`) in the CDS model to a business attribute (`SystemType`) for AMS by using the @ams.attributes annotation.\n\n```cds\nannotate fromSystem with @ams.attributes: {\n  SystemType: (systemType)\n};\n```\n",
    " IAS Authorization via AMS  > Streamlined AMS Integration > Define AMS policies that combine roles and attribute filters at business level\nAMS, policy, business authorization, yaml\nExample AMS policy definitions using DCL (Data Control Language): shows how to assign roles based on attributes like SystemType and how to restrict a policy to a specific system type.\n\n```yaml\nSCHEMA {\n SystemType : String\n}\n\nPOLICY QualityAuditor {\n ASSIGN ROLE ReviewIssues WHERE SystemType IS NOT RESTRICTED;\n}\n\nPOLICY SupportEngineer {\n USE QualityAuditor RESTRICT SystemType = 'PROD';\n}\n```\n",
    " IAS Authorization via AMS  > Setup > This adds the following... > Runtime plugins\nJava, AMS, pom.xml, dependency\nSpecifies the Maven dependencies and AMS plugin versions required for Java-based CAP applications. Integrates AMS client and CAP AMS support libraries for role injection and policy enforcement.\n\n```xml\n<properties>\n  <sap.cloud.security.ams.version>3.3.0</sap.cloud.security.ams.version> \n</properties>\n<dependencies>\n  <dependency>  \n    <groupId>com.sap.cloud.security.ams.client</groupId>\n    <artifactId>jakarta-ams</artifactId>\n    <version>${sap.cloud.security.ams.version}</version>\n  </dependency>\n  <dependency>\n    <groupId>com.sap.cloud.security.ams.client</groupId>\n    <artifactId>cap-ams-support</artifactId>\n    <version>${sap.cloud.security.ams.version}</version>\n  </dependency>\n</dependencies>\n```\n",
    " IAS Authorization via AMS  > Setup > This adds the following... > Development plugins\nNode.js, AMS, package.json, dependency\nAdds the @sap/ams development plugin to package.json. This plugin is used to validate AMS annotations, generate policies, and facilitate deployment of DCL (AMS policies) in Node.js projects.\n\n```json\n{\n  \"devDependencies\": {\n    \"@sap/ams\": \"^3\"\n  }\n}\n```\n",
    " IAS Authorization via AMS  > Generate Policies > Role-based authorization\nrole-based authorization, cds modeling, requires, Books\nDefines that access to the `Books` entity requires the `Reader` role using the `@requires` annotation in CDS.\n\n```cds\nentity Books @(requires: 'Reader') {...}\n```\n",
    " IAS Authorization via AMS  > Generate Policies > Role-based authorization\nAMS, policy, DCL, role generation\nA generated AMS authorization policy in DCL format that assigns the 'Reader' role, corresponding to the CDS model's role requirement.\n\n```sql\nPOLICY Reader {\n    ASSIGN ROLE Reader;\n}\n```\n",
    " IAS Authorization via AMS  > Build\nbuild, maven, Java\nExecutes a Maven build for the Java CAP project, which triggers policy and schema generation for AMS in the appropriate resource folder.\n\n```shell\nmvn clean install\n```\n",
    " IAS Authorization via AMS  > Build\nproject structure, build output, AMS, DCL policies\nShows the resulting folder structure after build, with DCL policies and schema generated for AMS integration under srv/src/main/resources/ams.\n\n```txt\n└─ ams\n   ├─ cap\n   │  └─ basePolicies.dcl\n   └─ schema.dcl\n```\n",
    " IAS Authorization via AMS  > Prepare for Deployment\ndeployment, Cloud Foundry, setup, CLI\nConfigures a CAP project for Cloud Foundry deployment, adding necessary modules for database (hana), approuter, MTA, and AMS integration.\n\n```shell\ncds add hana,approuter,mta,ams\n```\n",
    " Spring Boot Integration > Integration Configuration\nSpring Boot, pom.xml, dependency, integration, CAP Java\nThis XML snippet shows how to add the 'cds-framework-spring-boot' runtime dependency in your pom.xml to activate CAP Java integration with Spring Boot. Set '${cds.services.version}' accordingly. This is required for Spring Boot based CAP Java apps.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-framework-spring-boot</artifactId>\n\t<version>${cds.services.version}</version>\n\t<scope>runtime</scope>\n</dependency>\n```\n",
    " Spring Boot Integration > Integration Configuration\nSpring Boot, pom.xml, dependency, integration, OData, CDS starter bundle, CAP Java\nThis XML snippet adds the 'cds-starter-spring-boot-odata' dependency to your pom.xml, which includes Spring Boot integration and OData V4 protocol setup for CAP Java. Recommended as an all-in-one starter for new Spring Boot-based CAP Java projects.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-starter-spring-boot-odata</artifactId>\n\t<version>${cds.services.version}</version>\n</dependency>\n```\n",
    " Spring Boot Integration > CDS Spring Beans\nSpring Boot, Spring Beans, dependency injection, CDS, beans, CAP Java\nExample showing how to inject various CAP Java SDK beans into Spring-managed classes using @Autowired or @Qualifier. Supported beans include technical services like CdsRuntime, CdsRuntimeConfigurer, ApplicationService, PersistenceService, ServiceCatalog, CdsModel, UserInfo, AuthenticationInfo, ParameterInfo, Messages, FeatureTogglesInfo, and CdsDataStore. Most are request-scoped or singleton.\n\n```java\n@Autowired\nCdsRuntime runtime;\n\n@Autowired\nCdsRuntimeConfigurer configurer;\n\n@Autowired\n@Qualifier(CatalogService_.CDS_NAME)\nprivate ApplicationService cs;\n\n@Autowired\nprivate PersistenceService ps;\n\n@Autowired\nServiceCatalog catalog;\n\n@Autowired\nCdsModel model;\n\n@Autowired\nUserInfo userInfo;\n\n@Autowired\nAuthenticationInfo authInfo;\n\n@Autowired\nParameterInfo paramInfo;\n\n@Autowired\nMessages messages;\n\n@Autowired\nFeatureTogglesInfo ftsInfo;\n\n@Autowired\nCdsDataStore ds;\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Configuration > Use `event-broker` in Node.js\ninstallation, Node.js, event-broker, npm, plugin\nInstalls the @cap-js/event-broker plugin for enabling SAP Cloud Application Event Hub messaging integration in a Node.js-based CAP project. Run this in your project root.\n\n```shell\nnpm add @cap-js/event-broker\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Configuration > Use `event-broker` in Node.js\nconfiguration, package.json, event-broker, cds.env, Node.js\nConfigures the CAP runtime in Node.js to use the SAP Cloud Application Event Hub by setting the 'kind' of messaging to 'event-broker' for the production profile in package.json. Ensures event messages are handled by the proper broker in production.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      // kind \"event-broker\" is derived from the service's technical name\n      \"[production]\": { \"kind\": \"event-broker\" }\n    }\n  }\n}\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Configuration > Use `event-hub` in Java\ninstallation, Java, event-hub, dependency, pom.xml\nAdds the cds-feature-event-hub dependency to a Java application's pom.xml. This plugin provides support for SAP Cloud Application Event Hub messaging integration in CAP Java projects.\n\n```xml\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-event-hub</artifactId>\n    <version>${latest-version}</version>\n</dependency>\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Configuration > Use `event-hub` in Java\nconfiguration, Java, application.yaml, event-hub, messaging\nSpecifies the configuration for using the SAP Cloud Application Event Hub as a messaging service within the CAP Java application's application.yaml. The kind 'event-hub' tells CAP to connect to the actual broker.\n\n```yaml\ncds:\n  messaging.services:\n  - name: \"messaging-name\"\n    kind: \"event-hub\"\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Prepare for MTA Deployment\nMTA, deployment, Cloud Foundry, mta.yaml, application module, reference\nDefines the base MTA module for the CAP application in Cloud Foundry. 'incidents-srv' is provided and exposes its URL under 'incidents-srv-api' for references in dependent resources.\n\n```yaml\nmodules:\n  - name: incidents-srv\n    provides:\n      - name: incidents-srv-api\n        properties:\n          url: ${default-url} #> needed in references below\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Prepare for MTA Deployment > Add SAP Cloud Application Event Hub Instance\nMTA, deployment, Cloud Foundry, Node.js, event-broker, resource, mta.yaml\nDefines an Event Hub instance resource for Node.js in mta.yaml. Sets a unique 'systemNamespace' and a webhook URL that receives events from SAP Cloud Application Event Hub, linking this resource to the service API.\n\n```yaml\nresources:\n  - name: incidents-event-broker\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: event-broker\n      service-plan: event-connectivity\n      config:\n        # unique identifier for this event broker instance\n        # should start with own namespace (i.e., \"foo.bar\") and may not be longer than 15 characters\n        systemNamespace: cap.incidents\n        webhookUrl: ~{incidents-srv-api/url}/-/cds/event-broker/webhook\n    requires:\n      - name: incidents-srv-api\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Prepare for MTA Deployment > Add SAP Cloud Application Event Hub Instance\nMTA, deployment, Cloud Foundry, Java, event-broker, resource, mta.yaml\nDefines an Event Hub instance resource for Java-based CAP apps in mta.yaml. Configuration sets the system namespace and points the webhook URL to the Java-specific endpoint for event reception, referencing the API.\n\n```yaml\nresources:\n  - name: incidents-event-broker\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: event-broker\n      service-plan: event-connectivity\n      config:\n        # unique identifier for this event broker instance\n        # should start with own namespace (i.e., \"foo.bar\") and may not be longer than 15 characters\n        systemNamespace: cap.incidents\n        webhookUrl: ~{incidents-srv-api/url}/messaging/v1.0/eb\n    requires:\n      - name: incidents-srv-api\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Prepare for MTA Deployment > Add Identity Authentication Service Instance\nMTA, identity, IAS, event-broker, Cloud Foundry, resource, mta.yaml\nConfigures the Identity Authentication Service (IAS) resource in the MTA for enabling secure communication with SAP Cloud Application Event Hub. It consumes the event broker, ensures creation order, and sets cross-consumption and display properties.\n\n```yaml\nresources:\n  - name: incidents-ias\n    type: org.cloudfoundry.managed-service\n    requires:\n      - name: incidents-srv-api\n    processed-after:\n      # for consumed-services (cf. below), incidents-event-broker must already exist\n      # -> ensure incidents-ias is created after incidents-event-broker\n      - incidents-event-broker\n    parameters:\n      service: identity\n      service-plan: application\n      config:\n        consumed-services:\n          - service-instance-name: incidents-event-broker\n        xsuaa-cross-consumption: true #> if token exchange from IAS token to XSUAA token is needed\n        display-name: cap.incidents #> any value, e.g., reuse MTA ID\n        home-url: ~{incidents-srv-api/url}\n```\n",
    " Using SAP Cloud Application Event Hub in Cloud Foundry > Prepare for MTA Deployment > Bind the Service Instances\nMTA, service binding, Cloud Foundry, IAS, event-broker, authentication, mta.yaml\nFinalizes service bindings for the app module in mta.yaml. Binds incidents-ias and incidents-event-broker to the application with security-sensitive parameters for X509/Gernerated credentials and X509_IAS-based authentication, enabling trusted communication.\n\n```yaml\nmodules:\n  - name: incidents-srv\n    provides:\n      - name: incidents-srv-api\n        properties:\n          url: ${default-url} \n    requires: #[!code focus:10]\n      - name: incidents-ias #[!code ++]\n        parameters: #[!code ++]\n          config: #[!code ++]\n            credential-type: X509_GENERATED #[!code ++]\n            app-identifier: cap.incidents #> any value, e.g., reuse MTA ID [!code ++]\n      - name: incidents-event-broker #[!code ++]\n        parameters: #[!code ++]\n          config: #[!code ++]\n            authentication-type: X509_IAS #[!code ++]\n```\n",
    " Building Applications > Stack Configuration > Module Dependencies\npom.xml, dependency, configuration, cds-services-bom, standard modules, application framework, protocol adapter, core runtime, plugins, starter bundles\nDefines the CAP Java BOM (bill of materials) using the cds-services-bom in the dependencyManagement section of pom.xml. This ensures all module versions are in sync in multi-module Maven projects.\n\n```xml\n<properties>\n\t<cds.services.version>2.6.0</cds.services.version>\n</properties>\n\n<dependencyManagement>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-services-bom</artifactId>\n\t\t\t<version>${cds.services.version}</version>\n\t\t\t<type>pom</type>\n\t\t\t<scope>import</scope>\n\t\t</dependency>\n\t</dependencies>\n</dependencyManagement>\n```\n",
    " Building Applications > Stack Configuration > Module Dependencies\npom.xml, dependency, cds-framework-spring-boot, cds-adapter-odata-v4, cds-services-api, cds-services-impl, Spring Boot, OData\nSpecifies Maven dependencies in pom.xml to enable a CAP Java application with Spring Boot framework, OData V4 protocol adapter, and core CAP Java runtime. Ensures the application can expose endpoints and leverage the CAP runtime.\n\n```xml\n<dependencies>\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-framework-spring-boot</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-adapter-odata-v4</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-services-api</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-services-impl</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n</dependencies>\n```\n",
    " Building Applications > Stack Configuration > Module Dependencies\npom.xml, dependency, cds-feature-mt, multitenancy, plugins\nAdds the CAP Java multitenancy feature 'cds-feature-mt' as a runtime dependency. Enabling this plugin at compile-time allows the application to be aware of multitenancy at runtime if the environment is suitable.\n\n```xml\n<dependencies>\n\t<dependency>\n\t\t<groupId>com.sap.cds</groupId>\n\t\t<artifactId>cds-feature-mt</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n</dependencies>\n```\n",
    " Building Applications > Stack Configuration > Starter Bundles\npom.xml, starter bundle, cds-starter-spring-boot, cds-adapter-odata-v4, cds-starter-cloudfoundry, Cloud Foundry, OData, Spring Boot\nDefines a Maven dependency setup for a CAP application with OData V4, Spring Boot, and support for Cloud Foundry environment. Uses starter bundles to simplify configuration for these common use cases.\n\n```xml\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-starter-spring-boot</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-adapter-odata-v4</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.sap.cds</groupId>\n\t\t\t<artifactId>cds-starter-cloudfoundry</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n</dependencies>\n```\n",
    " Building Applications > Generating Projects with Maven\nMaven, archetype, project generation, cds-services-archetype, setup, command-line\nGenerates a new CAP Java project from scratch using the cds-services-archetype with Maven. This command runs on Mac/Linux; similar commands are provided for Windows and Powershell.\n\n```shell\nmvn archetype:generate -DarchetypeArtifactId=cds-services-archetype -DarchetypeGroupId=com.sap.cds -DarchetypeVersion=RELEASE\n```\n",
    " Building Applications > Building Projects with Maven\nMaven, build, run, spring-boot:run, local development\nBuilds and runs a CAP Java application using Maven's spring-boot:run goal. This starts the local development server using configured dependencies.\n\n```shell\nmvn spring-boot:run\n```\n",
    " Building Applications > Building Projects with Maven > Using a Local cds-dk\npackage.json, cds-dk, npm, devDependency, build tool\nConfigures @sap/cds-dk as a devDependency in package.json for a CAP Java project. Starting with version 3.6.0 of the cds-services-archetype, the cds-dk version is maintained here and installed using 'npm ci' during the Maven build.\n\n```json\n{\n  \"devDependencies\" : {\n    \"@sap/cds-dk\" : \"^8.5.1\"\n  }\n}\n```\n",
    " Building Applications > Building Projects with Maven > Migrate From Goal install-cdsdk to npm ci\npom.xml, migration, cds-maven-plugin, npm ci, build, cds-dk\nConfigures the cds-maven-plugin in pom.xml to execute 'npm ci' as part of the build lifecycle, ensuring that Node.js dependencies in package.json, including @sap/cds-dk, are installed as part of the build. Used as part of the migration from the deprecated install-cdsdk goal.\n\n```xml\n<execution>\n\t<id>cds.npm-ci</id>\n\t<goals>\n\t\t<goal>npm</goal>\n\t</goals>\n\t<configuration>\n\t\t<arguments>ci</arguments>\n\t</configuration>\n</execution>\n```\n",
    " Building Applications > Building Projects with Maven > Migrate From Goal install-cdsdk to npm ci\nnpm, install, package-lock.json, dependencies, Node.js\nInstalls Node.js dependencies and generates/updates package-lock.json, required for reproducible builds using npm ci in CAP Java projects using local cds-dk setup.\n\n```shell\nnpm install\n```\n",
    " Building Applications > Building Projects with Maven > Maintaining cds-dk\nMaven, spring-boot:run, cds.install-cdsdk.force, cds-dk, update\nForcibly reinstalls @sap/cds-dk in the configured version using the install-cdsdk goal. Useful in older CAP Java projects that rely on this mechanism, to ensure the latest version is used.\n\n```shell\nmvn spring-boot:run -Dcds.install-cdsdk.force=true\n```\n",
    " Building Applications > Building Projects with Maven > Using a Global cds-dk\nMaven, profile, cdsdk-global, global cds-dk, build\nRuns the Maven build using the cdsdk-global profile, which tells the build to use a globally installed Node.js and @sap/cds-dk rather than downloading/installing them locally. Allows for faster builds if prerequisites are met.\n\n```shell\nmvn spring-boot:run -P cdsdk-global\n```\n",
    " Running Applications > Spring Boot Devtools\nSpring Boot, Devtools, Java, pom.xml, dependency, hot reload, development\nThis XML snippet shows how to add the Spring Boot Devtools dependency into the pom.xml file of the 'srv' module in a CAP Java application. Adding this enables automatic application context reloads upon file changes, which helps with faster development turnaround.\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n</dependency>\n```\n",
    " Running Applications > Local Development Support > Use `cds` Prefix Everywhere\nMaven, plugin group, cds-maven-plugin, configuration, settings.xml, local development, cds prefix\nAdd this snippet to your ~/.m2/settings.xml to register 'com.sap.cds' as a plugin group. This enables you to use the 'cds' prefix for cds-maven-plugin goals everywhere, reducing the need to type the full plugin coordinates.\n\n```xml\n<pluginGroups>\n    <pluginGroup>com.sap.cds</pluginGroup>\n</pluginGroups>\n```\n",
    " Running Applications > Local Development Support > CDS Watch\nlocal development, cds-maven-plugin, Maven, watch, automation, hot reload, command line\nRuns the 'watch' goal of the cds-maven-plugin using Maven, enabling an automated workflow for local development. It rebuilds the CAP Java application whenever changes in the CDS model are detected, streamlining the edit-build-test cycle.\n\n```shell\nmvn cds:watch\n```\n",
    " from your root directory\nwatch, cds-maven-plugin, development, hot reload, Maven, shell\nRuns the CDS Maven plugin in 'watch' mode from the project root directory, enabling hot reload during development for CAP Java projects. Automatically recompiles and restarts services on code changes.\n\n```shell\nmvn com.sap.cds:cds-maven-plugin:watch\n```\n",
    " or your srv/ folder\nwatch, maven, cds build, Spring Boot, hot reload, project setup, devtools\nRuns the 'mvn cds:watch' command from the service module folder (srv/), which builds and starts a CAP Java Spring Boot application. The watcher monitors CDS model changes and restarts the application automatically. Spring Boot Devtools support enables fast context reloads instead of full restarts for improved developer productivity.\n\n```shell\ncd srv\nmvn cds:watch\n```\n",
    " or your srv/ folder\nwatch, devtools, Spring Boot, hot reload\nExample Maven dependency for Spring Boot Devtools, which should be added to the CAP Java project's pom.xml file to enable application context hot reloads with the 'watch' goal. On Windows, this is required for the watcher to work.\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-devtools</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " CDS Auto-Build\nauto-build, cds build, Maven, IDE, automation\nExecutes the 'auto-build' goal, which continuously rebuilds the CDS model on any .cds file changes. Does not start or restart the CAP Java application, allowing control from the IDE. Can optionally touch the Spring Boot Devtools trigger file for integration with hot reload.\n\n```shell\nmvn cds:auto-build\n```\n",
    " Testing Applications > Sample Tests\nJava, samples, service implementation, event handler\nThis is a sample event handler (CatalogServiceHandler) for CAP Java applications. It provides custom business logic for handling the SubmitOrder event (updating book stock or throwing an error if not enough stock) and for discounting books with stock above a threshold in the read event. Used as a base for testing examples.\n\n```java\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\npublic class CatalogServiceHandler implements EventHandler {\n\n    private final PersistenceService db;\n\n    public CatalogServiceHandler(PersistenceService db) {\n        this.db = db;\n    }\n\n    @On\n    public void onSubmitOrder(SubmitOrderContext context) {\n        Integer quantity = context.getQuantity();\n        String bookId = context.getBook();\n\n        Optional<Books> book = db.run(Select.from(BOOKS).columns(Books_::stock).byId(bookId)).first(Books.class);\n\n        book.orElseThrow(() -> new ServiceException(ErrorStatuses.NOT_FOUND, MessageKeys.BOOK_MISSING)\n            .messageTarget(Books_.class, b -> b.ID()));\n\n        int stock = book.map(Books::getStock).get();\n\n        if (stock >= quantity) {\n            db.run(Update.entity(BOOKS).byId(bookId).data(Books.STOCK, stock -= quantity));\n            SubmitOrderContext.ReturnType result = SubmitOrderContext.ReturnType.create();\n            result.setStock(stock);\n            context.setResult(result);\n        } else {\n            throw new ServiceException(ErrorStatuses.CONFLICT, MessageKeys.ORDER_EXCEEDS_STOCK, quantity);\n        }\n    }\n\n    @After(event = CqnService.EVENT_READ)\n    public void discountBooks(Stream<Books> books) {\n        books.filter(b -> b.getTitle() != null).forEach(b -> {\n            loadStockIfNotSet(b);\n            discountBooksWithMoreThan111Stock(b);\n        });\n    }\n\n    private void discountBooksWithMoreThan111Stock(Books b) {\n        if (b.getStock() != null && b.getStock() > 111) {\n            b.setTitle(String.format(\"%s -- 11%% discount\", b.getTitle()));\n        }\n    }\n\n    private void loadStockIfNotSet(Books b) {\n        if (b.getId() != null && b.getStock() == null) {\n            b.setStock(db.run(Select.from(BOOKS).byId(b.getId()).columns(Books_::stock)).single(Books.class).getStock());\n        }\n    }\n}\n```\n",
    " Testing Applications > Event Handler Layer Testing\nJava, unit test, event handler, testing, samples\nJUnit test for the discountBooks method of the CatalogServiceHandler using Mockito for mocking dependencies. It verifies that books with high stock get their titles updated to reflect the discount, while others remain unchanged. Demonstrates unit testing of an event handler with mocked PersistenceService.\n\n```java\n@ExtendWith(MockitoExtension.class)\npublic class CatalogServiceHandlerTest {\n\n    @Mock\n    private PersistenceService db;\n\n    @Test\n    public void discountBooks() {\n        Books book1 = Books.create();\n        book1.setTitle(\"Book 1\");\n        book1.setStock(10);\n\n        Books book2 = Books.create();\n        book2.setTitle(\"Book 2\");\n        book2.setStock(200);\n\n        CatalogServiceHandler handler = new CatalogServiceHandler(db);\n        handler.discountBooks(Stream.of(book1, book2));\n\n        assertEquals(\"Book 1\", book1.getTitle(), \"Book 1 was discounted\");\n        assertEquals(\"Book 2 -- 11% discount\", book2.getTitle(), \"Book 2 was not discounted\");\n    }\n}\n```\n",
    " Testing Applications > Service Layer Testing\nJava, service layer, integration test, samples, testing\nDemonstrates a service layer integration test by running a CQN select statement through the CqnService and asserting that the title of a high-stock book has the discount applied. Uses Spring Boot and dependency injection for testing actual service logic.\n\n```java\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\npublic class CatalogServiceTest {\n\n    @Autowired\n    @Qualifier(CatalogService_.CDS_NAME)\n    private CqnService catalogService;\n\n    @Test\n    public void discountApplied() {\n        Result result = catalogService.run(Select.from(Books_.class).byId(\"51061ce3-ddde-4d70-a2dc-6314afbcc73e\"));\n\n        // book with title \"The Raven\" and a stock quantity of > 111\n        Books book = result.single(Books.class);\n\n        assertEquals(\"The Raven -- 11% discount\", book.getTitle(), \"Book was not discounted\");\n    }\n}\n```\n",
    " Testing Applications > Service Layer Testing\nJava, service layer, samples, testing, event handler\nTest for service event handler logic using the emit method. This test simulates a SubmitOrder event, verifies stock reduction, and asserts the result using a known dataset/book. Good for coverage of custom event logic.\n\n```java\n@SpringBootTest\npublic class CatalogServiceTest {\n\n    @Autowired\n    @Qualifier(CatalogService_.CDS_NAME)\n    private CqnService catalogService;\n\n    @Test\n    public void submitOrder() {\n        SubmitOrderContext context = SubmitOrderContext.create();\n\n        // ID of a book known to have a stock quantity of 22\n        context.setBook(\"4a519e61-3c3a-4bd9-ab12-d7e0c5329933\");\n        context.setQuantity(2);\n        catalogService.emit(context);\n\n        assertEquals(22 - context.getQuantity(), context.getResult().getStock());\n    }\n}\n```\n",
    " Testing Applications > Service Layer Testing\nJava, samples, service layer, testing, exception\nA test that verifies service logic throws a ServiceException if the ordered quantity exceeds the available stock. Uses Spring's testing annotations and context creation. Includes assertThrows validation for exception paths.\n\n```java\n@SpringBootTest\npublic class CatalogServiceTest {\n\n    @Autowired\n    @Qualifier(CatalogService_.CDS_NAME)\n    private CqnService catalogService;\n\n    @Test\n    public void submitOrderExceedingStock() {\n        SubmitOrderContext context = SubmitOrderContext.create();\n\n        // ID of a book known to have a stock quantity of 22\n        context.setBook(\"4a519e61-3c3a-4bd9-ab12-d7e0c5329933\");\n        context.setQuantity(30);\n        catalogService.emit(context);\n\n        assertThrows(ServiceException.class, () -> catalogService.emit(context), context.getQuantity() + \" exceeds stock for book\");\n    }\n}\n```\n",
    " Testing Applications > Integration Testing\nJava, integration test, samples, OData, MockMvc, testing\nIntegration test using Spring Boot and MockMvc to simulate HTTP (OData) requests against a CAP Java application. Verifies the application of book discounts in the service's OData endpoint responses under different conditions, achieving end-to-end coverage through the protocol stack.\n\n```java\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class CatalogServiceITest {\n\n    private static final String booksURI = \"/api/browse/Books\";\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void discountApplied() throws Exception {\n        mockMvc.perform(get(booksURI + \"?$filter=stock gt 200&top=1\"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.value[0].title\").value(containsString(\"11% discount\")));\n    }\n\n    @Test\n    public void discountNotApplied() throws Exception {\n        mockMvc.perform(get(booksURI + \"?$filter=stock lt 100&top=1\"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath(\"$.value[0].title\").value(not(containsString(\"11% discount\"))));\n    }\n}\n```\n",
    " Configuring Applications > Profiles and Properties > Production Profile\nconfiguration, Spring Boot, profile, production, property, deployment, cds.environment.production.profile\nSpecifies a custom production profile to use for CAP Java production deployments. This should be a Spring profile configured elsewhere in your deployment setup (e.g., in deployment descriptors like mta.yaml or Helm charts). By default, the profile 'cloud' is used, and you can override it for your specific production scenario.\n\n```yaml\ncds.environment.production.profile: my-production-profile\n```\n",
    " Configuring Applications > Profiles and Properties > Production Profile\nindex page, production, cds.index-page.enabled, profile, disable\nDisables the index page when running your CAP Java application in production. This property is set to false by default when using the production profile, but you can override it explicitly. Disabling the index page is recommended for security reasons.\n\n```yaml\ncds.index-page.enabled: false\n```\n",
    " Configuring Applications > Profiles and Properties > Production Profile\nmock users, production, cds.security.mock.enabled, profile, disable\nStrictly disables mock users for your CAP Java application in a production environment. This is the default in the production profile. You can override it in your application's configuration. Disabling mock users helps enforce real authentication and security.\n\n```yaml\ncds.security.mock.enabled: false\n```\n",
    " Configuring Applications > Using SAP Java Buildpack\ndeployment, Java Buildpack, SAP BTP, Cloud Foundry, mta.yaml, Java 21, SapMachine JRE, buildpack\nConfigures your CAP Java application's mta.yaml to use SAP Java Buildpack for deployment on SAP BTP Cloud Foundry. This sets SapMachine JRE version 21+ using the sap_java_buildpack_jakarta buildpack. Place these lines under your Java module definition to ensure correct runtime settings in the cloud.\n\n```yaml\nparameters:\n  buildpack: sap_java_buildpack_jakarta\nproperties:\n  JBP_CONFIG_COMPONENTS: \"jres: ['com.sap.xs.java.buildpack.jre.SAPMachineJRE']\"\n  JBP_CONFIG_SAP_MACHINE_JRE: '{ version: 21.+ }'\n```\n",
    " CDS Properties\nconfiguration, application.yaml, Spring, CAP Java\nExample of how to specify CAP Java properties in a project's application.yaml file. CAP Java uses the YAML file to define configuration properties, which control aspects of the CAP Java runtime.\n\n```yaml\ncds:\n  some-property: some-value\n  # Example showing how to set a CAP Java property in YAML\n```\n",
    " CDS Properties\nconfiguration, application.properties, Spring, CAP Java\nExample of how to define a CAP Java configuration property in a Java .properties file. Use the dot-notation for hierarchy in property files.\n\n```properties\ncds.some-property=some-value\n# Example showing how to set a CAP Java property in a .properties file\n```\n",
    " CDS Properties\nconfiguration, indexed property, YAML, Spring, CAP Java\nDemonstrates how to define a list of datasource properties in CAP Java using YAML list structures, which is more idiomatic in YAML than using indexed keys.\n\n```yaml\ncds:\n  datasources:\n    - name: 'db1'\n      url: 'jdbc:h2:mem:test1'\n    - name: 'db2'\n      url: 'jdbc:h2:mem:test2'\n```\n",
    " CDS Properties\nconfiguration, indexed property, properties, Spring, CAP Java\nIllustrates how to define indexed property arrays in Java .properties files for CAP Java, replacing <index> with actual numbers as described in the tip.\n\n```properties\ncds.datasources[0].name=db1\ncds.datasources[0].url=jdbc:h2:mem:test1\ncds.datasources[1].name=db2\ncds.datasources[1].url=jdbc:h2:mem:test2\n```\n",
    " CDS Properties\nconfiguration, map property, YAML, Spring, CAP Java\nShows how to define a map structure in a CAP Java configuration YAML file, using YAML syntax for key-value pairs rather than property file syntax.\n\n```yaml\ncds:\n  myMap:\n    key1: value1\n    key2: value2\n```\n",
    " Optimizing Applications > Profiling > Remote JMX-Based Tools\nprofiling, diagnostics, JVM, Spring Boot, JMX, configuration, application.properties\nThis property enables JMX support in a Spring Boot application, allowing management and monitoring via Java Management Extensions (JMX). It is typically set in the application's configuration file (e.g., application.properties or application.yaml) when you want to allow JMX clients to introspect or control aspects of your running service.\n\n```properties\nspring.jmx.enabled: true\n```\n",
    " Optimizing Applications > Profiling > Remote JMX-Based Tools\nprofiling, diagnostics, JVM, JMX, remote access, JVM parameters\nThese JVM options enable and configure remote JMX access on a specific port, without authentication or SSL. This setup is suitable for development or trusted operator-only environments (e.g. via SSH tunnel), and should not be exposed to the public due to security risks.\n\n```shell\n-Djava.rmi.server.hostname=localhost\n-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=<port>\n-Dcom.sun.management.jmxremote.rmi.port=<port>\n-Dcom.sun.management.jmxremote.authenticate=false\n-Dcom.sun.management.jmxremote.ssl=false\n```\n",
    " Optimizing Applications > Profiling > Remote JMX-Based Tools\nprofiling, ssh, cf CLI, secure tunneling, remote diagnostics\nThis Cloud Foundry CLI command creates a secure SSH tunnel from your local machine to a remote application container, forwarding a local port to the remote JMX port. This allows you to safely connect JMX clients to JVMs running in the cloud without exposing public endpoints.\n\n```shell\ncf ssh -N -T -L <local-port>:localhost:<port> <app-name>\n```\n",
    " Optimizing Applications > GraalVM Native Image Support <Beta />\nnative image, GraalVM, Spring Boot, service bindings, configuration, native-build-env.json\nThis is an example native-build-env.json file. It supplies metadata for GraalVM Native Image build about required SAP HANA and XSUAA service bindings. Such metadata is required at build time for native image compatibility (CAP Java and dynamic Spring Boot bean/service definitions).\n\n```json\n{\n    \"hana\": [ { \"name\": \"<hana-binding-name>\" } ],\n    \"xsuaa\": [ { \"name\": \"<xsuaa-binding-name>\" } ]\n}\n```\n",
    " Optimizing Applications > GraalVM Native Image Support <Beta />\nnative image, GraalVM, Spring Boot, Maven, profile, pom.xml\nThis Maven profile snippet configures the Spring Boot Maven Plugin to build a native image using GraalVM, with custom JVM arguments to provide a path to the native-build-env.json file and to set the active Spring profile. This is crucial for ensuring all required service bindings and profiles are available at native build time.\n\n```xml\n<profile>\n    <id>native</id>\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>process-aot</id>\n                            <configuration>\n                                <profiles>cloud</profiles>\n                                <jvmArguments>-Dcds.environment.local.defaultEnvPath=../native-build-env.json</jvmArguments>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n</profile>\n```\n",
    " Optimizing Applications > GraalVM Native Image Support <Beta />\nnative image, GraalVM, Spring Boot, Maven, Docker\nThis command builds a Docker image for your Spring Boot application as a GraalVM native executable using the defined 'native' Maven profile. It leverages Cloud Native Buildpacks for optimized containerization.\n\n```shell\nmvn spring-boot:build-image -Pnative\n```\n",
    " Optimizing Applications > GraalVM Native Image Support <Beta />\nnative image, GraalVM, Docker, runtime, execution\nThis Docker command runs the previously built native image Docker container, exposing port 8080. The image tag <srv-project-name>:<version> refers to the CAP Java native executable container.\n\n```shell\ndocker run --rm -p 8080:8080 <srv-project-name>:<version>\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Use `enterprise-messaging`\nenterprise-messaging, cds.env, SAP Event Mesh, configuration, production, package.json\nConfigure CAP to use SAP Event Mesh as the messaging service in production. Add this block to your package.json to set the kind to 'enterprise-messaging' for the 'production' profile.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"messaging\": {\n        \"[production]\": { \"kind\": \"enterprise-messaging\" }\n      }\n    }\n  }\n}\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Optional: Add `namespace` Prefixing Rules\nSAP Event Mesh, namespace, prefix, configuration, package.json\nConfigure CAP to automatically prefix all published and subscribed event names with the SAP Event Mesh service instance's namespace. Add this to your package.json to enforce naming conventions as recommended by SAP.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"messaging\": {\n        \"publishPrefix\": \"$namespace/\",\n        \"subscribePrefix\": \"$namespace/\"\n      }\n    }\n  }\n}\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Run Tests in `hybrid` Setup\nhybrid, enterprise-messaging-shared, cds.env, configuration, package.json, local testing\nConfigure CAP to use the 'enterprise-messaging-shared' variant for hybrid profile testing. Suitable for local development while connecting to a cloud Event Mesh instance in a single-tenant setup.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"messaging\": {\n        \"[hybrid]\": { \"kind\": \"enterprise-messaging-shared\" }\n      }\n    }\n  }\n}\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Run Tests in `hybrid` Setup\ndependencies, npm, SAP Event Mesh, hybrid, local testing\nInstall the AMQP library required for hybrid testing with SAP Event Mesh. Run this command to add the necessary dependency for local test setups utilizing the 'enterprise-messaging-shared' kind.\n\n```shell\nnpm add @sap/xb-msg-amqp-v100\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Run Tests in `hybrid` Setup\nservice binding, Event Mesh, cds bind, hybrid, local testing\nBind CAP services to an Event Mesh instance using a service key in a hybrid test setup. Replace <instance> and <service-key> with the appropriate names for your SAP Event Mesh instance and its service key.\n\n```shell\ncds bind -2 <instance>:<service-key>\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Run Tests in `hybrid` Setup\nrun server, cds watch, hybrid, profiles, local testing\nStart the 'reviews' and 'bookstore' CAP services in watch mode using the hybrid profile for local testing with SAP Event Mesh.\n\n```shell\ncds watch reviews --profile hybrid\ncds watch bookstore --profile hybrid\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Optional: Configure Queue Names\nqueue, configuration, queue name, SAP Event Mesh, package.json\nExplicitly configure the queue name for SAP Event Mesh messaging in CAP. Set the desired queue name, including the namespace, in your package.json if you need to manage queues yourself.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"messaging\": {\n        \"queue\": { \"name\": \"$namespace/my/own/queue\" }\n      }\n    }\n  }\n}\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Deploy to the Cloud (with MTA) > 1. Specify Binding to SAP Event Mesh Instance\ndeployment, MTA, Cloud Foundry, SAP Event Mesh, binding, yaml\nExample MTA deployment configuration snippet to bind a CAP application module to an SAP Event Mesh service instance. Update <Event Mesh Service Instance - Name> and <Event Mesh Service Instance - Plan> accordingly.\n\n```yaml\nmodules:\n  - name: bookstore-srv\n    requires:\n      - name: <Event Mesh Service Instance - Name>\n\nresources:\n  # SAP Event Mesh\n  - name: <Event Mesh Service Instance - Name>\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: enterprise-messaging\n      service-plan: <Event Mesh Service Instance - Plan>\n```\n",
    " Using SAP Event Mesh in Cloud Foundry > Deploy to the Cloud (with MTA) > 2. Optional: Auto-Create SAP Event Mesh Instances\ndeployment, MTA, Cloud Foundry, SAP Event Mesh, service descriptor, yaml\nExtend the MTA deployment configuration to automatically create an SAP Event Mesh instance using a service descriptor JSON file. Reference the path to your descriptor in the 'parameters' section.\n\n```yaml\nresources:\n  # SAP Event Mesh as above...\n    parameters:\n      path: ./<Event Mesh Service Descriptor JSON file>\n```\n",
    " Observability > Logging > Logging Façade > Logger API\nlogging, Java, SLF4J, Logger API, logging-facade\nThis Java snippet demonstrates how to use the SLF4J logging façade in a CAP service handler. Logger instances are retrieved via LoggerFactory and used for structured log output at different log levels. It also highlights usage within an '@After' handler for the READ event on Orders.\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nLogger logger = LoggerFactory.getLogger(\"my.loggers.order.consolidation\");\n\n@After(event = CqnService.EVENT_READ)\npublic void readAuthors(List<Orders> orders) {\n\torders.forEach(order -> {\n\t\tlogger.debug(\"Consolidating order {}\", order);\n\t\tconsolidate(order);\n\t});\n\tlogger.info(\"Consolidated {} orders\", orders.size());\n}\n```\n",
    " Set new default level\nlogging, log level, configuration, application.properties\nThis snippet sets the default log level for all loggers to WARN in a Spring Boot application's application.properties file. This suppresses INFO and DEBUG logs, only showing WARN, ERROR, and FATAL logs. Use this configuration to reduce log verbosity in production environments.\n\n```properties\nlogging.level.root: WARN\n```\n",
    " Adjust custom logger\nlogging, custom logger, order, configuration, application.properties\nConfigures the log level for a specific custom logger (my.loggers.order.Consolidation) to INFO in the application's logging configuration. This line would typically be placed in application.properties when using Spring Boot or a similar Java framework.\n\n```properties\nlogging.level.my.loggers.order.Consolidation: INFO\n```\n",
    "Turn off all loggers matching org.springframework.*\nlogging, configuration, properties, Spring Boot\nDisables all Spring loggers under the org.springframework.* namespace using the application.properties configuration in a Spring Boot application.\n\n```properties\nlogging.level.org.springframework: OFF\n```\n",
    " At Runtime with Restart\nlogging, environment variable, Spring Boot, runtime, overrule\nSets the logger level for package my.loggers.order to DEBUG using an environment variable. Must restart the application for change to take effect. Note that Spring normalizes the environment variable name to match the package.\n\n```shell\nLOGGING_LEVEL_MY_LOGGERS_ORDER=DEBUG\n```\n",
    " At Runtime with Restart\nlogging, environment variable, SAP BTP, Cloud Foundry, runtime\nHow to set the logging level for a custom logger on SAP BTP, Cloud Foundry using cf CLI. After setting, restart is needed. Note: config endures restart but may not persist across redeployments.\n\n```shell\ncf set-env <app name> LOGGING_LEVEL_MY_LOGGERS_ORDER DEBUG\ncf restart <app name>\n```\n",
    " retrieve state of all loggers:\nlogging, logger usage, diagnostics, logger API, monitoring, health check, logs, Spring Boot, CAP Java SDK, API\nThis shell command uses curl to retrieve the state of all configured loggers from a running CAP Java application that exposes Spring Boot's actuator endpoints. The response contains details such as logger names and their current log levels, useful for diagnostics and runtime log level management.\n\n```shell\ncurl https://<app-url>/actuator/loggers\n```\n",
    "retrieve state of single logger\nlogger usage, devtools, logging, diagnostics, application, health check\nThis curl command queries the state of a single logger (my.loggers.oder.consolidation) via the Spring Boot Actuator endpoint. The response will include the logger's configured and effective logging levels. Useful for runtime diagnostics and on-the-fly troubleshooting in CAP Java applications using Spring Boot.\n\n```shell\ncurl https://<app-url>/actuator/loggers/my.loggers.oder.consolidation\n```\n",
    " Change logging level\nCLI, log level, Spring Boot Actuator, logging\nThis shell command uses curl to send a POST request to a Spring Boot Actuator endpoint, changing the log level of a specific logger to DEBUG at runtime. Replace <app-url> and logger name as appropriate for your setup.\n\n```shell\ncurl -X POST -H 'Content-Type: application/json' -d '{\"configuredLevel\": \"DEBUG\"}' \\\n  https://<app-url>/actuator/loggers/my.loggers.oder.consolidation\n```\n",
    " Logging Service\nlogging, logback, SAP Cloud Logging, dependency, SAP BTP\nAdd this Maven dependency to enable cf-java-logging-support for logback, preparing CAP Java logs for SAP Cloud Logging or SAP Application Logging service integration in SAP BTP Cloud Foundry.\n\n```xml\n<dependency>\n\t<groupId>com.sap.hcp.cf.logging</groupId>\n\t<artifactId>cf-java-logging-support-logback</artifactId>\n\t<version>${logging.support.version}</version>\n</dependency>\n```\n",
    " Logging Service\nlogging, logback, Spring profile, cloud profile\nSample logback-spring.xml configuration to use a custom logging encoder in profile 'cloud' (e.g., for SAP BTP cloud environments), and fall back to standard logback output for all other profiles during local development.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE xml>\n<configuration debug=\"false\" scan=\"false\">\n\t<springProfile name=\"cloud\">\n\t\t\n\t\t...\n\t</springProfile>\n\t<springProfile name=\"!cloud\">\n\t\t<include resource=\"org/springframework/boot/logging/logback/base.xml\"/>\n\t</springProfile>\n</configuration>\n```\n",
    " JDBC Tracing in SAP Hana > Using datasource properties\nJDBC, SAP HANA, datasource properties, tracing, application.yaml\nConfiguration snippet for application.yaml to enable JDBC tracing with the SAP HANA JDBC driver, specifying trace file location and trace options via datasource properties. Useful for CAP Java apps needing JDBC debug logs.\n\n```yaml\ncds:\n  dataSource:\n    service-manager: # name of service binding\n      hikari:\n        data-source-properties:\n          traceFile: \"/home/user/jdbctraces/trace_.log\" # use a path that is write accessible\n          traceOptions: \"CONNECTIONS,API,PACKET\"\n```\n",
    " JDBC Tracing in SAP Hana > Using datasource properties\nJDBC, environment variable, SAP HANA, tracing\nEnvironment variable to overwrite the traceFile path for JDBC tracing in the SAP HANA JDBC driver, matching application.yaml configuration. SERVICE_MANAGER is the name of your service binding.\n\n```yaml\nCDS_DATASOURCE_SERVICE_MANAGER_HIKARI_DATA_SOURCE_PROPERTIES_TRACEFILE: \"/home/cnb/jdbctraces/sm/trace_.log\"\n```\n",
    " JDBC Tracing in SAP Hana > Using datasource properties\nJDBC, environment variable, SAP HANA, tracing\nEnvironment variable to overwrite the traceOptions for JDBC tracing in the SAP HANA JDBC driver, allowing dynamic trace configuration without redeploying.\n\n```yaml\nCDS_DATASOURCE_SERVICE_MANAGER_HIKARI_DATA_SOURCE_PROPERTIES_TRACEOPTIONS: \"DISTRIBUTIONS\"\n```\n",
    " JDBC Tracing in SAP Hana > Using the command line > On Kyma\nJDBC, SAP HANA, command line, kubectl, Linux\nCommands to access a bash shell in a running Kyma pod, so you can perform JDBC tracing directly inside the container (e.g., set trace options or retrieve trace files).\n\n```shell\nkubectl get pods\nkubectl exec -it pod/<POD_NAME> -- bash\n```\n",
    " JDBC Tracing in SAP Hana > Using the command line > On Kyma\nJDBC, SAP HANA, command line, driver, Java\nPreparation and usage for running the SAP HANA JDBC driver in tracing mode inside a container with the paths for java executable and ngdbc.jar. Replace <VERSION> and <option> according to the JDBC tracing documentation.\n\n```shell\nexport JAVA_HOME=/layers/paketo-buildpacks_sap-machine/jre/bin/\nexport JDBC_DRIVER_PATH=/workspace/BOOT-INF/lib\n$JAVA_HOME/java -jar $JDBC_DRIVER_PATH/ngdbc-<VERSION>.jar <option>\n```\n",
    " JDBC Tracing in SAP Hana > Using the command line > On Kyma\nJDBC, SAP HANA, tracing, command line\nSet the trace filename for SAP HANA JDBC driver tracing using the driver’s command line interface. Ensures the trace is saved to a writable location inside the container.\n\n```shell\n$JAVA_HOME/java -jar $JDBC_DRIVER_PATH/ngdbc-<VERSION>.jar TRACE FILENAME ~/tmp/traces/jdbctrace\n```\n",
    " Open Telemetry > Configure Java Agent and Extension Library\nOpenTelemetry, Java Agent, cloud-logging, Dynatrace, MTA, deployment\nMTA module configuration to enable Open Telemetry Java Agent and its SAP agent extension for Cloud Logging or Dynatrace in a CAP Java app using SAP Java Buildpack. Place this under your application module in mta.yaml.\n\n```yaml\n- name: <srv-module>\n  # ...\n  properties:\n    # ...\n    JBP_CONFIG_JAVA_OPTS:\n      from_environment: false\n      java_opts: >\n        -javaagent:META-INF/.sap_java_buildpack/otel_agent/opentelemetry-javaagent.jar\n        -Dotel.javaagent.extensions=META-INF/.sap_java_buildpack/otel_agent_extension/otel-agent-ext-java.jar\n```\n",
    " Open Telemetry > Configuration of Cloud Logging Service\nOpenTelemetry, cloud-logging, MTA, deployment, environment variables\nAdd these environment variables to your MTA module declaration to configure OpenTelemetry agent for exporting metrics and traces to SAP BTP Cloud Logging (CLS).\n\n```yaml\n- name: <srv-module>\n  # ...\n  properties:\n    # ...\n    OTEL_METRICS_EXPORTER: cloud-logging\n    OTEL_TRACES_EXPORTER: cloud-logging\n    OTEL_LOGS_EXPORTER: none\n```\n",
    " Open Telemetry > Configuration of Dynatrace\nOpenTelemetry, Dynatrace, MTA, deployment, environment variables\nMTA module configuration for exporting metrics to Dynatrace using OpenTelemetry, but keeping traces and logs from OpenTelemetry disabled (handled by Dynatrace OneAgent).\n\n```yaml\n- name: <srv-module>\n  # ...\n  properties:\n    # ...\n    OTEL_METRICS_EXPORTER: dynatrace\n    OTEL_TRACES_EXPORTER: none\n    OTEL_LOGS_EXPORTER: none\n```\n",
    " Open Telemetry > Custom Instrumentation\nOpenTelemetry, annotation-based tracing, Java, pom.xml, dependency\nAdd this Maven dependency to enable annotation-based spans with @WithSpan using OpenTelemetry instrumentation annotations in your CAP Java application.\n\n```xml\n<dependency>\n   <groupId>io.opentelemetry.instrumentation</groupId>\n   <artifactId>opentelemetry-instrumentation-annotations</artifactId>\n   <version>2.3.0</version>\n</dependency>\n```\n",
    " Open Telemetry > Custom Instrumentation\nOpenTelemetry, annotation-based tracing, Java, event handler, spans\nJava example using the @WithSpan annotation to automatically create a span for an event handler method in CAP Java, using OpenTelemetry's annotation-based tracing.\n\n```java\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\nclass CatalogServiceHandler implements EventHandler {\n\n   @Before(entity = Books_.CDS_NAME)\n   @WithSpan\n   public void beforeAddReview(AddReviewContext context) {\n      // ...\n   }\n}\n```\n",
    " Open Telemetry > Custom Instrumentation\nOpenTelemetry, manual tracing, Java, API, spans\nJava example for manual span creation with the OpenTelemetry API in a CAP Java @After event handler, including usage of attributes and error tracking for span enrichment.\n\n```java\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\nclass CatalogServiceHandler implements EventHandler {\n  Tracer tracer = GlobalOpenTelemetry.getTracerProvider()\n    .tracerBuilder(\"RatingCalculator\").build();\n\n  @After(entity = Books_.CDS_NAME)\n  public void afterAddReview(AddReviewContext context) {\n      Span childSpan = tracer.spanBuilder(\"setBookRating\").startSpan();\n      childSpan.setAttribute(\"book.title\", context.getResult().getTitle());\n      childSpan.setAttribute(\"book.id\", context.getResult().getBookId());\n      childSpan.setAttribute(\"book.rating\", context.getResult().getRating());\n\n      try(Scope scope = childSpan.makeCurrent()) {\n          ratingCalculator.setBookRating(context.getResult().getBookId());\n      } catch (Throwable t) {\n          childSpan.recordException(t);\n          throw t;\n      } finally {\n          childSpan.end();\n      }\n  }\n}\n```\n",
    " Open Telemetry > Custom Instrumentation\nOpenTelemetry, metrics, Java, API, counters\nJava example for creating and incrementing a custom OpenTelemetry metric (LongCounter) inside an event handler, counting book reviews per book ID in CAP Java.\n\n```java\n@Component\n@ServiceName(CatalogService_.CDS_NAME)\nclass CatalogServiceHandler implements EventHandler {\n   Meter meter = GlobalOpenTelemetry.getMeterProvider().meterBuilder(\"RatingCalculator\").build();\n\n   @After(entity = Books_.CDS_NAME)\n   public void afterAddReview(AddReviewContext context) {\n      ratingCalculator.setBookRating(context.getResult().getBookId());\n\n      LongCounter counter = meter.counterBuilder(\"reviewCounter\")\n        .setDescription(\"Counts the number of reviews created per book\")\n        .build();\n      counter.add(1, Attributes.of(AttributeKey.stringKey(\"bookId\"),\n        context.getResult().getBookId()));\n   }\n}\n```\n",
    " Spring Boot Actuators\nSpring Boot, Actuator, dependency, operational metrics, pom.xml\nMaven dependency for adding Spring Boot Actuator support, enabling operational metrics endpoints such as /actuator/health and /actuator/metrics in your project.\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n",
    " Spring Boot Actuators\nSpring Boot, Actuator, configuration, disable actuator\nYAML property to disable the Flyway actuator endpoint, demonstrating fine-grained control over which Spring Boot Actuators are active in your application.\n\n```yaml\nmanagement.endpoint.flyway.enabled: false\n```\n",
    " Spring Boot Actuators > Custom Actuators\nActuator, CDS Actuator, custom actuator, Java, monitoring\nJava code sample demonstrating creation of a custom Spring Boot actuator endpoint that exposes application-specific info (e.g., version string) at /actuator/app.\n\n```java\n@Component\n@ConditionalOnClass(Endpoint.class)\n@Endpoint(id = \"app\", enableByDefault = true)\npublic class AppActuator {\n\t@ReadOperation\n\tpublic Map<String, Object> info() {\n\t\tMap<String, Object> info = new LinkedHashMap<>();\n\t\tinfo.put(\"Version\", \"1.0.0\");\n\t\treturn info;\n\t}\n}\n```\n",
    " Availability > Spring Boot Health Checks\nSpring Boot, Actuator, health check, dependency, pom.xml\nMaven dependency to add health checks and other Actuator endpoints for application health monitoring in CAP Java or Spring Boot apps.\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n",
    " Availability > Spring Boot Health Checks\nSpring Boot, Actuator, health check, application.yaml, minimal exposure\nSample application.yaml configuration exposing only /actuator/health for public health checks in a CAP Java app, with only ping and db indicators enabled for security reasons.\n\n```yaml\nmanagement:\n  endpoint:\n    health:\n      show-components: always # shows individual indicators\n  endpoints:\n    web:\n      exposure:\n        include: health # only expose /health as web endpoint\n  health:\n     defaults.enabled: false # turn off all indicators by default\n     ping.enabled: true\n     db.enabled: true\n```\n",
    " Availability > Spring Boot Health Checks\nSpring Boot, Actuator, health check, modelProvider, MTX, application.yaml\nYAML configuration to enable the ModelProvider health indicator, useful for multitenancy setups with MTX sidecar in CAP Java. Requires @sap/cds version 7.8.0+.\n\n```yaml\nmanagement:\n  health:\n    modelProvider.enabled: true\n```\n",
    " Availability > Custom Health Indicators\nSpring Boot, Actuator, health check, custom health indicator, Java\nJava sample for implementing a custom HealthIndicator named 'crypto', which checks availability of a CryptoService and contributes to the aggregated health endpoint.\n\n```java\n@Component(\"crypto\")\n@ConditionalOnEnabledHealthIndicator(\"crypto\")\npublic class CryptoHealthIndicator implements HealthIndicator {\n\n    @Autowired\n    CryptoService cryptoService;\n\n    @Override\n    public Health health() {\n        Health.Builder status = cryptoService.isAvailalbe() ?\n              Health.up() : Health.down();\n        return status.build();\n    }\n}\n```\n",
    " Developer Dashboard\ninstallation, maven, cds-feature-dev-dashboard, dependency\nAdd the 'cds-feature-dev-dashboard' feature as a Maven dependency in your pom.xml to use the CAP Developer Dashboard in your Java project.\n\n```xml\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-dev-dashboard</artifactId>\n</dependency>\n```\n",
    " Developer Dashboard > Local Setup\nlocal setup, mock user, role assignment, yaml, application.yaml, cds.Developer\nConfigure mock users with the 'cds.Developer' role in 'application.yaml' to allow local developer access to the dashboard.\n\n```yaml\ncds:\n  security:\n    mock:\n      users:\n        - name: myUser\n          password: myPass\n          roles:\n            - cds.Developer\n```\n",
    " Developer Dashboard > Cloud Setup\ncloud setup, mta.yaml, production profile, BTP, Cloud Foundry\nIn 'mta.yaml', deactivate the production profile for running the dashboard in a cloud development scenario (e.g. BTP/Cloud Foundry).\n\n```yaml\nmodules:\n  - name: my-cap-app-srv\n    [...]\n    properties:\n      CDS_ENVIRONMENT_PRODUCTION_ENABLED: false\n```\n",
    " Developer Dashboard > Cloud Setup\ncloud setup, xs-security.json, role assignment, cds.Developer\nAdd the 'cds.Developer' scope and a corresponding role template in 'xs-security.json' for dashboard access in cloud scenarios.\n\n```json\n{\n\t\"xsappname\": \"dashboard-test\",\n\t[...]\n\t\"scopes\": [\n\t\t{\n\t\t\t\"name\": \"$XSAPPNAME.cds.Developer\",\n\t\t\t\"description\": \"CAP Developer\"\n\t\t},\n    [...]\n\t],\n \"attributes\": [\n\t\t{\n\t\t\t[...]\n\t\t}\n\t],\n\t\"role-templates\": [\n\t\t{\n\t\t\t\"name\": \"capDeveloper\",\n\t\t\t\"description\": \"generated\",\n\t\t\t\"scope-references\": [\n\t\t\t\t\"$XSAPPNAME.cds.Developer\"\n\t\t\t]\n\t\t},\n    [...]\n\t]\n}\n```\n",
    " Developer Dashboard > Cloud Setup\ncloud setup, xs-app.json, approuter, websockets, route configuration\nConfigure your 'xs-app.json' to enable websockets and declare dashboard (and API) routes with authentication for Approuter in a BTP Cloud Foundry scenario.\n\n```json\n{\n\t...\n\t\"authenticationMethod\": \"route\",\n\t\"websockets\": {\n\t\t\"enabled\": true\n\t},\n\t\"routes\": [\n\t\t{\n\t\t\t\"source\": \"^/dashboard\",\n\t\t\t\"authenticationType\": \"xsuaa\",\n\t\t\t\"destination\": \"backend\"\n\t\t},\n\t\t{\n\t\t\t\"source\": \"^/dashboard/(.*)\",\n\t\t\t\"authenticationType\": \"xsuaa\",\n\t\t\t\"destination\": \"backend\"\n\t\t},\n\t\t{\n\t\t\t\"source\": \"^/dashboard_api/(.*)\",\n\t\t\t\"authenticationType\": \"xsuaa\",\n\t\t\t\"destination\": \"backend\"\n\t\t}, \n    [...]\n\t]\n}\n```\n",
    " Developer Dashboard > Disable Authorization\ndisable authorization, dashboard, application.yaml, mta.yaml, direct access\nIn 'application.yaml', disable dashboard authorization checks to allow direct unauthenticated access for local development or testing.\n\n```yaml\ncds:\n  dashboard:\n    authorization:\n      enabled: false\n```\n",
    " Developer Dashboard > Disable Authorization\ndisable authorization, dashboard, mta.yaml, properties\nIn 'mta.yaml', set 'CDS_DASHBOARD_AUTHORIZATION_ENABLED: false' to disable the CAP Developer Dashboard's authorization mechanism.\n\n```yaml\nmodules:\n  - name: my-cap-app-srv\n    [...]\n    properties:\n      CDS_DASHBOARD_AUTHORIZATION_ENABLED: false\n```\n",
    " Developer Dashboard > Disable Authorization\ndisable authorization, Java, Spring Security, WebSecurity, dashboard\nSpring Security configuration class to disable authentication and CSRF protection specifically for the dashboard endpoints, permitting all requests. Use in Java projects when direct dashboard access is needed during development.\n\n```java\nimport static org.springframework.security.web.util.matcher.AntPathRequestMatcher.antMatcher;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@Order(1)\npublic class WebSecurity {\n\n\t@Bean\n\tpublic SecurityFilterChain appFilterChain(HttpSecurity http) throws Exception {\n\n\t\treturn http\n\t\t\t\t.securityMatchers(m -> m.requestMatchers(antMatcher(\"/dashboard/**\"), antMatcher(\"/dashboard_api/**\")))\n\t\t\t\t.authorizeHttpRequests(auth -> auth.anyRequest().permitAll())\n\t\t\t\t.csrf(c-> c.disable())\n\t\t\t\t.build();\n\n\t}\n}\n```\n",
    " Building Plugins > Share CDS Models via Maven Artifacts > Create the CDS Model in a New Maven Artifact\nmaven, CDS model, artifact, project setup\nThis Maven command generates a plain Java project suited for hosting CDS models that can be shared as Maven artifacts (in src/main/resources/cds). Useful for creating reusable model libraries for CAP Java.\n\n```shell\nmvn archetype:generate -DgroupId=com.sap.capire -DartifactId=bookshop -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n```\n",
    " Building Plugins > Share CDS Models via Maven Artifacts > Reference the New CDS Model in an Existing CAP Java Project\nmaven, dependency, CDS model, reuse\nThis XML excerpt declares a dependency on a Maven artifact containing CDS models, allowing CAP Java projects to reuse shared model definitions. Add to the <dependencies> of srv/pom.xml or relevant module.\n\n```xml\n<dependency>\n  <groupId>com.sap.capire</groupId>\n  <artifactId>bookshop</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n",
    " Building Plugins > Share CDS Models via Maven Artifacts > Reference the New CDS Model in an Existing CAP Java Project\nmaven, plugin, cds-maven-plugin, resolve, model extraction\nThis plugin configuration uses cds-maven-plugin with the resolve goal. It extracts CDS models from Maven dependencies into target/cds for compiler usage. Place in srv/pom.xml or relevant Maven module.\n\n```xml\n<plugin>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-maven-plugin</artifactId>\n  <version>${cds.services.version}</version>\n  <executions>\n    ...\n    <execution>\n      <id>cds.resolve</id>\n      <goals>\n        <goal>resolve</goal> \n      </goals>\n    </execution>\n    ...\n  </executions>\n</plugin>\n```\n",
    " Building Plugins > Share CDS Models via Maven Artifacts > Reference the New CDS Model in an Existing CAP Java Project\ncds, using, import, CDS model, groupId/artifactId\nA CDS using directive that imports models from a Maven artifact based on groupId/artifactId instead of a file path or npm package. Allows reuse of centralized models.\n\n```cds\nusing { CatalogService } from 'com.sap.capire/bookshop';\n```\n",
    " Building Plugins > Event Handlers for Custom Types and Annotations\nmaven, event handler, dependencyManagement, cds-services-api\nThis XML sets up proper dependency management for a plain Maven project that provides a CAP Java event handler as a plugin. It imports the BOM and declares cds-services-api.\n\n```xml\n<properties>\n    <cds.services.version>2.4.0</cds.services.version>\n</properties>\n\n<dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>com.sap.cds</groupId>\n        <artifactId>cds-services-bom</artifactId>\n        <version>${cds.services.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>com.sap.cds</groupId>\n        <artifactId>cds-services-api</artifactId>\n    </dependency>\n</dependencies>\n```\n",
    " Building Plugins > Event Handlers for Custom Types and Annotations\nevent handler, Java, annotation, plugin\nJava example of a CAP plugin event handler registered for all ApplicationServices using the @ServiceName annotation and implementing custom logic after each event. Suitable for packaging as a reusable module.\n\n```java\n@ServiceName(value = \"*\", type = ApplicationService.class)\npublic class SampleHandler implements EventHandler {\n\n    @After\n    public void handleSample(CdsReadEventContext context) {\n      // any custom Java code using the event context and CQL APIs\n    }\n}\n```\n",
    " Building Plugins > Event Handlers for Custom Types and Annotations > Load Plugin Code via ServiceLoaders\nServiceLoader, META-INF/services, CdsRuntimeConfiguration, handler registration\nContent of META-INF/services/com.sap.cds.services.runtime.CdsRuntimeConfiguration—registers a ServiceLoader implementation for handler registration, needed for distributing plugin handlers outside Spring.\n\n```txt\ncom.sap.example.cds.SampleHandlerRuntimeConfiguration\n```\n",
    " Building Plugins > Event Handlers for Custom Types and Annotations > Load Plugin Code via ServiceLoaders\nServiceLoader, CdsRuntimeConfiguration, plugin, handler registration\nImplements the CdsRuntimeConfiguration interface for ServiceLoader-based handler registration in CAP Java plugins. Registers the SampleHandler programmatically.\n\n```java\npackage com.sap.example.cds;\n\nimport com.sap.cds.services.runtime.CdsRuntimeConfiguration;\nimport com.sap.cds.services.runtime.CdsRuntimeConfigurer;\n\npublic class SampleHandlerRuntimeConfiguration implements CdsRuntimeConfiguration {\n\n  @Override\n  public void eventHandlers(CdsRuntimeConfigurer configurer) {\n    configurer.eventHandler(new SampleHandler());\n  }\n\n}\n```\n",
    " Building Plugins > Custom Protocol Adapters\nprotocol adapter, ServletAdapterFactory, plugin, ServiceLoader, protocol\nSample implementation of ServletAdapterFactory for a custom CAP Java protocol adapter. Required for integrating custom inbound protocols via ServiceLoader.\n\n```java\npublic class SampleAdapterFactory implements ServletAdapterFactory, CdsRuntimeAware {\n  static final String PROTOCOL_KEY = \"protocol-key\";\n  private CdsRuntime runtime;\n\n  @Override\n  public void setCdsRuntime(CdsRuntime runtime) {\n    this.runtime = runtime;\n  }\n\n  @Override\n  public Object create() {\n    return new SampleAdapter(runtime);\n  }\n\n  @Override\n  public boolean isEnabled() {\n    // Determines if the protocol adapter is enabled\n  }\n\n  @Override\n  public String getBasePath() {\n    // Return the base path\n  }\n\n  @Override\n  public String[] getMappings() {\n    // Return mappings for the protocol adapter\n  }\n\n  @Override\n  public UrlResourcePath getServletPath() {\n    // Use UrlResourcePathBuilder to return proper path\n  }\n}\n```\n",
    " Building Plugins > Custom Protocol Adapters\nprotocol adapter, HttpServlet, ApplicationService, runtime, CQL\nSkeleton for a custom CAP Java protocol adapter extending HttpServlet. Handles mapping incoming requests to ApplicationServices and executing CQL, for example for custom REST-like adapters.\n\n```java\npublic class SampleAdapter extends HttpServlet {\n  private final CdsRuntime runtime;\n\n  public SampleAdapter(CdsRuntime runtime) {\n    this.runtime = runtime;\n    // see below for further details\n  }\n\n  @Override\n  public void service(HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    // see below for further details\n  }\n}\n```\n",
    " Building Plugins > Custom Protocol Adapters\nCQL, Select, id, Java, CqnSelect, request mapping\nSample creation of a CQN select query from a REST path (e.g., GET /CatalogService/Books?id=100). Used in protocol adapters to map protocol input to CQL.\n\n```java\nCqnSelect select = Select.from(\"Books\").byId(100);\n```\n",
    " Building Plugins > Custom Protocol Adapters\nApplicationService, CQL, result, toJson, response\nExecutes the previously created CQN query using ApplicationService, serializes the result as JSON, and writes it to the HTTP response. This pattern is used in custom protocol adapters.\n\n```java\nString resposePayload = applicationService.run(select).toJson();\nresponse.getWriter().write(responsePayload);\n```\n",
    " Migration Guides > CAP Java 3.10 to CAP Java 4.0 > Removed unstructured messages from MessagingService\nmessaging, event handler, Java, structured messages, CAP Java 4.x migration\nShows how to publish a message to a MessagingService in CAP Java 4.x using a structured Map instead of a plain String. CAP Java 4.x removed support for unstructured (plain String) messages; you must now always wrap message data in a Map.\n\n```java\n// instead of\nmessagingService.emit(\"myTopic\", \"unstructured message\");\n// use\nmessagingService.emit(\"myTopic\", Map.of(\"message\", \"unstructured message\")); // [!code focus]\n```\n",
    " Migration Guides > CAP Java 3.10 to CAP Java 4.0 > Removed unstructured messages from MessagingService\nmessaging, event handler, Java, structured messages, CAP Java 4.x migration\nIllustrates the new way to receive unstructured messages in a CAP Java 4.x event handler. As unstructured String messages are now wrapped in a Map under the key \"message\", event handlers must use context.getDataMap().get(\"message\") instead of context.getData().\n\n```java\n@On(event = \"myTopic\")\nvoid handleMyTopic(TopicMessageEventContext context) {\n  // instead of\n  String message = context.getData();\n  // use\n  String message = (String) context.getDataMap().get(\"message\"); // [!code focus]\n}\n```\n",
    " Migration Guides > Cloud SDK 4 to 5\nmaven, java, cloud sdk 5, dependencies\nMaven dependency snippet for CAP Java applications upgrading to SAP Cloud SDK 5.x. Add this dependency to use the HttpClient with Cloud SDK 5 integration.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cloud.sdk.cloudplatform</groupId>\n\t<artifactId>connectivity-apache-httpclient4</artifactId>\n</dependency>\n```\n",
    " Migration Guides > CAP Java 1.34 to CAP Java 2.0 > Jakarta EE 10\njava, Jakarta EE migration, import statement\nDemonstrates package renaming when migrating from Java EE (javax) to Jakarta EE (jakarta) for Spring Boot 3 compatibility, as required by CAP Java 2.x and above.\n\n```java\nimport javax.servlet.http.HttpServletResponse;\n// with\nimport jakarta.servlet.http.HttpServletResponse;\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Migrate the Project Structure\nmaven, java, cds archetype, project setup\nCommand to generate a new CAP Java project using the official Maven archetype. Used for migration to the new CAP Java SDK from classic runtime.\n\n```shell\nmvn archetype:generate -DarchetypeArtifactId=cds-services-archetype -DarchetypeGroupId=com.sap.cds -DarchetypeVersion=RELEASE\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Migrate the Project Structure\njava, pom.xml, module structure, project setup\nDefines submodules in a multi-module Maven CAP Java project. Adapt this section in root 'pom.xml' if service module folder is renamed during migration.\n\n```xml\n<modules>\n\t<module>srv</module>\n</modules>\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Copy the CDS Model\ncds, CDS modeling, datatype, aggregate function\nExample CDS view where an aggregate function column is given an explicit datatype (timestamp). Important when migrating as implicit types may cause build to fail.\n\n```cds\nview AddressView as select from Employee.Address {\n    street, apartment, postal_code, MAX(createdAt) AS createdAt: timestamp\n};\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Copy the CDS Model\ncds, package.json, configuration\nShows the 'cds' configuration section in package.json that should be copied from a classic CAP Java project to the new SDK project during migration.\n\n```jsonc\n\"cds\": { // copy this CDS configuration from your classic project\n\t...\n}\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Copy the CDS Model\nshell, cds, verify configuration\nCLI command to print the effective CDS configuration. Run this to verify configuration after migration of package.json or .cdsrc.json.\n\n```shell\ncds env\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > First Build and Deployment\nmaven, java, build\nMaven command to build a CAP Java project after migration. Ensures the project compiles and dependencies are correct.\n\n```shell\nmvn clean install\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > First Build and Deployment\ncds, hana, deploy\nCDS command to deploy a CAP Java project's data model to SAP HANA after migration.\n\n```shell\ncds deploy --to hana\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Migrate Dependencies\nmaven, java, dependencies, srv/pom.xml\nSample dependencies for the new CAP Java SDK services and SQLite JDBC driver, to add in srv/pom.xml when migrating business logic.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-starter-spring-boot-odata</artifactId>\n</dependency>\n<dependency>\n\t<groupId>org.xerial</groupId>\n\t<artifactId>sqlite-jdbc</artifactId>\n</dependency>\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Migrate Event Handlers\njava, event handler, annotations\nAnnotations to use on CAP Java event handler classes after migration. Ensures proper registration and linking to the correct service.\n\n```java\n@org.springframework.stereotype.Component\n@com.sap.cds.services.handler.annotations.ServiceName(\"serviceName\")\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Migrate Event Handlers\njava, event handler, class scaffold\nSkeleton for a new CAP Java event handler, with required annotations and interface. Use this pattern when migrating legacy business logic classes.\n\n```java\nimport org.springframework.stereotype.Component;\nimport com.sap.cds.services.handler.EventHandler;\nimport com.sap.cds.services.handler.annotations.ServiceName;\n\n@Component\n@ServiceName(\"AdminService\")\npublic class AdminServiceHandler implements EventHandler {\n  // ...\n}\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Migrate Event Handlers\njava, event handler, annotation mapping\nDemonstrates annotation mapping for migrating event handler methods from classic CAP Java to CAP Java SDK, e.g., changing @BeforeCreate to @Before(event...).\n\n```java\n// Example mapping table (see full table in docs)\n@BeforeCreate(entity = \"yourEntityName\")\n// becomes\n@Before(event = CqnService.EVENT_CREATE, entity = \"yourEntityName\")\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Migrate Event Handlers\njava, event handler, context type mapping\nShows the change in argument types for event handler methods when migrating from classic CAP Java to the SDK. Replace classic types with Cds<Event>EventContext classes.\n\n```java\n// Classic Java Runtime\naction public void createBook(CreateRequest req, ExtensionHelper helper) {}\n// CAP Java SDK\npublic void beforeCreate(CdsCreateEventContext context) {}\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Security Settings > Enforcement API & Custom Handlers\njava, enforcement API, authorization, dependency injection\nShows how to obtain the AuthorizationService and user info in CAP Java SDK via dependency injection and context, replacing legacy enforcement APIs for security.\n\n```java\n@Autowire\nAuthorizationService authService;\n// ...\nEventContext context;\nUserInfo user = context.getUserInfo();\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Security Settings > Configuration and Dependencies\njava, security, xsuaa, pom.xml, dependencies\nAdd this dependency to enable XSUAA-based authentication and JWT support in CAP Java SDK. For security configuration during migration.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-feature-xsuaa</artifactId>\n</dependency>\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Security Settings > Spring Boot\njava, security, spring boot, xsuaa, pom.xml, dependencies\nSpring Boot/XSUAA security dependency for CAP Java SDK. Required for automatic endpoint authentication configuration when migrating from classic runtime.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cloud.security.xsuaa</groupId>\n\t<artifactId>xsuaa-spring-boot-starter</artifactId>\n\t<version>${xsuaa.version}</version>\n</dependency>\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Security Settings > Spring Boot\nyaml, configuration, spring boot, security\nConfiguration flag to turn off automatic authentication for custom endpoints in Spring Boot-based CAP Java SDK projects.\n\n```yaml\ncds.security.authentication.authenticate-unknown-endpoints: false\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Data Access and Manipulation > Access Application Service in Custom Handler and Query Execution\njava, application service, dependency injection\nInjects a CqnService (Application Service) into a handler class in CAP Java SDK. Used for executing CQN queries securely on service layer.\n\n```java\n@Resource(name = \"CatalogService\")\nprivate CqnService catalogService;\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Data Access and Manipulation > Access Application Service in Custom Handler and Query Execution\njava, query, classic to sdk, query builder\nExample of constructing and executing a query on an Application Service using the CAP Java SDK's fluent query API. Replaces classic CDSDataSourceHandler with CqnService-based execution.\n\n```java\nSelect query =  Select.from(\"CatalogService.Books\")\n\t.columns(\"id\", \"title\")\n\t.where(p -> p.get(\"title\")\n\t.in(\"Spring\", \"Java\"))\n\t.orderBy(\"title\");\n\ncatalogService.run(query);\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Data Access and Manipulation > Accessing PersistenceService\njava, persistence, dependency injection, custom handler\nInjects the PersistenceService into a handler, used for direct database access and bypassing service-layer authorization in CAP Java SDK.\n\n```java\n@Autowired\nprivate PersistenceService persistence;\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Data Access and Manipulation > Accessing PersistenceService\njava, query, persistence service\nShows how to execute a query using the PersistenceService in CAP Java SDK after migration, replacing older direct DataSourceHandler usage.\n\n```java\nSelect query =  Select.from(\"CatalogService.Books\")\n\t.columns(\"id\", \"title\")\n\t.where(p -> p.get(\"title\")\n\t.in(\"Spring\", \"Java\"))\n\t.orderBy(\"title\");\n\npersistence.run(query);\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > Data Access and Manipulation > Accessing CdsDataStore\njava, CdsDataStore, custom handler\nHow to access CdsDataStore via PersistenceService and execute queries, as per new CAP Java SDK data access pattern.\n\n```java\nSelect query =  ...; // construct the query\n\nCdsDataStore cdsDataStore = persistence.getCdsDataStore();\ncdsDataStore.execute(query);\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > CDS OData V2 Adapter\nmaven, odata v2, pom.xml, dependencies\nDependency to add to srv/pom.xml to enable OData V2 protocol support in CAP Java SDK.\n\n```xml\n<dependency>\n\t<groupId>com.sap.cds</groupId>\n\t<artifactId>cds-adapter-odata-v2</artifactId>\n\t<scope>runtime</scope>\n</dependency>\n```\n",
    " Migration Guides > CAP Java Classic to CAP Java 1.x > CDS OData V2 Adapter\ncds, cdsrc.json, odata v2, configuration\nSnippet for .cdsrc.json to set OData version to v2 in the CDS compiler/build when migrating backend protocol from classic CAP Java.\n\n```json\n{\n\t...\n\t\"odata\": {\n\t\t\"version\": \"v2\"\n\t}\n}\n```\n",
    " Receiving Events from SAP S/4HANA Cloud Systems > Find & Import APIs\ncds import, SAP S/4HANA, external service, API, EDMX, import\nThis shell command imports the EDMX specification of a service, such as SAP S/4HANA's Business Partner API, into your CAP project as a CDS model. Use this after downloading the EDMX spec from SAP's API Business Accelerator Hub.\n\n```shell\ncds import <downloaded edmx file>\n```\n",
    " Receiving Events from SAP S/4HANA Cloud Systems > Add Missing Event Declarations\ncds, service definition, event declaration, SAP S/4HANA events, extend\nAdds missing asynchronous event declarations like BusinessPartner.Created and BusinessPartner.Changed to an imported SAP S/4HANA service model in CDS. This bridges the gap, as S/4HANA's async event APIs are not present in the default OData specification.\n\n```cds\n// filling in missing events as found on SAP Business Accelerator Hub\nusing { API_BUSINESS_PARTNER as S4 } from './API_BUSINESS_PARTNER';\nextend service S4 with {\n  event BusinessPartner.Created @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Created.v1') {\n    BusinessPartner : String\n  }\n  event BusinessPartner.Changed @(topic:'sap.s4.beh.businesspartner.v1.BusinessPartner.Changed.v1') {\n    BusinessPartner : String\n  }\n}\n```\n",
    " Receiving Events from SAP S/4HANA Cloud Systems > Consume Events Agnostically\nJavaScript, service consumer, SAP S/4HANA events, consume event, CAP JS\nShows how to agnostically consume SAP S/4HANA events, such as 'BusinessPartner.Changed', using CAP's JavaScript API. Connects to the external service and registers an event handler.\n\n```js\nconst S4Bupa = await cds.connect.to ('API_BUSINESS_PARTNER')\nS4bupa.on ('BusinessPartner.Changed', msg => {...})\n```\n",
    " Receiving Events from SAP S/4HANA Cloud Systems > Configure CAP\nconfiguration, cds.env, SAP Event Mesh, enterprise-messaging-shared, cloudevents, subscribePrefix, publishPrefix, json\nConfigures CAP to use SAP Event Mesh with CloudEvents format. Sets up required publish and subscribe prefixes to enable correct topic subscription for S/4HANA events. Ensure not to restrict subscribeFilter to ${namespace}.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": \"enterprise-messaging-shared\",\n      \"format\": \"cloudevents\",\n      // implicitly applied default prefixes\n      \"publishPrefix\": \"$namespace/ce/\",\n      \"subscribePrefix\": \"+/+/+/ce/\"\n    }\n  }\n}\n```\n",
    " Receiving Events from SAP S/4HANA Cloud Systems > Configure CAP\nconfiguration, cds.env, SAP Cloud Application Event Hub, event-broker, json\nConfiguration snippet for using SAP Cloud Application Event Hub in a CAP project. Sets kind to 'event-broker' to enable correct event topic handling for S/4HANA integration.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": \"event-broker\"\n    }\n  }\n}\n```\n",
    " Receiving Events from SAP S/4HANA Cloud Systems > Using Low-Level Messaging\nJavaScript, low-level messaging, event consumption, SAP Event Mesh, direct messaging\nDemonstrates direct consumption of a specific SAP S/4HANA Cloud event (such as BusinessPartner.Changed) using CAP's messaging service. Allows handling incoming messages at the CloudEvents topic level.\n\n```js\nconst messaging = await cds.connect.to ('messaging')\nmessaging.on ('sap.s4.beh.businesspartner.v1.BusinessPartner.Changed.v1', (msg) => {\n  const { BusinessPartner } = msg.data\n  console.log('--> Event received: BusinessPartner changed (ID=\"'+BusinessPartner+'\")')\n})\n```\n",
    " Choose Your Preferred Tools\nVue.js, component, UI\nRenders an IndexList Vue component, passing a pages array as a prop for dynamic content rendering in the UI. Typically used to display a list or index of available documentation or tool options.\n\n```js\n<IndexList :pages='pages' />\n```\n",
    " CDS Command Line Interface (CLI) {cli}\ninstallation, cds CLI, npm, Node.js\nInstalls the CDS development kit (@sap/cds-dk) CLI globally using npm. This is the recommended way to get access to the `cds` command on your terminal.\n\n```shell\nnpm i -g @sap/cds-dk\n```\n",
    " CDS Command Line Interface (CLI) > cds version\ncds CLI, verify, version\nDisplays detailed version information about installed CAP-related packages, including @sap/cds, @sap/cds-dk, and others, along with the Node.js and project versions.\n\n```shell\ncds version\n```\n",
    " CDS Command Line Interface (CLI) > cds version\ncds CLI, verify, version, markdown\nOutputs the CDS package version information in markdown table format, which is convenient for documentation or communication purposes.\n\n```shell\ncds version --markdown\n```\n",
    " CDS Command Line Interface (CLI) > cds completion\ncds CLI, completion, installation, shell\nAdds shell completion for the cds CLI. Supports bash, zsh, fish, PowerShell, and Git Bash on various operating systems. After running it, restart or source your shell.\n\n```shell\ncds add completion\n```\n",
    " CDS Command Line Interface (CLI) > cds completion\ncds CLI, completion, shell\nRemoves shell completion support for the cds CLI. After running this command, source or restart your shell.\n\n```shell\ncds completion --remove\n```\n",
    " CDS Command Line Interface (CLI) > cds help\ncds CLI, help, command line\nDisplays an overview of all available cds CLI commands and usage patterns.\n\n```shell\ncds --help\n```\n",
    " CDS Command Line Interface (CLI) > cds help\ncds CLI, help, command line\nShows detailed usage information and options for a specific cds CLI command.\n\n```shell\ncds help <command>\n```\n",
    " CDS Command Line Interface (CLI) > cds help\ncds CLI, help, repl, interactive shell\nPrints help for the cds repl command, an interactive JS playground. Lists options like --run and --use to enhance the repl experience.\n\n```shell\ncds repl --help\n```\n",
    " CDS Command Line Interface (CLI) > cds init\nproject setup, cds CLI, init, Java, Node.js\nInitializes a new CAP Java project in the current directory. Scaffolds the basic project structure for Java development.\n\n```shell\ncds init --java\n```\n",
    " CDS Command Line Interface (CLI) > cds init\nproject setup, cds CLI, init, project structure, scaffolding\nCreates a new CAP project with both a sample bookshop model and SAP HANA configuration in one go. Useful for rapid prototyping.\n\n```shell\ncds init --add sample,hana\n```\n",
    " CDS Command Line Interface (CLI) > cds init\nproject setup, cds CLI, init, Java, Maven, configuration\nInitializes a Java CAP project with Maven archetype parameters for groupId, artifactId, and package. Enables custom Maven project setups on initialization.\n\n```shell\ncds init --java --java:mvn DgroupId=myGroup,DartifactId=newId,Dpackage=my.company\n```\n",
    " CDS Command Line Interface (CLI) > cds add\nproject setup, cds CLI, add, feature, scaffolding\nAdds a sample bookshop application to the project, including custom code and a Fiori Elements UI. Great as a CAP demo or starter example.\n\n```shell\ncds add sample\n```\n",
    " CDS Command Line Interface (CLI) > cds add\nproject setup, cds CLI, add, feature, scaffolding\nAdds a minimal CAP application skeleton to your project, without a UI. Useful for learning or as a base for new projects.\n\n```shell\ncds add tiny-sample\n```\n",
    " CDS Command Line Interface (CLI) > cds add > data {.add}\nproject setup, cds CLI, add, data, CSV, sample data\nAdds CSV files with headers for all entities in the db/data/ folder, useful as templates for initial data. The files match the entity's namespace and name.\n\n```shell\ncds add data\n```\n",
    " CDS Command Line Interface (CLI) > cds add > data {.add} > Filtering\nproject setup, cds CLI, add, data, filter, sample data\nGenerates data (CSV/JSON) only for entities whose names contain 'books' (case-insensitive). Useful for selective data file creation.\n\n```shell\ncds add data --filter books\n```\n",
    " CDS Command Line Interface (CLI) > cds add > data {.add} > Filtering\nproject setup, cds CLI, add, data, filter, sample data, regex\nFilters entities using a regular expression, in this case only matching entities whose names end with 'books'. Useful for fine-grained data generation.\n\n```shell\ncds add data --filter \"books$\"\n```\n",
    " CDS Command Line Interface (CLI) > cds add > data {.add} > Sample records\nproject setup, cds CLI, add, data, sample data, records\nCreates data files with 2 sample records for each entity. Facilitates testing and development with realistic mock data.\n\n```shell\ncds add data --records 2\n```\n",
    " CDS Command Line Interface (CLI) > cds add > data {.add} > Formats\nproject setup, cds CLI, add, data, sample data, format, JSON\nCreates entity sample data files in JSON format instead of CSV. Structured objects are used for associations and compositions.\n\n```shell\ncds add data --content-type json\n```\n",
    " CDS Command Line Interface (CLI) > cds add > http <Since version=\"7.9.0\" of=\"@sap/cds-dk\" /> {.add}\nproject setup, cds CLI, add, http, sample request\nGenerates .http files with sample requests for all services and entities in the project. Useful for testing and documentation.\n\n```shell\ncds add http\n```\n",
    " CDS Command Line Interface (CLI) > cds add > http <Since version=\"7.9.0\" of=\"@sap/cds-dk\" /> {.add} > Filtering\nproject setup, cds CLI, add, http, filter, sample request\nGenerates .http sample request files only for the CatalogService, using the filter option. Helps focus request generation for specific services.\n\n```shell\ncds add http --filter CatalogService\n```\n",
    " CDS Command Line Interface (CLI) > cds add > http <Since version=\"7.9.0\" of=\"@sap/cds-dk\" /> {.add} > Authentication / Authorization > To local applications\nproject setup, cds CLI, add, http, sample request, authentication, local\nA sample .http file fragment for Node.js projects targeting the local application with a mock user for authorization. Demonstrates format and authorization placeholder.\n\n```http\n@server = http://localhost:4004\n@auth = Authorization: Basic alice:\n\n### CatalogService.Books\nGET {{server}}/odata/v4/admin/Books\n{{auth}}\n...\n```\n",
    " CDS Command Line Interface (CLI) > cds add > http <Since version=\"7.9.0\" of=\"@sap/cds-dk\" /> {.add} > Authentication / Authorization > To remote applications\nproject setup, cds CLI, add, http, sample request, authentication, remote\nSample .http file fragment for remote CloudFoundry app request, demonstrating the use of JWT-based authorization header. Generated using --for-app <cf-appname>.\n\n```http\n@server = https://...\n@auth = x-approuter-authorization: bearer ...\n```\n",
    " CDS Command Line Interface (CLI) > cds add > handler <Since version=\"8.5.0\" of=\"@sap/cds-dk\" /> {.add}\nproject setup, cds CLI, add, handler, event handler, Java, Node.js\nGenerates handler stubs for actions, functions, and entities. In Java, make sure to run mvn compile before running the command.\n\n```shell\ncds add handler\n```\n",
    " CDS Command Line Interface (CLI) > cds add > handler <Since version=\"8.5.0\" of=\"@sap/cds-dk\" /> {.add} > Filtering\nproject setup, cds CLI, add, handler, filter, event handler, Node.js\nGenerates handler stubs only for the specified entity, action, or function using the filter option.\n\n```shell\ncds add handler --filter Books\n```\n",
    " CDS Command Line Interface (CLI) > cds env\nconfiguration, cds CLI, environment, inspect\nPrints the effective configuration of the database service, revealing details such as implementation, credentials, and kind as derived by cds.\n\n```shell\ncds env requires.db\n```\n",
    " CDS Command Line Interface (CLI) > cds compile > mermaid <Since version=\"8.0.0\" of=\"@sap/cds-dk\" /> {.compile}\ncds CLI, compile, mermaid, diagram, modeling, visualization\nCompiles a CDS model to Mermaid JS class diagram syntax, supporting easy model visualization in markdown or documentation tools.\n\n```shell\ncds compile db/schema.cds --to mermaid\n```\n",
    " CDS Command Line Interface (CLI) > cds compile > mermaid <Since version=\"8.0.0\" of=\"@sap/cds-dk\" /> {.compile}\ncds CLI, compile, mermaid, diagram, visualization\nRuns cds compile to mermaid format with custom diagram layout options via environment variables. `CDS_MERMAID_DIRECTION=LR` sets left-to-right diagram flow.\n\n```shell\nCDS_MERMAID_DIRECTION=LR cds compile db/schema.cds --to mermaid\n```\n",
    " CDS Command Line Interface (CLI) > cds watch\ncds CLI, watch, restart, Node.js server, livereload, development\nWatches for relevant file changes in the project and restarts the server automatically. Equivalent to 'cds serve all --with-mocks --in-memory?'.\n\n```shell\ncds watch\n```\n",
    " CDS Command Line Interface (CLI) > cds watch > Includes and Excludes <Since version=\"8.7.0\" of=\"@sap/cds-dk\" />\ncds CLI, watch, include, exclude, development\nCustomizes which additional paths are included or excluded from change watching for live-reloading, using --include and --exclude.\n\n```shell\ncds watch --include ../other-app --exclude .idea/\n```\n",
    " CDS Command Line Interface (CLI) > cds repl\ncds CLI, repl, interactive shell, JavaScript API\nStarts an interactive Node.js-based shell to experiment with CDS JavaScript APIs. Supports parsing and querying models at runtime. Use .run and .inspect for additional tooling features.\n\n```shell\ncds repl\n```\n",
    " CDS Command Line Interface (CLI) > cds repl\ncds CLI, repl, interactive shell, run project\nStarts the cds repl and boots a CDS server for the specified CAP project, enabling live access to its services from the REPL.\n\n```shell\ncds repl --run cap/samples/bookshop\n```\n",
    " CDS Command Line Interface (CLI) > cds repl\ncds CLI, repl, interactive shell, feature modules\nStarts the REPL and preloads the cds.ql module into the global context, providing direct access to CQL query builder APIs.\n\n```shell\ncds repl --use ql\n```\n",
    " CDS Command Line Interface (CLI) > Debugging with `cds debug` {cds-debug} > Node.js Applications > Remote Applications\ncds CLI, debugging, debug, Cloud Foundry, Node.js\nOpens an SSH tunnel to debug a remote Node.js app running in a Cloud Foundry space. Also opens Chrome DevTools for inspection.\n\n```shell\ncds debug <app-name>\n```\n",
    " CDS Command Line Interface (CLI) > Debugging with `cds debug` {cds-debug} > Node.js Applications > Local Applications\ncds CLI, debugging, debug, local, Node.js\nStarts the local application in debug mode, launches Chrome DevTools for debugging, and listens on the default debug port.\n\n```shell\ncds debug\n```\n",
    " CDS Command Line Interface (CLI) > Debugging with `cds debug` {cds-debug} > Java Applications <Since version=\"8.7.0\" of=\"@sap/cds-dk\" /> > Remote Applications\ncds CLI, debugging, debug, Cloud Foundry, Java\nStarts a remote debug session for a Java CAP application running on Cloud Foundry by opening an SSH tunnel and enabling JVM debug port 8000.\n\n```shell\ncds debug <app-name>\n```\n",
    " CDS Command Line Interface (CLI) > Debugging with `cds debug` {cds-debug} > Java Applications <Since version=\"8.7.0\" of=\"@sap/cds-dk\" /> > Local Applications\ncds CLI, debugging, debug, local, Java\nStarts the local Java application under Maven with JVM debug arguments enabled for remote debugging (Java, Spring Boot).\n\n```shell\ncds debug\n```\n",
    " CDS Command Line Interface (CLI) > Debugging with `cds debug` {cds-debug} > Node.js Applications > Remote Applications\ncds CLI, debug, Cloud Foundry, Node.js, SSH, under the hood\nUnderlying commands used by cds debug to enable debugging on a remote Node.js app on CloudFoundry: sends USR1 to node process and sets up the SSH tunnel.\n\n```shell\ncf ssh <app> -c \"kill -usr1 `pidof node`\"\ncf ssh -N -L 9229:localhost:9229 <app>\n```\n",
    " CDS Command Line Interface (CLI) > Debugging with `cds watch`\ncds CLI, debug, debugger, watch, Node.js\nYou can enter 'debug' or 'debug-brk' into the interactive shell after starting cds watch to enable debug mode. Use debug-brk to break execution on the first line.\n\n```shell\ncds watch\n# ...\ndebug\n# or\ndebug-brk\n```\n",
    " CDS Command Line Interface (CLI) > Debugging with `cds watch`\ncds CLI, debug, debugger, VS Code, Chrome DevTools\nInstructions to attach a debugger to a live CAP Node.js application: use 'Debug: Attach to Node Process' in VS Code or go to chrome://inspect in Chrome for direct inspection.\n\n```txt\n// In VS Code\n# Use command palette\nDebug: Attach to Node Process\n\n// In Chrome\n# Navigate to\nchrome://inspect\n```\n",
    " CDS Editors and IDEs > CDS Source Formatter\ninstallation, cds formatter, CLI, npm\nInstalls the global CDS language server library, which enables CDS source code formatting and editor tooling support such as code formatting via CLI.\n\n```shell\nnpm i -g @sap/cds-lsp\n```\n",
    " CDS Editors and IDEs > CDS Source Formatter\ncds formatter, CLI, code formatting\nRuns the CDS formatter command to format CDS files according to the default or project-specific configuration.\n\n```shell\nformat-cds\n```\n",
    " CDS Editors and IDEs > CDS Source Formatter\ncds formatter, CLI, help, usage\nDisplays detailed help and usage options for the format-cds CLI tool, which formats .cds files using CDS language server settings.\n\n```shell\nformat-cds -h\n```\n",
    " CDS Editors and IDEs > CDS Source Formatter\ncds formatter, CLI, init, configuration\nCreates an initial .cdsprettier.json settings file for configuring formatting options for your project. This file can be checked into version control.\n\n```shell\nformat-cds --init\n```\n",
    " CDS Editors and IDEs > CDS Source Formatter\ncds formatter, CLI, configuration, usage\nRuns the CDS formatter only on specified source files or folders, letting you target subsets of your project for code formatting.\n\n```shell\nformat-cds <foldername1> <foldername2> <filename> ...\n```\n",
    " CDS Editors and IDEs > CDS Source Formatter\ncds formatter, CLI, backup\nRuns the CDS formatter and overwrites files without creating .bak backup files. Useful for CI/CD, but beware of data loss if issues arise.\n\n```shell\nformat-cds -f\n```\n",
    " CDS Editors and IDEs > GitHub Integration\ncds, GitHub, Markdown, code fencing\nShows how to use a 'cds' code block in Markdown for syntax highlighting and rendering on GitHub, which recognizes the 'cds' language via linguist.\n\n```md\n```cds\nentity Books {};\n```\n```\n",
    " or use `FROM node:<NODEVERSION>` to match a specific Node version\ndocker, Node.js, NODEVERSION, containerization, installation\nSpecifies the base image and Node.js version for a Docker container using the Node.js official image. Replace <NODEVERSION> with the desired version (e.g., 18, 20, 21, etc.). This is typically used in the Dockerfile to ensure environment parity and controlled Node.js versions.\n\n```shell\nFROM node:<NODEVERSION>\n```\n",
    " you have installed locally\ndocker, installation, cds toolkit, Node.js, npm\nThis Dockerfile segment installs the @sap/cds-dk toolkit globally under the 'node' user, sets up NPM prefix and PATH, enabling CAP tooling in subsequent containers.\n\n```shell\nUSER node\nENV NPM_CONFIG_PREFIX=/home/node/.npm\nENV PATH=$NPM_CONFIG_PREFIX/bin:$PATH\n\nRUN npm i -g @sap/cds-dk\n```\n",
    " you have installed locally > Build your first image\ndocker, build, cds toolkit\nThis shell command builds a Docker image named 'cds' using the Dockerfile in the current directory, containing a CAP development environment.\n\n```shell\ndocker build -t cds .\n```\n",
    "Run a Service in a Container\ndocker, run, container, CLI, service, expose port\nThis command runs a container from the 'cds' image, maps port 4004 to the host, and opens an interactive shell session inside the container.\n\n```shell\ndocker run --publish 4004:4004 -it cds sh\n```\n",
    "Run a Service in a Container\nCLI, bash, container, home directory\nMoves to the home directory inside the container, preparing for local file or project setup.\n\n```shell\ncd\n```\n",
    "Run a Service in a Container\ncds modeling, service definition, catalog service, Books, entity, container\nWrites a minimal CDS model defining a 'CatalogService' with one Books entity to services.cds inside the container for use by CAP.\n\n```shell\necho 'service CatalogService { entity Books { key ID: UUID; } }' \\\n    > services.cds\n```\n",
    "Run a Service in a Container\nCLI, cds CLI, run server, container, service\nRuns the CDS server inside the container based on the current model. Exposes services according to the .cds file.\n\n```shell\ncds run\n```\n",
    " CDS Lint > Setup\ninstallation, cds toolkit, cds lint, npm, VS Code, editor, setup\nInstalls ESLint, the @sap/eslint-plugin-cds plugin, and configures the necessary ESLint and VS Code settings for CDS linting. Run this command in your CAP project root to set up CDS Lint quickly.\n\n```shell\ncds add lint\n```\n",
    " CDS Lint > CDS Lint CLI\nCLI, cds CLI, cds lint, project root, verify\nRuns the CDS Lint CLI in the project root. It checks for linting errors in your CDS models and prints a standard ESLint error report if issues are found; otherwise, there is no output.\n\n```shell\ncds lint\n```\n",
    " CDS Lint > CDS Lint in VS Code\nconfiguration, eslint, editor, VS Code, rules, customization\nEnables the 'valid-csv-header' lint rule for @sap/cds in your ESLint rules configuration, marking it as a warning and ensuring it appears in the editor. Useful for customizing visible linting rules in VS Code.\n\n```json\n{\n  \"rules\": {\n    \"@sap/cds/valid-csv-header\": [\"warn\", \"show\"]\n  }\n}\n```\n",
    " CDS Lint > ESLint CLI (optional)\nCLI, cds lint, debugging, DEBUG variable, verify\nRuns CDS Lint CLI in debug mode to print all ESLint flags and options being applied. Helpful for troubleshooting or determining exact command options used by CDS Lint.\n\n```shell\nDEBUG=lint cds lint\n```\n",
    " Rules Reference\nESLint, cds, JavaScript, CDS rules, plugin, rules reference\nAn example configuration for enabling the '@sap/eslint-plugin-cds' ESLint plugin and using its recommended rules in your project. Place this in your .eslintrc.js (or similar ESLint configuration file) to activate basic CDS linting standards.\n\n```js\nmodule.exports = {\n  extends: [\n    'plugin:@sap/cds/recommended'\n  ]\n  // ...\n};\n```\n",
    " Rules Reference\nCLI, verify, linter, cds toolkit, JavaScript, cds\nRun the ESLint CLI to check all JavaScript (.js) and CDS (.cds) files in the current project directory using your configured rules, including those from '@sap/eslint-plugin-cds'.\n\n```shell\nnpx eslint . --ext .js,.cds\n```\n",
    " assoc2many-ambiguous-key > Examples > Correct example > db/schema.cds\ncds, cds modeling, association, db/schema.cds, correct, to-many association, ON condition, backlink\nDefines a correct managed to-many association from Authors to Books using an ON condition with a backlink (books.author = $self). This satisfies the assoc2many-ambiguous-key rule that associations to many entities must have a well-defined backlink via ON condition.\n\n```cds\nentity Authors {\n  key ID : UUID;\n  name  : String;\n  books : Association to many Books on books.author = $self;\n}\n\nentity Books {\n  key ID : UUID;\n  title  : String;\n  author : Association to Authors;\n}\n```\n",
    " assoc2many-ambiguous-key > Examples > Incorrect example > db/schema.cds\ncds, cds modeling, association, db/schema.cds, incorrect, to-many association, missing ON condition, ambiguous key\nDemonstrates an incorrect case where a view creates a to-many association (bookIDs) without specifying an ON condition, thus causing ambiguity in the keys and violating the assoc2many-ambiguous-key rule.\n\n```cds\nview AuthorView as select from Authors {\n  key ID,\n  books.ID as bookIDs\n};\n```\n",
    " auth-no-empty-restrictions > Examples > Correct example\nauthorization, service definition, srv/admin-service.cds, restrict, requires, CDS, roles, correct\nDefines a CDS service (AdminService) with an @requires annotation, correctly specifying the 'admin' role to restrict access to users with that role. Used for enforcing authorization at the service level.\n\n```cds\nservice AdminService @requires:'admin' {\n  // service definitions...\n}\n```\n",
    " auth-no-empty-restrictions > Examples > Incorrect example\nauthorization, service definition, srv/admin-service.cds, restrict, requires, CDS, roles, incorrect\nDemonstrates an incorrect (insecure) usage of the @requires annotation in a CDS service (AdminService) by specifying an empty string or empty array. This results in unrestricted access to the service and should be avoided to prevent security risks.\n\n```cds\nservice AdminService @requires:'' {\n  // service definitions...\n}\n\n// or\n\nservice AdminService @requires:[] {\n  // service definitions...\n}\n```\n",
    " auth-restrict-grant-service > Examples > Correct example > srv/cat-service.cds\nCDS, authorization, service definition, function, correct, grant, restrict\nDefines a CatalogService with a function getViewsCount() restricted to Admin role, using @restrict with grant: '*'. This is the correct usage pattern where only the wildcard grant is used as required for services and (bound/unbound) actions/functions.\n\n```cds\nservice CatalogService {\n  @restrict: [{ to: 'Admin', grant: '*' }]\n  function getViewsCount();\n}\n```\n",
    " auth-restrict-grant-service > Examples > Incorrect example > srv/cat-service.cds\nCDS, authorization, service definition, function, incorrect, grant, restrict\nShows an incorrect usage: CatalogService with getViewsCount() using @restrict where grant is set to ['WRITE']. For service-level or function/action restrictions, only grant: '*' is supported; specifying specific events is not allowed and triggers a rule violation.\n\n```cds\nservice CatalogService {\n  @restrict: [{ to: 'Admin', grant: ['WRITE'] }]\n  function getViewsCount();\n}\n```\n",
    " auth-use-requires > Examples > Correct example > srv/cat-service.cds\ncorrect, authorization, @requires, action, service definition\nDemonstrates the recommended usage: the CatalogService action addRating utilizes the @requires annotation to grant access for unrestricted events to users with the Admin role. This pattern is preferred over @restrict for such cases.\n\n```cds\n@service CatalogService {\n  action addRating @requires: 'Admin';\n}\n```\n",
    " auth-use-requires > Examples > Incorrect example > srv/cat-service.cds\nincorrect, authorization, @restrict, unrestricted event, action, service definition\nShows the discouraged pattern: the CatalogService action addRating uses @restrict with grant: '*' and to: 'Admin'. For unrestricted events, @requires should be used instead for clarity and maintainability.\n\n```cds\n@service CatalogService {\n  @restrict: [ { grant: '*', to: 'Admin' } ]\n  action addRating;\n}\n```\n",
    " auth-valid-restrict-grant > Examples > Correct example > [srv/cat-service.cds]\nauthorization, @restrict, grant, READ, srv/cat-service.cds, correct, cds modeling\nThis CDS service definition applies a restrictive authorization using @restrict.grant for the 'READ' event on the entity ListOfBooks and assigns it to the Viewer role. The value 'READ' is a standard valid CDS event for grant.\n\n```cds\nservice CatalogService {\n  entity ListOfBooks as projection on Books;\n  \n  @restrict: [\n    { to: 'Viewer', grant: 'READ' }\n  ]\n}\n```\n",
    " auth-valid-restrict-grant > Examples > Incorrect example > [srv/cat-service.cds]\nauthorization, @restrict, grant, typo, incorrect, srv/cat-service.cds, cds modeling\nThis CDS service definition incorrectly uses a non-standard event name 'REAAD' (typo) in @restrict.grant for the Viewer role, which will trigger an ESLint warning because only standard CDS events like 'READ', 'CREATE', etc. are allowed.\n\n```cds\nservice CatalogService {\n  entity ListOfBooks as projection on Books;\n  \n  @restrict: [\n    { to: 'Viewer', grant: 'REAAD' }  // typo: should be READ\n  ]\n}\n```\n",
    " auth-valid-restrict-keys > Examples > Correct example\nauth-valid-restrict-keys, CDS annotations, restrict annotation, authorization, correct\nA correct usage of the @restrict annotation, with correctly spelled keys: grant, to, and where. This is used for fine-grained authorization on an entity or service in CDS.\n\n```cds\n@restrict: [\n  { grant: 'READ', to: 'authenticated-user', where: 'IsPublished = true' }\n]\n```\n",
    " auth-valid-restrict-keys > Examples > Incorrect example\nauth-valid-restrict-keys, CDS annotations, restrict annotation, authorization, typo, incorrect\nAn incorrect usage of the @restrict annotation, demonstrating misspelled keys: 'grants' instead of 'grant', 'too' instead of 'to', and 'were' instead of 'where'. This will be reported as a warning by the ESLint rule.\n\n```cds\n@restrict: [\n  { grants: 'READ', too: 'authenticated-user', were: 'IsPublished = true' }\n]\n```\n",
    " auth-valid-restrict-to > Examples > Correct example\nauthorization, correct, @restrict, roles\nA CDS annotation using the @restrict.to property correctly set to a valid user role (Viewer) for privilege assignment. This example demonstrates the valid use of role-based access control in the CDS model.\n\n```cds\n@restrict: [{ to: 'Viewer' }]\n```\n",
    " auth-valid-restrict-to > Examples > Incorrect example\nauthorization, incorrect, @restrict, roles\nA CDS annotation where the @restrict.to property is an empty array, which is invalid. This demonstrates a violation where the rule expects at least one valid role or pseudo role to be listed.\n\n```cds\n@restrict: [{ to: [] }]\n```\n",
    " auth-valid-restrict-where > Examples > Correct example\nauthorization, restrict annotation, auth-valid-restrict-where, correct, CDS, service definition\nDefines the @restrict annotation for instance-level authorization on the Books entity using a valid 'where' clause (CreatedBy = $user). Demonstrates compliant use of the 'where' property for fine-grained access control in CDS modeling.\n\n```cds\n@restrict: [\n  {\n    grant: 'READ',\n    where: 'CreatedBy = $user'\n  }\n]\nentity Books { ... }\n```\n",
    " auth-valid-restrict-where > Examples > Incorrect example\nauthorization, restrict annotation, auth-valid-restrict-where, incorrect, CDS, service definition\nShows an incorrect use of the @restrict annotation where the 'where' filter expression (CreatedBy === $user) uses an invalid comparison operator (===). This will cause the CDS compiler to raise a warning or error. Useful for identifying invalid filter expressions in instance-level authorization.\n\n```cds\n@restrict: [\n  {\n    grant: 'READ',\n    where: 'CreatedBy === $user' // invalid expression\n  }\n]\nentity Books { ... }\n```\n",
    " extension-restrictions > Examples > Correct example\nextension-restrictions, cds, restriction, correct example\nA correct CDS snippet that marks the 'Product' entity with '@cds.extension.allowlist', explicitly allowing it to be extended. This pattern ensures extension permissions follow your SaaS application's extension policy.\n\n```cds\n// db/schema.cds\nentity Product @cds.extension.allowlist {\n    key ID : UUID;\n    Name  : String;\n    Description : String;\n}\n\n```\n",
    " extension-restrictions > Examples > Incorrect example\nextension-restrictions, cds, restriction, incorrect example\nA CDS example missing the '@cds.extension.allowlist' annotation, making it incorrectly extendable in violation of the intended extension restrictions for SaaS entities. This would be flagged by the extension-restrictions rule.\n\n```cds\n// db/schema.cds\nentity Product {\n    key ID : UUID;\n    Name  : String;\n    Description : String;\n}\n\n```\n",
    " latest-cds-version > Examples > Incorrect example\nnpm, verify, dependencies, outdated, @sap/cds, CLI\nRuns the npm command to check if the installed version of @sap/cds is outdated. The output indicates the current, wanted, and latest available versions and helps users identify if an update is needed.\n\n```shell\nnpm outdated @sap/cds\n```\n",
    " latest-cds-version > Examples > Incorrect example\ncds lint, CLI, verify, project setup, latest-cds-version\nExecutes linting for the current CDS-based project, triggering the latest-cds-version rule. If the installed @sap/cds version is outdated, an error is shown to encourage an upgrade.\n\n```shell\ncds lint\n```\n",
    " no-db-keywords > Examples > Correct example\nESLint, no-db-keywords, correct example, cds modeling, db/schema.cds\nA correct CDS model where none of the reserved SQL keywords are used as identifiers. No warnings are raised by the @sap/cds/no-db-keywords rule.\n\n```cds\nnamespace my.bookshop;\n\nentity Books {\n  key ID    : Integer;\n      title : String;\n      author: String;\n}\n\nentity Authors {\n  key ID   : Integer;\n      name : String;\n}\n\n```\n",
    " no-db-keywords > Examples > Incorrect example\nESLint, no-db-keywords, incorrect example, cds modeling, db/schema.cds\nAn incorrect CDS model where the reserved SQL keyword 'Order' is used as an entity name. This causes a warning by the @sap/cds/no-db-keywords ESLint rule because identifiers should not use reserved SQL keywords.\n\n```cds\nnamespace my.bookshop;\n\nentity Order {\n  key ID : Integer;\n      note: String;\n}\n\n```\n",
    " no-dollar-prefixed-names > Rule Details > Examples > Correct example\ncds modeling, naming, correct example, no-dollar-prefixed-names, lint\nCDS entity modeling where all element names are well defined and do not start with '$'. This illustrates the correct application of the 'no-dollar-prefixed-names' rule.\n\n```cds\nentity Books {\n  ID   : Integer;\n  name : String;\n}\n```\n",
    " no-dollar-prefixed-names > Rule Details > Examples > Incorrect example\ncds modeling, naming, incorrect example, no-dollar-prefixed-names, lint\nIncorrect CDS entity with an element named '$pages' that starts with '$', violating the 'no-dollar-prefixed-names' lint rule. This will raise an error.\n\n```cds\nentity Books {\n  ID     : Integer;\n  $pages : Integer;\n}\n```\n",
    " no-java-keywords > Rule Details > Correct example\ncds, no-java-keywords, correct, annotation, @cds.java.name, Java, reserved keywords\nThis CDS model defines an entity 'Order' and demonstrates how to use the @cds.java.name annotation to avoid using a reserved Java keyword. The element named 'new' is mapped to 'newValue' for Java code generation, preventing problems with reserved keywords in generated Java code.\n\n```cds\nentity Order {\n  key ID      : UUID;\n  @cds.java.name: \"newValue\"\n  new         : String;\n}\n\n```\n",
    " no-java-keywords > Rule Details > Incorrect example\ncds, no-java-keywords, incorrect, Java, reserved keywords\nThis CDS model demonstrates an incorrect usage wherein the element name 'new', a reserved Java keyword, is used directly, which will cause issues during code generation or compilation for Java-based CAP projects. The linter will raise a warning for this case.\n\n```cds\nentity Order {\n  key ID      : UUID;\n  new         : String;\n}\n\n```\n",
    " Serving OData APIs > PATCH Entity Collection with Mass Data (Java)\nOData, patch, mass update, delta payload, Java, HTTP\nExample of a PATCH HTTP request to update a collection of entities using an OData v4 delta payload. This allows efficient batch modification (update and delete) of multiple entities in Java OData services.\n\n```http\nPATCH /CatalogService/Books\nContent-Type: application/json\n\n{\n  \"@context\": \"#$delta\",\n  \"value\": [\n    {\n      \"ID\": 17,\n      \"title\": \"CAP - what's new in 2023\",\n      \"price\": 29.99,\n      \"author_ID\": 999\n    },\n    {\n      \"ID\": 85,\n      \"price\": 9.99\n    },\n    {\n      \"ID\": 42,\n      \"@removed\": { \"reason\": \"deleted\" }\n    }\n  ]\n}\n```\n",
    " Serving OData APIs > PATCH Entity Collection with Mass Data (Java)\nconfiguration, Java, delta update, CDS, annotation\nCDS annotation required to enable delta updates (PATCH with delta payload) on an entity in OData services. Use this to allow mass data PATCH operations in Java.\n\n```cds\n@Capabilities.UpdateRestrictions.DeltaUpdateSupported\n```\n",
    " Serving OData APIs > Open Types\ncds, service, open type\nDeclares an open entity type (`Book`) in CDS, which allows clients to dynamically add properties to instances of the entity as defined by the @open annotation.\n\n```cds\nservice CatalogService {\n  @open\n  entity Book {\n    key id : Integer;\n  }\n}\n```\n",
    " Serving OData APIs > Open Types\nOData, edmx, OpenType, output, Book\nOData EDMX definition of an open type entity (`Book`). The OpenType attribute enables dynamic client-side properties.\n\n```xml\n<EntityType Name=\"Book\" OpenType=\"true\">\n  <Key>\n    <PropertyRef Name=\"id\"/>\n  </Key>\n  <Property Name=\"id\" Type=\"Edm.Integer\" Nullable=\"false\"/>\n</EntityType>\n```\n",
    " Serving OData APIs > Open Types\nopen type, payload, json\nExample of a JSON payload for an open type entity, showing how clients can add additional properties when creating or updating entities.\n\n```json\n{\"id\": 1, \"title\": \"Tow Sawyer\"}\n```\n",
    " Serving OData APIs > Open Types\nopen type, payload, json\nExample of a JSON payload with complex or nested properties for an open type in OData/CDS.\n\n```json\n{\"title\": \"Tow Sawyer\", \"author\": { \"name\": \"Mark Twain\", \"age\": 74 } }\n```\n",
    " Serving OData APIs > Open Types\ncds, type, open type, reference\nShows definition of a CDS type (`Book`) as open and a non-open type (`Order`) referencing it, clarifying that only the annotated type is open for dynamic properties.\n\n```cds\nservice CatalogService {\n  type Order {\n    guid: Integer;\n    book: Book;\n  }\n  @open\n  type Book {}\n}\n```\n",
    " Serving OData APIs > Open Types\nsample request, open type, Order\nValid sample payload for an `Order` containing a reference to an open type with dynamic properties.\n\n```json\n{\"guid\": 1, \"book\": {\"id\": 2, \"title\": \"Tow Sawyer\"}}\n```\n",
    " Serving OData APIs > Open Types > Java Type Mapping > Simple Types\njson, java, open type, type mapping\nJava type mapping table for simple JSON values in open type payloads, showing deserialization types for string, boolean, numbers, and null.\n\n```csvc\n|JSON                     | Java Type of the `value`       |\n|-------------------------|--------------------------------|\n|{\"value\": \"Tom Sawyer\"} | `java.lang.String`             |\n|{\"value\": true}         | `java.lang.Boolean`            |\n|{\"value\": 42}           | `java.lang.Number` (Integer)   |\n|{\"value\": 36.6}         | `java.lang.Number` (BigDecimal)|\n|{\"value\": null}         | `java.lang.Object`             |\n```\n",
    " Serving OData APIs > Open Types > Java Type Mapping > Structured Types\njson, java, open type, type mapping\nJava type mapping table for complex and collection JSON values in open type payloads, demonstrating deserialization into Maps and Lists.\n\n```csvc\n|JSON                                                               | Java Type of the `value`             |\n|-------------------------------------------------------------------|--------------------------------------|\n|{\"value\": {\"name\": \"Mark Twain\"}}                                | `java.util.Map<String, Object>`      |\n|{\"value\":[{\"name\": \"Mark Twain\"}, {\"name\": \"Charlotte Bronte\"}]}| `java.util.List<Map<String, Object>>`|\n```\n",
    " Serving OData APIs > Singletons\ncds, annotation, singleton, odata\nCDS example of annotating an entity as an OData singleton, making it available directly via service root and omitting the need for key-based addressing.\n\n```cds\nservice Sue {\n  @odata.singleton entity MySingleton {\n    key id : String; // can be omitted in OData v4.01\n    prop : String;\n    assoc : Association to myEntity;\n  }\n}\n```\n",
    " Serving OData APIs > Singletons\ncds, singleton, odata\nDefines a singleton entity in CDS that is selected from another entity with ordering, providing the oldest employee as a singleton resource.\n\n```cds\nservice Sue {\n  @odata.singleton entity OldestEmployee as\n    select from Employees order by birthyear;\n}\n```\n",
    " Serving OData APIs > Singletons > Requesting Singletons\nOData, singleton, sample request\nSample HTTP GET requests to access an OData singleton and its properties, including property expansion.\n\n```http\nGET …/MySingleton\nGET …/MySingleton/prop\nGET …/MySingleton/assoc\nGET …/MySingleton?$expand=assoc\n```\n",
    " Serving OData APIs > Singletons > Updating Singletons\nOData, singleton, PATCH, PUT, sample request\nSample HTTP PATCH or PUT request to update a property of a singleton entity in OData.\n\n```http\nPATCH/PUT …/MySingleton\n{prop: “New value”}\n```\n",
    " Serving OData APIs > Singletons > Deleting Singletons\nOData, singleton, DELETE, sample request\nSample DELETE request to remove a nullable singleton entity, possible only if annotated with @odata.singleton.nullable.\n\n```http\nDELETE …/MySingleton\n```\n",
    " Serving OData APIs > Miscellaneous > Omitting Elements from APIs\ncds, annotation, ignore field, API\nHow to use the @cds.api.ignore annotation on entity fields to suppress them from appearing in the OData or OpenAPI APIs.\n\n```cds\nentity Books { ...\n  @cds.api.ignore\n  author : Association to Authors;\n}\n```\n",
    " Serving OData APIs > Miscellaneous > Absolute Context URL\nconfiguration, OData, absolute context url, Node.js\nHow to configure the OData context URL to be absolute, which affects the @odata.context returned in OData responses in Node.js CAP applications.\n\n```js\ncds.odata.contextAbsoluteUrl = \"https://your.domain.com/yourService\"\n```\n",
    " Serving OData APIs > Miscellaneous > Absolute Context URL\njson, OData, context url, response\nExample OData V4 response JSON with an absolute @odata.context URL as a result of custom contextAbsoluteUrl configuration.\n\n```json\n{\n  \"@odata.context\":\"https://your.domain.com/yourService/$metadata#Books(title,author,ID)\",\n  \"value\":[\n    {\"ID\": 201,\"title\": \"Wuthering Heights\",\"author\": \"Emily Brontë\"},\n    {\"ID\": 207,\"title\": \"Jane Eyre\",\"author\": \"Charlotte Brontë\"},\n    {\"ID\": 251,\"title\": \"The Raven\",\"author\": \"Edgar Allen Poe\"}\n  ]\n}\n```\n",
    " no-join-on-draft > Examples > Correct example\ncds modeling, service definition, csn, no-join-on-draft, correct example\nCDS service definition for CatalogService projecting on db.Books. No draft-enabled entities or JOINs are used, making this a correct example adhering to the no-join-on-draft rule.\n\n```cds\nservice CatalogService {\n  entity Books as projection on db.Books;\n}\n\n```\n",
    " no-join-on-draft > Examples > Incorrect example\ncds modeling, service definition, csn, no-join-on-draft, incorrect example\nCDS service definition where CatalogService exposes BookDetails as a JOIN between db.Books (which is draft-enabled) and db.Authors. This violates the no-join-on-draft rule and will produce a warning.\n\n```cds\nservice CatalogService {\n  entity BookDetails as select from db.Books\n    left join db.Authors on Books.author = Authors.ID {\n      Books.ID, Books.title, Authors.name\n    };\n}\n\n```\n",
    " sql-cast-suggestion > Examples > ✅   Correct example\ncds modeling, sql, sql-cast-suggestion, cast, correct example\nThis CDS modeling snippet defines the entity 'ListOfBooks' as a projection on 'Books' with explicit SQL casts for elements 'name2' and 'name3'. The '@sap/cds/sql-cast-suggestion' rule will not be triggered for these columns, as explicit casts are provided, following best practice for database compatibility in compiler v2.\n\n```cds\nentity ListOfBooks as select from Books {\n  ID,\n  cast(author as String) as name2,\n  cast(title as String) as name3\n};\n```\n",
    " sql-cast-suggestion > Examples > ❌   Incorrect example\ncds modeling, sql, sql-cast-suggestion, cast, incorrect example\nThis CDS modeling example defines 'ListOfBooks' without explicit SQL casts for 'name1' and 'name2'. The '@sap/cds/sql-cast-suggestion' rule will be triggered, because these columns require explicit casts to avoid database-specific issues. Makes clear what the linter flags under the new compiler behavior.\n\n```cds\nentity ListOfBooks as select from Books {\n  ID,\n  author as name1,\n  title as name2\n};\n```\n",
    " sql-null-comparison > Examples > Correct example\nsql-null-comparison, cds modeling, correct example, IS NULL\nThis CDS snippet demonstrates the correct way to compare against null in a view using 'IS NULL'. The ESLint rule is satisfied in this example, as SQL null checks require 'IS NULL' or 'IS NOT NULL' rather than equality/inequality operators.\n\n```cds\nentity Books {\n  key ID : Integer;\n  Title : String;\n  Author : Association to Authors;\n}\n\nview BooksWithoutAuthor as select from Books {\n  ID,\n  Title\n} where Author is null;\n```\n",
    " sql-null-comparison > Examples > Incorrect example\nsql-null-comparison, cds modeling, incorrect example, bad null comparison\nThis CDS snippet shows an incorrect way of comparing a value to null using '= null'. The ESLint rule will report a warning here because in SQL, null checks must use 'IS NULL' or 'IS NOT NULL', not equality/inequality operators.\n\n```cds\nentity Books {\n  key ID : Integer;\n  Title : String;\n  Author : Association to Authors;\n}\n\nview BooksWithoutAuthor as select from Books {\n  ID,\n  Title\n} where Author = null;\n```\n",
    " start-elements-lowercase > Rule Details > Correct example\ncds, naming conventions, element name, lowercase\nDefines a CDS entity 'Books' where the element names 'title' and 'author' start with lowercase letters, following the recommended naming conventions for elements. This is a correct example for the rule enforcing lowercase element names.\n\n```cds\nentity Books {\n  title : String;\n  author: String;\n}\n```\n",
    " start-elements-lowercase > Rule Details > Incorrect example\ncds, naming conventions, element name, uppercase, lint warning\nDefines a CDS entity 'Books' with element names 'Title' and 'Author' starting with uppercase letters. This violates the naming convention rule that element names should begin with a lowercase letter and triggers a lint warning.\n\n```cds\nentity Books {\n  Title : String;\n  Author: String;\n}\n```\n",
    " start-entities-uppercase > Examples > Correct example\ncds modeling, entity, naming conventions, correct example, db/schema.cds\nA correct CDS entity declaration with a capitalized entity name 'Books' according to naming conventions. This satisfies the 'start-entities-uppercase' linting rule.\n\n```cds\nentity Books {\n  ID   : Integer;\n  title: String;\n}\n\n```\n",
    " start-entities-uppercase > Examples > Incorrect example\ncds modeling, entity, naming conventions, incorrect example, db/schema.cds\nAn incorrect CDS entity declaration with a lowercase entity name 'books'. This violates the 'start-entities-uppercase' linting rule and will result in a warning.\n\n```cds\nentity books {\n  ID   : Integer;\n  title: String;\n}\n\n```\n",
    " valid-csv-header > Rule Details > model definition\ncds modeling, db/schema.cds, entity\nDefines an entity named 'Books' in the db/schema.cds model. The entity has columns 'ID', 'title', and 'stock'. Used as the basis for data-related rules in CSV files.\n\n```cds\nentity Books {\n  ID   : Integer;\n  title: String;\n  stock: Integer;\n}\n```\n",
    " valid-csv-header > Examples > Correct example\ncsv, initial data, db/data/sap.capire.bookshop-Books.csv, correct\nA correct CSV file containing initial data for the 'Books' entity. The header matches the element names (columns) declared in the CDS model: 'ID', 'title', 'stock'.\n\n```csv\nID,title,stock\n101,The Raven,99\n102,Don Quixote,50\n```\n",
    " valid-csv-header > Examples > Incorrect example\ncsv, initial data, db/data/sap.capire.bookshop-Books.csv, incorrect\nAn incorrect CSV file for the 'Books' entity with a typo in the header: 'title' is misspelled as 'tile'. This causes the valid-csv-header rule to issue a warning.\n\n```csv\nID,tile,stock\n101,The Raven,99\n102,Don Quixote,50\n```\n",
    " CDS Typer > Quickstart using VS Code\ninstallation, cds-typer, VS Code, project setup, type integration\nCommands to add and install the cds-typer dev-dependency to your CAP project, required as part of the setup for generated type integration with VS Code.\n\n```shell\ncds add typer\nnpm i\n```\n",
    " CDS Typer > Quickstart using VS Code\nproject setup, cds-typer, npm, type integration, service implementation\nStandard import of entities from the CDS model without using cds-typer; the type of data is not known to the editor for intellisense/code completion.\n\n```js\n// without cds-typer\nconst { Books } = cds.entities('bookshop')\nservice.before('CREATE', Books, ({ data }) => { /* data is of type any */})\n```\n",
    " CDS Typer > Quickstart using VS Code\nproject setup, cds-typer, npm, type integration, service implementation, subpath imports\nES-style import for a generated type, leveraging subpath imports to bring in the correct entity with type information for intellisense support.\n\n```js\nconst { Books } = require('#cds-models/sap/capire/bookshop')\nservice.before('CREATE', Books, ({ data }) => { /* data is of type Books */})\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > CQL\ncql, type integration, cds-typer, SELECT, INSERT, DELETE, code completion\nUsage of generated entity types with CQL operations (SELECT, INSERT, DELETE), enabling rich code completion and type-safe projections based on your CDS model.\n\n```js\nconst { Book, Books } = require('#cds-models/sap/capire/bookshop')\n\nSELECT(Books)\nSELECT.one(Book)\nSELECT(Books, b => { b.ID })\nSELECT(Books, b => { b.author(a => a.ID.as('author_id')) })\n\nINSERT.into(Books)\nINSERT.into(Books).columns(['title', 'ID'])\n\nDELETE.from(Books, 42)\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > CRUD Handlers\ntype integration, CRUD handlers, cds-typer, service implementation, before, on, after\nCRUD handler examples using generated types for proper typing and improved developer experience in CDS service implementations.\n\n```js\nconst { Book, Books } = require('#cds-models/sap/capire/bookshop')\nconst service = new cds.ApplicationService\n\nservice.before('READ', Books, req => {  })\nservice.on('READ', Books, req => {  })\nservice.after('READ', Books, (books, req) => {  })\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > Actions\ntype integration, actions, cds-typer, service implementation\nType-safe usage of generated types for custom actions in a CAP service using cds-typer.\n\n```js\nconst { submitOrder } = require('#cds-models/CatalogService')\nservice.on(submitOrder, ({ data }) => {\n  // action implementation\n})\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > Lambda Functions vs. Fully Fledged Functions\ntype integration, JSDoc, cds-typer, service implementation, function handler, JavaScript\nShows how to use JSDoc to provide type information for a handler function parameter to fully leverage cds-typer types in JavaScript projects.\n\n```js\nservice.on('READ', Books, readBooksHandler)\n\n/** @param { cds.TypedRequest<Books> } req */\nfunction readBooksHandler (req) {\n  req.data // req.data is now properly known to be of type Books again\n}\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > Lambda Functions vs. Fully Fledged Functions\ntype integration, TypeScript, cds-typer, service implementation, function handler\nStrongly-typed handler function in TypeScript leveraging generated cds-typer types for request payloads.\n\n```ts\nimport { Books } from '#cds-models/sap/capire/bookshop'\nservice.on('READ', Books, readBooksHandler)\n\nfunction readBooksHandler (req: cds.TypedRequest<Books>) {\n  req.data // req.data is now properly known to be of type Books again\n}\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > Enums\ntype integration, enums, cds-typer, service implementation\nAssigning enum values using cds-typer-generated enum types, enhancing property assignment safety and documentation within handlers.\n\n```js\nconst { Ticket, Priority } = require('#cds-models/incidents')\n\nservice.before('CREATE', Ticket, (req) => {\n  req.data.priority = Priority.L\n  req.data.status = Ticket.status.UNASSIGNED\n})\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > Handling Optional Properties\ncds, type integration, optional properties, cds-typer\nSample CDS entities to illustrate how generated type properties are made optional in the emitted type files by default.\n\n```cds\nentity Author {\n    name: String;\n    …\n}\n\nentity Book {\n    author: Association to Author;\n    …\n}\n```\n",
    " CDS Typer > Using Emitted Types in Your Service > Handling Optional Properties\ntype integration, TypeScript, optional properties, cds-typer\nDemonstrates handling of optional association properties on generated types and different TypeScript idioms to safely access nested properties.\n\n```ts\nimport { Author, Book } from '#cds-models/sap/capire/bookshop'\nconst myBook = new Book()\n\nmyBook.author?.name\n\nif (myBook.author) myBook.author.name\n\nmyBook.author!.name\n\nconst myAttachedBook = myBook as Required<Book>\nmyAttachedBook.author?.name\n\nconst myPartiallyAttachedBook = myBook as Book & { author: Author }\nmyPartiallyAttachedBook.author?.name\n```\n",
    " CDS Typer > Fine Tuning > Singular/ Plural\ncds, annotations, singular/plural, cds-typer, naming conventions\nCDS annotations for customizing the singular and plural generated class names for entities, allowing you to override heuristic naming.\n\n```cds\n@singular: 'Mouse'\nentity Mice { ... }\n\n@plural: 'FlockOfSheep'\nentity Sheep { ... }\n```\n",
    " CDS Typer > Fine Tuning > Strict Property Checks in JavaScript Projects\nTypeScript, strict, jsconfig.json, tsconfig.json\nAdd this setting to your jsconfig.json or tsconfig.json to enable strict property checks in JavaScript projects that use generated cds-typer types.\n\n```json\n{\n  \"checkJs\": true\n}\n```\n",
    " CDS Typer > Usage Options > Command Line Interface (CLI)\nCLI, cds-typer, command line usage\nCommand-line usage of cds-typer to generate types from your CDS schema file into a specified output directory.\n\n```shell\nnpx @cap-js/cds-typer /home/mybookshop/db/schema.cds --outputDirectory /home/mybookshop\n```\n",
    " CDS Typer > Usage Options > Command Line Interface (CLI)\nCLI, help, cds-typer, usage options\nDisplays the available parameters and options for the cds-typer CLI.\n\n```shell\nnpx @cap-js/cds-typer --help\n```\n",
    " CDS Typer > Usage Options > Configuration\ncds.env, configuration, cds-typer, output directory\nExample for configuring the output directory for generated types via the cds.env or a corresponding configuration file.\n\n```properties\ncds.typer.output_directory: myCustomDirectory\n```\n",
    " CDS Typer > Integrate Into Your CI\nCI/CD, build, cds-typer, automated build\nRecommended CI/CD script to generate type definitions for all CDS models prior to running tests or builds, ensuring emitted files are available as build artifacts.\n\n```shell\nnpx @cap-js/cds-typer \"*\" --outputDirectory @cds-models\n```\n",
    " CDS Typer > Integrate Into Your Build Process\nbuild, custom build, cds-typer, typescript, cds build\nSample snippet for customizing the build task array to ensure the typescript build task (and thus type generation) is run as part of the build process.\n\n```json\n\"tasks\": [\n  { \"for\": \"nodejs\" },\n  { \"for\": \"typescript\" },\n  …\n]\n```\n",
    " CDS Typer > Integrate Into Your Build Process\ncds-typer, build, tsconfig, typescript\nRecommended minimal tsconfig.cdsbuild.json setup for customizing output directory and excludes for the cds-typer build step in TypeScript projects.\n\n```json\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./gen/srv\",\n  },\n  \"exclude\": [\"app\", \"gen\"]\n}\n```\n",
    " CDS Typer > About The Facet\nfacet, cds add, cds-typer, project setup\nHow to add the 'typer' facet to your CAP project, which installs cds-typer and configures your environment for generated types.\n\n```shell\ncds add typer\n```\n",
    " CDS Typer > About The Facet\ngitignore, cds-typer, generated types, version control\nDefault .gitignore entry added by the 'typer' facet to exclude emitted type files from version control.\n\n```txt\n@cds-models\n```\n",
    " CDS Typer > About the Emitted Type Files\nemitted types, file structure, cds-typer\nFile structure produced by cds-typer, organizing emitted types by CDS namespace within the configured output directory.\n\n```txt\n@cds-models/\n└── sap/\n  └── capire/\n    └── bookshop/\n      ├── index.js\n      └── index.ts\n```\n",
    " CDS Typer > Subpath Imports\ntype integration, subpath imports, cds-typer, service implementation\nHow to import generated entity types using the subpath import mapping established by the typer facet.\n\n```js\nconst { Books } = require('#cds-models/sap/capire/bookshop')\n```\n",
    " CDS Typer > Subpath Imports\ntype integration, subpath imports, cds-typer, TypeScript\nType-only top-level import for annotation and dynamic import for runtime usage in TypeScript when using typer-generated types.\n\n```ts\nimport type { Book } from '#cds-models/sap/capire/bookshop'\nconst { Book } = await import('#cds-models/sap/capire/bookshop')\n```\n",
    " CDS Typer > Static Top-Level Imports\ntype integration, top-level import, cds-typer, TypeScript, useEntitiesProxy\nTop-level import of entity types in TypeScript supported via cds-typer's `useEntitiesProxy` option, ensuring type access after CDS runtime initialization.\n\n```ts\nimport { Book } from '#cds-models/sap/capire/bookshop'\n\nexport class MyService extends cds.ApplicationService {\n  async init () {\n    Book.actions  // works\n    this.on('READ', Book, req => { req.data.author  /* works as well */  })\n  }\n}\n```\n",
    " Hybrid Testing > Bind to Cloud Services > Services on Cloud Foundry\nhybrid testing, CLI, cds bind, Cloud Foundry, hana, service binding\nBinds the local CAP application's 'db' service to the Cloud Foundry-managed service instance 'bookshop-db' (HANA HDI), as targeted in your current CF space. Creates service key automatically if not specified.\n\n```shell\ncds bind db --to bookshop-db\n```\n",
    " Hybrid Testing > Bind to Cloud Services > Services on Cloud Foundry\nhybrid testing, configuration, cdsrc-private.json, service binding, Cloud Foundry\nExample .cdsrc-private.json configuration showing service binding of a local CAP 'db' service to a HANA service instance in Cloud Foundry under the 'hybrid' profile.\n\n```json\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"db\": {\n        \"kind\": \"hana\",\n        \"binding\": {\n          \"type\": \"cf\",\n          \"apiEndpoint\": \"https://api.sap.hana.ondemand.com\",\n          \"org\": \"your-cf-org\",\n          \"space\": \"your-cf-space\",\n          \"instance\": \"bookshop-db\",\n          \"key\": \"bookshop-db-key\",\n          \"vcap\": {\n            \"label\": \"hana\",\n            \"plan\": \"hdi-shared\"\n          },\n          \"resolved\": false\n        }\n      }\n    }\n  }\n}\n\n```\n",
    " Hybrid Testing > Bind to Cloud Services > User-Provided Services on Cloud Foundry\nhybrid testing, CLI, cloud foundry, user provided service, service binding\nBinds the CAP application's 'my' service to the Cloud Foundry user-provided service instance 'bookshop-ups'. The service name 'my' must match a name in your CDS 'requires' configuration.\n\n```shell\ncds bind my --to bookshop-ups\n```\n",
    " Hybrid Testing > Bind to Cloud Services > Shared Service Instances on Cloud Foundry\nhybrid testing, CLI, cloud foundry, shared service instance, service binding\nBinds the 'messaging' CDS service to the shared Cloud Foundry service instance 'bookshop-redis'. Determines the origin org and space for the shared service automatically.\n\n```shell\ncds bind messaging --to bookshop-redis\n```\n",
    " Hybrid Testing > Bind to Cloud Services > Shared Service Instances on Cloud Foundry\nhybrid testing, configuration, cdsrc-private.json, shared service, redis\nSample 'cdsrc-private.json' binding configuration for a shared Redis messaging service from a specific org/space, under the 'hybrid' profile.\n\n```json\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"redis\": {\n        \"binding\": {\n          \"type\": \"cf\",\n          \"apiEndpoint\": \"https://api.sap.hana.ondemand.com\",\n          \"org\": \"shared-from-cf-org\",\n          \"space\": \"shared-from-cf-space\",\n          \"instance\": \"redis-cache\",\n          \"key\": \"redis-cache-key\",\n          \"resolved\": false\n        },\n        \"kind\": \"redis-messaging\",\n        \"vcap\": {\n          \"name\": \"messaging\"\n        }\n      }\n    }\n  }\n}\n\n```\n",
    " Hybrid Testing > Bind to Cloud Services > Services on Kubernetes > Bind to Kubernetes Service Bindings\nhybrid testing, CLI, kubernetes, service binding, k8s\nBinds to a Kubernetes Service Binding in the current context using the given binding name (bookshop-auth-binding). Requires current K8s context to be set.\n\n```shell\ncds bind -2 bookshop-auth-binding --on k8s\n```\n",
    " Hybrid Testing > Bind to Cloud Services > Services on Kubernetes > Bind to Kubernetes Service Bindings\nhybrid testing, configuration, cdsrc-private.json, kubernetes, xsuaa\nShows binding info in .cdsrc-private.json for XSUAA on Kubernetes via service binding, matched to the hybrid profile.\n\n```json\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"auth\": {\n        \"binding\": {\n          \"type\": \"k8s\",\n          \"name\": \"bookshop-auth-binding\",\n          \"cluster\": \"https://apiserver.d9a6204.kyma-stage.shoot.live.k8s-hana.ondemand.com\",\n          \"instance\": \"bookshop-auth\",\n          \"namespace\": \"dev\",\n          \"secret\": \"bookshop-auth-secret\",\n          \"resolved\": false,\n          \"vcap\": {\n            \"label\": \"xsuaa\",\n            \"plan\": \"application\"\n          }\n        },\n        \"kind\": \"xsuaa\"\n      }\n    }\n  }\n}\n\n```\n",
    " Hybrid Testing > Bind to Cloud Services > Services on Kubernetes > Bind to Kubernetes Secrets\nhybrid testing, CLI, kubernetes, k8s, secrets, hana\nBinds the local 'db' service to a Kubernetes secret named 'bookshop-db' with explicit service kind 'hana'. Used if no service metadata exists in the secret.\n\n```shell\ncds bind -2 bookshop-db --on k8s --kind hana\n```\n",
    " Hybrid Testing > Run with Service Bindings > Run CAP Node.js Apps with Service Bindings\nhybrid testing, CLI, service binding, run service\nRuns your CAP application locally while resolving to cloud service bindings previously configured and stored for the 'hybrid' profile.\n\n```shell\ncds watch --profile hybrid\n```\n",
    " Hybrid Testing > Run with Service Bindings > Run CAP Node.js Apps with Service Bindings\nhybrid testing, CLI, service binding, credentials, environment\nResolves and displays the credentials for the 'db' service in your current 'hybrid' profile, obtaining credentials remotely according to binding info.\n\n```shell\ncds env get requires.db.credentials --profile hybrid --resolve-bindings\n```\n",
    " Hybrid Testing > Run with Service Bindings > Run CAP Node.js Apps with Service Bindings\nhybrid testing, env, credentials, hana\nSample credentials object resolved for a bound HANA service upon running `cds env get requires.db.credentials`. Used for hybrid testing and integration.\n\n```js\n{\n  url: 'jdbc:sap://BDB9AC0F20CB46B494E6742047C4F99A.hana.eu10.hanacloud.ondemand.com:443?encrypt=true&validateCertificate=true&currentschema=BDB9AC0F20CB46B494E6742047C4F99A',\n  host: 'bdb9ac0f20cb46b494e6742047c4f99a.hana.eu10.hanacloud.ondemand.com',\n  port: '443',\n  driver: 'com.sap.db.jdbc.Driver',\n  schema: 'BDB9AC0F20CB46B494E6742047C4F99A',\n  hdi_user: 'BDB9AC0F20CB46B494E6742047C4F99A_DT',\n  hdi_password: 'abc...xyz',\n  user: 'BDB9AC0F20CB46B494E6742047C4F99A_RT',\n  password: 'abc....xyz',\n  certificate: '-----BEGIN CERTIFICATE-----\\n' +\n    '...' +\n    '-----END CERTIFICATE-----'\n}\n```\n",
    " Hybrid Testing > Run with Service Bindings > Run Arbitrary Commands with Service Bindings\nhybrid testing, CLI, service binding, VCAP_SERVICES\nRuns a local Approuter (or other application) with cloud service credentials injected via VCAP_SERVICES, resolving service bindings as configured with 'cds bind'. (Mac/Linux example)\n\n```shell\ncds bind --exec -- npm start --prefix approuter\n```\n",
    " Hybrid Testing > Run with Service Bindings > Run Arbitrary Commands with Service Bindings\nhybrid testing, CLI, service binding, VCAP_SERVICES, debugging\nOutputs the content of the VCAP_SERVICES env variable as resolved by 'cds bind --exec', for debugging or inspection of injected credentials. (Mac/Linux example)\n\n```shell\ncds bind --exec -- node -e 'console.log(process.env.VCAP_SERVICES)'\n```\n",
    " Hybrid Testing > Run with Service Bindings > Run CAP Java Apps with Service Bindings\nhybrid testing, CLI, java, service binding\nStarts your CAP Java application using resolved service bindings. Useful for hybrid or CI/CD development: credentials are injected via environment variables.\n\n```shell\ncds bind --exec mvn spring-boot:run\n```\n",
    " Hybrid Testing > Run with Service Bindings > Bindings from a Cloud Application\nhybrid testing, CLI, cloud foundry, service binding, application binding\nBinds all supported service bindings from the Cloud Foundry application 'bookshop-srv' to your local CAP project for hybrid testing. Shortcut for --to-app-services.\n\n```shell\ncds bind -a bookshop-srv\n```\n",
    " Hybrid Testing > Run with Service Bindings > Bindings from a Cloud Application\nhybrid testing, configuration, requires, vcap.name, xsuaa\nExample configuration to resolve multiple XSUAA services by explicitly specifying vcap.name for each, preventing ambiguity in app service bindings.\n\n```json\n\"requires\": {\n  \"auth\": {\n    \"kind\": \"xsuaa\",\n    \"vcap\": {\n      \"name\": \"bookshop-auth1\"\n    }\n  },\n  \"auth2\": {\n    \"kind\": \"xsuaa\",\n    \"vcap\": {\n      \"name\": \"bookshop-auth2\"\n    }\n  }\n}\n```\n",
    " Hybrid Testing > cds bind Usage > By Cloud Service Only\nhybrid testing, CLI, service binding, cloud foundry\nShortest form of binding: binds local default service (by service kind) to a CF service instance named 'bookshop-db'. Used for fast setup or scripting.\n\n```shell\ncds bind -2 bookshop-db\n```\n",
    " Hybrid Testing > cds bind Usage > By Cloud Service Only\nhybrid testing, CLI, service binding, cloud foundry, service key\nSpecifies both the CF service instance name and a specific service key to use when binding a CAP service locally.\n\n```shell\ncds bind -2 bookshop-db:my-db-key\n```\n",
    " Hybrid Testing > cds bind Usage > With different profile\nhybrid testing, CLI, service binding, profile\nBinds to 'bookshop-db' but saves the binding information under the alternate profile 'test'. Switch profiles as needed for different environments.\n\n```shell\ncds bind --to bookshop-db --for test\n```\n",
    " Hybrid Testing > cds bind Usage > With different profile\nhybrid testing, CLI, service binding, profile\nRuns your CAP service using bindings from the 'test' profile (or any alternate profile used with cds bind).\n\n```shell\ncds watch --profile test\n```\n",
    " Hybrid Testing > cds bind Usage > With CDS Service and Kind\nhybrid testing, CLI, service binding, kind\nBinds the 'credstore' CDS service explicitly to a given instance and enforces the explicit kind (needed if kind cannot be inferred automatically).\n\n```shell\ncds bind credstore -2 my-credstore --kind credstore\n```\n",
    " Hybrid Testing > cds bind Usage > Bind Multiple Services with One Command\nhybrid testing, CLI, service binding, multiple\nShortcut for batch-binding multiple services in a single command. Only possible when kind is not required for any service.\n\n```shell\ncds bind -2 bookshop-db,bookshop-auth\n```\n",
    " Hybrid Testing > cds bind Usage > Overwrite Cloud Service Credentials\nhybrid testing, CLI, service binding, credentials, overwrite\nBinds 'my-service' and overwrites a specific credential field during hybrid testing, e.g. forcing connections via SSH local proxy.\n\n```shell\ncds bind -2 my-service --credentials '{ \"onpremise_proxy_host\": \"localhost\" }'\n```\n",
    " Hybrid Testing > cds bind Usage > Overwrite Cloud Service Credentials\nhybrid testing, configuration, cdsrc-private.json, service binding, credentials, overwrite\nExample .cdsrc-private.json containing an overwritten credential within the service binding, merging custom credentials for hybrid/local testing.\n\n```json\n{\n  \"requires\": {\n    \"[hybrid]\": {\n      \"my-service\": {\n        \"binding\": {\n          \"type\": \"cf\",\n          \"apiEndpoint\": \"https://api.sap.hana.ondemand.com\",\n          \"org\": \"your-cf-org\",\n          \"space\": \"your-cf-space\",\n          \"instance\": \"my-service\",\n          \"key\": \"my-service-key\",\n          \"credentials\": {\n            \"onpremise_proxy_host\": \"localhost\"\n          },\n          \"resolved\": false\n         }\n      }\n    }\n  }\n}\n\n```\n",
    " Hybrid Testing > cds bind Usage > Overwrite Cloud Service Credentials\nhybrid testing, CLI, service binding, multiple, credentials\nOverwrites service credentials for multiple services in a single bind command, handy for complex hybrid test setups with SSH tunneling, custom hosts, etc.\n\n```shell\ncds bind --to my-service,redis-cache:my-key,bookshop-xsuaa --credentials \\\n  '{ \"my-service\": { \"onpremise_proxy_host\": \"localhost\" }, \"redis-cache:my-key\":{ \"hostname\": \"localhost\", \"port\": 1234 }}'\n\n```\n",
    " Hybrid Testing > cds bind Usage > Overwrite Cloud Service Credentials\nhybrid testing, CLI, service binding, application binding, multiple, credentials\nOverwrites credentials for all bound service instances of a Cloud Foundry app for hybrid testing (useful in app-to-local monitoring and CI/CD scenarios).\n\n```shell\ncds bind --to-app-services bookshop-srv --credentials \\\n  '{ \"my-service\": { \"onpremise_proxy_host\": \"localhost\" }, \"redis-cache\":{ \"hostname\": \"localhost\", \"port\": 1234 }}'\n\n```\n",
    " Hybrid Testing > cds bind Usage > Execute Commands with Bindings\nhybrid testing, CLI, service binding, exec, arbitrary command, VCAP_SERVICES\nGeneral usage of executing arbitrary local commands with resolved service binding credentials injected (VCAP_SERVICES), e.g., for non-CAP tools or custom apps.\n\n```shell\ncds bind --exec [--] <command> <args ...>\n```\n",
    " Hybrid Testing > cds bind Usage > Execute Commands with Bindings\nhybrid testing, CLI, service binding, exec, profile\nSpecifies an alternate profile from which to resolve service bindings when executing an external command. Useful for testing or secondary environments.\n\n```shell\ncds bind --exec --profile <profile> [--] <command> <args ...>\n```\n",
    " Hybrid Testing > Use Cases > Integration Tests\nhybrid testing, CLI, integration test, service binding, profile, output file\nBinds integration test service to the 'integration-test' profile and writes binding metadata to package.json (but not credentials). Applies for CI/CD usage.\n\n```shell\ncds bind -2 integration-test-hana -o package.json -4 integration-test\n```\n",
    " Login\nCloud Foundry, cf CLI, login, authentication, command line\nLogs into Cloud Foundry (CF) non-interactively by passing the username ($USER) and password ($PASSWORD) directly via the CLI. Useful for automation and scripting environments where user interaction is not possible.\n\n```shell\ncf auth $USER $PASSWORD\n```\n",
    " Optional if your bindings have org and space removed to be agnostic\nCloud Foundry, cf CLI, org, space, environment, command line\nSets the Cloud Foundry CLI target organization and space using environment variables $ORG and $SPACE. This is useful for targeting a specific org/space for deployment or management tasks.\n\n```shell\ncf target -o $ORG -s $SPACE\n```\n",
    " Publishing to AsyncAPI > Usage from CLI\nCLI, asyncapi, compilation, export, docs\nThis command uses the cds CLI to compile all services under the 'srv/' directory and generates AsyncAPI documentation files for each service into the 'docs/' folder. Each file is named after the respective service.\n\n```shell\ncds compile srv --service all -o docs --to asyncapi\n```\n",
    " Publishing to AsyncAPI > Usage from CLI\nCLI, asyncapi, compilation, merged, export, docs\nThis CLI command compiles all services under 'srv/' and generates a single, merged AsyncAPI document containing all services. The output is stored in the 'docs/' folder. Use this when a unified AsyncAPI specification file is desired.\n\n```shell\ncds compile srv --service all -o docs --to asyncapi --asyncapi:merged\n```\n",
    " Publishing to AsyncAPI > Presets\nconfiguration, presets, asyncapi, export, cdsrc.json\nConfigures AsyncAPI export settings globally in the .cdsrc.json file. The 'application_namespace' property is mandatory and example values for further customization can be given. Presets like 'merged.title', 'merged.version', etc. can be set this way for AsyncAPI generation.\n\n```json\n{\n  \"export\": {\n    \"asyncapi\": {\n      \"application_namespace\": \"sap.example\"\n      [...]\n    }\n  }\n}\n```\n",
    " Publishing to AsyncAPI > Annotations\ncds modeling, annotations, asyncapi, service definition, events\nDemonstrates how to set AsyncAPI-specific annotations on a CDS service and its events. These annotations customize the generated AsyncAPI output by specifying title, version, and event metadata. Useful for fine-tuned API documentation via AsyncAPI from a CDS model.\n\n```cds\n@AsyncAPI.Title        : 'CatalogService Events'\n@AsyncAPI.SchemaVersion: '1.0.0'\n@AsyncAPI.Description  : 'Events emitted by the CatalogService.'\n\nservice CatalogService {\n  @AsyncAPI.EventSpecVersion    : '2.0'\n  @AsyncAPI.EventCharacteristics: {\n    ![state-transfer]: 'full-after-image'\n  }\n  @AsyncAPI.EventSchemaVersion       : '1.0.0'\n\n  event SampleEntity.Changed.v1 : projection on CatalogService.SampleEntity;\n}\n```\n",
    " Publishing to AsyncAPI > Extensions\ncds modeling, annotations, extensions, asyncapi, service definition\nShows usage of the @AsyncAPI.Extensions annotation at the global (before 'service') and service/event level. Supports arbitrary extension fields for AsyncAPI output. Service-level extensions are ignored if --merged flag is active, but event-level remain effective.\n\n```cds\n@AsyncAPI.Extensions   : {\n  ![foo-bar]                    : 'baz',\n  ![sap-shortText]              : 'Service Base 1'\n}\n\nservice CatalogService {\n  @AsyncAPI.Extensions          : {\n    ![sap-event-source]           : '/{region}/sap.app.test'\n  }\n  event SampleEntity.Changed.v1 : projection on CatalogService.SampleEntity;\n}\n```\n",
    " Set profile\nenvironment, integration test, profile, shell\nSets the CDS_ENV environment variable to 'integration-test' in the current shell session. This is typically used to activate the 'integration-test' profile for CAP applications during integration testing or specific configuration scenarios.\n\n```shell\nexport CDS_ENV=integration-test\n```\n",
    " Set resolved bindings\nenvironment, configuration, cds CLI, shell\nUses the cds CLI to extract the resolved service bindings from the configuration into an environment variable named cds_requires. Useful for shell scripting, CI/CD setups, and debugging resolved bindings of required services in a CAP project. The --resolve-bindings flag ensures all dynamic bindings (e.g., from cloud environments) are considered.\n\n```shell\nexport cds_requires=\"$(cds env get requires --resolve-bindings)\"\n```\n",
    " Run tests\ntest, integration test, npm, run\nRuns the integration tests using the defined npm script 'integration-test'. This can include any test code, including calls to cds.test or custom test suites. Useful in CI/CD pipelines or local testing scenarios.\n\n```shell\nnpm run integration-test  # [!code highlight]\n```\n",
    " CDS Design Time APIs > Install `@sap/cds-dk`\ninstallation, cds toolkit, npm\nInstalls the @sap/cds-dk package locally in your project. This is required to access the CDS design-time APIs from your project code.\n\n```shell\nnpm add @sap/cds-dk\n```\n",
    " CDS Design Time APIs\nCDS Design Time APIs, require, usage, cds-dk\nImports the @sap/cds-dk module and demonstrates a basic API usage call to cds.import(...). Use these APIs for programmatic CDS design-time operations within your JavaScript code.\n\n```js\nconst cds = require('@sap/cds-dk')\ncds.import(...)\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\ncds add, plugin, registration, custom plugin\nRegisters a custom 'cds add' plugin with the CAP CLI. Can be registered inline with a class or by requiring an implementation module.\n\n```js\ncds.add?.register?.('postgres', require('lib/add')) // ...or inline:\ncds.add?.register?.('postgres', class extends cds.add.Plugin {})\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nplugin, custom plugin, cds add, scaffolding\nBasic skeleton for a custom 'cds add' plugin using class extension. Prepares structure for implementing plugin behaviors.\n\n```js\nconst cds = require('@sap/cds')\n\nmodule.exports = class extends cds.add.Plugin {\n\n}\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nplugin, cds add, docker, configuration, custom plugin\nAdds Docker configuration to the project for local PostgreSQL instance when running the custom 'cds add postgres' plugin.\n\n```js\nconst cds = require('@sap/cds-dk') //> load from cds-dk\nconst { write, path } = cds.utils, { join } = path // [!code ++]\n\nmodule.exports = class extends cds.add.Plugin {\n  async run() { // [!code ++]\n    const pg = join(__dirname, 'add/pg.yaml') // [!code ++]\n    await copy(pg).to('pg.yaml') //> 'to' is relative to cds.root  [!code ++]\n  } // [!code ++]\n}\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\ndocker, pg.yaml, postgres, yaml, custom plugin\nYAML file defining Docker service for a PostgreSQL instance, used by the plugin to enable local database development.\n\n```yaml\nservices:\n  db:\n    image: postgres:alpine\n    environment: { POSTGRES_PASSWORD: postgres }\n    ports: [ '5432:5432' ]\n    restart: always\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nplugin, cds add, integration, mta, combine method, Cloud Foundry\nAugments the project's mta.yaml for Cloud Foundry deployment when other 'cds add' commands are executed, ensuring PostgreSQL configuration is merged in.\n\n```js\nconst cds = require('@sap/cds-dk') //> load from cds-dk\nconst { write, path } = cds.utils, { join } = path\nconst { readProject, merge, registries } = cds.add // [!code ++]\nconst { srv4 } = registries.mta // [!code ++]\n\nmodule.exports = class extends cds.add.Plugin {\n  async run() {\n    const pg = join(__dirname, 'pg.yaml')\n    await copy(pg).to('pg.yaml')\n  }\n  async combine() { // [!code ++]\n    const project = readProject() // [!code ++]\n    const { hasMta, srvPath } = project // [!code ++]\n    if (hasMta) { // [!code ++]\n      const srv = srv4(srvPath) // Node.js or Java server module  [!code ++]\n      const postgres = { in: 'resources', // [!code ++]\n        where: { 'parameters.service': 'postgresql-db' } // [!code ++]\n      } // [!code ++]\n      const postgresDeployer = { in: 'modules', // [!code ++]\n        where: { type: 'nodejs', path: 'gen/pg' } // [!code ++]\n      } // [!code ++]\n      await merge(__dirname, 'add/mta.yml.hbs').into('mta.yaml', { // [!code ++]\n        project, // for Mustache replacements  [!code ++]\n        additions: [srv, postgres, postgresDeployer], // [!code ++]\n        relationships: [{ // [!code ++]\n            insert: [postgres, 'name'], // [!code ++]\n            into: [srv, 'requires', 'name'] // [!code ++]\n        }, { // [!code ++]\n          insert: [postgres, 'name'], // [!code ++]\n          into: [postgresDeployer, 'requires', 'name'] // [!code ++]\n        }] // [!code ++]\n      }) // [!code ++]\n    } // [!code ++]\n    // if (hasHelm) {// [!code ++]\n    //  ... // [!code ++]\n    // if (hasMultitenancy) {// [!code ++]\n    //  ... // [!code ++]\n  } // [!code ++]\n}\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nmta.yaml, merge template, Cloud Foundry, mustache, custom plugin\nMustache template for mta.yaml, used to generate module and resource configuration for PostgreSQL in Cloud Foundry.\n\n```yaml\nmodules:\n  - name: {{appName}}-srv\n    type: {{language}}\n    path: {{& srvPath}}\n    requires:\n      - name: {{appName}}-postgres\n  - name: {{appName}}-postgres-deployer\n    type: nodejs\n    path: gen/pg\n    parameters:\n      buildpack: nodejs_buildpack\n      no-route: true\n      no-start: true\n      tasks:\n        - name: deploy-to-postgresql\n          command: npm start\n    requires:\n      - name: {{appName}}-postgres\nresources:\n  - name: {{appName}}-postgres\n    type: org.cloudfoundry.managed-service\n    parameters:\n      service: postgresql-db\n      service-plan: development\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nplugin, cds add, helm, Kyma, integration\nIntegrates the 'cds add postgres' plugin with Helm/Kyma by merging values.yaml with project details if the project uses Helm.\n\n```js\nconst cds = require('@sap/cds-dk') //> load from cds-dk\nconst { copy, path } = cds.utils, { join } = path\nconst { readProject, merge, registries } = cds.add\nconst { srv4 } = registries.mta\n\nmodule.exports = class extends cds.add.Plugin {\n  async run() {\n    const pg = join(__dirname, 'pg.yaml')\n    await copy(pg).to('pg.yaml')\n  }\n  async combine() {\n    const project = readProject()\n    const { hasMta, hasHelm, srvPath } = project // [!code ++]\n    const { hasMta, srvPath } = project // [!code --]\n    if (hasMta) {\n      ...\n    }\n    if (hasHelm) { // [!code ++]\n      await merge(__dirname, 'add/values.yaml.hbs')\n        .into('chart/values.yaml', { with: project }) // [!code ++]\n    } // [!code ++]\n  }\n}\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nhelm, values.yaml, Kyma, postgres, custom plugin\nMustache template for Helm's values.yaml file, defining bindings and image configuration for PostgreSQL on Kyma.\n\n```yaml\nsrv:\n  bindings:\n    db:\n      serviceInstanceName: postgres\npostgres-deployer:\n  image:\n    repository: <your-container-registry>/{{appName}}-postgres-deployer\n    tag: latest\n  bindings:\n    postgres:\n      serviceInstanceName: postgres\npostgres:\n  serviceOfferingName: postgres\n  servicePlanName: default\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nplugin, cds add, options, custom plugin\nDefines a custom option 'out' for the plugin, letting users specify output directory for the generated pg.yaml file.\n\n```js\noptions() { // [!code ++]\n  return { // [!code ++]\n    'out': { // [!code ++]\n      type: 'string', // [!code ++]\n      short: 'o', // [!code ++]\n      help: 'The output directory for the pg.yaml file.', // [!code ++]\n    } // [!code ++]\n  } // [!code ++]\n} // [!code ++]\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Example: `cds add postgres`\nplugin, cds add, options, custom plugin\nPlugin's run method writes pg.yaml to a user-defined directory, making use of the custom 'out' option.\n\n```js\nasync run() {\n  const pg = join(__dirname, 'pg.yaml')\n  await copy(pg).to(cds.cli.options.out, 'pg.yaml') //> 'to' is relative to cds.root  [!code ++]\n}\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Call `cds add` for an NPM package <beta />\nshell, cds add, npm package, plugin, beta\nCommand to directly install and run an npm package-provided plugin using cds add.\n\n```shell\ncds add my-facet -p @cap-js-community/example\n```\n",
    " Plugins for `cds add` > Create a Plugin from Scratch > Call `cds add` for an NPM package <beta />\nshell, cds add, github, integration test, npm package\nCommand to run a cds add plugin directly from a specific GitHub branch (useful for integration testing custom plugin code).\n\n```shell\ncds add my-facet -p @cap-js-community/example@git+https://github.com/cap-js-community/example#cds-add\n```\n",
    " Plugins for `cds add` > Plugin API > register(name, impl)\nAPI, plugin, cds add, registration\nShows recommended structure when registering a plugin for cds add, including async run and combine methods for custom logic.\n\n```js\ncds.add?.register?.('postgres',\n  class extends cds.add.Plugin {\n    async run() { /* ... */ }\n    async combine() { /* ... */ }\n  }\n)\n```\n",
    " Plugins for `cds add` > Plugin API > register(name, impl)\nAPI, plugin, cds add, registration\nDemonstrates use of require to load plugin implementation for cds add registration.\n\n```js\ncds.add?.register?.('postgres', require('./lib/add') )\n```\n",
    " Plugins for `cds add` > Plugin API > run()\nAPI, plugin, cds add, run()\nTemplate for the run() method of a cds add plugin. Handles project initialization logic that's independent of other plugins, with example for Java projects.\n\n```js\nasync run() { // [!code focus]\n  const { copy, path } = cds.utils, { mvn, readProject } = cds.add // [!code focus]\n  await copy (path.join(__dirname, 'files/pg.yaml')).to('pg.yaml') // [!code focus]\n  const { isJava } = readProject() // [!code focus]\n  if (isJava) await mvn.add('postgres') // [!code focus]\n}\n```\n",
    " Plugins for `cds add` > Plugin API > combine()\nAPI, plugin, cds add, combine()\nRecommended combine() method for cds add plugins to adjust deployment/project descriptors based on other plugins' presence.\n\n```js\nasync combine() {\n  const { hasMta, hasXsuaa, hasHelm } = readProject()\n  if (hasMta)   { /* adjust mta.yaml */ }\n  if (hasHelm)  { /* adjust values.yaml */ }\n  if (hasXsuaa) { /* adjust xs-security.json */  }\n}\n```\n",
    " Plugins for `cds add` > Plugin API > options()\nAPI, plugin, cds add, options()\nSpecifies additional command-line options for the plugin, following Node.js util.parseArgs shape, e.g. for setting an output directory.\n\n```js\noptions() {\n  return {\n    'out': {\n      type: 'string',\n      short: 'o',\n      help: 'The output directory. By default the application root.',\n    }\n  }\n}\n```\n",
    " Plugins for `cds add` > Plugin API > requires()\nAPI, plugin, cds add, requires()\nDeclare other cds add plugins as prerequisites using the requires() method. Useful for establishing plugin dependencies.\n\n```js\nrequires() {\n  return ['xsuaa'] //> runs 'cds add xsuaa' before plugin is run\n}\n```\n",
    " Plugins for `cds add` > Utilities API > readProject()\nAPI, plugin, cds add, utilities, readProject\nRetrieves productive project state, including presence markers for technology facets (e.g., hasJava, hasMta, hasPostgres) to guide plugin logic.\n\n```js\nconst { isJava, hasMta, hasPostgres } = cds.add.readProject()\n```\n",
    " Plugins for `cds add` > Utilities API > merge(from).into(file, o?)\nAPI, plugin, cds add, utilities, merge, json\nPerforms a merge of plugin-supplied configuration into package.json, leveraging the generic cds.add.merge API for JSON and YAML.\n\n```js\nconst config = { cds: { requires: { db: 'postgres' } } }\ncds.add.merge(config).into('package.json')\n```\n",
    " Plugins for `cds add` > Utilities API > merge(from).into(file, o?)\nAPI, plugin, cds add, merge, json\nIllustrates how cds.add.merge merges/combines arrays and objects, producing a unified configuration in target.json.\n\n```js\n// source.json\n{\n  \"my-plugin\": {\n    \"x\": \"value\",\n    \"z\": [\"a\", \"b\"]\n  }\n}\n// target.json\n{\n  \"my-plugin\": {\n    \"y\": \"value\",\n    \"z\": [\"b\", \"c\"]\n  }\n}\n```\n",
    " Plugins for `cds add` > Utilities API > merge(from).into(file, o?)\nAPI, plugin, cds add, merge, mustache, relationships\nShows advanced usages of cds.add.merge, including Mustache replacements and specifying relationships for complex merging scenarios.\n\n```js\nconst { merge, readProject, registries } = cds.add\n\n// Generic variants for maps and flat arrays\nawait merge(__dirname, 'lib/add/package-plugin.json').into('package.json')\nawait merge({ some: 'variable' }).into('package.json')\n\n// With Mustache replacements\nconst project = readProject()\nawait merge(__dirname, 'lib/add/package.json.hbs').into('package.json', {\n  with: project\n})\n\n// With Mustache replacements and semantics for nested arrays\nconst srv = registries.mta.srv4(srvPath)\nconst postgres = {\n  in: 'resources',\n  where: { 'parameters.service': 'postgresql-db' }\n}\nconst postgresDeployer = {\n  in: 'modules',\n  where: { type: 'nodejs', path: 'gen/pg' }\n}\nawait merge(__dirname, 'lib/add/mta.yml.hbs').into('mta.yaml', {\n  with: project,\n  additions: [srv, postgres, postgresDeployer],\n  relationships: [{\n    insert: [postgres, 'name'],\n    into: [srv, 'requires', 'name']\n  }, {\n    insert: [postgres, 'name'],\n    into: [postgresDeployer, 'requires', 'name']\n  }]\n})\n```\n",
    " Plugins for `cds add` > Utilities API > .registries\nAPI, plugin, cds add, registries\nAccess predefined registry fragments for use in deployment descriptor manipulations, simplifying configuration in mta.yaml.\n\n```js\nconst { srv4, approuter } = cds.add.registries.mta\n```\n",
    " Plugins for `cds add` > Utilities API > .registries\nAPI, plugin, cds add, merge, advanced\nComposite example for merging deployment configuration when mta is present, using registry elements and merging relationships.\n\n```js\nconst project = readProject()\nconst { hasMta, srvPath } = project\n\nif (hasMta) {\n  const srv = registries.mta.srv4(srvPath)\n  const postgres = {\n    in: 'resources',\n    where: { 'parameters.service': 'postgresql-db' }\n  }\n  await merge(__dirname, 'lib/add/mta.yml.hbs').into('mta.yaml', {\n    project,\n    additions: [srv, postgres, postgresDeployer],\n    relationships: [\n      ...\n    ]\n  })\n}\n```\n",
    " Plugins for `cds add` > Utilities API > mvn.add()\nAPI, plugin, cds add, mvn.add, java\nAutomates adding Maven dependencies when project is Java-based, using cds.add's mvn.add helper from within a plugin.\n\n```js\nasync run() {\n  const { isJava } = readProject()\n  const { mvn } = cds.add\n  if (isJava) await mvn.add('postgres')\n}\n```\n",
    " CDS Import API > cds.import() {.method}\nAPI, cds import, CSN, JavaScript\nInvokes cds.import() to convert an external specification file (EDMX/XML, OpenAPI/JSON, or AsyncAPI/JSON) to CSN within a JavaScript application. The method returns a CSN object. The 'file' parameter is the path to the file, and 'options' allows control over namespace handling (OData only). Requires CDS development tool kit version 4.3.1 or higher.\n\n```js\nconst csn = await cds.import(file, options)\n```\n",
    " CDS Import API > cds.import.from.edmx() {.method}\nAPI, cds import, OData, EDMX, CSN\nConverts a given OData EDMX (XML) file to CSN programmatically using the cds.import.from.edmx() API. Supports 'options' for namespace retention during the import.\n\n```js\nconst csn = await cds.import.from.edmx(ODATA_EDMX_file, options)\n```\n",
    " CDS Import API > cds.import.from.openapi() {.method}\nAPI, cds import, OpenAPI, CSN\nConverts an OpenAPI specification file (JSON) to CSN using the cds.import.from.openapi() API. Used for programmatic conversion within JavaScript.\n\n```js\nconst csn = await cds.import.from.openapi(OpenAPI_JSON_file)\n```\n",
    " CDS Import API > cds.import.from.asyncapi() {.method}\nAPI, cds import, AsyncAPI, CSN\nConverts an AsyncAPI specification file (JSON) into CSN using cds.import.from.asyncapi(). This method is intended for programmatic CSN generation from AsyncAPI definitions.\n\n```js\nconst csn = await cds.import.from.asyncapi(AsyncAPI_JSON_file)\n```\n",
    " CDS Import API > Example\nAPI, cds import, OData, OpenAPI, AsyncAPI, CSN, options\nDemonstrates how to use the various cds.import APIs for OData (with options), OpenAPI, and AsyncAPI sources to produce CSN objects. Loops over each CSN, compiles it to JSON, and prints the result.\n\n```js\nconst cds = require('@sap/cds-dk')\nmodule.exports = async (srv) => {\n  const csns = await Promise.all([\n    // for odata\n    cds.import('./odata_sample.edmx', { includeNamespaces: 'sap,c4c', keepNamespace: true }),\n    // for openapi\n    cds.import('./openapi_sample.json'),\n    // for asyncapi\n    cds.import('./asyncapi_sample.json'),\n    // for odata\n    cds.import.from.edmx('./odata_sample.xml', { includeNamespaces: '*', keepNamespace: false }),\n    // for openapi\n    cds.import.from.openapi('./openapi_sample.json')\n    // for asyncapi\n    cds.import.from.asyncapi('./asyncapi_sample.json')\n  ]);\n\n  for (let i = 0; i < csns.length; i++) {\n    let json = cds.compile.to.json (csns[i])\n    console.log (json)\n  }\n}\n```\n",
    " CDS Import API > OData Type Mappings\nOData, type mapping, CSN, reference\nOData-to-CDS type mapping table as used during import of external service APIs, showing the translation of common OData types (including version-specific precision handling) to CDS types with OData annotations.\n\n```md\n| OData                                                  | CDS Type                                                                     |\n|--------------------------------------------------------|------------------------------------------------------------------------------|\n| _Edm.Single_                                           | `cds.Double` + `@odata.Type: 'Edm.Single'`                                   |\n| _Edm.Byte_                                             | `cds.Integer` + `@odata.Type: 'Edm.Byte'`                                    |\n| _Edm.SByte_                                            | `cds.Integer` + `@odata.Type: 'Edm.SByte'`                                   |\n| _Edm.Stream_                                           | `cds.LargeBinary` + `@odata.Type: 'Edm.Stream'`                              |\n| _Edm.DateTimeOffset<br>Precision : Microsecond_        | `cds.Timestamp` + `@odata.Type:'Edm.DateTimeOffset'` + `@odata.Precision:<>` |\n| _Edm.DateTimeOffset<br>Precision : Second_             | `cds.DateTime` + `@odata.Type:'Edm.DateTimeOffset'` + `@odata.Precision:0`   |\n| _Edm.DateTime<br>Precision : Microsecond_ <sup>1</sup> | `cds.Timestamp` + `@odata.Type:'Edm.DateTime'` + `@odata.Precision:<>`       |\n| _Edm.DateTime<br>Precision : Second_ <sup>1</sup>      | `cds.DateTime` + `@odata.Type:'Edm.DateTime'` + `@odata.Precision:0`         |\n```\n",
    " CAP Plugins & Enhancements > As _cds-plugins_ for Node.js\nnpm, installation, audit logging, Node.js, cds-plugin\nInstalls the @cap-js/audit-logging plugin for CAP Node.js projects using npm. This enables audit logging functionality by simply adding the package.\n\n```shell\nnpm add @cap-js/audit-logging\n```\n",
    " CAP Plugins & Enhancements > As _cds-plugins_ for Node.js\naudit logging, cds modeling, annotations, PersonalData\nAdds the @PersonalData annotation to the Customer entity in your CDS model for audit logging purposes.\n\n```cds\nannotate Customer with @PersonalData ...;\n```\n",
    " CAP Plugins & Enhancements > As _cds-plugins_ for Node.js\nCLI, verify, cds CLI, test, audit logging, Node.js\nRuns the CAP development server, watching for changes and enabling you to test the audit logging setup. In dev mode, audit logs are written to the console.\n\n```shell\ncds watch\n```\n",
    " CAP Plugins & Enhancements > As Plugin for CAP Java\nJava, audit logging, Maven, pom.xml, dependency\nAdds the CAP Audit Log V2 plugin as a Maven dependency in a CAP Java project. This enables audit logging features at runtime.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-auditlog-v2</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " CAP Plugins & Enhancements > As Plugin for CAP Java\nJava, audit logging, cds modeling, annotations, PersonalData\nCDS modeling for CAP Java, applying the @PersonalData annotation to the Customer entity for audit logging.\n\n```cds\nannotate Customer with @PersonalData ...;\n```\n",
    " CAP Plugins & Enhancements > OData V2 Adapter\nOData, OData V2, adapter, plugin, Node.js\nInstalls the OData V2 adapter plugin for CAP Node.js, which allows exposing CAP services as OData V2 for legacy support.\n\n```shell\nnpm install @cap-js-community/odata-v2-adapter\n```\n",
    " CAP Plugins & Enhancements > WebSocket\nwebsocket, service definition, protocol, cds modeling\nDefines a CAP service (ChatService) exposed via WebSocket protocol with a function and an event, using the @protocol annotation.\n\n```cds\n@protocol: 'websocket'\nservice ChatService {\n  function message(text: String) returns String;\n  event received {\n    text: String;\n  }\n}\n```\n",
    " CAP Plugins & Enhancements > GraphQL Adapter\ngraphql, service definition, annotation, cds modeling\nMarks a CDS service (MyService) to be exposed via GraphQL protocol using the @graphql annotation. Automatically provides a GraphQL schema for your CAP model.\n\n```cds\n@graphql service MyService { ... }\n```\n",
    " CAP Plugins & Enhancements > Attachments\nattachments, composition, aspect, cds modeling, entity\nImports the Attachments aspect from @cap-js/attachments and composes it into an Incidents entity for out-of-the-box attachment handling in CAP.\n\n```cds\nusing { Attachments } from '@cap-js/attachments';\nentity Incidents { ...\n  attachments: Composition of many Attachments // [!code focus]\n}\n```\n",
    " CAP Plugins & Enhancements > SAP Document Management Service\nSAP Document Management Service, attachments, composition, aspect, cds modeling\nExtends an existing entity (my.Incidents) with attachments support via composition of the Attachments aspect, enabling SAP Document Management Service integration.\n\n```cds\nextend my.Incidents with {\n  attachments: Composition of many Attachments\n}\n```\n",
    " CAP Plugins & Enhancements > Audit Logging\naudit logging, annotations, PersonalData, cds modeling\nCDS model snippet for CAP Audit Logging plugin, annotating a my.Customers entity for fine-grained personal data audit logging (including FieldSemantics and IsPotentiallySensitive annotations).\n\n```cds\nannotate my.Customers with @PersonalData : {\n  DataSubjectRole : 'Customer',\n  EntitySemantics : 'DataSubject'\n} {\n  ID           @PersonalData.FieldSemantics: 'DataSubjectID';\n  name         @PersonalData.IsPotentiallyPersonal;\n  email        @PersonalData.IsPotentiallyPersonal;\n  creditCardNo @PersonalData.IsPotentiallySensitive;\n}\n```\n",
    " CAP Plugins & Enhancements > Change Tracking\nchange tracking, annotations, cds modeling, changelog\nEnables change tracking for my.Incidents entity fields using @changelog annotations, to automate capturing entity change history.\n\n```cds\nannotate my.Incidents {\n  customer @changelog: [customer.name];\n  title    @changelog;\n  status   @changelog;\n}\n```\n",
    " CAP Plugins & Enhancements > Notifications\nnotifications, service consumer, JavaScript, Node.js\nJavaScript snippet to send notifications using the CAP Notifications plugin. Connects to the notifications service and sends a notification to recipients.\n\n```js\nlet alert = await cds.connect.to ('notifications')\nawait alert.notify({\n   recipients: [ ...supporters ],\n   title: `New incident created by ${customer.info}`,\n   description: incident.title\n})\n```\n",
    " CAP Plugins & Enhancements > Telemetry\ntelemetry, output, observability, console, Node.js\nExample of telemetry output provided by the CAP Telemetry plugin for Node.js, showing request tracing and performance metrics written to console.\n\n```txt\n[odata] - GET /odata/v4/processor/Incidents\n[telemetry] - elapsed times:\n  0.00 → 2.85 = 2.85 ms  GET /odata/v4/processor/Incidents\n  0.47 → 1.24 = 0.76 ms    ProcessorService - READ ProcessorService.Incidents\n  0.78 → 1.17 = 0.38 ms      db - READ ProcessorService.Incidents\n  0.97 → 1.06 = 0.09 ms        @cap-js/sqlite - prepare SELECT json_object('ID',ID,'createdAt',createdAt,'creat…\n  1.10 → 1.13 = 0.03 ms        @cap-js/sqlite - stmt.all SELECT json_object('ID',ID,'createdAt',createdAt,'crea…\n  1.27 → 1.88 = 0.61 ms    ProcessorService - READ ProcessorService.Incidents.drafts\n  1.54 → 1.86 = 0.32 ms      db - READ ProcessorService.Incidents.drafts\n  1.74 → 1.78 = 0.04 ms        @cap-js/sqlite - prepare SELECT json_object('ID',ID,'DraftAdministrativeData_Dra…\n  1.81 → 1.85 = 0.04 ms        @cap-js/sqlite - stmt.all SELECT json_object('ID',ID,'DraftAdministrativeData_Dr…\n```\n",
    " CAP Plugins & Enhancements > SAP Cloud Application Event Hub\nSAP Cloud Application Event Hub, events, messaging, service consumer, JavaScript, Node.js\nJavaScript code sample to consume events from SAP Cloud Application Event Hub in a CAP Node.js application. Establishes connection and an event listener for S/4HANA events.\n\n```js\nconst S4Bupa = await cds.connect.to ('API_BUSINESS_PARTNER')\nS4bupa.on ('BusinessPartner.Changed', msg => {...})\n```\n",
    "Node.js > Hierarchy Maintenance in Tree Views <Beta />\nhierarchy maintenance, tree view, draft, Node.js, composition, CRUD\nDemonstrates creation, insertion as root or child, node relocation, and deletion (with proper cascading for compositions) for hierarchy maintenance with draft-enabled entities in CAP Node.js. Supported on SQLite, Postgres, and SAP HANA.\n\n```js\n// Example: Creating/moving/deleting nodes in a draft-enabled hierarchy\n// Node.js CAP APIs are used; pseudo-code illustrating operations\n\n// Add a new root node\nawait INSERT.into('Entity').entries({ name: 'Root', parent_ID: null });\n\n// Add a child node\nawait INSERT.into('Entity').entries({ name: 'Child', parent_ID: root_ID });\n\n// Move a node to a new parent\nawait UPDATE('Entity').set({ parent_ID: newParent_ID }).where({ ID: child_ID });\n\n// Delete a node (descendants in composition are also deleted)\nawait DELETE.from('Entity').where({ ID: parent_ID });\n```\n",
    "Node.js > UI5 State Messages for Drafts <Beta />\nUI5, state messages, draft-enabled, error messages, OData V4, Node.js, configuration, schema update\nConfiguration snippet to enable draft state messages (e.g. error validation) with UI5 OData V4 support in CAP Node.js. Requires both the 'cds.cdsc.beta.draftMessages' and 'cds.odata.containment' settings, and a database schema update.\n\n```json\n// To enable draft messages in CAP Node.js (package.json or .cdsrc.json)\n{\n  \"cds\": {\n    \"cdsc\": { \"beta\": { \"draftMessages\": true } },\n    \"odata\": { \"containment\": true }\n  }\n}\n// This triggers persistence of (error) messages for drafts, and requires schema update.\n```\n",
    "Java > Important Changes ❗️ > Add DevDependency to @sap/cds-mtxs\nJava, plugin, devDependency, package.json, cds-mtxs, installation\nInstalls the '@sap/cds-mtxs' package as a devDependency in your project's package.json, which is now required for proper CAP Java plugin build configuration.\n\n```shell\nnpm add -D @sap/cds-mtxs\n```\n",
    "Java > Event Handler Enhancements\nJava, event handler, service interface, runtime enhancements, arbitrary types, typed reference\nShowcases new Java event handler enhancements: (1) direct return of arbitrary types, (2) accessing the typed service interface as a method argument, (3) auto-injection of typed entity references reflecting the active CQN, and (4) combining these to implement a handler with strongly-typed service and CQN navigation.\n\n```java\n// Example event handler declarations in CAP Java\n// 1. Returning an arbitrary type\n@On(event = WorldHelloContext.CDS_NAME)\npublic String hello() {\n  return \"Hello World\";\n}\n\n// 2. Accessing the service directly\n@On(event = WorldHelloContext.CDS_NAME)\npublic void hello(Universe service) {\n  service.run(...);\n}\n\n// 3. Typed entity reference\n@On(event = WorldHelloContext.CDS_NAME)\npublic void hello(World_ ref) {\n  Select.from(ref).columns(w -> w.name());\n}\n\n// 4. Combining all\n@On(event = WorldHelloContext.CDS_NAME)\npublic String hello(Universe service, World_ ref) {\n  Result result = service.run(Select.from(ref).columns(w -> w.name()));\n  return \"Hello \" + result.single(World.class).getName();\n}\n```\n",
    "Java > Media Data in Actions and Functions\nJava, media data, actions, functions, Core.MediaType, InputStream\nDefines a media type return (PDF) in a CDS service, and its Java handler to generate and return this binary media as an InputStream. Enables returning files (e.g. images, PDFs) from actions and functions using @Core.MediaType.\n\n```java\n// Service definition in CDS\nservice OrderService {\n  @(Core: {\n     MediaType: 'application/pdf',\n     ContentDisposition.Filename: 'order.pdf'\n  })\n  type pdf: LargeBinary;\n  entity Orders { ... } actions {\n    function exportAsPdf() returns pdf;\n  }\n}\n\n// Handler in Java\n@On (event = OrdersExportAsPdfContext.CDS_NAME)\npublic InputStream exportAsPdf(CqnElementRef order) {\n    byte[] pdf = createPdf(order);\n    return new ByteArrayInputStream(pdf);\n}\n```\n",
    "Java > Media Elements in Remote OData\nJava, remote service, media elements, Core.MediaType, CQN, read, update\nReads and writes media elements (e.g., images, annotated with @Core.MediaType) in remote OData services from CAP Java using CQN statements. Supports both select and update operations on media properties.\n\n```java\n// Reading a media element\nSelect.from(Media_.class, m -> m.filter(f -> f.ID().eq(\"...\"))).columns(Media_::image);\n\n// Writing (updating) a media element\nMedia payload = Media.create();\npayload.setId(...);\npayload.setImage(...);\n\nUpdate.entity(Media_.class).entry(payload);\n```\n",
    "Tools > IntelliJ Community Edition Supported by CDS Plugin\nIntelliJ, CDS plugin, IDE support, tools\nAnnouncement of CDS plugin (version 2) for IntelliJ now supporting the free Community Edition of IntelliJ IDEA, removing the need for a commercial license. Downloadable from JetBrains Marketplace.\n\n```txt\n// No code; installation/update of the plugin now supports Community Edition via JetBrains Marketplace.\n```\n",
    "Tools > Faster Editor Feedback in VS Code\nVS Code, editor, fastDiagnosticsMode, cds, configuration, performance, diagnostics\nConfigures the new 'cds.workspace.fastDiagnosticsMode' to control CDS error/diagnostics feedback in VS Code. Optionally enables immediate, grammar-based, or post-compilation error reporting to improve editor responsiveness.\n\n```jsonc\n// VS Code user or workspace settings\n\"cds.workspace.fastDiagnosticsMode\": \"Clear\" // Options: 'Clear'(default), 'Parse', 'Off'\n```\n",
    " Serving Fiori UIs > Fiori Annotations > What Are SAP Fiori Annotations?\nFiori annotations, cds modeling, UI, CDS\nThis CDS code snippet shows how to use SAP Fiori UI annotations to define SelectionFields and LineItem configurations for the CatalogService.Books entity. These annotations customize how SAP Fiori elements apps render the list and selection fields for this entity.\n\n```cds\nannotate CatalogService.Books with @(\n  UI: {\n    SelectionFields: [ ID, price, currency_code ],\n    LineItem: [\n      {Value: title},\n      {Value: author, Label:'{i18n>Author}'},\n      {Value: genre.name},\n      {Value: price},\n      {Value: currency.symbol, Label:' '},\n    ]\n  }\n);\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Where to Put Them?\nproject structure, Fiori annotations, cds modeling, app folder\nThis snippet demonstrates the recommended folder structure for separating Fiori UI annotation files from service definitions. Fiori annotations should be placed in app/* subfolders, with respective service definitions kept clean in ./srv.\n\n```shell\n./app  #> all your Fiori annotations should go here, for example:\n   ./admin\n      fiori-service.cds #> annotating ../srv/admin-service.cds\n   ./browse\n      fiori-service.cds #> annotating ../srv/cat-service.cds\n   services.cds #> imports ./admin/fiori-service and ./browse/fiori-service\n./srv  #> all service definitions should stay clean in here:\n   admin-service.cds\n   cat-service.cds\n...\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Code Completion > Example: Annotating Service Entities\ncode completion, Fiori annotations, cds modeling, VS Code\nThis is an example of using code completion for UI.SelectionFields annotation in CDS. It shows a user populating SelectionFields for a given entity with context-sensitive auto-complete support, making annotation editing faster and less error-prone.\n\n```cds\nannotate Foo.Bar with @UI : { SelectionFields : [\n    description, assignedIndividual.lastName|\n  ],\n};\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Code Completion > Example: Annotating Service Entities\ncode completion, Fiori annotations, cds modeling, VS Code\nThis snippet illustrates the code-completion-driven creation of a UI.LineItem annotation in CDS, including a micro-snippet for a DataField record. It helps users quickly add OData UI annotations with the correct structure and properties.\n\n```cds\nannotate Foo.Bar with @UI : {\n   SelectionFields : [\n     description, assignedIndividual.lastName\n   ],\n   LineItem : [{\n     $Type:'UI.DataField',\n     Value : |,\n  },\n};\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Code Completion > Example: Annotating Service Entities\ncode completion, Fiori annotations, cds modeling, VS Code\nShows an advanced CDS annotation with multiple LineItem records, illustrating how to use DataField and DataFieldForAnnotation to reference both entity fields and other annotations using code completion in the CDS Language Server.\n\n```cds\nannotate Foo.Bar with @UI : {\n  SelectionFields : [\n    description, assignedIndividual.lastName\n  ],\n  LineItem : [\n    {\n        $Type:'UI.DataField',\n        Value : description,\n    },\n    {\n        $Type:'UI.DataFieldForAnnotation',\n        Target :  'assignedIndividual/@Communication.Contact',\n    },|\n  ]\n};\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Code Completion > Example: Annotating Entity Elements\ncode completion, Fiori annotations, cds modeling, VS Code\nInitial step for code completion when annotating an entity element, placing the cursor for selecting the element to annotate inside the annotate directive.\n\n```cds\nannotate Foo.Bar with {\n    code|\n};\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Code Completion > Example: Annotating Entity Elements\ncode completion, Fiori annotations, cds modeling, VS Code\nApplies a UI annotation micro-snippet to the 'code' element of Foo.Bar, showing how code completion facilitates the insertion of annotation structures for entity properties.\n\n```cds\nannotate Foo.Bar with {\n    code @UI : { | }\n};\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Code Completion > Example: Annotating Entity Elements\ncode completion, Fiori annotations, cds modeling, VS Code\nDemonstrates code completion for setting the UI.Hidden annotation on the 'code' element of Foo.Bar, preparing to set the boolean value showing or hiding this property in the UI.\n\n```cds\nannotate Foo.Bar with {\n    code @UI : {Hidden : |}\n};\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Code Completion > Example: Annotating Entity Elements\ncode completion, Fiori annotations, cds modeling, VS Code\nCompletes the annotation for 'code' with UI.Hidden : false, specifying that the property should remain visible in the SAP Fiori elements UI.\n\n```cds\nannotate Foo.Bar with {\n    code @UI : {Hidden : false }\n};\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Prefer @title and @description\ncds modeling, @title, @description, annotations\nShows the usage of generic CDS annotations @title mapped to OData labels for properties, providing protocol-agnostic metadata for SAP Fiori or other consumers.\n\n```cds\nannotate my.Books with { //...\n   title @title: 'Book Title';\n   author @title: 'Author ID';\n}\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Prefer @readonly, @mandatory, ...\ncds modeling, @readonly, annotations, OData\nDemonstrates the concise @readonly annotation in CDS, which is simpler than the equivalent verbose OData annotations and prevents insert, update, or delete for both entity and element levels.\n\n```cds\n@readonly entity Foo {   // entity-level\n  @readonly foo : String // element-level\n}\n```\n",
    " Serving Fiori UIs > Fiori Annotations > Prefer @readonly, @mandatory, ...\nOData, cds modeling, @Capabilities, annotations\nEquivalent verbose OData annotation expressing entity and element-level readonly constraints, compared to the concise CDS approach with @readonly.\n\n```cds\nentity Foo @(Capabilities:{\n  // entity-level\n  InsertRestrictions.Insertable: false,\n  UpdateRestrictions.Updatable: false,\n  DeleteRestrictions.Deletable: false\n}) {\n  // element-level\n  @Core.Computed foo : String\n}\n```\n",
    " Serving Fiori UIs > Draft Support > Enabling Draft with @odata.draft.enabled\ndraft, Fiori, cds modeling, annotations\nSingle-line CDS annotation enabling draft support for the AdminService.Books entity, making it possible to perform draft-enabled edit sessions in Fiori UIs.\n\n```cds\nannotate AdminService.Books with @odata.draft.enabled;\n```\n",
    " Serving Fiori UIs > Draft Support > Enabling Draft for Localized Data\ndraft, Fiori, cds modeling, localized data\nEnables Fiori draft support for localized data entities, letting users manage translations in a draft context. Especially relevant for supporting multi-language inputs in SAP Fiori UIs.\n\n```cds\nannotate sap.capire.bookshop.Books with @fiori.draft.enabled;\n```\n",
    " Serving Fiori UIs > Draft Support > Query Drafts Programmatically\ndraft, Node.js, runtime, query, CQN\nShows how to programmatically access draft data via cds-reflect in Node.js, letting custom logic or validations operate on all draft instances for an entity.\n\n```js\nSELECT.from(Books.drafts) //returns all drafts of the Books entity\n```\n",
    " Serving Fiori UIs > Use Roles to Toggle Visibility of UI elements\nroles, UI, authorization, cds modeling, @cds.persistence.skip, OData singleton\nDefines a singleton entity in CDS for storing per-user configuration such as isAdmin without persisting it to the database. Useful for dynamic UI control based on roles.\n\n```cds\n@odata.singleton @cds.persistence.skip\nentity Configuration {\n    key ID: String;\n    isAdmin : Boolean;\n}\n```\n",
    " Serving Fiori UIs > Use Roles to Toggle Visibility of UI elements\nroles, UI, authorization, custom handler, Node.js\nImplements a CDS service handler that dynamically sets isAdmin based on the user's roles. Enables the Fiori UI to use role-based conditions in annotations.\n\n```js\nsrv.on('READ', 'Configuration', async req => {\n    req.reply({\n        isAdmin: req.user.is('admin') //admin is the role, which for example is also used in @requires annotation\n    });\n});\n```\n",
    " Serving Fiori UIs > Use Roles to Toggle Visibility of UI elements\nroles, UI, authorization, dynamic expressions, Fiori annotations\nUses dynamic OData expressions in UI annotations to toggle the Create and Update visibility of Books records in Fiori based on the '/Configuration/isAdmin' property. Allows conditional UI elements by user role.\n\n```cds\nannotate service.Books with @(\n    UI.CreateHidden : { $edmJson: {$Not: { $Path: '/CatalogService.EntityContainer/Configuration/isAdmin'} } },\n    UI.UpdateHidden : { $edmJson: {$Not: { $Path: '/CatalogService.EntityContainer/Configuration/isAdmin'} } },\n);\n```\n",
    " Serving Fiori UIs > Use Roles to Toggle Visibility of UI elements\nroles, UI, authorization, dynamic expressions, Fiori annotations\nAlternative CDS annotation omitting '/EntityContainer', allowed in SAP Fiori elements UIs, for easier concise expression of role-based UI field visibility.\n\n```cds\nannotate service.Books with @(\n    UI.CreateHidden : { $edmJson: {$Not: { $Path: '/Configuration/isAdmin'} } },\n    UI.UpdateHidden : { $edmJson: {$Not: { $Path: '/Configuration/isAdmin'} } },\n);\n```\n",
    " Serving Fiori UIs > Value Helps > Convenience Option @cds.odata.valuelist\nvalue helps, @cds.odata.valuelist, Fiori annotations, cds modeling\nEnables value help for all managed associations targeting Currencies, allowing Fiori UIs to automatically generate Value Help dialogs for currency associations.\n\n```cds\n@cds.odata.valuelist\nentity Currencies {}\n```\n",
    " Serving Fiori UIs > Value Helps > Pre-Defined Types in @sap/cds/common\nvalue helps, @sap/cds/common, cds modeling\nDefines a type for associations to sap.common.Currencies, leveraging common content and annotations such as value helps for reuse in entities.\n\n```cds\ntype Currencies : Association to sap.common.Currencies;\n```\n",
    " Serving Fiori UIs > Value Helps > Pre-Defined Types in @sap/cds/common\nvalue helps, OData, @sap/cds/common, Fiori annotations\nAdds value help and UI identification annotations to the generic sap.common.CodeList entity, which other entities can derive from to get value help automatically.\n\n```cds\nannotate sap.common.CodeList with @(\n   UI.Identification: [name],\n   cds.odata.valuelist,\n);\n```\n",
    " Serving Fiori UIs > Value Helps > Usages of @sap/cds/common\nvalue helps, @sap/cds/common, cds modeling\nShows easy adoption of value help features for currencies by reusing predefined types from @sap/cds/common without polluting domain models with UI details.\n\n```cds\nusing { Currency } from '@sap/cds/common';\nentity Books { //...\n  currency : Currency;\n}\n```\n",
    " Serving Fiori UIs > Value Helps > Resulting Annotations in EDMX\nedmx, OData, annotations, value helps\nIllustrates how CDS value help annotations are rendered in OData EDMX XML as Common.ValueList, defining the collection, parameters, and display behavior for SAP Fiori clients.\n\n```xml\n<Annotations Target=\"AdminService.Books/currency_code\">\n  <Annotation Term=\"Common.ValueList\">\n    <Record Type=\"Common.ValueListType\">\n      <PropertyValue Property=\"CollectionPath\" String=\"Currencies\"/>\n      <PropertyValue Property=\"Label\" String=\"Currency\"/>\n      <PropertyValue Property=\"Parameters\">\n        <Collection>\n          <Record Type=\"Common.ValueListParameterInOut\">\n            <PropertyValue Property=\"ValueListProperty\" String=\"code\"/>\n            <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"currency_code\"/>\n          </Record>\n          <Record Type=\"Common.ValueListParameterDisplayOnly\">\n            <PropertyValue Property=\"ValueListProperty\" String=\"name\"/>\n          </Record>\n        </Collection>\n      </PropertyValue>\n    </Record>\n  </Annotation>\n</Annotations>\n```\n",
    " Serving Fiori UIs > Actions\nactions, Fiori, CDS, custom code\nDefines several custom actions on the Travel entity in CDS, which appear as buttons in SAP Fiori UI and require custom implementation for their effect.\n\n```cds\nentity Travel as projection on my.Travel actions {\n    action createTravelByTemplate() returns Travel;\n    action rejectTravel();\n    action acceptTravel();\n    action deductDiscount( percent: Percentage not null ) returns Travel;\n  };\n```\n",
    " Serving Fiori UIs > Actions\nactions, Node.js, custom handler\nNode.js handler code for the 'acceptTravel' action, updating TravelStatus_code for the target entity, making the custom action functional in SAP Fiori UI.\n\n```js\nthis.on('acceptTravel', req => UPDATE(req.subject).with({TravelStatus_code:'A'}))\n```\n",
    " Serving Fiori UIs > Actions\nactions, Fiori UI, cds modeling, LineItem\nCDS annotation configuring a Fiori UI button for a LineItem action, enabling the user to trigger acceptTravel from the travel list overview screen.\n\n```cds\nannotate TravelService.Travel with @UI : {\nLineItem : [\n    { $Type  : 'UI.DataFieldForAction',\n      Action : 'TravelService.acceptTravel',\n      Label  : '{i18n>AcceptTravel}'   }\n  ]\n};\n```\n",
    " Serving Fiori UIs > Actions\nactions, Fiori UI, cds modeling, Identification\nConfigures the Fiori UI button for the acceptTravel action in the detail identification section, accessible when viewing/editing a single travel record.\n\n```cds\nannotate TravelService.Travel with @UI : {\n  Identification : [\n    { $Type  : 'UI.DataFieldForAction',\n      Action : 'TravelService.acceptTravel',\n      Label  : '{i18n>AcceptTravel}'   }\n  ]\n};\n```\n",
    " Serving Fiori UIs > Actions\nactions, Fiori UI, cds modeling, dynamic expressions\nUses dynamic expressions to make the acceptTravel action button available only when TravelStatus_code is not 'A', ensuring correct UI state and recognition of side effects.\n\n```cds\nannotate TravelService.Travel with actions {\n acceptTravel @(\n   Core.OperationAvailable : {\n     $edmJson: { $Ne: [{ $Path: 'in/TravelStatus_code'}, 'A']}\n   },\n   Common.SideEffects.TargetProperties : ['in/TravelStatus_code'], ) };\n```\n",
    "Hierarchical Tree Views, beta 2 <Beta /> > Consolidated Configuration > 1. Configure the TreeTable in UI5's manifest.json\nui5, manifest.json, tree table, fiori, configuration\nConfigures the Fiori TreeTable for hierarchical entities in manifest.json. The 'hierarchyQualifier' must match the entity name plus 'Hierarchy'. This configuration enables the tree view in Fiori applications for hierarchical CAP entities.\n\n```jsonc\n\"sap.ui5\": { ...\n  \"routing\": { ...\n    \"targets\": { ...\n      \"GenresList\": { ...\n        \"options\": {\n          \"settings\": { ...\n            \"controlConfiguration\": {\n              \"@com.sap.vocabularies.UI.v1.LineItem\": {\n                \"tableSettings\": {\n                  \"hierarchyQualifier\": \"GenresHierarchy\", // [!code focus]\n                  \"type\": \"TreeTable\" // [!code focus]\n                }\n              }\n            }\n          }\n        }\n      },\n    },\n\n```\n",
    "Hierarchical Tree Views, beta 2 <Beta /> > Consolidated Configuration > 2. Annotate/extend the entity in the service as follows\ncds, annotation, fiori, tree view, recursive hierarchy, projection, metadata\nDemonstrates how to annotate and extend a CAP entity to enable hierarchical TreeTable support in SAP Fiori. Annotates the entity with recursive hierarchy information, disables filter/sort on system fields, and ensures these fields exist in the database.\n\n```cds\n// Tell Fiori about the structure of the hierarchy\nannotate AdminService.Genres with @Aggregation.RecursiveHierarchy #GenresHierarchy : {\n  ParentNavigationProperty : parent, // navigates to a node's parent\n  NodeProperty             : ID, // identifies a node, usually the key\n};\n\n// Fiori expects the following to be defined explicitly, even though they're always the same\nextend AdminService.Genres with @(\n  // The columns expected by Fiori to be present in hierarchy entities\n  Hierarchy.RecursiveHierarchy #GenresHierarchy : {\n    LimitedDescendantCount : LimitedDescendantCount,\n    DistanceFromRoot       : DistanceFromRoot,\n    DrillState             : DrillState,\n    LimitedRank            : LimitedRank\n  },\n  // Disallow filtering on these properties from Fiori UIs\n  Capabilities.FilterRestrictions.NonFilterableProperties: [\n    'LimitedDescendantCount',\n    'DistanceFromRoot',\n    'DrillState',\n    'LimitedRank'\n  ],\n  // Disallow sorting on these properties from Fiori UIs\n  Capabilities.SortRestrictions.NonSortableProperties    : [\n    'LimitedDescendantCount',\n    'DistanceFromRoot',\n    'DrillState',\n    'LimitedRank'\n  ],\n) columns { // Ensure we can query these fields from database\n  null as LimitedDescendantCount : Int16,\n  null as DistanceFromRoot       : Int16,\n  null as DrillState             : String,\n  null as LimitedRank            : Int16,\n};\n```\n",
    "Databases > SAP HANA using ALTER TABLE ADD COLUMN\ndatabase, hana, deploy, migration, fast migration\nConfigures fast table migration for SAP HANA using the try_fast_table_migration option, which speeds up deployments by using ALTER TABLE ADD COLUMN instead of full table copies during schema migrations. Add the parameter to your db/package.json start script for single-tenant setups with custom database packaging.\n\n```jsonc\n// In db/package.json\n\"scripts\": {\n  \"start\": \".../deploy.js --parameter com.sap.hana.di.table/try_fast_table_migration=true ...\"\n}\n```\n",
    "CDS Language & Compiler > Agnostic Database Functions\nstandard database functions, sql, function mapping, hana, sqlite\nShows how standard database functions like startswith are used in OData, CDS views, and how they are mapped to native SQL for SAP HANA and SQLite targets. Illustrates function portability and SQL code generation in the CAP framework.\n\n```sql\n// OData\nGET /Books?$filter=startswith(title, 'Raven')\n\n// CDS view\nentity V as select from Books {\n  startswith(title, 'Raven') as found // mapped to native SQL equivalent\n}\n\n// For SAP HANA, the resulting SQL:\nCREATE VIEW V AS SELECT\n  CASE WHEN locate(title, 'Raven') = 1 THEN TRUE ELSE FALSE END AS found\nFROM Books;\n\n// For SQLite, the resulting SQL:\nCREATE VIEW V AS SELECT\n  coalesce((instr(Books.title, 'Raven') = 1), false) AS found\nFROM Books;\n```\n",
    "CDS Language & Compiler > Important Changes ❗️ > Association to many w/o ON Conditions\ncds, to-many association, on condition, migration, compiler error\nExplains how to migrate from an unspecified to-many association without ON condition (which now results in a compiler error) to a proper managed to-many association by specifying an ON condition. Required with CAP release May 2025.\n\n```cds\n// Before: missing ON\nbooks: Association to many Books; // missing on condition\n\n// After: add ON condition if you want to declare a managed to-many:\nbooks: Association to many Books on books.author = $self;\n```\n",
    "CDS Language & Compiler > Important Changes ❗️ > Association to many w/o ON Conditions\ncds, to-many association, migration, compiler error, to-one association\nIllustrates migration from an incorrectly modeled to-many association without ON condition to a correct managed to-one association, as required by the fixed CDS compiler behavior.\n\n```cds\n// Before: to-many association without ON\nbooks: Association to many Books;\n\n// After: change to managed to-one association if that was intended\nbooks: Association to Books;\n```\n",
    "CDS Language & Compiler > Important Changes ❗️ > Virtual Elements in Views\nvirtual element, projection, view, cds, deprecated, update\nDemonstrates the new syntax for declaring virtual elements directly in a CDS view or projection without providing values or expressions. Also notes deprecated previous patterns.\n\n```cds\n// New way\nentity P as projection on E {\n  virtual v1 : String(11),  // new virtual element\n  virtual v2                // new virtual element w/o type\n}\n\n// Deprecated\nentity P as select from E {\n  virtual null   as myV1,  // deprecated\n  virtual a      as myV2   // deprecated\n}\n```\n",
    "CDS Language & Compiler > Miscellaneous > Generated Entities and @cds.persistence.journal\ncds.persistence.journal, localized, composition, annotation inheritance\nShows use of @cds.persistence.journal for controlling HANA migration table deployment for main and compiler-generated entities (like texts for localization and children for managed compositions). Also demonstrates how to override annotation inheritance if required.\n\n```cds\n@cds.persistence.journal\nentity Books {\n  key id : Integer;\n  title : localized String;\n  chapters : Composition of many {\n    key chapter : Integer;\n    synopsis : String;\n  }\n}\n\n// Exclude annotation on generated entity if needed:\nannotate Books.chapters with @cds.persistence.journal: false;\n```\n",
    "CDS Language & Compiler > Miscellaneous > Syntax Cleanup\ncds, syntax error, default value, array parameter, migration\nDemonstrates two new syntax errors after cleanup: providing a default null for not-nullable elements and specifying a default for array parameters. Both are now compilation errors.\n\n```cds\n// Error: not-nullable with default null\nentity E {\n  foo : Integer not null default null;\n}\n\n// Error: array default value now forbidden\naction A(par: array of Integer default 42);\n```\n",
    "Node.js > Improved Error Handling\nerror handling, Node.js, cap, req.reject, req.error, input validation\nDemonstrates improved error responses in CAP Node.js, now with 'code' properties (like ASSERT_FORMAT) for better error identification. Shows public use of req.reject() and req.error() for constructing errors, as per new documentation.\n\n```json\n// Sample error response for assert format\n{\n  \"error\": {\n    \"code\": \"ASSERT_FORMAT\",\n    \"message\": \"Input is not in the expected format.\",\n    \"target\": \"emailAddress\"\n  }\n}\n\n// (Usage)\nreq.reject('ASSERT_FORMAT', 'Input is not in the expected format.', { target: 'emailAddress' });\n// or\nreq.error('ASSERT_FORMAT', 'Input is not in the expected format.', { target: 'emailAddress' });\n```\n",
    "Node.js > New Database Services v2 > Opt-in Replacement for Generic-Pool <Alpha/>\nconfiguration, generic-pool, resource pool, db, multitenancy, Node.js\nEnables the new built-in resource pool in CAP Node.js for database connections by configuration. Replaces the generic-pool library, providing improved error handling in multi-tenant scenarios. Use in package.json or .cdsrc.yaml.\n\n```jsonc\n// package.json\n{\n  \"cds\": {\n    \"features\": {\n      \"pool\": \"builtin\"\n    }\n  }\n}\n\n// Or in .cdsrc.yaml\ncds:\n  features:\n    pool: builtin\n```\n",
    "Node.js > Open-Sourced `cds.test`\ntest, cds test, Node.js, devDependencies, installation, npm\nShows how to adopt the open-sourced @cap-js/cds-test for CAP Node.js application testing. Includes npm install and removal of now-unnecessary dependencies (axios, chai, etc.).\n\n```shell\n// Install\nnpm add -D @cap-js/cds-test\n\n// Remove old dependencies\nnpm rm axios chai chai-subset chai-as-promised\n```\n",
    "Node.js > Important Changes ❗️ > Changed Structure of `req.params`\nrequest context, params, CAP Node.js, API change\nDemonstrates the changed structure of req.params in CAP Node.js: always returns array of objects, even for single-key entities. Adjust handler code if you previously relied on scalar values.\n\n```js\n// HTTP request:\n// GET /catalog/Authors(101)/books(title='Eleonora',edition=2) HTTP/1.1\n\nconst [ author, book ] = req.params\n// > author === { ID: 101}, was 101 before\n// > book === { title: 'Eleonora', edition: 2 }\n```\n",
    "Databases > Removed `hdbcds` Format\nsap hana, sql, deploy format, hdbcds, migration\nAnnounces the removal of the hdbcds deployment format for SAP HANA in CAP, with migration to hdbtable now required. No actual code, but important configuration change.\n\n```txt\n// Migration: use hdbtable, not hdbcds\n// Remove the use of 'hdbcds' format in your deployment configuration, switch to default 'hdbtable'.\n```\n",
    "Java > Remote OData Singletons\nJava, remote service, OData, singleton, service consumption\nDefines an EDMX OData metadata document, declaring a singleton entity 'OverallStatus'. The singleton pattern allows CAP Java projects to consume a single, global entity instance from a remote OData service. This is often used for representing unique resources such as system health.\n\n```xml\n<edmx:Edmx Version=\"4.0\" xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\">\n  <edmx:DataServices>\n      <EntityContainer Name=\"EntityContainer\">\n        <Singleton Name=\"OverallStatus\" Type=\"health.OverallStatus\"/> \n      </EntityContainer>\n      <EntityType Name=\"OverallStatus\">\n        <Key>\n          <PropertyRef Name=\"id\"/>\n        </Key>\n        <Property Name=\"id\" Type=\"Edm.Int32\" Nullable=\"false\"/>\n        <Property Name=\"status\" Type=\"Edm.String\"/>\n      </EntityType>\n    </Schema>\n  </edmx:DataServices>\n</edmx:Edmx>\n```\n",
    "Java > Remote OData Singletons\nJava, remote service, OData, singleton, service consumption\nShows how to access a singleton entity from a remote OData service in CAP Java. The code builds a CQN select for the singleton and fetches the unique instance from the remote service, mapping it to the OverallStatus class.\n\n```java\nCqnSelect selectStatus = Select.from(OVERALL_STATUS);\nOverallStatus status = remoteService.run(selectStatus).single(OverallStatus.class);\n```\n",
    "Java > Enhanced Search\ncds modeling, annotations, Common.Text, Java\nDemonstrates the use of the @Common.Text annotation in CDS model definitions. This annotation instructs the runtime/UI to display the 'author.name' field for the association in Books, and, starting with this release, the referenced display text field is also used in default search behavior.\n\n```cds\nentity Books : cuid {\ntitle  : String;\n@Common.Text : author.name\nauthor : Association to Authors;\n}\nentity Authors : cuid {\nname : String;\n}\n```\n",
    "Java > To-many Expand on Subqueries\nJava, CQL, subqueries, to-many, expand\nIllustrates how to expand to-many associations via subqueries in CAP Java. The snippet selects authors under 40 years of age and then expands their associated books, retrieving the book titles.\n\n```java\nCqnSelect authorsUnder40 = Select.from(AUTHORS)\n   .excluding(a -> a.placeOfBirth())\n   .where(a -> a.age().lt(40));\nSelect.from(authorsUnder40).columns(\n    a -> a.get(\"name\"),\n    a -> a.to(\"books\").expand(\"title\"));\n```\n",
    "Java > New Functions in CDS QL\nJava, CQL, query, functions, arithmetic, string\nDemonstrates new arithmetic and string functions in CDS QL for CAP Java. The first query filters books with a short title using .length(), while the second computes average price per genre and rounds it using .round(). Functions like round, floor, ceiling, length, indexof, and trim are now available in a database-agnostic way.\n\n```java\nCqnSelect booksWithShortTitle = Select.from(BOOKS).where(b -> title().length().lt(10));\nCqnSelect averagePriceRoundedByGenre = Select.from(BOOKS)\n    .columns(b -> b.genre().name(), b.price().avg().round())\n    .groupBy(b -> b.genre().name());\n```\n",
    "Java > Optimized Outbox\nJava, outbox, task queue, scalability, configuration\nEnables optimized (task-based) outbox processing for resilient and high-performance event emission in multi-tenant CAP Java environments. Setting this property switches to task queues for outbox processing, greatly reducing database connections and resource consumption.\n\n```properties\ncds.taskScheduler.enabled: true\n```\n",
    " Archive of Former Releases\narchive, documentation, release history\nMarkdown snippet providing links to archives of former documentation releases. Useful for referencing historical versions of documents organized by year.\n\n```md\n- [Parts of 2025](2025/)\n- [All of 2024](2024/)\n- [All of 2023](2023/)\n- [All of 2022](2022/)\n- [All of 2021](2021/)\n- [All of 2018-2019](18-19)\n```\n",
    " Parts of 2025\nVue.js, component, IndexList, code sample\nDemonstrates the usage of the IndexList Vue.js component, binding the 'pages' data property via v-bind. This is typically used to render a list of index entries or navigation options in a documentation or application UI.\n\n```js\n<IndexList :pages='pages' />\n```\n",
    " March 2025 > CDS Language & Compiler > Actions in Composition of Aspects\ncds modeling, composition, aspects, actions, compiler\nDefines a CDS aspect 'Item' with an action 'close', and an entity 'Orders' with a composition of 'Item'. The compiler will propagate the action 'close' to the generated child entity 'Orders.items', making it available for use. This demonstrates the availability of actions/functions of an aspect in composed entities.\n\n```cds\naspect Item {\n  key id : String;\n} actions {\n  action close(); // [!code highlight]\n};\n\nentity Orders {\n  key id : String;\n  items: Composition of Item; // [!code highlight]\n};\n```\n",
    " March 2025 > Java > Log CDS Configuration\nyaml, java, configuration, logging\nEnables DEBUG-level logging for 'com.sap.cds.properties' in your application's YAML configuration file. This will cause all CDS configuration properties to be logged on application startup, helping developers gain insight into active configuration and default values.\n\n```yaml\nlogging:\n  level:\n    com.sap.cds.properties: DEBUG  # [!code highlight]\n```\n",
    " March 2025 > Tools > Deployment With `cds up` <Beta />\nshell, deployment, Cloud Foundry, cds CLI, cds up\nRuns the new 'cds up' CLI command to deploy a CAP application directly to Cloud Foundry, automating typical build and deploy steps. This is a simplified deployment workflow for supported platforms with all prerequisites fulfilled.\n\n```shell\ncds up\n```\n",
    " March 2025 > Multitenancy > Extension Drafts <Beta/>\nhttp, multitenancy, extensions, drafts, extension draft\nHTTP PUT request to upload a new multitenancy extension as a draft. The body includes both extension CSN and i18n properties, and status=1 marks it as a draft (status 2 is activation). Uploaded as draft, the extension is not visible nor deployed.\n\n```http\nPUT /-/cds/extensibility/Extensions/isbn-extension HTTP/1.1\nContent-Type: application/json\n\n{\n  \"csn\": [\"using my.bookshop.Books from '_base/db/data-model';\\n           extend my.bookshop.Books with { Z_ISBN: String };\"],\n  \"i18n\": [{ \"name\": \"i18n.properties\", \"content\": \"Books_stock=Stock\" },\n           { \"name\": \"i18n_de.properties\", \"content\": \"Books_stock=Bestand\" }],\n  \"status\": 1 // draft = 1, activation = 2 [!code highlight]\n}\n```\n",
    " March 2025 > Multitenancy > Extension Drafts <Beta/>\nhttp, multitenancy, extensions, drafts, validation\nHTTP POST request to validate a specific extension draft, identified by ID. This step triggers validation without activation or deployment.\n\n```http\nPOST /-/cds/extensibility/validate HTTP/1.1\nContent-Type: application/json\n\n{\n  \"ID\": \"isbn-extension\"\n}\n```\n",
    " March 2025 > Multitenancy > Extension Drafts <Beta/>\nhttp, multitenancy, extensions, activation\nHTTP POST request to activate an extension by promoting its status to 2. This makes the extension publicly visible and triggers necessary changes to the database. The status property can be omitted since 2 is the default for activation.\n\n```http\nPOST /-/cds/extensibility/Extensions/activate HTTP/1.1\nContent-Type: application/json\n\n{\n  \"ID\": \"isbn-extension\",\n  \"status\": 2 // target status 2 = activation [!code highlight]\n}\n```\n",
    " Depending on your deployment method...\ninstallation, cloud, Cloud Foundry, mta, cds add\nAdds Multi-Target Application (MTA) support for deploying your CAP project to Cloud Foundry. This command scaffolds the necessary mta.yaml and related deployment files.\n\n```shell\ncds add mta\n```\n",
    " Depending on your deployment method...\ninstallation, cloud, Kubernetes, helm, containerize, cds add\nAdds Helm chart support and containerization capabilities for deploying your CAP project to Kubernetes. This command scaffolds Helm templates and Docker-related files.\n\n```shell\ncds add helm,containerize\n```\n",
    " Installing app dependencies, e.g.\ninstallation, npm, dependencies, Node.js, app dependencies\nInstalls application dependencies 'app/browse' and 'app/admin-books' using npm. Run these commands from the project root to include local or referenced packages as dependencies of your Node.js application.\n\n```shell\nnpm i app/browse\nnpm i app/admin-books\n```\n",
    " If project is multitenant\ninstallation, multitenancy, npm, sidecar\nInstalls the mtx/sidecar dependency in a way that only updates the package-lock.json without modifying package.json. This is typically required for multitenant CAP projects to declare sidecar dependencies precisely for lockfile-driven deployments.\n\n```shell\nnpm i --package-lock-only mtx/sidecar\n```\n",
    " If package-lock.json doesn't exist\nnpm, package-lock.json, installation\nGenerates a package-lock.json file without installing node modules. Useful when the lock file is missing and you want to create it based on package.json dependencies.\n\n```shell\nnpm i --package-lock-only\n```\n",
    " Final assembly and deployment... > Cloud Foundry\ndeployment, Cloud Foundry, mbt, cf CLI, build, final assembly\nBuilds the CAP application as an MTA archive and deploys it to SAP Cloud Foundry using the MBT build tool and cf CLI. Used in the final assembly and deployment phase for Cloud Foundry environments.\n\n```shell\nmbt build -t gen --mtar mta.tar\ncf deploy gen/mta.tar -f\n```\n",
    " Final assembly and deployment... > Kyma/Kubernetes, e.g.\ndeployment, Kyma, Kubernetes, ctz, helm, kubectl, build, final assembly\nBuilds and deploys a CAP application to Kyma (Kubernetes) using ctz for containerization, Helm for chart installation, and kubectl to monitor the rollout status of all main deployments.\n\n```shell\nctz containerize.yaml --log --push\nhelm upgrade --install bookshop ./gen/chart --wait --wait-for-jobs --set-file xsuaa.jsonParameters=xs-security.json\nkubectl rollout status deployment bookshop-srv --timeout=8m\nkubectl rollout status deployment bookshop-approuter --timeout=8m\nkubectl rollout status deployment bookshop-sidecar --timeout=8m\n```\n",
    " Final assembly and deployment... > For Kyma (Kubernetes), simply run\ndeployment, Kyma, Kubernetes, cds, local server\nStarts a CAP server locally targeting a Kubernetes (k8s) environment. Typically used for quick local tests and development on Kyma/Kubernetes.\n\n```shell\ncds up --to k8s\n```\n",
    " Final assembly and deployment... > Initial Type Generation With `cds watch`\ncds toolkit, cds watch, type generation, cds-typer, model imports, project setup\nImports model entities (e.g., Books) from the generated '#cds-models' directory. With 'cds watch', 'cds-typer' runs automatically to generate these types at startup, making it easier for freshly cloned projects to resolve model references.\n\n```js\nconst { Books } = require('#cds-models/sap/capire/bookshop')\n```\n",
    " Final assembly and deployment... > Ad-hoc SAP HANA Deployment on Kyma\nSAP HANA, Kubernetes, Kyma, deployment, ad-hoc deployment\nDeploys a CAP application’s database to SAP HANA on Kubernetes. If the binding or secret name is omitted, a new HDI container and binding is auto-created with the pattern '<appName>-db-binding'. Useful for on-demand HANA deployments in Kyma/Kubernetes environments.\n\n```shell\ncds deploy --to hana:<binding or secret name> --on k8s\n```\n",
    " Getting Started in a Nutshell > Jumpstart a Project\ninit, project setup, cds CLI, Node.js\nInitializes a new CAP project named 'bookshop' using the CDS CLI in a Node.js environment. Use this at the start of your CAP development workflow.\n\n```shell\ncds init bookshop\n```\n",
    " Getting Started in a Nutshell > Jumpstart a Project\ninit, project setup, cds CLI, Java\nInitializes a new CAP project for Java with Maven build and specified groupId. Use this command when creating CAP Java projects.\n\n```shell\ncds init bookshop --java --java:mvn -DgroupId=com.sap.capire\n```\n",
    " Getting Started in a Nutshell > Jumpstart a Project\neditor, VS Code, project open\nOpens the newly created 'bookshop' project in VS Code. Assumes the 'code' command is activated in your command line environment.\n\n```shell\ncode bookshop\n```\n",
    " Getting Started in a Nutshell > Jumpstart a Project\ncds CLI, verify, Node.js\nStarts the CAP server in watch mode for Node.js, monitoring project files for changes and performing hot reloads. Essential during local development.\n\n```shell\ncds watch\n```\n",
    " Getting Started in a Nutshell > Jumpstart a Project\nCLI, Java, verify\nRuns the CAP Java application in watch mode from the 'srv' directory, allowing for hot reloads as you change CDS files.\n\n```shell\ncd srv && mvn cds:watch\n```\n",
    " Getting Started in a Nutshell > Jumpstart a Project > Optionally clone sample from GitHub ...\ncds toolkit, project setup, samples, Node.js\nClones the CAP Node.js sample projects from GitHub, navigates into the directory, and installs dependencies. Useful for learning CAP with ready-to-run projects.\n\n```shell\ngit clone https://github.com/sap-samples/cloud-cap-samples samples\ncd samples\nnpm install\n```\n",
    " Getting Started in a Nutshell > Jumpstart a Project > Optionally clone sample from GitHub ...\ncds toolkit, project setup, samples, Java\nClones the CAP Java sample project from GitHub into a local 'bookshop' folder. Useful as a reference implementation.\n\n```shell\ngit clone https://github.com/sap-samples/cloud-cap-samples-java bookshop\n```\n",
    " Getting Started in a Nutshell > Capture Domain Models\ncds modeling, domain model, db/schema.cds\nDefines the domain model for the bookshop project using CDS in db/schema.cds. Includes entities for Books, Authors, and Genres with relationships and data types.\n\n```cds\nusing { Currency, managed, sap } from '@sap/cds/common';\nnamespace sap.capire.bookshop;\n\nentity Books : managed {\n  key ID : Integer;\n  title  : localized String(111);\n  descr  : localized String(1111);\n  author : Association to Authors;\n  genre  : Association to Genres;\n  stock  : Integer;\n  price  : Decimal(9,2);\n  currency : Currency;\n}\n\nentity Authors : managed {\n  key ID : Integer;\n  name   : String(111);\n  books  : Association to many Books on books.author = $self;\n}\n\n/** Hierarchically organized Code List for Genres */\nentity Genres : sap.common.CodeList {\n  key ID   : Integer;\n  parent   : Association to Genres;\n  children : Composition of many Genres on children.parent = $self;\n}\n\n```\n",
    " Getting Started in a Nutshell > Compiling Models\nCLI, compilation, validate, CSN\nCompiles the provided CDS model file, outputs the result in CSN format to the console. Useful for validation and parsing.\n\n```shell\ncds db/schema.cds\n```\n",
    " Getting Started in a Nutshell > Compiling Models\nCLI, compilation, to json\nCompiles a CDS schema file to JSON format. The '-2' flag is a shorthand for the '--to' option.\n\n```shell\ncds db/schema.cds -2 json\n```\n",
    " Getting Started in a Nutshell > Compiling Models\nCLI, compilation, to yml\nCompiles a CDS schema file to YAML format. Useful for integration or analysis.\n\n```shell\ncds db/schema.cds -2 yml\n```\n",
    " Getting Started in a Nutshell > Compiling Models\nCLI, compilation, to sql\nCompiles the CDS schema to SQL syntax, which is useful for generating database DDL.\n\n```shell\ncds db/schema.cds -2 sql\n```\n",
    " Getting Started in a Nutshell > Providing Services\nservice definition, srv/admin-service.cds\nDefines the AdminService in CDS, which provides admin-level access to Books and Authors entities via projections. This is used for administrative endpoints.\n\n```cds\nusing { sap.capire.bookshop as my } from '../db/schema';\nservice AdminService @(requires:'authenticated-user') {\n  entity Books as projection on my.Books;\n  entity Authors as projection on my.Authors;\n}\n```\n",
    " Getting Started in a Nutshell > Providing Services\nservice definition, srv/cat-service.cds\nDefines the CatalogService in CDS for end-users, exposing a read-only Books entity (with author name) and an action to submitOrder. This makes the service available at '/browse'.\n\n```cds\nusing { sap.capire.bookshop as my } from '../db/schema';\nservice CatalogService @(path:'/browse') {\n\n  @readonly entity Books as select from my.Books {*,\n    author.name as author\n  } excluding { createdBy, modifiedBy };\n\n  @requires: 'authenticated-user'\n  action submitOrder (book: Books:ID, quantity: Integer);\n}\n```\n",
    " Getting Started in a Nutshell > Generating APIs\nCLI, compilation, OData, to edmx\nCompiles the CatalogService CDS definition to an OData EDMX metadata document, which can be consumed by OData clients and tools.\n\n```shell\ncds srv/cat-service.cds -2 edmx\n```\n",
    " Getting Started in a Nutshell > Using Databases > Adding Initial Data\nadd, data, csv, initial data\nGenerates initial CSV data files (with headers only) for your domain entities. Useful for setting up test or demonstration data quickly.\n\n```shell\ncds add data\n```\n",
    " Getting Started in a Nutshell > Using Databases > Adding Initial Data\nadd, data, csv, initial data\nGenerates CSV files with 10 sample records for each entity, expediting the test data creation process during development.\n\n```shell\ncds add data --records 10\n```\n",
    " Getting Started in a Nutshell > Using Databases > Adding Initial Data\nadd, data, csv, db/data/sap.capire.bookshop-Books.csv\nExample of a CSV file containing initial data for the Books entity in the bookshop domain. This is stored under db/data/.\n\n```csvc\nID,title,author_ID,stock\n201,Wuthering Heights,101,12\n207,Jane Eyre,107,11\n251,The Raven,150,333\n252,Eleonora,150,555\n271,Catweazle,170,22\n```\n",
    " Getting Started in a Nutshell > Using Databases > Adding Initial Data\nadd, data, csv, db/data/sap.capire.bookshop-Authors.csv\nExample of a CSV file containing initial data for the Authors entity in the bookshop domain.\n\n```csvc\nID,name\n101,Emily Brontë\n107,Charlotte Brontë\n150,Edgar Allen Poe\n170,Richard Carpenter\n```\n",
    " Getting Started in a Nutshell > Using Databases > Persistent Databases\nconfiguration, package.json, persistent database, SQLite\nModifies package.json to use SQLite as a persistent database instead of the default in-memory mode. The database file 'db.sqlite' will be persisted on disk.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n          \"kind\": \"sqlite\",\n          \"credentials\": { \"url\": \"db.sqlite\" }\n      }\n    }\n  }\n}\n```\n",
    " Getting Started in a Nutshell > Using Databases > Persistent Databases\nCLI, deploy, persistent database\nDeploys the current CDS models to the configured database (as set in package.json), creating the schema in a persistent database like SQLite.\n\n```shell\ncds deploy\n```\n",
    " Getting Started in a Nutshell > Adding Custom Logic > Service Implementations\ncustom project layout, service implementation, cat-service.js\nRecommended project layout showing how to organize CDS service files and their JavaScript implementations for Node.js CAP projects.\n\n```shell\nbookshop/\n├─ srv/\n│ ├─ ...\n│ ├─ cat-service.cds\n│ └─ cat-service.js\n└─ ...\n```\n",
    " Getting Started in a Nutshell > Adding Custom Logic > Adding Event Handlers\nservice implementation, event handler, Node.js, cat-service.js\nDefines a Node.js CAP CatalogService with an 'after each' event handler that adds a discount note to book titles with high stock. Shows custom logic integration with the CAP eventing mechanism.\n\n```js\nconst cds = require('@sap/cds')\nclass CatalogService extends cds.ApplicationService { init() {\n  const { Books } = cds.entities('CatalogService')\n\n  // Register your event handlers in here, for example:\n  this.after ('each', Books, book => {\n    if (book.stock > 111) {\n      book.title += ` -- 11% discount!`\n    }\n  })\n\n  return super.init()\n}}\nmodule.exports = CatalogService\n```\n",
    " Getting Started in a Nutshell > Adding Custom Logic > Adding Event Handlers\nservice implementation, event handler, Java, CatalogServiceHandler.java\nAdds an @After READ event handler in CAP Java that appends a discount string to book titles when stock exceeds 111 units.\n\n```java\n@After(event = CqnService.EVENT_READ, entity = Books_.CDS_NAME)\npublic void addDiscountIfApplicable(List<Books> books) {\n  for (Books book : books) {\n    if (book.getStock() != null && book.getStock() > 111) {\n      book.setTitle(book.getTitle() + \" -- 11% discount!\");\n    }\n  }\n}\n```\n",
    " Getting Started in a Nutshell > Adding Custom Logic > Consuming Other Services\ncustom logic, event handler, consume service, Node.js, cat-service.js\nDemonstrates advanced event handling in a Node.js CAP service: processing orders (with stock validation and update) and post-processing books for discounts. Shows database access and error handling from CDS event handlers.\n\n```js\nconst cds = require('@sap/cds')\nclass CatalogService extends cds.ApplicationService { async init() {\n\n  const db = await cds.connect.to('db') // connect to database service\n  const { Books } = db.entities         // get reflected definitions\n\n  // Reduce stock of ordered books if available stock suffices\n  this.on ('submitOrder', async req => {\n    const {book,quantity} = req.data\n    const n = await UPDATE (Books, book)\n      .with ({ stock: {'-=': quantity }})\n      .where ({ stock: {'>=': quantity }})\n    n > 0 || req.error (409,`${quantity} exceeds stock for book #${book}`)\n  })\n\n  // Add some discount for overstocked books\n  this.after ('each','Books', book => {\n    if (book.stock > 111) book.title += ` -- 11% discount!`\n  })\n\n  return super.init()\n}}\nmodule.exports = CatalogService\n```\n",
    " Getting Started in a Nutshell > Adding Custom Logic > Consuming Other Services\ncustom logic, event handler, consume service, Java, SubmitOrderHandler.java\nAn @On event handler in CAP Java that processes 'submitOrder' requests. It checks stock, updates the book, and handles errors using typed CQL and Spring components.\n\n```java\n@On\npublic void onSubmitOrder(SubmitOrderContext context) {\n  Select<Books_> byId = Select.from(cds.gen.catalogservice.Books_.class).byId(context.getBook());\n  Books book = persistenceService.run(byId).single().as(Books.class);\n  if (context.getQuantity() > book.getStock())\n    throw new IllegalArgumentException(context.getQuantity() + \" exceeds stock for book #\" + book.getTitle());\n  book.setStock(book.getStock() - context.getQuantity());\n  persistenceService.run(Update.entity(Books_.CDS_NAME).data(book));\n  context.setCompleted();\n}\n```\n",
    " Getting Started in a Nutshell > Adding Custom Logic > Sample HTTP Requests\nverify, test, http, sample request, Node.js\nSample HTTP POST request for testing the submitOrder action on the CatalogService in Node.js CAP application. Authenticates as 'alice'.\n\n```http\n### Submit Order\nPOST http://localhost:4004/browse/submitOrder\nContent-Type: application/json\nAuthorization: Basic alice:\n\n{\n  \"book\": 201,\n  \"quantity\": 2\n}\n```\n",
    " Getting Started in a Nutshell > Adding Custom Logic > Sample HTTP Requests\nverify, test, http, sample request, Java\nSample HTTP POST request for testing the submitOrder action on the CatalogService in Java CAP application. Authenticates as 'authenticated'.\n\n```http\n### Submit Order\nPOST http://localhost:8080/odata/v4/browse/submitOrder\nContent-Type: application/json\nAuthorization: Basic authenticated:\n\n{\n  \"book\": 201,\n  \"quantity\": 2\n}\n```\n",
    " Using Databases > Setup & Configuration > Adding Database Packages\ninstallation, npm, SQLite, CAP Node.js, development, database package\nInstalls the @cap-js/sqlite package as a development dependency for CAP Node.js applications. This package adds support for SQLite database usage mainly in development environments.\n\n```shell\nnpm add @cap-js/sqlite -D\n```\n",
    " Using Databases > Setup & Configuration > Adding Database Packages\ninstallation, npm, SAP HANA, CAP Node.js, production, database package\nInstalls the @cap-js/hana package as a production dependency for CAP Node.js applications, enabling SAP HANA database support, recommended for productive usage environments.\n\n```shell\nnpm add @cap-js/hana\n```\n",
    " Using Databases > Setup & Configuration > Adding Database Packages\nCLI, cds CLI, database, SAP HANA, add, mta.yaml\nUses the cds CLI to add SAP HANA support to a CAP Node.js project. This command also updates deployment resources such as mta.yaml, going beyond just adding the npm package.\n\n```shell\ncds add hana\n```\n",
    " Using Databases > Setup & Configuration > Auto-Wired Configuration\nconfiguration, package.json, cds.env, auto-wiring, multi-database, SQLite, SAP HANA\nAuto-wired configuration snippet for specifying different database providers for development (SQLite) and production (SAP HANA). Controlled via cds.env in package.json with credentials and implementation provided by installed plugins.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"[development]\": { \"kind\": \"sqlite\", \"impl\": \"@cap-js/sqlite\", \"credentials\": { \"url\": \"memory\" } },\n        \"[production]\": { \"kind\": \"hana\", \"impl\": \"@cap-js/hana\", \"deploy-format\": \"hdbtable\" }\n      }\n    }\n  }\n}\n```\n",
    " Using Databases > Setup & Configuration > Custom Configuration\nconfiguration, cds.env, custom configuration, database, SQLite, db service\nShows a custom cds.env configuration block to manually specify a SQLite database as the primary CAP service. Overrides auto-wiring if needed. Sets the driver, implementation module, and file location.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"kind\": \"sqlite\",\n        \"impl\": \"@cap-js/sqlite\",\n        \"credentials\": {\n          \"url\": \"db.sqlite\"\n        }\n      }\n    }\n  }\n}\n```\n",
    " Using Databases > Setup & Configuration > Custom Configuration\nconfiguration, CLI, inspect, cds env, SQLite\nCLI command to print the effective configuration for the 'db' required service as resolved by cds.env. Useful to validate or debug configuration setups for database connectivity.\n\n```shell\ncds env cds.requires.db\n```\n",
    " Using Databases > Providing Initial Data\nproject structure, initial data, csv, db/data, scaffolding, CAP sample\nDemonstrates the folder structure for placing initial CSV data files in a CAP Node.js project. The db/data folder is used to bootstrap entities such as Books, Authors, and Genres. Filenames are derived from FQNs.\n\n```shell\nbookshop/\n├─ db/\n│ ├─ data/\n│ │ ├─ sap.capire.bookshop-Authors.csv\n│ │ ├─ sap.capire.bookshop-Books.csv\n│ │ ├─ sap.capire.bookshop-Books.texts.csv\n│ │ └─ sap.capire.bookshop-Genres.csv\n│ └─ schema.cds\n└─ ...\n```\n",
    " Using Databases > Providing Initial Data\nproject structure, initial data, csv, Java, CAP Java sample\nShows the folder structure for initial CSV files in a CAP Java project. The db/data folder holds entity seed files tied to FQNs, e.g., my.bookshop-Books.csv, for model bootstrapping.\n\n```shell\ndb/\n├─ data/\n│ ├─ my.bookshop-Authors.csv\n│ ├─ my.bookshop-Books.csv\n│ ├─ my.bookshop-Books.texts.csv\n│ ├─ my.bookshop-Genres.csv\n│ └─ ...\n└─ index.cds\n```\n",
    " Using Databases > Providing Initial Data > Using .csv Files\ncsv, initial data, db/data, Books, sample data\nSample CSV data for the 'Books' entity, showing how to align columns with CDS elements. The 'author_ID' column represents a managed association's foreign key.\n\n```csvc\nID,title,author_ID,stock\n201,Wuthering Heights,101,12\n207,Jane Eyre,107,11\n251,The Raven,150,333\n252,Eleonora,150,555\n271,Catweazle,170,22\n```\n",
    " Using Databases > Providing Initial Data > Using .csv Files\ncsv, initial data, escaping, Books, double quotes\nShows how to escape double quotes within CSV fields. Doubling double quotes within a quoted string is the correct method for embedded quotes.\n\n```csvc\nID,title,descr\n252,Eleonora,\"\"\"Eleonora\"\" is a short story by Edgar Allan Poe, first published in 1842 in Philadelphia in the literary annual The Gift.\"\n```\n",
    " Using Databases > Providing Initial Data > Use cds add data\nCLI, cds CLI, csv, scaffolding, initial data, data\nGenerates initial empty CSV files with header lines based on the CDS model definition, designed to speed up data scaffolding for new entities.\n\n```shell\ncds add data\n```\n",
    " Using Databases > Providing Initial Data > Location of CSV Files\ncsv, location, production, data configuration, model, cds.requires\nSpecifies a production-profile-only database model location for initial data. Used for controlling which data is loaded in production builds (such as in db/hana/data), but not during test or development.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"[production]\": {\n        \"hanaDataSrv \": { \"model\": \"db/hana\" }\n      }\n    }\n  }\n}\n```\n",
    " Using Databases > Providing Initial Data > Java CSV Configuration\nJava, configuration, CSV location, Spring Boot, test profile\nSpring Boot configuration YAML to enable test-specific CSV data loading for CAP Java applications. Activates the test profile so that test/data is used as the source of seed data.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: test\ncds:\n  dataSource.csv.paths:\n  - test/data/**\n```\n",
    " Using Databases > Querying at Runtime > DB-Agnostic Queries\nJavaScript, querying, cds.ql, database agnostic, Authors\nExample of using the CAP cds.ql API to construct a database-agnostic query in JavaScript. It selects Authors (with books) whose name starts with 'A'.\n\n```js\nSELECT.from (Authors, a => {\n  a.ID, a.name, a.books (b => {\n    b.ID, b.title\n  })\n})\n.where ({name:{like:'A%'}})\n.orderBy ('name')\n```\n",
    " Using Databases > Querying at Runtime > DB-Agnostic Queries\nJava, querying, CQL Query Builder API, database agnostic, Authors\nDatabase-agnostic query using the CAP Java CQL Query Builder, selecting authors whose names start with 'A' and their books.\n\n```java\nSelect.from(AUTHOR)\n      .columns(a -> a.id(), a -> a.name(),\n               a -> a.books().expand(b -> b.id(), b.title()))\n      .where(a -> a.name().startWith(\"A\"))\n      .orderBy(a -> a.name());\n```\n",
    " Using Databases > Querying at Runtime > Native DB Queries\nJavaScript, native SQL, cds.db.run, Node.js\nRuns a native SQL query against the connected database using Node.js's cds.db.run method. Useful for executing database-specific SQL beyond CAP abstractions.\n\n```js\ncds.db.run (`SELECT from sqlite_schema where name like ?`, name)\n```\n",
    " Using Databases > Querying at Runtime > Native DB Queries\nJava, native SQL, JDBC, Spring, JdbcTemplate\nExample code for executing native SQL in a CAP Java application via Spring's JdbcTemplate. Allows leveraging advanced database-specific features.\n\n```java\n@Autowired\nJdbcTemplate db;\n...\ndb.queryForList(\"SELECT from sqlite_schema where name like ?\", name);\n```\n",
    " Using Databases > Querying at Runtime > Reading LargeBinary / BLOB\nJavaScript, LargeBinary, BLOB, select, streams, Books\nDemonstrates explicit selection of LargeBinary/BLOB fields from Books entity. By default, BLOBs are skipped; explicit selection returns them as Node.js readable streams.\n\n```js\nSELECT.from(Books)          //> [{ ID, title, ..., image1, image2 }] // [!code --]\nSELECT.from(Books)          //> [{ ID, title, ... }]\nSELECT(['image1', 'image2']).from(Books) //> [{ image1, image2 }] // [!code --]\nSELECT(['image1', 'image2']).from(Books) //> [{ image1: Readable, image2: Readable }]\n```\n",
    " Using Databases > Generating DDL Files > Using cds compile\nCLI, cds CLI, compilation, SQL, DDL, sqlite, CatalogService\nCompiles a CDS model into an SQLite-compatible SQL DDL script, saving it to schema.sql. The input model is the cat-service service definition.\n\n```shell\ncds compile srv/cat-service --to sql --dialect sqlite > schema.sql\n```\n",
    " Using Databases > Generating DDL Files > Using cds compile\nCLI, cds CLI, compilation, SQL, DDL, CAT, Java\nCompiles a CDS model into a SQL DDL script using the default dialect (commonly for Java/H2/PostgreSQL). Output is written to schema.sql in the project root.\n\n```shell\ncds compile srv/cat-service --to sql > schema.sql\n```\n",
    " Using Databases > Generating DDL Files > @cds.persistence.skip\nCDS, entity, annotation, @cds.persistence.skip\nDemonstrates usage of @cds.persistence.skip to omit an entity (and all views on top of it) from generated SQL DDL artifacts. Useful for non-persistent or virtual entities.\n\n```cds\n@cds.persistence.skip\nentity Foo {...}                 //> No SQL table will be generated\nentity Bar as select from Foo;   //> No SQL view will be generated\n```\n",
    " Using Databases > Generating DDL Files > @cds.persistence.exists\nCDS, entity, annotation, @cds.persistence.exists\nDemonstrates use of @cds.persistence.exists. Indicates the table exists externally, so DDL for the entity is skipped, but dependent SQL views are still generated.\n\n```cds\n@cds.persistence.exists\nentity Foo {...}                 //> No SQL table will be generated\nentity Bar as select from Foo;   //> The SQL view will be generated\n```\n",
    " Using Databases > Generating DDL Files > @cds.persistence.table\nCDS, entity, annotation, @cds.persistence.table\nThe @cds.persistence.table annotation converts a projection-based view entity into a physical table with the view's signature.\n\n```cds\n@cds.persistence.table\nentity Foo as projection on Bar {...}\n```\n",
    " Using Databases > Generating DDL Files > @sql.prepend / append\nCDS, annotation, @sql.append, @sql.prepend, SQL DDL, native SQL\nMultiple usages of @sql.append to inject native SQL fragments into generated table or view DDL. Also shows string literal and multi-line literal usage.\n\n```cds\n@sql.append: ```sql\n  GROUP TYPE foo\n  GROUP SUBTYPE bar\n```\nentity E { ...,\n  @sql.append: 'FUZZY SEARCH INDEX ON'\n  text: String(100);\n}\n\n@sql.append: 'WITH DDL ONLY'\nentity V as select from E { ... };\n```\n",
    " Using Databases > Generating DDL Files > Creating a Row Table on SAP HANA\nCDS, annotation, @sql.prepend, ROW table, SAP HANA\nUsing @sql.prepend to create a row-based table on SAP HANA instead of the default column store. The generated .hdbtable will reflect the ROW specification.\n\n```cds\n@sql.prepend: 'ROW'\nentity E {\n  key id: Integer;\n}\n```\n",
    " Using Databases > Database Constraints > Not Null\nCDS, constraint, not null, Books, database constraint\nSpecifies a NOT NULL database constraint via the not null attribute on a scalar element (title) in a CDS entity. Used for mandatory fields.\n\n```cds\nentity Books {\n  key ID: Integer;\n  title: String not null;\n}\n```\n",
    " Using Databases > Database Constraints > Unique\nCDS, constraint, unique, @assert.unique, annotation\nDemonstrates @assert.unique annotation to enforce multi-field uniqueness for entity elements. The elements can be scalar, structured, or managed associations. Ensures the uniqueness of locale and timeslice combinations.\n\n```cds\n@assert.unique: {\n  locale: [ parent, locale ],\n  timeslice: [ parent, validFrom ],\n}\nentity LocalizedTemporalData {\n  key record_ID : UUID; // technical primary key\n  parent    : Association to Data;\n  locale    : String;\n  validFrom : Date;  \n  validTo : Date;\n}\n```\n",
    " Using Databases > Database Constraints > Foreign Keys\nCDS, association, foreign key constraint, Books, Authors, referential integrity\nCDS model snippet showing a to-one managed association from Books to Authors. Used as the basis for foreign key constraints generation.\n\n```cds\nentity Books {\n  key ID : Integer; ...\n  author : Association to Authors;\n}\nentity Authors {\n  key ID : Integer; ...\n}\n```\n",
    " Using Databases > Database Constraints > Foreign Keys\nSQL, foreign key constraint, Books, Authors, deferred, ON DELETE RESTRICT\nSQL table definitions with a deferred foreign key constraint enforcing referential integrity from Books.author_ID to Authors.ID. Uses ON UPDATE/DELETE RESTRICT and INITIALLY DEFERRED for compliance with CAP's transactional integrity.\n\n```sql\nCREATE TABLE Authors (\n  ID INTEGER NOT NULL,  -- primary key referenced by the constraint\n  ...,\n  PRIMARY KEY(ID)\n);\nCREATE TABLE Books (\n  ID INTEGER NOT NULL,\n  author_ID INTEGER,    -- generated foreign key field\n  ...,\n  PRIMARY KEY(ID),\n  CONSTRAINT Books_author   -- constraint is explicitly named // [!code focus]\n    FOREIGN KEY(author_ID)  -- link generated foreign key field author_ID ...\n    REFERENCES Authors(ID)  -- ... with primary key field ID of table Authors\n    ON UPDATE RESTRICT\n    ON DELETE RESTRICT\n    VALIDATED           -- validate existing entries when constraint is created\n    ENFORCED            -- validate changes by insert/update/delete\n    INITIALLY DEFERRED  -- validate only at commit\n)\n```\n",
    " Using Databases > Database Constraints > Foreign Keys\nCDS, composition, association, Genres, cascade delete\nDemonstrates a recursive composition with a parent association and a to-many composition (children). CAP infers CASCADE delete constraints for composition backlinks.\n\n```cds\nentity Genres {\n  key ID   : Integer;\n  parent   : Association to Genres;\n  children : Composition of many Genres on children.parent = $self;\n}\n```\n",
    " Using Databases > Database Constraints > Foreign Keys\nCDS, localized, Books, foreign key constraint, cascade delete\nCDS definition of a Books entity with a localized element. Generates a _texts table with a cascade foreign key constraint on ID for translation records.\n\n```cds\nentity Books {\n  key ID : Integer; ...\n  title : localized String;\n}\n```\n",
    " Using Databases > Database Constraints > Foreign Keys\nSQL, localized table, cascade delete, Books_texts, foreign key\nShows the SQL DDL output for a localized texts table with a cascade delete constraint on the ID field, ensuring translations are cleaned up on parent deletion.\n\n```sql\nCREATE TABLE Books_texts (\n  locale NVARCHAR(14) NOT NULL,\n  ID INTEGER NOT NULL,\n  title NVARCHAR(5000),\n  PRIMARY KEY(locale, ID),\n  CONSTRAINT Books_texts_texts // [!code focus]\n    FOREIGN KEY(ID)\n    REFERENCES Books(ID)\n    ON UPDATE RESTRICT\n    ON DELETE CASCADE\n    VALIDATED\n    ENFORCED\n    INITIALLY DEFERRED\n)\n```\n",
    " Using Databases > Using Native Features\nCDS, native SQL, function, entity, BookPreview, IFNULL\nShows how to use native SQL functions inside a CDS entity view. Here, the HANA-specific IFNULL function is used in a projection.\n\n```cds\nentity BookPreview as select from Books {\n  IFNULL (descr, title) as shorttext   //> using HANA function IFNULL\n};\n```\n",
    " Using Databases > Using Native Features\nCDS, window function, rank, partition, Books\nCDS entity using the SQL window function RANK() to calculate 'rank' per author partition ordered by price. Demonstrates support for advanced SQL constructs in CDS models.\n\n```cds\nentity RankedBooks as select from Books {\n  name, author,\n  rank() over (partition by author order by price) as rank\n};\n```\n",
    " Using Databases > Using Native Features > Using Native Functions with Different DBs\nCDS, native SQL, database specific, sqlite, hana, projections, model extension\nShows how to define database-specific model extensions for SQLite and SAP HANA using native functions (strftime for SQLite, YEARS_BETWEEN for HANA) for calculating 'age' in projections.\n\n```cds\n// db/sqlite/index.cds\nusing { AdminService } from '..';\nextend projection AdminService.Authors with {\n   strftime('%Y',dateOfDeath)-strftime('%Y',dateOfBirth) as age : Integer\n}\n\n// db/hana/index.cds\nusing { AdminService } from '..';\nextend projection AdminService.Authors with {\n   YEARS_BETWEEN(dateOfBirth, dateOfDeath) as age : Integer\n}\n```\n",
    " Using Databases > Using Native Features > Using Native Functions with Different DBs\nconfiguration, package.json, profiles, model, db specific, SQLite, HANA\nSpecifies package.json configuration with profile-dependent model folders. Uses db/sqlite for development, db/hana for production via cds.env. Ensures correct database-specific entity extensions.\n\n```json\n{ \"cds\": { \"requires\": {\n  \"db\": {\n   \"kind\": \"sql\",\n   \"[development]\": { \"model\": \"db/sqlite\" },\n   \"[production]\": { \"model\": \"db/hana\" }\n  }\n}}}\n```\n",
    " February 2025 > Prepare for CDS 9 > Add Test Support Package\neslint, migration, cds lint, CDS 9, installation\nInstalls the new test support package required for CDS 9. This replaces several test dependencies and is to be used in preparation for the next major CDS release. The package @cap-js/cds-test is a devDependency.\n\n```shell\nnpm add -D @cap-js/cds-test\n```\n",
    " February 2025 > Prepare for CDS 9 > Migrate ESLint Configuration\neslint, migration\nReference to the official ESLint migration guide. Starting with CDS 9, 'cds lint' will only support ESLint v9, so projects should migrate their configs as per ESLint documentation.\n\n```js\n// Follow official migration guide to update ESLint v8 config for v9 compatibility\n// https://eslint.org/docs/latest/use/migrate-to-9.0.0\n```\n",
    " February 2025 > Node.js > New Package for cds.test\neslint, test dependencies, installation, cds-test\nRemoves previously required test dependencies that are now included in @cap-js/cds-test. Use this after adding the new package to keep the dependency tree clean.\n\n```shell\nnpm rm axios chai chai-subset chai-as-promised\n```\n",
    " February 2025 > CDS Language & Compiler > New Parser\nconfiguration, parser, cds, cdsrc.json, new parser, private config\nEnables the new CDS parser via configuration in your private ~/.cdsrc.json or project configuration. This speeds up parsing and enables certain new CDS language features.\n\n```json\n{\n  \"cds\": {\n    \"cdsc\": {\n      \"newparser\": true\n    }\n  }\n}\n```\n",
    " February 2025 > CDS Language & Compiler > Type as Projection\ncds modeling, projection, type definition, new parser\nShows how to define a structured type as a projection on another entity or type using the new CDS parser. Only a subset of the elements are picked.\n\n```cds\nentity Name {\n  firstName  : String @label: '...';\n  middleName : String @label: '...';\n  lastName   : String @label: '...';\n  initials   : String @label: '...';\n  title      : String @label: '...';\n}\n\ntype ShortName : projection on Name {\n  firstName,\n  lastName\n};\n```\n",
    " February 2025 > CDS Language & Compiler > Use Enums Like Constants\nenums, constants, cds modeling\nDemonstrates usage of enum symbols (#open, #in_progress) as constants in entities and expressions, reducing the need for literal values. Supported by the compiler where it can deduce the enum type.\n\n```cds\ntype Status : String enum { open; closed; in_progress; };\nentity Order {\n  key id : Integer;\n  status : Status default #open; // [!code highlight]\n}\nentity OpenOrder as projection on Order {\n  id,\n  (status = #in_progress ? 'is in progress' : 'is open') // [!code highlight]\n    as status_txt : String,\n} where status = #open or status = #in_progress; // [!code highlight]\n```\n",
    " February 2025 > CDS Language & Compiler > Annotating Managed Associations <Beta />\nannotations, managed associations, odata, cds modeling\nShows annotating a managed association so that the annotation is also propagated to the generated foreign key element in the OData API. Now works with expression-valued annotations as well.\n\n```cds\nentity Authors { key ID : Integer; name : String; }\nentity Books   { author : Association to Authors; }\n\nannotate Books:author with @Common.Text: (author.name); // [!code highlight]\n```\n",
    " February 2025 > Node.js > Media Data in Actions and Functions\nmedia, actions, functions, custom handler, Node.js, media data\nCDS model defining an action returning media data (e.g. CSV file) with media annotations for type, content disposition and filename. This enables functions and actions with streaming media data.\n\n```cds\n@(Core.MediaType: 'text/csv', Core.ContentDisposition.Filename: 'Books.csv')\ntype csv:  LargeBinary;\nentity Books { ... } actions {\n  function csvExport () returns csv;\n}\n```\n",
    " February 2025 > Node.js > Media Data in Actions and Functions\nmedia, actions, custom handler, Node.js, streaming\nNode.js handler for an action returning a CSV Readable stream. Integrates with CDS media data support. The returned stream is sent as the action's response.\n\n```js\nthis.on('csvExport', req => {\n  return new Readable() // the csv stream\n})\n```\n",
    " February 2025 > Node.js > Media Data in Actions and Functions\nmedia, actions, custom handler, Node.js, streaming, response\nAlternative handler for media action using req.reply to set MIME type and filename dynamically for streamed responses in custom actions/functions.\n\n```js\nthis.on('csvExport', req => {\n  req.reply(new Readable(), { mimetype, filename })\n})\n```\n",
    " February 2025 > Node.js > Hints on SAP HANA\nsap hana, query hints, cds.ql, Node.js\nUses the new .hints() API on a SELECT in cds.ql to pass hints to the SAP HANA database optimizer, e.g. ignore plan cache or set max concurrency. Only works on SAP HANA backend.\n\n```js\nSELECT ... .hints('IGNORE_PLAN_CACHE', 'MAX_CONCURRENCY(1)')\n```\n",
    " February 2025 > Node.js > New Package for cds.test\ncds-test, test dependency, installation\nInstalls the @cap-js/cds-test package, which is the new home for test support for CAP Node.js applications. Required for cds.test API in CDS 9 and onwards.\n\n```shell\nnpm add -D @cap-js/cds-test\n```\n",
    " February 2025 > Java > UI5 State Messages for Drafts <Beta />\nconfiguration, cdsrc.json, odata containment, draft messages, UI5, beta\nConfiguration in .cdsrc.json to enable OData containment and UI5 state messages for drafts in CAP Java. Also enables experimental draftMessages feature in compiler.\n\n```json\n{\n  \"odata\": {\n    \"containment\": true\n  },\n  \"cdsc\": {\n    \"beta\": {\n      \"draftMessages\": true\n    }\n  }\n}\n```\n",
    " February 2025 > Java > UI5 State Messages for Drafts <Beta />\nannotations, side-effects, cds modeling, draft messages\nCDS annotation to disable the default side-effect annotation for a given entity, which instructs UI5 on when to fetch state messages.\n\n```cds\nannotate MyService.MyEntity with @Common.SideEffects #alwaysFetchMessages: null;\n```\n",
    " February 2025 > Java > Hierarchy Maintenance in Tree Table\nhierarchy, tree table, draft-enabled, inline editing, cds modeling, order by\nDefines a hierarchy entity with a siblingRank property for ordering, and an action for moving sibling nodes. For sorting sibling nodes in UI5 tree tables and supporting hierarchy maintenance.\n\n```cds\nentity Genre : cuid {\n      name        : String;\n      parent      : Association to Genre;\n      siblingRank : Integer;  // [!code highlight]\n}\n\nservice GenreAdminService {\n  entity GenreHierarchy as projection on Genre\n                           order by siblingRank\n    actions {\n      action moveSiblingAction(NextSibling : cuid);  // [!code highlight]\n    };\n}\n```\n",
    " February 2025 > Java > Expand on Subqueries\ncds-java, cqn, expand, subquery, select\nDemonstrates how to expand to-one associations from subqueries in CAP Java's CQN API, by explicitly selecting association columns in inner and outer queries.\n\n```java\nCqnSelect booksOnCAP = Select.from(BOOKS).columns(\n    b -> b.title(),\n    b -> b.author())  // [!code highlight]\n   .search(\"CAP\")\n   .orderBy(b -> b.title())\n   .limit(10);\nSelect.from(booksOnCAP).columns(\n    b -> b.get(\"title\"),\n    b -> b.to(\"author\").expand(\"name\"));  // [!code highlight]\n```\n",
    " February 2025 > Java > $expand on $apply in OData v4\nodata, $expand, $apply, cap-java\nSample OData v4 request demonstrating the use of $expand in conjunction with $apply for hierarchical and non-aggregating transformations and expansions of to-one associations.\n\n```http\nGET /SalesOrganizations?$apply=\n     ancestors($root/SalesOrganizations,SalesOrgHierarchy,ID\n     /search(\\\"CAP\\\"),keep start)\n     /com.sap.vocabularies.Hierarchy.v1.TopLevels(HierarchyNodes=$root/SalesOrganizations,HierarchyQualifier='SalesOrgHierarchy',NodeProperty='ID')\n&$select=DistanceFromRoot,DrillState,LimitedDescendantCount,Name,ID&$top=10\n&$expand=Superordinate($select=Name)\n```\n",
    " February 2025 > Java > SQL Window Functions\nsql, window function, select, partition, cap-java\nJava API example using the new .over() method to apply SQL window functions, partitioning sales data by region and computing a sum per partition.\n\n```java\nSelect.from(SALES)\n      .columns(s -> s.region(),\n               s -> s.saleId(),\n               s -> s.amount(),\n               s -> s.amount().sum().over(s.region()).as(\"sum\"));  // [!code highlight]\n```\n",
    " February 2025 > Java > Expressions in Runtime Views\ncds modeling, runtime views, expression, projection, cap-java\nDefines a runtime view using expressions in projections, such as string concatenations and ternary operators, demonstrating enhanced expressiveness in runtime views.\n\n```cds\n@cds.persistence.skip\nentity BooksView as projection on Books {\n    id,\n    toUpper(title) as title, // [!code highlight]\n    author.forename || author.surname as author, // [!code highlight]\n    (stock < 10 ? 'low' : 'high') as stock : String // [!code highlight]\n};\n```\n",
    " February 2025 > Java > Expressions in Runtime Views\ncds-java, select, runtime views, java\nJava code for querying a runtime view that includes projected columns with expressions, accessing the defined title, author, and stock fields.\n\n```java\nSelect.from(BooksView).columns(\n    b -> b.title(),  // [!code highlight]\n    b -> b.author(), // [!code highlight]\n    b -> b.stock()); // [!code highlight]\n```\n",
    " February 2025 > CAP Plugins > Attachments: Multitenancy\nattachments plugin, multitenancy, setup, CAP Plugins, plugin\nConceptual note: Attachments with @cap-js/attachments plugin are stored with tenant-specific prefixes to isolate tenant data in a multitenant CAP setup.\n\n```js\n// Attachments are now stored with a tenant ID prefix when using the multi-tenant setup\n\n```\n",
    " February 2025 > Tools > Command-line formatter\ntools, formatter, ignore files, cdsignore, gitignore\nThe format-cds command-line tool now respects ignore patterns defined in .cdsignore and .gitignore, skipping matching files during formatting.\n\n```txt\n// The format-cds CLI considers .cdsignore and .gitignore\n// Matching files will be excluded from formatting.\n```\n",
    " February 2025 > Tools > CDS Plugin for Community IntelliJ IDEs\nintellij, cds, plugin, editor\nInstructions for manual installation of the new CAP CDS plugin for IntelliJ Community editions, which includes all features of the commercial version.\n\n```txt\n// To install CDS plugin v2 for IntelliJ Community Editions:\n// Download from GitHub and install via: Settings -> Plugins -> Config Wheel Icon -> Install Plugin from Disk...\n```\n",
    " January 2025 > CDS Language & Compiler > Use Enums for Defaults\ncds modeling, enum, default value, new feature\nDefines a CDS enum type and demonstrates using an enum symbol as a default value in an entity. The 'status' property will default to 'open'. Enum symbols as default values are a new feature.\n\n```cds\ntype Status : String enum { open = 'O'; closed = 'C' };\n\nentity Orders {\n  key id : Integer;\n  status : Status default #open;\n}\n```\n",
    " January 2025 > Node.js > Basic Support for cds.Map\ncds modeling, cds.Map, arbitrary data, Node.js, OData v4\nDemonstrates the use of the built-in cds.Map type in an entity, allowing to store arbitrary structured data in 'details'. Available for OData v4 services only.\n\n```cds\nentity Person {\n  key ID      : UUID;\n      name    : String;\n      details : Map;\n}\n```\n",
    " January 2025 > Node.js > Basic Support for cds.Map\nNode.js, cds.Map, data insert, arbitrary data\nShows how to insert and retrieve a Person entity with arbitrary structured data stored in the 'details' property, which uses cds.Map.\n\n```js\nawait INSERT.into(Person).entries({\n  name: 'Peter',\n  details: {\n    age: 40,\n    address: {\n      city: 'Walldorf',\n      street: 'Hauptstrasse'\n    }\n  }\n})\nawait SELECT.from(Person).columns('name', 'details')\n```\n",
    " January 2025 > Java > Predicates as Select List Items\nJava, CQL, predicate, boolean expression, select list\nDemonstrates using predicate expressions as select list items in CAP Java CQL. The query returns boolean values mapped to the provided aliases, evaluated directly on the database.\n\n```java\nSelect.from(BOOKS).byId(17).columns(\n  b -> b.year().gt(2000).as(\"isFrom21stCentury\"),\n  b -> b.author().name().eq(\"J.K. Rowling\").as(\"byJKRowling\"));\n```\n",
    " January 2025 > Java > Typed Entity References\nJava, static model, typed entity reference, CQL, fluent API\nIllustrates how to use the new CQL.entity(Class, ref) API in CAP Java to build type-safe queries using generated model interfaces and generic entity references.\n\n```java\nimport static bookshop.Bookshop_.BOOKS;\nimport static com.sap.cds.ql.CQL.entity;\n\nCqnStructuredTypeRef ref;\n\nSelect.from(entity(BOOKS, ref)).where(b -> b.author().name().eq(\"J.K. Rowling\"));\n```\n",
    " January 2025 > Java > Invoke Functions with Parameters Aliases\nhttp, OData V4.01, Java, function invocation, implicit parameter alias\nShows three ways to invoke an OData V4.01 function via HTTP: traditional syntax, explicit parameter alias, and the new implicit parameter alias supported by CAP Java.\n\n```http\nGET sue/stock(id=2)         // traditional syntax\nGET sue/stock(id=@ID)?@ID=2 // explicit parameter alias\nGET sue/stock?id=2          // implicit parameter alias\n```\n",
    " January 2025 > Java > cds debug for Java Applications\ndebugging, cds CLI, Java, Cloud Foundry, SSH tunnel\nDemonstrates usage of 'cds debug' for starting a local or remote debugging session for CAP Java applications, including SSH tunneling for remote debug on Cloud Foundry apps.\n\n```shell\n$ cds debug\nStarting 'mvn spring-boot:run -Dspring-boot.run.jvmArguments=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000\"'\n...\nListening for transport dt_socket at address: 8000\n...\n\n$ cds debug <app-name>\n...\nDebugging has been started.\nAddress : 8000\n\nOpening SSH tunnel on 8000:127.0.0.1:8000\n\n> Keep this terminal open while debugging.\n```\n",
    " January 2025 > Tools > cds watch with Include and Exclude Paths\nCLI, cds watch, include, exclude, tools\nShows how to start 'cds watch' while including and excluding specific paths, enabling fine-grained file watching configuration during development.\n\n```shell\ncds watch --include ../other-app --exclude .idea/\n```\n",
    " January 2025 > Tools > Sample Code for TypeScript\nCLI, project setup, sample, TypeScript\nInitializes a new TypeScript-based CAP project called 'bookshop' and adds sample TypeScript service handler code with the cds CLI.\n\n```shell\ncds init bookshop --add typescript,sample\n```\n",
    " January 2025 > Java > Authorization Checks On Input Data <Beta />\nJava, authorization, input validation, instance-based authorization, beta\nCDS annotation for entity-level instance-based authorization: restricts access to Orders by comparing the record's accountingArea with the user's assigned areas. Now also used for input data validation in CREATE/UPDATE in CAP Java.\n\n```cds\nannotate Orders with @(restrict: [\n  { grant: '*', where: 'accountingArea = $user.accountingAreas' } ]);\n```\n",
    " CDS Language & Compiler > New `CQN` Spec Using `.d.ts`\ncds modeling, CQN, typescript, CQN spec, typed API\nShows a TypeScript declaration for the CQN SELECT query structure, used for modeling queries in a type-safe way. This new definition helps developers leverage IntelliSense and advanced editing capabilities in tools that understand TypeScript.\n\n```ts\nclass SELECT { SELECT: {\n  distinct?   : true\n  count?      : true\n  one?        : true\n  from        : source\n  columns?    : column[]\n  where?      : xo[]\n  having?     : xo[]\n  search?     : xo[]\n  groupBy?    : expr[]\n  orderBy?    : order[]\n  limit?      : { rows: val, offset: val }\n}}\n```\n",
    " CDS Language & Compiler > Annotating Foreign Keys <Beta />\nassociations, cds modeling, annotation, foreign key\nDemonstrates how to annotate the foreign key element of a managed association in CDS, enabling custom metadata assignments such as labels on association foreign keys.\n\n```cds\nentity Authors { key ID : Integer; }\nentity Books   { author : Association to Authors; }\n\nannotate Books:author.ID with @label: 'Author';\n```\n",
    " Node.js > `cds.env` Enhancements\ncds.env, configuration, yaml, profile, hybrid\nShows a sample .cdsrc.yaml configuration enabling profile-specific settings. The '[hybrid]' block configures the database kind as 'hana' for the 'hybrid' profile.\n\n```yaml\ncds:\n  requires:\n    db:\n      kind: sql\n      \"[hybrid]\":\n        kind\": hana\n```\n",
    " Node.js > `cds.env` Enhancements\ncds.env, configuration, cdsrc.js, profile, hybrid\nProvides a JavaScript configuration (in .cdsrc.js) for customizing cds.env settings, including profile-specific database configuration using the 'hybrid' profile.\n\n```js\nmodule.exports = {\n  cds: {\n    requires: {\n      db: {\n        kind: 'sql',\n        '[hybrid]': {\n          kind: 'hana'\n        }\n      }\n    }\n  }\n}\n```\n",
    " Node.js > `cds.env` Enhancements\ncds.env, configuration, profile, cdsrc.json, hybrid\nDefines cds.env configuration in .cdsrc.json format, showing how to specify a different database kind for the 'hybrid' profile.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"kind\": \"sql\",\n        \"[hybrid]\": {\n          \"kind\": \"hana\"\n        }\n      }\n    }\n  }\n}\n```\n",
    " Node.js > `cds.env` Enhancements\ncds.env, environment, profile, properties file, hybrid\nSets the database kind to 'hana' in a profile-specific .hybrid.env properties file for environment-specific configuration overrides.\n\n```properties\ncds.requires.kind = hana\n```\n",
    " Node.js > `cds.ql` Enhancements\ncds.ql, programmatic queries, tagged template, CQN, helper functions\nIllustrates four equivalent ways to create a CQN SELECT query using the consolidated cds.ql API, supporting strings, objects, and fluent builder syntax.\n\n```js\nlet q = cds.ql `SELECT from Books where ID=${201}`\nlet q = cds.ql (`SELECT from Books where ID=${201}`)\nlet q = cds.ql ({\n  SELECT: {\n    from: { ref: [ 'Books' ] },\n    where: [ { ref: [ 'ID' ] }, '=', { val: 201 } ]\n  }\n})\nlet q = SELECT.from('Books').where({ID:201})\n```\n",
    " Node.js > `cds.ql` Enhancements\ncds.ql, CQN, helper functions, expressions, expand\nDemonstrates constructing rich CQN SELECT queries using cds.ql helper functions for references, expansions, filters, and ordering.\n\n```js\nconst { expr, ref, val, columns, expand, where, orderBy } = cds.ql\nlet q = {\n  SELECT: {\n    from: ref`Authors`,\n    columns: [\n      ref`ID`,\n      ref`name`,\n      expand (ref`books`, where`stock>7`, orderBy`title`,\n        columns`ID,title`\n      )\n    ],\n    where: [ref`name`, 'like', val('%Poe%')]\n  }\n}\nawait cds.run(q)\n```\n",
    " Node.js > `cds.ql` Enhancements\ncds.ql, tagged template, programmatic queries, CQN, read\nShows diverse ways to run queries using tagged template literals with cds.ql, cds.parse, SELECT, and cds.read, enhancing flexibility and Expressiveness.\n\n```js\nawait cds.run (cds.parse.cql `SELECT ID,title from Books`)\nawait cds.run `SELECT ID,title from Books`\nawait cds.ql `SELECT ID,title from Books`\nawait SELECT `ID,title from Books`\nawait SELECT `ID,title`.from`Books`\nawait SELECT.from `Books {ID,title}`\nawait cds.read `ID,title from Books`\nawait cds.read `Books`\nawait cds.read `Books where ID=201`\n```\n",
    " Node.js > OData Containment\nodata, containment, cds modeling, composition, OData V4\nDefines a CDS service with a root entity (Orders) and a composition (Items), illustrating how containment is modeled in the CDS layer for OData V4 services.\n\n```cds\nservice Sue {\n  entity Orders { //...\n    Items : Composition of many { /*...*/ }\n  }\n}\n```\n",
    " Node.js > OData Containment\nodata, xml, containment, EntitySet, exposure\nShows the impact of containment mode in OData: the Orders_Items EntitySet is removed, meaning related items can only be accessed via navigation, not as a top-level entity set.\n\n```xml\n<EntityContainer Name=\"EntityContainer\">\n  <EntitySet Name=\"Orders\" ... />\n-  <EntitySet Name=\"Orders_Items\" ... /> \n</EntityContainer>\n```\n",
    " Node.js > Function Parameters via Query Options\nodata, function, query options, OData V4.01, URL\nProvides two equivalent ways to call a function in OData V4.01: using parentheses notation or query parameter style for function parameters.\n\n```http\nGET sue/stock(id=2) // traditional syntax\nGET sue/stock?id=2  // new syntax\n```\n",
    " Node.js > Consolidated Authorization Checks\nauthorization, restrict, UPDATE, DELETE, SQL, filter, compatibility\nSQL query showing an UPDATE statement with an extra filter. The filter 'title = 'bar'' is now ignored for authorization checks with the updated behavior.\n\n```sql\nUPDATE Books SET title = 'foo' WHERE title = 'bar'\n```\n",
    " Java > Important Changes ❗️ > NPM Build-Plugin Support\njava, maven, npm, build plugin, dependency, ci, package.json\nMaven XML config for running 'npm ci' as part of the build to ensure stable dependency versions, supporting modern CAP Java project patterns.\n\n```xml\n<execution>\n  <id>cds.npm-ci</id>\n  <goals>\n    <goal>npm</goal>\n  </goals>\n  <configuration>\n    <arguments>ci</arguments>\n  </configuration>\n</execution>\n```\n",
    " Java > SAP Document Management Service Plugin\njava, Calesi, SAP Document Management Service, dependency, Attachments, pom.xml, plugin\nShows how to include the SAP Document Management Service (SDM) plugin as a dependency in a cap-java project for handling attachments.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>sdm</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n",
    " Java > Outbox Message Versioning\njava, outbox, maven, application version, build, resources\nConfigures Maven resource filtering to make the build version available to CAP Java, supporting outbox message versioning in deployments.\n\n```xml\n<build>\n  <resources>\n    <resource>\n      <directory>src/main/resources</directory>\n      <filtering>true</filtering>\n    </resource>\n  </resources>\n</build>\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, command line, interactive shell, parse, CQN, CSN, inspection\nLaunches the CDS interactive REPL for parsing, experimenting, and inspecting CSN or CQN objects.\n\n```shell\ncds repl  # from your command line\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, parse, CSN, interactive, cdl\nParses CDL model definitions interactively in the REPL to obtain a CSN representation.\n\n```js\ncds.parse`\n  entity Foo { bar : Association to Bar }\n  entity Bar { key ID : UUID }\n`\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, cds.ql, CQN, interactive\nShows the use of the cds.ql tagged template in the REPL to compose a deep query with nested projections, filters, and ordering.\n\n```js\ncds.ql`SELECT from Authors {\n  ID, name, books [order by title] {\n    ID, title, genre.name as genre\n  }\n} where exists books.genre[name = 'Mystery']`\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, dot command, run, cap/samples/bookshop\nREPL dot command to start a Node.js cds.server for a given CAP sample project inside the interactive REPL.\n\n```shell\n.run cap/samples/bookshop\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, CLI, run, cap/samples/bookshop\nCommand-line invocation to start the REPL and immediately run a CAP sample project server.\n\n```shell\ncds repl --run cap/samples/bookshop\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, dot command, inspect, CLI\nREPL dot commands to inspect objects (e.g., cds or CatalogService handlers) with adjustable display depth for better introspection.\n\n```shell\n.inspect cds .depth=1\n.inspect CatalogService.handlers .depth=1\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, use, cds.ql, import, helper functions\nShortcut CLI option to load the cds.ql module's helper functions directly into the REPL session.\n\n```shell\ncds repl --use ql\n```\n",
    " Tools > `cds repl` Enhancements\ncds, repl, import, cds.ql, helper functions\nDestructures frequently used helpers from cds.ql within a REPL session for convenient CQN/CSN building.\n\n```js\nvar { expr, ref, columns, /* ...and all other */ } = cds.ql\n```\n",
    " Tools > `cds watch` for TypeScript\ntypescript, cds watch, tsx, project detection, CLI\nDemonstrates how 'cds watch' now automatically works with TypeScript projects, detecting 'tsconfig.json' and launching the service using 'cds-tsx'.\n\n```shell\ncap/sflight $ cds watch\n\nDetected tsconfig.json. Running with tsx.\n...\n[cds] serving TravelService { impl: 'srv/travel-service.ts', path: '/processor' }\n...\n```\n",
    "CDS Language & Compiler > New CDL Parser <Alpha/>\nconfiguration, cdsrc.json, CDL, parser, alpha, CDS, compiler\nSet this option in your private ~/.cdsrc.json file to enable the new, much smaller CDL parser for CDS compilation, currently in alpha. This prepares your environment to use the new parser implementation for testing purposes.\n\n```json\n{\n  \"cdsc\": {\n    \"newParser\": true\n  }\n}\n```\n",
    "CDS Language & Compiler > Enhanced @assert.range\nassert, validation, @assert.range, open interval, cds, numeric validation, cds modeling\nShowcases new support for open intervals in @assert.range annotation within CDS models. Wrapping min or max values in parentheses creates exclusive bounds, e.g. (0) means strictly greater than 0.\n\n```cds\n@assert.range: [(0),100]    // 0 < input ≤ 100\n@assert.range: [0,(100)]    // 0 ≤ input < 100\n@assert.range: [(0),(100)]  // 0 < input < 100\n```\n",
    "CDS Language & Compiler > Enhanced @assert.range\nassert, validation, @assert.range, cds, infinity, cds modeling\nIllustrates using underscore _ as a stand-in for positive or negative infinity with @assert.range in CDS models. This enables validation for open-ended numeric intervals.\n\n```cds\n@assert.range: [(0),_]  // positive numbers only, _ means +Infinity here\n@assert.range: [_,(0)]  // negative number only, _ means -Infinity here\n```\n",
    "Node.js > New Plugin for RFC\nRFC, plugin, Node.js, service consumption, remote service, SAP S/4HANA\nDemonstrates using the new @sap/cds-rfc plugin for Node.js to connect to an RFC-enabled function module (e.g., BAPI_USER_GET_DETAIL) from an SAP S/4HANA system and call it within your CAP service.\n\n```js\nconst S4 = await cds.connect.to('SYS')\nconst user = await S4.BAPI_USER_GET_DETAIL({\n  USERNAME: 'display', ...\n})\n```\n",
    "Node.js > New cds.i18n API\ni18n, cds.i18n, localization, Node.js, messages, Fiori UI, CDS API\nIllustrates how to use the new cds.i18n API in Node.js for retrieving translated UI labels and localized runtime messages in CAP, including label lookup for specific locales.\n\n```js\nconst cds = require('@sap/cds')\ncds.i18n.labels.at('CreatedAt','de')  // Erstellt am\ncds.i18n.labels.at('CreatedAt')      // Created At\ncds.i18n.messages.at('ASSERT_FORMAT',['wrong email',/\\w+@\\w+/])\n```\n",
    "Node.js > New cds.i18n API\ni18n, Fiori UI, cds.i18n, localization, Node.js, CSN definitions\nShows how to get translated labels for CSN definitions (entities, elements) using cds.i18n.labels.at, with the locale specified via cds.context, as used for Fiori UI internationalization.\n\n```js\nlet {Books} = CatalogService.entities, {title} = Books.elements\ncds.context = {locale:'fr'}  // as automatically set by protocol adapters\ncds.i18n.labels.at(Books)    //> 'Livre'\ncds.i18n.labels.at(title)    //> 'Titre'\n```\n",
    "Node.js > Fuzzy Search\nfuzzy search, cds modeling, annotation, search, ranking, Node.js\nDefines entity fields with @Search.fuzzinessThreshold and @Search.ranking annotations for fine-tuning search behavior and relevant ranking in CAP Node.js models.\n\n```cds\nentity Books {\n      @Search.fuzzinessThreshold: 0.5\n      @Search.ranking: HIGH\n      title         : String;\n      @Search.ranking: LOW\n      description   : String;\n}\n```\n",
    "Node.js > cds debug <Beta />\nCLI, debug, Node.js, Chrome DevTools, remote debug, cds CLI\nRuns the new CLI 'cds debug' command to launch CAP Node.js applications in debug mode. The first starts locally (shortcut for 'cds watch --debug'), the second connects remotely to a Cloud Foundry app 'bookshop-srv' using an SSH tunnel.\n\n```shell\ncds debug\ncds debug bookshop-srv\n```\n",
    "Node.js > cds add handler\nCLI, handler stub, event handler, JavaScript, TypeScript, cds CLI, project setup\nCreates handler stubs for service entities and actions (in JavaScript or TypeScript) in Node.js projects, using the CDS CLI. This automates event handler scaffolding.\n\n```shell\ncds add handler\n```\n",
    "Node.js > cds add handler\nevent handler, JavaScript, cds.ApplicationService, service implementation, stub, handler, cds CLI\nA generated event handler stub for CAP Node.js, registering before and on event handlers for CRUD operations and actions on entities (Books, submitOrder). Used as a result of 'cds add handler' command.\n\n```js\nconst cds = require('@sap/cds')\nmodule.exports = class CatalogService extends cds.ApplicationService { init() {\n  const { Books } = cds.entities('CatalogService')\n\n  this.before (['CREATE', 'UPDATE'], Books, async (req) => {\n    console.log('Before CREATE/UPDATE Books', req.data)\n  })\n  this.on ('submitOrder', async (req) => {... })\n\n  return super.init()\n}}\n```\n",
    "Node.js > cds add handler\nevent handler, TypeScript, cds.ApplicationService, service implementation, stub, handler, cds CLI\nA TypeScript stub for a CAP ApplicationService event handler, with types for entities and actions, as produced by 'cds add handler'.\n\n```ts\nimport cds from '@sap/cds'\nimport { Books, submitOrder } from '#cds-models/CatalogService'\n\nexport class CatalogService extends cds.ApplicationService { init() {\n  this.before (['CREATE', 'UPDATE'], Books, async (req) => {\n    console.log('Before CREATE/UPDATE Books', req.data)\n  })\n  this.on (submitOrder, async (req) => {... })\n\n  return super.init()\n}}\n```\n",
    "Node.js > cds init --add esm <Beta />\nCLI, ESM, project setup, cds CLI, Node.js, initialization\nInitializes a new CAP project with ECMAScript module (ESM) support or adds ESM support to an existing project. Sample code (cds add sample/handler) will align with the module type.\n\n```shell\ncds init --add esm\ncds add esm\n```\n",
    "Java > Simpler Recursive Hierarchies\nrecursive hierarchy, UI5, tree table, projection, CDS, Java, HANA, Aggregation.RecursiveHierarchy\nDefines a recursive hierarchy in CDS for a UI5 tree table. The Java runtime now interprets @Aggregation.RecursiveHierarchy for automatic property renaming, enabling managed associations for parent navigation without manual projections.\n\n```cds\ncontext db {\n  entity SalesOrgs : cuid {\n    name     : String;\n    parentID : String(36); // [!code --]\n    parent   : Association to SalesOrg\n                on parent.ID = parentID;  // [!code --]\n  }\n}\n\nservice S {\n  @Aggregation.RecursiveHierarchy #SalesOrgHierarchy: {\n    $Type                   : 'Aggregation.RecursiveHierarchyType',\n    NodeProperty            : ID,\n    ParentNavigationProperty: parent\n  }\n  entity SalesOrgHierarchy as projection on db.SalesOrgs {\n      *,\n      ID       as node_id, // [!code --]\n      parentID as parent_id // [!code --]\n    };\n}\n```\n",
    "Java > Filter & Sort by Elements in cds.Map <Beta />\ncds.Map, filter, sort, Java, CQL, advanced querying\nJava code for filtering and sorting entities by sub-elements within a cds.Map property. Demonstrates advanced access to nested data for search and ordering in CAP Java.\n\n```java\nSelect.from(PERSON).where(p -> p.name().eq(\"Peter\").and(\n    p.get(\"details.address.city\").eq(\"Walldorf\")));\n\nSelect.from(PERSON).where(p -> p.name().eq(\"Peter\"))\n      .orderBy(p -> p.get(\"details.address.city\")\n                     .type(CdsBaseType.String).asc());\n```\n",
    "Java > Enhanced Instance-Based Authorization\nauthorization, instance-based, @restrict.where, Java, security, configuration\nEnables strict instance-based authorization in CAP Java: PATCH/DELETE requests to entities that exist but are unauthorized return 403 Forbidden instead of 404 Not Found.\n\n```properties\n\"cds.security.authorization.instance-based.reject-selected-unauthorized-entity.enabled: true\"\n```\n",
    "MTX > Annotation Allowlist for Extensions\nMTX, multitenancy, extension, annotation allowlist, cds.xt.ExtensibilityService, cdsrc.json\nAllows exceptions to the annotation extension restrictions in MTX via an allowlist in the configuration. Here, @readonly is permitted as an extension for CatalogService.\n\n```jsonc\n{\n  \"cds.xt.ExtensibilityService\": {\n    \"extension-allowlist\": [\n      {\n        \"for\": [\"CatalogService\"],\n        // allow @readonly annotations in CatalogService\n        \"annotations\": [\"@readonly\"]\n      }\n    ]\n  }\n}\n```\n",
    " October Release > Richer Configuration Properties in cap≽ire\nconfiguration, cap≽ire, cds.requires, db, Node.js, Java, cds.odata-v4.endpoint.path\nShows examples of configuring CAP project properties. One sets the database to SQLite for Node.js, and another sets the base OData v4 endpoint path to '/api' for Java. Demonstrates the new cap≽ire configuration popover feature for highlighting and showcasing configuration keys.\n\n```properties\ncds.requires.db: sqlite    # Node.js\ncds.odata-v4.endpoint.path: /api    # Java\n```\n",
    " October Release > CDS Language & Compiler > New Type: cds.Map\ncds modeling, cds, cds.Map, entity, Java, types, OData V4\nDefines a CDS service 'People' that contains an entity 'Person' with a key ID, name, and a new 'details' property of type Map. Illustrates the use of the built-in cds.Map type, which maps to different types in various backends. Supported in CAP Java with OData V4.\n\n```cds\nservice People {\n  entity Person {\n    key ID      : UUID;\n        name    : String;\n        details : Map;\n  }\n}\n```\n",
    " October Release > Java > Basic Support for cds.Map <Beta />\nJava, cds.Map, Insert, arbitrary data, Map serialization, database write\nShows how to store arbitrary structured data in a 'details' field with type cds.Map in CAP Java. The Map is serialized to JSON and inserted into the database for the 'Person' entity.\n\n```java\nMap<String, Object> person =\n  Map.of(\"name\", \"Peter\",\n         \"details\", Map.of(\n            \"age\", 40,\n            \"address\", Map.of(\n              \"city\", \"Walldorf\",\n              \"street\", \"Hauptstraße\")));\n\nInsert.into(\"Person\").entry(person);\n```\n",
    " October Release > Java > Basic Support for cds.Map <Beta />\nJava, cds.Map, read, deserialization, CdsData, path access\nDemonstrates reading and accessing structured data from a 'details' column of type cds.Map in a Java entity. The Map is deserialized from JSON and allows both key and path-based access using CdsData.\n\n```java\nPerson p = db.run(Select.from(PERSON).byId(1024)).single(Person.class);\nCdsData details = p.getDetails();\nInteger age = details.get(\"age\"); // 40\nString city = details.getPath(\"address.city\"); // Walldorf\n```\n",
    " October Release > Java > Basic Support for cds.Map <Beta />\nJava, cds.Map, SQL, nested projection, columns, Select\nShows how to project nested properties from a cds.Map-typed field in a SELECT query in CAP Java. Demonstrates selecting nested JSON sub-objects directly using column path expressions.\n\n```java\nSelect.from(\"Person\").byId(1024).columns(\"details.address\");\n// -> { address : { city : 'Walldorf', street: 'Hauptstraße' } }\n\nSelect.from(\"Person\").byId(1024).columns(\"details.address.city\");\n// -> { city : 'Walldorf' }\n```\n",
    " October Release > Java > Enhancements for CDS QL > IN Subqueries\nJava, CDS QL, IN, subquery, predicate, Select, fluent\nIllustrates using an 'IN' subquery predicate in the CAP Java Query Language to select authors whose names appear in the set of journalist names. Uses the fluent style query API.\n\n```java\nimport static bookshop.Bookshop_.AUTHORS;\nimport static socialmedia.Journalists_.JOURNALISTS;\n\n// fluent style\nSelect.from(AUTHORS).where(author -> author.name().in(\n  Select.from(JOURNALISTS).columns(journalist -> journalist.name())\n));\n```\n",
    " October Release > Java > Enhancements for CDS QL > IN Subqueries\nJava, CDS QL, IN, subquery, CQL.in, columns, tree style\nShows usage of CQL.in for a tuple-based IN subquery predicate, matching (firstName, lastName) pairs from Authors and Journalists. Demonstrates the tree-style API for CAP Java queries.\n\n```java\n// tree style\nCqnListValue fullName = CQL.list(CQL.get(\"firstName\"), CQL.get(\"lastName\"));\nCqnSelect subquery = Select.from(\"socialmedia.Journalists\").columns(\"firstName\", \"lastName\");\nSelect.from(\"bookshop.Authors\").where(CQL.in(fullName, subquery));\n```\n",
    " October Release > Java > Enhancements for CDS QL > Case-When-Then Expressions\nJava, CDS QL, case expression, when, then, orElse, type, Select\nDemonstrates a case-when-then expression in a CAP Java query to dynamically derive a textual age category ('young', 'adult', 'elderly') from a person's numeric age. Uses the fluent API for case expressions.\n\n```java\nSelect.from(PERSONS).columns(\n  p -> p.name(),\n  p -> p.when(p.age().lt(25)).then(\"young\")\n        .when(p.age().ge(75)).then(\"elderly\")\n        .orElse(\"adult\").as(\"ageTxt\").type(CdsBaseType.String));\n```\n",
    " October Release > Java > Enhancements for OData v4 > Content Disposition Type\ncds, OData, annotation, Core.ContentDisposition.Type, inline, attachment, entity, Books, coverImage\nShows how to annotate a media property in CDS with @Core.ContentDisposition.Type to indicate if the content should be displayed inline or as an attachment. In this example, the coverImage is configured to display inline in the browser.\n\n```cds\nentity Books : uuid {\n  ...\n  @Core.MediaType: 'image/jpeg'\n  @Core.ContentDisposition.Type: 'inline'\n  coverImage : LargeBinary ;\n}\n```\n",
    " October Release > Tools > Tool Support for AMS\ntools, maven, AMS, authorization, plugin, cds-maven-plugin\nShell command using the CDS Maven plugin to add AMS (Authorization Management Service) integration to a CAP Java project.\n\n```shell\nmvn cds:add -Dfeature=AMS\n```\n",
    " September Release > Node.js > Top Level Imports of Typed Models <Beta />\ntypescript, top-level import, cds-typer, typed models, project setup, test\nDemonstrates how to use top-level and dynamic imports of type definitions generated by cds-typer for typed CDS models in Typescript/JavaScript tests. This allows for type-safe usage of CAP entity references in test and implementation code.\n\n```ts\nimport { Books } from '#cds-models/sap/capire/bookshop' // static import // [!code ++]\n\ndescribe(\"My Tests\", () => {\n  cds.test(...)\n\n  test (\"first test\", async () => {\n    const { Books } = await import('#cds-models/sap/capire/bookshop') // [!code --]\n    await SELECT.from(Books)\n  })\n})\n```\n",
    " September Release > Node.js > Richer JS/TS Snippets\ntypescript, cds-typer, typed model, service, before, type inference\nShowcases rich typed snippet for CAP JavaScript/Typescript code using cds-typer. Highlights how the handler parameter in service.before inherits strong type information from imported model entities, improving code completion and error checking.\n\n```ts\n// @noErrors\n// @paths: {\"#cds-models/*\": [\"%typedModels:bookshop:resolved%\"]}\nimport cds from '@sap/cds'\nconst service = new cds.ApplicationService\n// ---cut---\nimport { Books } from '#cds-models/sap/capire/bookshop'\nservice.before('CREATE', Books, ({ data }) => {\n//                                 ^?\n  /* data is of type Books */\n  data.t\n//      ^|\n})\n```\n",
    " September Release > Node.js > Richer JS/TS Snippets\njavascript, express, cds server, bootstrap, static resources, api\nExample CAP Node.js bootstrap handler using Express to serve static files, such as index.html, from a specified directory via express.static. Demonstrates express and CAP integration.\n\n```js\nconst cds = require('@sap/cds')\nconst express = require('express')\ncds.on('bootstrap', app => {\n  // serve static resources incl. index.html\n  app.use(express.static(__dirname+'/srv/public'))\n})\n```\n",
    " September Release > Node.js > Instance-based Restrictions for Bound Actions and Functions\ncds modeling, authorization, restrict, bound actions, instance-based authorization\nDefines a CDS model where instance-based authorization is enforced for bound actions. Shows how grant policies can use user attributes and entity fields in where-clauses to restrict access to specific actions like 'approve' and 'revoke'.\n\n```cds\n@restrict : [\n  {grant: 'approve', to: 'Employee', where: ($user.role = 'manager') },\n  {grant: 'revoke', to: 'Employee', where: (createdBy = $user) },\n]\nentity Travel {\n  key ID: UUID;\n  createdBy: String;\n} actions {\n  action approve();\n  action revoke();\n}\n```\n",
    " September Release > Java > Parameters Aliases in OData v4 > Parameter Aliases for Entity Key Values\nhttp, odata, parameter alias, entity key, odata v4\nShows the use of OData V4 parameter aliases for entity key values in GET requests. Parameter aliases (e.g., @id) can be used in the URL path, enabling special-character-safe and dynamic key passing.\n\n```http\nGET MyService/Orders(ID=@id)?@id=ec806c06-abfe-40c0-b096-c8749aa120f0\nGET MyService/Orders(ID=@order, IsActiveEntity=@active)/items(@ID=@item)?@order=ec806c06-abfe-40c0-b096-c8749aa120f0&@active=true&@item=3\n```\n",
    " September Release > Java > Parameters Aliases in OData v4 > Parameter Aliases for Function Parameter Values\nhttp, odata, parameter alias, function call\nDemonstrates the use of parameter aliases in OData v4 function calls. Inline parameter values can be supplied using alias names (prefixed with @).\n\n```http\nGET MyService/EmployeesByManager(ManagerID=@p1)?@p1=3\nGET MyService/EmployeesByManager(ManagerID=@p1)?@p1=3\n```\n",
    " September Release > Java > Parameters Aliases in OData v4 > Parameter Aliases for Function Parameter Values\ncds modeling, service definition, function parameter, composite type, multiple arguments\nSample CDS service definition declaring functions with complex and arrayed input parameters to show advanced function parameter options and how they interoperate with OData parameter aliasing.\n\n```cds\nservice MyService {\n  function EmployeesByIDs(IDs : many Int32) returns Employee;\n  function EmployeesByName(name : { first : String; last : String; })\n    returns Employee;\n}\n```\n",
    " September Release > Java > Parameters Aliases in OData v4 > Parameter Aliases for Function Parameter Values\nhttp, odata, parameter alias, array, structured data\nShows how to call functions with array and structured parameters using OData v4 parameter aliasing syntax. Useful for sending JSON objects or lists as function arguments via query parameters.\n\n```http\nGET MyService/EmployeesByIDs(IDS=@ids)?@ids=[1, 5, 8]\nGET MyService/EmployeesByName(name=@name)?@name={ \"first\" : \"Sam\", \"last\" : \"Smith\" }\n```\n",
    " September Release > Java > Enhancements to Code Generator > New Factory Method\njava, accessor interface, factory method, of, map, typed data access\nPresents the new static factory method 'of' on accessor interfaces, which lets you create a typed accessor for an entity from a generic Java Map. Simplifies the creation of strongly-typed accessors for runtime data.\n\n```java\nvar map = Map.of(\"title\", \"CAP Rules\", \"year\", 2024);\n\nBooks book = Books.of(map);\nbook.getTitle(); // CAP Rules\nbook.getYear(); // 2024\n```\n",
    " September Release > Java > Add Handler Stubs\nshell, CLI, handler generation, Java, project setup\nRuns the new CLI command to automatically generate handler stubs for actions and functions in CAP Java projects. This helps Java developers quickly scaffold service custom logic entry-points.\n\n```shell\ncds add handler\n```\n",
    " September Release > Tools > Visualize Deployment Descriptor <Beta />\nshell, project setup, MTA, visualization, deployment descriptor\nCreates a fresh CAP project with a ready-made MTA descriptor and several SAP BTP service integrations. The resulting mta.yaml can then be visualized as a microservices architecture diagram in VS Code.\n\n```shell\ncds init bookshop --add hana,xsuaa,portal,multitenancy,mta\n```\n",
    " September Release > Tools > Visualize Deployment Descriptor <Beta /> > This also works as a visual linter...\nyaml, mta.yaml, visualization, lint, deployment descriptor, project structure, error highlighting\nAn mta.yaml deployment descriptor sample with intentional mistakes to show visual linting. Unused and unresolved service/resource references are flagged in the VS Code diagram view.\n\n```yaml\nID: bookshop\nmodules:\n  - name: bookshop-srv\n    type: nodejs\n    path: gen/srv\n    requires:\n      - name: my-service\n    provides:\n      - name: srv-api\n        properties:\n          srv-url: ${default-url}\n      - name: unused-api # not used\n\nresources:\n  - name: my-service\n    type: org.cloudfoundry.managed-service\n    requires:\n      - name: srv-api\n      - name: incorrect-srv-api # not defined\n\n```\n",
    " September Release > Tools > New Checks in CDS Lint\neslint, lint, configuration, model validation, rules, sql, Java, cds-lint\nShows how to enable new CDS lint rules that check for SQL NULL comparisons (enforcing IS NULL/IS NOT NULL usage) and warn about identifiers colliding with Java keywords. Can be included in eslint config files.\n\n```jsonc\n// .eslintrc.json example\n{\n  \"plugins\": [\"@sap/cds\"],\n  \"extends\": [\"plugin:@sap/cds/recommended\"],\n  \"rules\": {\n    \"@sap/cds/sql-null-comparison\": \"warn\",\n    \"@sap/cds/no-java-keywords\": \"warn\"\n  }\n}\n\n// Or in eslint.config.js\nmodule.exports = {\n  plugins: [require('@sap/cds-lint')],\n  rules: {\n    '@sap/cds/sql-null-comparison': 'error',\n    '@sap/cds/no-java-keywords': 'warn',\n  }\n};\n```\n",
    " August Release > Native HANA Associations\nconfiguration, hana, Native HANA Associations, package.json, cdsrc.json, disable associations\nDisables generation of native HANA associations in CDS using the configuration in package.json. Improves deployment by skipping unnecessary validation and dependency handling in HDI. Recommended for most projects unless associations are used explicitly in native HANA objects.\n\n```json\n{\n  \"cds\": {\n    \"sql\": {\n      \"native_hana_associations\": false\n    }\n  }\n}\n```\n",
    " August Release > Native HANA Associations\nconfiguration, hana, Native HANA Associations, package.json, cdsrc.json, disable associations\nAlternative configuration to disable native HANA associations using cdsrc.json, resulting in the same deployment and migration benefits as changing package.json.\n\n```json\n{\n  \"sql\": {\n    \"native_hana_associations\": false\n  }\n}\n```\n",
    " August Release > CDS Language & Compiler > Generating Scripts for Postgres Schema Migration\nPostgreSQL, schema migration, cds CLI, schema evolution, generate script\nExample of a lossy ALTER TABLE statement generated by `cds deploy --script ...` for manual schema migration in PostgreSQL. Shows how warnings are included for dangerous operations such as dropping a column.\n\n```sql\n-- [WARNING] this statement is lossy\nALTER TABLE sap_capire_bookshop_Books DROP price;\n```\n",
    " August Release > Node.js > Important Changes ❗️\ncds reflect, LinkedDefinitions, Node.js, changes, array methods, iteration\nIllustrates converting CDS LinkedDefinitions to an array before using array methods like map. This is now required after removal of array methods from LinkedDefinitions in the CAP Node.js runtime.\n\n```js\n[...linked.definitions].map(d => d.name)\n```\n",
    " August Release > Node.js > Dynamic `cds.debug()`\nlogging, debug, runtime logging, cds.log, dynamic debug\nDemonstrates dynamic activation of debug logging for SQL/database modules in CAP Node.js using the cds.log API. Enables runtime control of debug output.\n\n```js\ncds.log('sql','debug') // dynamically enable SQL debug output for database modules\n```\n",
    " August Release > Java > Control Interface Names\nJava, cds.java.this.name, type mapping, entity interface, annotation\nCDS model definition using @cds.java.this.name annotation to control the name of the generated Java interface, and @cds.java.name to rename the property for Java code generation.\n\n```cds\n@cds.java.this.name: 'MyJavaClass'\nentity Class {\n  key ID: String;\n\n  @cds.java.name : 'clazz'\n  class : String;\n}\n```\n",
    " August Release > Java > Control Interface Names\nJava, cds.java.this.name, type mapping, entity interface, annotation, generated code\nResulting generated Java interface using @cds.java.this.name and @cds.java.name annotations for finer control over class and property naming. Useful for typed data access in CAP Java projects.\n\n```java\n@CdsName(\"Class\")\npublic interface MyJavaClass extends CdsData {\n  String ID = \"ID\";\n  String CLAZZ = \"class\";\n\n  @CdsName(ID)\n  MyJavaClass id(String id);\n\n  @CdsName(CLAZZ)\n  String getClazz();\n\n  // [...]\n}\n```\n",
    " August Release > MTX > Asynchronous Extension Activation\nmultitenancy, extension, asynchronous activation, MTX, Extensibility Service, PUT Extension/ID, Prefer: respond-async, http\nSample HTTP request showing how to activate MTX extensions asynchronously in CAP using the Prefer: respond-async header with the Extensibility Service API's PUT Extension/ID endpoint. The response includes a Location header for polling job status.\n\n```http\nPUT /-/cds/extensibility/Extensions/isbn-extension HTTP/1.1\nContent-Type: application/json\nPrefer: respond-async\n\n{\n  \"csn\": [\"using my.bookshop.Books from '_base/db/data-model';\\n           extend my.bookshop.Books with { Z_ISBN: String };\"],\n  \"i18n\": [{ \"name\": \"i18n.properties\", \"content\": \"Books_stock=Stock\" },\n           { \"name\": \"i18n_de.properties\", \"content\": \"Books_stock=Bestand\" }]\n}\n```\n",
    " August Release > Tools > Faster TypeScript Development with `cds-tsx` <Beta />\nTypeScript, cds-tsx, development tools, CLI, watch, faster development\nRuns the new Beta cds-tsx CLI command to support faster TypeScript development in a watch mode, as an alternative to cds-ts.\n\n```shell\ncds-tsx watch\n```\n",
    " or\ntypescript, tsx, cds-tsx, Node.js, development, serve\nServe your CAP project using the cds-tsx engine, which leverages the 'tsx' package for fast TypeScript execution without type checks. Useful for rapid local development with TypeScript projects.\n\n```shell\ncds-tsx serve\n```\n",
    " Add Logging and Telemetry\nlogging, telemetry, SAP Cloud Logging, configuration, CLI, cds add, cloud-logging\nConfigures your CAP project to use the SAP Cloud Logging service instead of SAP Application Logging. This adds the necessary components and configuration files to your project automatically.\n\n```shell\ncds add cloud-logging\n```\n",
    " Add Logging and Telemetry\ntelemetry, configuration, CLI, cds add, cloud-logging, telemetry\nAdds telemetry configuration to your CAP project. Equivalent to running 'cds add cloud-logging --with-telemetry', enabling both SAP Cloud Logging and telemetry integration in the project.\n\n```shell\ncds add telemetry\n```\n",
    " Add Logging and Telemetry\ntelemetry, Dynatrace, configuration, CLI, cds add, monitoring\nConfigures your CAP project to use Dynatrace for telemetry and monitoring by integrating the appropriate plugin and configuration.\n\n```shell\ncds add dynatrace\n```\n",
    "CDS Language & Compiler > `IsActiveEntity` In Expression Annotations\ncds modeling, draft, IsActiveEntity, annotations, expression, UI, cap, modeling, odata\nDefines a draft-enabled entity that uses the generated $draft.IsActiveEntity element in an annotation expression. This hides the notVisibleInDraft field when the entity is not active, utilizing the expression context in annotation values for UI purposes.\n\n```cds\n@odata.draft.enabled\nentity SomeEntity {\n  key ID: UUID;\n  @UI.Hidden: ( not $draft.IsActiveEntity )\n  notVisibleInDraft: String;\n  // ...\n}\n\n```\n",
    "Node.js > Request Body Limits\nNode.js, cds server, configuration, body_parser, request body, express, limits, jsonc, payload size\nExample of setting the global request body size limit for a CAP Node.js server using cds.server.body_parser.limit. This restricts accepted request payload size for all endpoints, rejecting requests that exceed the configured size.\n\n```jsonc\n{\n  \"cds\": {\n    \"server\": {\n      \"body_parser\": {\n        \"limit\": \"1mb\" // also accepts b, kb, etc...\n      }\n    }\n  }\n}\n\n```\n",
    "Node.js > Request Body Limits\ncds modeling, service definition, annotations, body_parser, request body limit, service-specific, node.js, cap\nShows how to set a service-specific request body size limit using the @cds.server.body_parser.limit annotation on a service (AdminService), allowing different limits for different services within a CAP Node.js application.\n\n```cds\nannotate AdminService with @cds.server.body_parser.limit: '1mb';\n\n```\n",
    "Java > Avoiding Transactions for Select\nJava, cds-java, configuration, transaction handling, jdbc, performance, transactions\nConfigures the CAP Java runtime to avoid starting transactions for SELECT queries (READ events) by setting cds.persistence.changeSet.enforceTransactional to false. This reduces connection usage and improves throughput under high-load scenarios.\n\n```properties\ncds.persistence.changeSet.enforceTransactional=false\n\n```\n",
    "Java > Weighted Fuzzy Search on HANA\ncds modeling, hana, fuzzy search, search, annotations, ranking, Search.ranking, cap, cap-java, cap-hana\nDefines a Books entity with @Search.ranking annotations to specify element relevance for HANA fuzzy search scoring. The title field is highly weighted, while publisherName is less relevant, impacting search result ranking using the weighted fuzzy search supported by HANA.\n\n```cds\nentity Books {\n  key id            : UUID;\n\n      @Search.ranking: HIGH\n      title         : String;\n\n      description   : String;\n\n      @Search.ranking: LOW\n      publisherName : String;\n}\n\n```\n",
    "Tools > Add Portal Configuration\ntools, CLI, portal, sap cloud portal, command, cap, configuration\nCLI command to add SAP Cloud Portal configuration to a CAP project. Sets up necessary artifacts to enable the Cloud Portal service integration with the application.\n\n```shell\ncds add portal\n\n```\n",
    "Tools > Add Work Zone Configuration <Beta />\ntools, CLI, work zone, sap btp workzone, command, cap, configuration\nCLI command to add SAP BTP Work Zone, Standard Edition configuration to a CAP project, preparing integration with SAP's digital workplace platform.\n\n```shell\ncds add workzone-standard\n\n```\n",
    " Using SQLite for Development > Setup & Configuration\ninstallation, Node.js, npm, SQLite\nInstalls the @cap-js/sqlite package as a development dependency for Node.js CAP projects, enabling SQLite as the database service for development and testing.\n\n```shell\nnpm add @cap-js/sqlite -D\n```\n",
    " Using SQLite for Development > Setup & Configuration\nconfiguration, cds env, inspect, SQLite, db\nInspects the effective runtime configuration of the CAP application for the database (db) service, showing details such as the database kind and connection URL. Useful for verifying that SQLite is being correctly configured.\n\n```shell\ncds env requires.db\n```\n",
    " Using SQLite for Development > Setup & Configuration\nconfiguration, db, SQLite, package.json\nRepresents the effective database configuration for an in-memory SQLite database, as output from `cds env requires.db` after installing @cap-js/sqlite.\n\n```js\n{\n  impl: '@cap-js/sqlite',\n  credentials: { url: ':memory:' },\n  kind: 'sqlite'\n}\n```\n",
    " Using SQLite for Development > Setup & Configuration > Manual Configuration {.java}\nJava, dependency, Maven, SQLite\nAdds the SQLite JDBC driver as a runtime dependency to a Maven pom.xml for Java-based CAP projects. This enables Java applications to connect to SQLite databases.\n\n```xml\n<dependency>\n  <groupId>org.xerial</groupId>\n  <artifactId>sqlite-jdbc</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " Using SQLite for Development > Deployment > Initial Database Schema\ndeployment, Java, schema generation, SQLite, pom.xml\nDefines a Maven build execution step to generate an initial schema.sql file for SQLite by running 'cds deploy --to sqlite --dry' and exporting the SQL script. Used in Java CAP projects for initializing database schemas.\n\n```xml\n<execution>\n\t<id>schema.sql</id>\n\t<goals>\n\t\t<goal>cds</goal>\n\t</goals>\n\t<configuration>\n\t\t<commands>\n\t\t\t<command>deploy --to sqlite --dry --out srv/src/main/resources/schema.sql</command>\n\t\t</commands>\n\t</configuration>\n</execution>\n```\n",
    " Using SQLite for Development > Deployment > In-Memory Databases\nJava, SQLite, in-memory database, application.yaml, configuration\nConfigures the application.yaml in a Java CAP project for an in-memory SQLite database; applies settings such as JDBC URL and connection pool configurations. Used for development/testing environments.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: default\n  sql:\n    init:\n      mode: always\n  datasource:\n    url: \"jdbc:sqlite:file::memory:?cache=shared\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n      max-lifetime: 0\n```\n",
    " Using SQLite for Development > Deployment > Persistent Databases\ndb, configuration, SQLite, persistent database, package.json\nConfigures a persistent SQLite database by specifying a file name (db.sqlite) in the credentials section of the CAP project's package.json. Used to persist database state across restarts.\n\n```json\n{ \"cds\": { \"requires\": {\n   \"db\": {\n      \"kind\": \"sqlite\",\n      \"credentials\": { \"url\": \"db.sqlite\" }\n   }\n}}}\n```\n",
    " Using SQLite for Development > Deployment > Persistent Databases\ndeployment, CLI, SQLite, persistent database\nExecutes CDS deployment which initializes the SQLite database file with the current schema and loads initial data from .csv files. Used after configuring a persistent SQLite database.\n\n```shell\ncds deploy\n```\n",
    " Using SQLite for Development > Deployment > Persistent Databases\nlog output, SQLite, persistent database\nLog output showing that the CAP application successfully connects to a persistent SQLite database file (db.sqlite) instead of an in-memory one.\n\n```shell\n[cds] - connect to db > sqlite { url: 'db.sqlite' }\n```\n",
    " Using SQLite for Development > Deployment > Persistent Databases\nJava, SQLite, persistent database, application.yaml, configuration\nConfigures a Java CAP application's application.yaml to use a persistent SQLite database file (db.sqlite) with appropriate JDBC settings and connection pool configurations.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: sqlite\n  datasource:\n    url: \"jdbc:sqlite:db.sqlite\"\n    driver-class-name: org.sqlite.JDBC\n    hikari:\n      maximum-pool-size: 1\n```\n",
    " Using SQLite for Development > Deployment > Schema Evolution\nschema evolution, configuration, SQLite, auto-migration, package.json\nEnables automatic schema evolution (non-destructive incremental upgrade) for SQLite in a CAP project by including 'schema_evolution': 'auto' in the package.json configuration. Prevents data loss during schema updates in persistent databases.\n\n```json\n{ \"cds\": { \"requires\": {\n   \"db\": {\n      \"kind\": \"sqlite\",\n      \"credentials\": { \"url\": \"db.sqlite\" },\n      \"schema_evolution\": \"auto\"\n   }\n}}}\n```\n",
    " Using SQLite for Development > Features > Path Expressions & Filters {.node}\npath expressions, filters, cqn, cds.ql, SQLite, advanced querying\nDemonstrates complex CQN path expressions, infix filters, and expand queries in Node.js using the new CAP SQLite service. These queries highlight multi-level navigation, filtering, and correlation between Books and Authors entities.\n\n```js\n// $ cds repl --profile better-sqlite\nvar { server } = await cds.test('bookshop'), { Books, Authors } = cds.entities\nawait INSERT.into (Books) .entries ({ title: 'Unwritten Book' })\nawait INSERT.into (Authors) .entries ({ name: 'Upcoming Author' })\nawait SELECT `from ${Books} { title as book, author.name as author, genre.name as genre }`\nawait SELECT `from ${Authors} { books.title as book, name as author, books.genre.name as genre }`\nawait SELECT `from ${Books} { title as book, author[ID<170].name as author, genre.name as genre }`\nawait SELECT `from ${Books} { title as book, author.name as author, genre.name as genre }` .where ({'author.name':{like:'Ed%'},or:{'author.ID':170}})\nawait SELECT `from ${Books} { title as book, author.name as author, genre.name as genre } where author.name like 'Ed%' or author.ID=170`\nawait SELECT `from ${Books}:author[name like 'Ed%' or ID=170] { books.title as book, name as author, books.genre.name as genre }`\nawait SELECT `from ${Books}:author[150] { books.title as book, name as author, books.genre.name as genre }`\nawait SELECT `from ${Authors} { ID, name, books { ID, title }}`\nawait SELECT `from ${Authors} { ID, name, books { ID, title, genre { ID, name }}}`\nawait SELECT `from ${Authors} { ID, name, books.genre { ID, name }}`\nawait SELECT `from ${Authors} { ID, name, books as some_books { ID, title, genre.name as genre }}`\nawait SELECT `from ${Authors} { ID, name, books[genre.ID=11] as dramatic_books { ID, title, genre.name as genre }}`\nawait SELECT `from ${Authors} { ID, name, books.genre[name!='Drama'] as no_drama_books_count { count(*) as sum }}`\nawait SELECT `from ${Authors} { books.genre.ID }`\nawait SELECT `from ${Authors} { books.genre }`\nawait SELECT `from ${Authors} { books.genre.name }`\n```\n",
    " Using SQLite for Development > Features > Optimized Expands {.node}\nexpand, deep read, cqn, SQLite, performance\nShows a deep SELECT query (with expands) in CQN, retrieving Authors along with nested books and genres. The new database service translates this to a single query for performance improvement.\n\n```js\nSELECT.from(Authors, a => {\n  a.ID, a.name, a.books (b => {\n    b.title, b.genre (g => {\n       g.name\n    })\n  })\n})\n```\n",
    " Using SQLite for Development > Features > Localized Queries {.node}\nlocalized query, SELECT.localized, SQLite, i18n\nIllustrates how to choose between non-localized and localized data retrieval using SELECT.from and SELECT.localized queries. The new SQLite service supports both variants for localized entities.\n\n```js\nlet books = await SELECT.from(Books)       //> non-localized data\nlet lbooks = await SELECT.localized(Books) //> localized data\n```\n",
    " Using SQLite for Development > Features > Consistent Timestamps {.node} > Writing Timestamps\ntimestamps, DateTime, insert, SQLite\nDemonstrates several ways to supply DateTime and Timestamp values in CAP Node.js for insert operations using the SQLite service. Values are stored in a normalized ISO 8601 format.\n\n```js\nawait INSERT.into(Books).entries([\n  { createdAt: new Date },                       //> stored .toISOString()\n  { createdAt: '2022-11-11T11:11:11Z' },         //> padded with .000Z\n  { createdAt: '2022-11-11T11:11:11.123Z' },     //> stored as is\n  { createdAt: '2022-11-11T11:11:11.1234563Z' }, //> truncated to .123Z\n  { createdAt: '2022-11-11T11:11:11+02:00' },    //> converted to zulu time\n])\n```\n",
    " Using SQLite for Development > Features > Consistent Timestamps {.node} > Reading Timestamps\ntimestamps, DateTime, retrieval, SQLite\nRetrieves the createdAt (DateTime/Timestamp) column for Books entities. Returned values show normalization with seconds or milliseconds precision, as supported by the new SQLite service.\n\n```js\nawait SELECT('createdAt').from(Books).where({title:null})\n```\n",
    " Using SQLite for Development > Features > Consistent Timestamps {.node} > Comparing DateTimes & Timestamps\nDateTime, Timestamp, comparison, CQN, SQLite\nExamples of safe comparisons between DateTime/Timestamp columns and values in CAP Node.js using the new SQLite service. Input must be in compliant ISO 8601 format or JavaScript Date objects.\n\n```js\nSELECT.from(Foo).where `someTimestamp = anotherTimestamp`\nSELECT.from(Foo).where `someTimestamp = someDateTime`\nSELECT.from(Foo).where `someTimestamp = ${new Date}`\nSELECT.from(Foo).where `someTimestamp = ${req.timestamp}`\nSELECT.from(Foo).where `someTimestamp = ${'2022-11-11T11:11:11.123Z'}`\n```\n",
    " Using SQLite for Development > Features > Consistent Timestamps {.node} > Comparing DateTimes & Timestamps\nDateTime, Timestamp, where clause, error, SQLite\nExamples of incorrect usage that will cause unsafe comparisons or errors due to non-compliant timestamp format (wrong timezone or missing millisecond digits) when using SQLite in CAP Node.js.\n\n```js\nSELECT.from(Foo).where `createdAt = ${'2022-11-11T11:11:11+02:00'}` // non-Zulu time zone\nSELECT.from(Foo).where `createdAt = ${'2022-11-11T11:11:11Z'}` // missing 3-digit fractions\n```\n",
    " Using SQLite for Development > Features > Consistent Timestamps {.node} > Comparing DateTimes & Timestamps\nDateTime, Timestamp, where clause, safe input, SQLite\nShows safe patterns for specifying DateTime/Timestamp criteria in CQN where clauses for queries against SQLite in Node.js CAP projects.\n\n```js\nSELECT.from(Foo).where ({ createdAt: '2022-11-11T11:11:11.000Z' })\nSELECT.from(Foo).where ({ createdAt: new Date('2022-11-11T11:11:11Z') })\n```\n",
    " Using SQLite for Development > Migration {.node} > Use Old and New in Parallel {.node}\nmigration, parallel services, profiles, SQLite\nDemonstrates how to add @cap-js/sqlite without registering it as a plugin, for testing/migrating between old and new SQLite services in CAP Node.js.\n\n```shell\nnpm add @cap-js/sqlite --no-save\n```\n",
    " Using SQLite for Development > Migration {.node} > Use Old and New in Parallel {.node}\nprofiles, migration, SQLite, CLI\nRuns the CAP service using the new SQLite service by activating the 'better-sqlite' profile for migration testing.\n\n```shell\ncds watch bookshop --profile better-sqlite\n```\n",
    " Using SQLite for Development > Migration {.node} > Use Old and New in Parallel {.node}\nprofiles, migration, SQLite, environment\nAlternative to the above; sets the CDS_ENV environment variable to use the 'better-sqlite' profile for CAP development server run.\n\n```shell\nCDS_ENV=better-sqlite cds watch bookshop\n```\n",
    " Using SQLite for Development > Migration {.node} > Finalizing Migration  {.node}\nmigration, SQLite, remove dependency, npm\nRemoves the old sqlite3 NPM package from the project after migrating to the new @cap-js/sqlite service.\n\n```shell\nnpm rm sqlite3\n```\n",
    " Using SQLite for Development > Migration {.node} > Finalizing Migration  {.node}\nmigration, SQLite, activate plugin, npm\nAdds the new @cap-js/sqlite service as a plugin for the CAP Node.js project after completing migration. This enables SQLite as the default CAP database provider.\n\n```shell\nnpm add @cap-js/sqlite --save\n```\n",
    " Using SQLite for Development > Migration {.node} > Miscellaneous {.node}\nmiscellaneous, CSV, column mapping, SQLite\nShows the correct and incorrect ways to specify column headers in CSV files for initial data import. Physical database column names must be used when working with the new SQLite service.\n\n```csvc\nID;title;author_ID;currency_code // [!code ++]\nID;title;author.ID;currency.code // [!code --]\n```\n",
    " June Release > Tools / CLI > New `cds add` Commands > Automate Containerization of Modules\ncontainerize, CLI, cds add, ctz, automation, Kyma, Kubernetes\nAdds a 'containerize.yaml' file to your project with configuration for automating containerization of CAP modules. This facilitates deployment to SAP BTP Kyma or Kubernetes clusters using the ctz CLI.\n\n```shell\ncds add containerize\n```\n",
    " June Release > Tools / CLI > New `cds add` Commands > Automate Containerization of Modules\ncontainerize, ctz, automation, Kubernetes\nRuns the ctz CLI to containerize all modules as specified in the generated containerize.yaml file, automating the containerization process for deployment.\n\n```shell\nctz containerize.yaml\n```\n",
    " June Release > Tools / CLI > New `cds add` Commands > Add Audit Log and Attachments Configuration\naudit logging, cds add, deployment configuration, CLI\nAdds the deployment configuration for '@cap-js/audit-logging' to your CAP project, simplifying the setup for audit logging when deploying your application.\n\n```shell\ncds add audit-logging\n```\n",
    " June Release > Tools / CLI > New `cds add` Commands > Add Audit Log and Attachments Configuration\nattachments, cds add, deployment configuration, CLI\nAdds deployment configuration for the '@cap-js/attachments' plugin to your CAP project for easy document/attachments management.\n\n```shell\ncds add attachments\n```\n",
    " June Release > Tools / CLI > New `cds add` Commands > Add Typescript Configuration\ntypescript, cds add, configuration, CLI\nAutomates addition of TypeScript configuration files and dependencies to your CAP project, preparing it for TypeScript development.\n\n```shell\ncds add typescript\n```\n",
    " June Release > Tools / CLI > Drafts in `.http` Scripts\ndraft, http, http script, VS Code, .http, OData\nSample HTTP request generated for a draft-enabled entity (`@odata.draft.enabled`). Supports display, edit, and activation of drafts in CAP projects via .http scripts or VS Code commands.\n\n```http\nGET {{server}}/admin/Books?$filter=(IsActiveEntity eq false) HTTP/1.1\nContent-Type: application/json\nAuthorization: Basic alice:\n```\n",
    " June Release > Tools / CLI > Miscellaneous > `@sap/cds-dk` 8 Requires `@sap/cds` 7 at the Minimum\nnpm, installation, CLI, cds-dk\nGlobally installs a fallback previous version (7.x) of @sap/cds-dk if your project still uses @sap/cds 6 or lower (not recommended).\n\n```shell\nnpm install -g @sap/cds-dk@7\n```\n",
    " June Release > CDS Language & Compiler > Transitive Localized Views Removed\ncds, cds modeling, localized, association, views\nShows a CDS model where Books has localized data and Authors only has an association. Demonstrates that with cds8, transitive localized views (for Authors) are no longer generated.\n\n```cds\nentity Books { ...\n  title : localized String; // has own localized data\n}\nentity Authors { ...  // has no own localized data\n  books : Association to many Books;\n}\n```\n",
    " June Release > CDS Language & Compiler > Native HANA Associations\nconfiguration, HANA, native associations, json\nDisables generation of Native HANA Associations in database artifacts, improving deploy speed and reducing unnecessary dependencies/validations in HDI deployments.\n\n```json\n{\n  \"cds\": {\n    \"sql\": {\n      \"native_hana_associations\": false\n    }\n  }\n}\n```\n",
    " June Release > CDS Language & Compiler > Association-like Calculated Elements\ncds, associations, calculated elements, projection, filter\nDefines a projection with an association (availableBooks) filtered by stock > 0. Illustrates 'Association-Valued Calculated Elements' now generally available in CAP.\n\n```cds\nentity P_Authors as projection on Authors {\n  *,\n  books[stock > 0] as availableBooks\n}\n```\n",
    " June Release > CDS Language & Compiler > Association-like Calculated Elements\ncds, associations, calculated elements, base entity\nShows a base entity with both a standard association and an association-valued calculated element (unavailableBooks) defined using a filter.\n\n```cds\nentity Authors : managed {\n  key ID       : Integer;\n  name         : String;\n  books        : Association to many Books on books.author = $self;\n  unavailableBooks = books[stock = 0];\n}\n```\n",
    " June Release > CDS Language & Compiler > Deprecated `--to hdbtable`\ndeprecated, CLI, hana, cds compile\nUse this command instead of the deprecated 'cds compile --to hdbtable' for compiling your models for SAP HANA. The output (.hdbtable/.hdbview) remains identical.\n\n```shell\ncds compile --to hana\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > Deprecation of Deploy Format `hdbcds`\ndeprecated, hdbcds, deployment, SAP HANA\nSignals that the deployment format 'hdbcds' for HANA is deprecated. Use 'hdbtable' as the default deploy format going forward.\n\n```txt\n// hdbcds format is deprecated; switch to hdbtable (no direct code, just config/deployment change)\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > Reject Non-assignable Annotations\nannotations, error, cds, projection\nShows a misplaced annotation in a CDS projection. With cds8, such non-assignable annotations are now compile errors, not just warnings.\n\n```cds\nentity PAuthors as projection on Authors {\n    @Anno: 'I am misplaced'\n    books.{*},\n}\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > No $self in ON Condition of join\n$self, ON condition, join, cds, compiler error\nA join 'ON' condition using $self now results in a compiler error. Access elements using table aliases (e.g. A.a) instead.\n\n```cds\nentity V as select from A join\n  ( B join C on C.c = B.b + $self.a ) // error, use A.a instead\n  on A.a = B.b;\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > No Definition Named $self\n$self, artifact, entity, cds, error\nUsing '$self' as an entity or artifact name is not allowed and now triggers a compiler error.\n\n```cds\nentity $self {  // error\n  // …\n}\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > OData: Entities Must Have a Key\nOData, entity, key, validation, package.json\nConfigures the CDS compiler to downgrade the error for OData entities without a key to a warning instead of an error. Useful for temporary avoidance of strict OData errors.\n\n```json\n{\n  \"cds\": {\n    \"cdsc\": {\n      \"severities\": {\n        \"odata-spec-violation-no-key\": \"Warning\"\n      }\n    }\n  }\n}\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > OData: Collections are Nullable by Default\ncds, array, OData, nullable\nDefines an array element in CDS. In OData EDMX output, this collection property is now nullable by default (Nullable=true).\n\n```cds\nfoo : Array of String;\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > Localized Entities and @cds.persistence.exists\ncds, existing entity, localized, annotation\nShows how to suppress generation of a localized helper view if you provide your own native definition for a localized entity annotated with @cds.persistence.exists.\n\n```cds\nannotate localized.ExistingEntity with @cds.persistence.exists: true;\n```\n",
    " June Release > CDS Language & Compiler > Miscellaneous > Session Variables $at.from and $at.to are Deprecated\ncds, deprecated, temporal data, session variable\nSession variables $at.from and $at.to for temporal data have been deprecated. Use $valid.from and $valid.to going forward.\n\n```txt\n// $at.from and $at.to are deprecated, use $valid.from and $valid.to instead\n```\n",
    " June Release > Node.js > New Database Services (GA)\ndatabase services, cds, Node.js, package.json, dependencies\nWith cds8, the new database service plugins (@cap-js/hana, @cap-js/sqlite, etc.) should be listed as dependencies in your package.json for plug-and-play database support and consistency.\n\n```json\n{\n  \"dependencies\": {\n    \"@cap-js/hana\": \"^1\"\n  },\n  \"devDependencies\": {\n    \"@cap-js/sqlite\": \"^1\"\n  },\n}\n```\n",
    " June Release > Node.js > New Database Services (GA) > New Option cds.features.ieee754compatible\ncds, database services, configuration, ieee754compatible\nForces all Decimal and Int64 values read from the database to be returned as strings, ensuring consistency across database implementations and preventing precision loss in JavaScript.\n\n```json\n{\n  \"cds\": {\n    \"features\": {\n      \"ieee754compatible\": true\n    }\n  }\n}\n```\n",
    " June Release > Node.js > New Database Services (GA) > New Option cds.features.sql_simple_queries\ncds, database services, configuration, sql_simple_queries\nConfigures how much the new database services rely on JSON functions for queries. Allows optimizations and compatibility tweaks especially concerning booleans and expands.\n\n```jsonc\n{ \"cds\": {\n  \"features\": {\n   \"sql_simple_queries\": 0, // always use json functions (default)\n   \"sql_simple_queries\": 1, // use json functions only for expands and booleans\n   \"sql_simple_queries\": 2  // use json functions only for expands\n  }\n}}\n```\n",
    " June Release > Node.js > New Database Services (GA) > Removed cds.ql 'quirks' Mode\ncds.ql, CQN, Node.js, INSERT, spec-compliance\nExample of using cds.ql for insert. From cds8 onwards, will produce spec-compliant CQN objects (with 'ref' paths) instead of 'quirked' versions.\n\n```js\nINSERT.into('Books')\n```\n",
    " June Release > Node.js > New Database Services (GA) > Removed cds.ql 'quirks' Mode\ncds.ql, CQN, Node.js, spec-compliant\nSpec-compliant CQN object now always used in cds.ql and adapters. You should expect this shape in all generated CQN going forward (no more 'quirks' mode).\n\n```json\n{ INSERT: { into: { ref: ['Books']}}}\n```\n",
    " June Release > Node.js > ESLint v9\neslint, configuration, Node.js, project setup, eslint9\nSample 'eslint.config.mjs' for enabling CAP and Node.js + browser recommended linting in your project using ESLint 9 flat config system.\n\n```js\nimport cds from '@sap/cds/eslint.config.mjs'\nexport default [ ...cds.recommended ]\n```\n",
    " June Release > Node.js > TypeScript > Standalone @cap-js/cds-types Package\ntypescript, npm, devDependency, cds-types\nInstall the '@cap-js/cds-types' package as a devDependency to enable TypeScript support and proper typings for @sap/cds APIs in your CAP project.\n\n```shell\nnpm add -D @cap-js/cds-types\n```\n",
    " June Release > Node.js > TypeScript > Standalone @cap-js/cds-types Package\ntypescript, wrong import, api\nIncorrect import style for @sap/cds TypeScript APIs – imports from '@sap/cds/apis/...' are unsupported and won't work with cds8. Use '@sap/cds' root instead.\n\n```ts\nimport { Service } from '@sap/cds/apis/services' // WRONG!\n```\n",
    " June Release > Node.js > Fixed req.user/tenant\nuser, tenant, context, Node.js, req\nShows recommended way to access user (and tenant) information from within service handler code or via cds.context, rather than from express.Request.user/tenant.\n\n```js\nsrv = (new cds.Service).on('*', req => req.user)\nsrv.read(Foo) //> Anonymous {}\ncds.context = {user:'me'}\nsrv.read(Foo) //> User { id: 'me' }\n```\n",
    " June Release > Node.js > Fixed req.user/tenant\nuser, tenant, context, Node.js\nAlternative approach to access user context information using cds.context in service code.\n\n```js\nsrv = (new cds.Service).on('*', req => cds.context.user)\n```\n",
    " June Release > Node.js > Deprecated Features > New attic profile\ndeprecated, features, attic profile, CLI\nIllustrates using the new 'attic' profile to activate all deprecated features for testing or development, using environment variable CDS_ENV.\n\n```shell\nCDS_ENV=attic cds watch\nCDS_ENV=attic jest\n```\n",
    " June Release > Node.js > Deprecated Features > Introducing  @sap/cds-attic\ndeprecated, cds-attic, npm, installation\nInstalls the @sap/cds-attic package which will contain deprecated and removed features from CAP, as they are gradually cleaned up from main packages.\n\n```shell\nnpm add @sap/cds-attic\n```\n",
    " June Release > Node.js > Deprecated Features > Old Database Services\nold database services, dependencies, package.json\nShows a package.json with dependencies for the deprecated (old) database services. Retain them only if you have a transition requirement – strongly recommend using the new ones.\n\n```json\n{\n  \"dependencies\": {\n    \"@sap/cds\": \"^8\",\n    \"@sap/cds-hana\": \"^2\"\n  },\n}\n```\n",
    " June Release > Node.js > Deprecated Features > Old Database Services\nold database services, configuration, cds.requires.db\nPackage.json fragment specifying explicit configuration for old-style CAP database services (not plug & play).\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"kind\": \"sql\",\n        \"[production]\": {\n          \"kind\": \"hana\"\n        }\n      }\n    }\n  }\n}\n```\n",
    " June Release > Node.js > Deprecated Features > Old Database Services\nold database services, dependencies, transition\nTransition package.json with both old and new database service packages, making it possible to switch via environment config during migration.\n\n```json\n{\n  \"dependencies\": {\n    \"@sap/cds\": \"^8\",\n    \"@sap/cds-hana\": \"^2\",\n    \"@cap-js/hana\": \"^1\"\n  },\n  \"devDependencies\": {\n    \"@cap-js/sqlite\": \"^1\",\n    \"sqlite3\": \"^5\"\n  },\n}\n```\n",
    " June Release > MTX > SAP HANA Driver Required\nMTX, hana driver, SAP HANA, npm, installation\nInstalls the recommended '@cap-js/hana' driver (and removes all legacy/explicit ones) as required in MTX sidecar projects for SAP HANA connectivity starting with @sap/cds-mtxs v2.\n\n```shell\nnpm add @cap-js/hana\nnpm rm hdb @sap/hana-client @sap/cds-hana\n```\n",
    " June Release > MTX > Simplified SaaS Dependency Management\nMTX, SaaS registry, package.json, subscriptionDependency\nSpecifies a MTX (sidecar) configuration where 'subscriptionDependency' indicates SaaS registry dependency resolution for a given service.\n\n```json\n\"cds\": {\n \"requires\": {\n    \"my-service\": {\n      \"vcap\": { \"label\": \"my-label\" },\n      \"subscriptionDependency\": \"xsappname\"\n    }\n  }\n}\n```\n",
    " June Release > MTX > Simplified SaaS Dependency Management\nMTX, SaaS registry, default services, package.json\nShows how default dependent services for multitenancy sidecar are enabled with 'true' flags for various SAP BTP services in package.json.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"audit-log\": true,\n    \"connectivity\": true,\n    \"destinations\": true,\n    \"html5-repo\": true,\n    \"portal\": true\n  }\n}\n```\n",
    " June Release > MTX > New Extension Project Structure\nMTX, extension project, npm workspaces, project structure\nNew project structure configuration for MTX extension projects using npm workspaces. The base model is now installed in a '.base' workspace for improved stability.\n\n```json\n\"cds\": {\n  \"extends\": \"bookshop\"\n},\n\"workspaces\": [\n    \".base\"\n  ]\n```\n",
    " June Release > MTX > New Extension Project Structure\nMTX, extension, cds using from\nExtension projects now refer to the base model via workspace name instead of the prior '_base' convention due to new workspace-based layout.\n\n```cds\nusing sap.capire.bookshop from 'bookshop';\n```\n",
    " June Release > MTX > More Extension Linter Restrictions\nlinter, annotations, extension, mtx\nShows annotations that are blocked from being used in MTX extension projects by the automatic linter, improving extension project stability/security.\n\n```cds\n@requires\n@restrict\n@readonly\n@mandatory        // allowed if default is specified\n@assert.unique\n@assert.integrity\n@assert.target\n@assert.format\n@assert.range    // allowed if default is specified\n@assert.notNull  // allowed if default is specified\n@cds.persistence.exists\n@cds.persistence.skip\n@cds.autoexpose\n@cds.external\n@cds.persistence.journal\n@sql.append\n@sql.prepend\n@cds.persistence.journal\n@cds.persistence.exists\n@sql.append\n@sql.prepend\n@path\n@impl\n@cds.autoexpose\n@cds.api.ignore\n@odata.etag\n@cds.query.limit\n@cds.localized\n@cds.valid.from\n@cds.valid.to\n@cds.search\n```\n",
    " June Release > CAP on Kyma/K8s > Interactive Helm Chart Prompts\nhelm, Kyma, cds add, Helm chart, CLI\nAdds Helm chart scaffolding to a project with interactive prompts to fill initial deployment configuration in values.yaml for Kyma/K8s deployments.\n\n```shell\ncds add helm\n```\n",
    " April Release > Fewer Views in Database <Beta />\nconfiguration, cds, package.json, SQL, transitive localized views\nThis JSON config snippet shows how to disable generation of transitive localized views by setting cds.sql.transitive_localized_views to false in package.json (or .cdsrc.json). This reduces the number of views for entities that only have associations to localized data.\n\n```json\n{\n  \"cds\": {\n    \"sql\": {\n      \"transitive_localized_views\": false\n    }\n  }\n}\n```\n",
    " April Release > Fewer Views in Database <Beta /> > details What are transitive localized views?\ncds, entity, association, localized data, transitive localized views\nCDS model snippet illustrating a direct localized element (Books.title) and an association (Authors.books). Used to show transitive localized view behavior.\n\n```cds\nentity Books {\n  title : localized String;\n}\nentity Authors {\n  books : Association to many Books;\n}\n```\n",
    " April Release > Fewer Views in Database <Beta /> > details Dry-run in your project...\nshell, SQL, CLI, views, transitive localized views, verify\nShell commands for Mac/Linux to compare the number of SQL views generated with and without transitive localized views enabled. Used for dry-run/verification.\n\n```shell\ncds_sql_transitive__localized__views=true  cds * -2 sql | grep -c VIEW\ncds_sql_transitive__localized__views=false cds * -2 sql | grep -c VIEW\n```\n",
    " April Release > Fewer Views in Database <Beta /> > details Dry-run in your project...\nshell, SQL, CLI, views, transitive localized views, verify, Windows\nBatch commands for Windows shell to compare the number of SQL views with and without transitive localized views enabled. Verifies the effectiveness of the setting.\n\n```shell\nset cds_sql_transitive__localized__views=true\ncds * -2 sql | find /C \"VIEW\"\nset cds_sql_transitive__localized__views=false\ncds * -2 sql | find /C \"VIEW\"\n```\n",
    " April Release > Fewer Views in Database <Beta /> > details Dry-run in your project...\ntxt, verify, views, comparison, result\nSample output of the CLI dry-run showing the reduction of views from 80 to 55 when transitive localized views are disabled.\n\n```txt\n80\n55\n```\n",
    " April Release > Expressions as Annotation Values <Beta /> { expression-annotations } > Propagation\ncds, annotation, expression, projection, Common.Text, rename\nCDS entities showing propagation of expression-like annotation values. The annotation @Common.Text: (text) is automatically rewritten to @Common.Text: (descr) on the projection, according to element renaming.\n\n```cds\nentity E {\n  @Common.Text: (text)\n  code : Integer;\n  text : String;\n}\nentity P as projection on E {\n  code,\n  text as descr\n}\n```\n",
    " April Release > Expressions as Annotation Values <Beta /> { expression-annotations } > References in OData Annotations\ncds, annotation, Measures.ISOCurrency, OData, type reference, flattening\nCDS type and service outlining how annotations with expression references (e.g., Measures.ISOCurrency: (currency)) are adapted and flattened in OData EDMX output.\n\n```cds\ntype Price {\n  @Measures.ISOCurrency: (currency)\n  amount : Decimal;\n  currency : String(3);\n}\nservice S {\n  entity Product {\n    key id : Integer;\n    name : String;\n    price : Price;\n  }\n}\n```\n",
    " April Release > Expressions as Annotation Values <Beta /> { expression-annotations } > References in OData Annotations\nxml, OData, Annotation, EDMX, flattened, Measures.ISOCurrency\nSample OData EDMX output showing the automatic flattening and adapting of annotation references from the CDS model.\n\n```xml\n<Annotations Target=\"S.Product/price_amount\">\n  <Annotation Term=\"Measures.ISOCurrency\" Path=\"price_currency\"/>\n</Annotations>\n```\n",
    " April Release > Expressions as Annotation Values <Beta /> { expression-annotations } > Expressions in OData Annotations\ncds, OData, UI annotation, expression, Criticality, EDMX\nCDS service/annotation demonstrating how expression-valued OData annotations are translated into EDMX. The Criticality annotation uses a ternary expression based on status.\n\n```cds\nservice S {\n  @UI.LineItem : [{\n    Value: (status),\n    Criticality: ( status = 'O' ? 2 : ( status = 'A' ? 3 : 0 ) )\n  }]\n  entity Order {\n    key id : Integer;\n    status : String;\n  }\n}\n```\n",
    " April Release > Expressions as Annotation Values <Beta /> { expression-annotations } > Expressions in OData Annotations\ncds, OData, annotation, Criticality, legacy, expression\nPreviously required complex EDM JSON syntax for OData annotations before expression-valued annotations were directly supported in CDS.\n\n```cds\nCriticality : { $edmJson: { $If: [{$Eq: [{ $Path: 'status'}, 'O']}, 2,\n                          { $If: [{$Eq: [{ $Path: 'status'}, 'A']}, 3, 0] }] } }\n```\n",
    " April Release > Node.js {cds-js} > INSERT w/ Streams and Subselects\nJavaScript, Node.js, INSERT, stream, entries, database, Books\nNode.js code to insert Books records from a JSON stream using cds. Useful for large datasets: reduces memory consumption by streaming.\n\n```js\nlet streamed = fs.createReadStream('books.json')\nawait INSERT.into(Books).entries(streamed)\n```\n",
    " April Release > Node.js {cds-js} > INSERT w/ Streams and Subselects\nJavaScript, Node.js, INSERT, subselect, entries, database, Books, Products\nNode.js code to insert records into Books using a subselect from Products, enabling efficient in-database data copying.\n\n```js\nawait INSERT.into(Books).entries(SELECT.from(Products))\n```\n",
    " April Release > Java {cds-java} > Secure by Default\nyaml, Spring Boot, CAP Java, production, profile, configuration\nSpring Boot YAML property to mark 'cloud' as the production profile, ensuring that development-only features (like index page, mock authentication) are deactivated in production for CAP Java.\n\n```yaml\ncds.environment.production.profile: cloud\n```\n",
    " April Release > Java {cds-java} > SAP Java Buildpack 2\nyaml, SAP Java Buildpack, deployment, parameters, SAPMachine JRE, Java 21\nYAML configuration to deploy CAP Java using SAP Java Buildpack v2, specifying SAPMachine Java 21 for offline mode. Relevant for deployments in Cloud Foundry.\n\n```yaml\nparameters:\n  buildpack: sap_java_buildpack_jakarta\nproperties:\n  JBP_CONFIG_COMPONENTS: \"jres: ['com.sap.xs.java.buildpack.jre.SAPMachineJRE']\"\n  JBP_CONFIG_SAP_MACHINE_JRE: '{ version: 21.+ }'\n```\n",
    " April Release > Tools { tools} > Shell Completion for CDS Commands <Beta />\nshell, CLI, completion, cds, tools, setup\nCLI command to enable shell completion for all 'cds' commands. Works for bash, zsh, Git Bash, and PowerShell.\n\n```shell\ncds add completion\n```\n",
    " April Release > Tools { tools} > Test Data Generation  <Beta />\nshell, CDS CLI, test data generation, csv, db/data, Books, tools\nCLI command to generate 2 CSV test records for entities matching 'Books' and save in db/data. Supports rapid test data generation for development.\n\n```shell\ncds add data --records 2 --content-type csv --filter Books\n```\n",
    " April Release > Tools { tools} > HTTP Requests Generation  <Beta />\nshell, CDS CLI, http, request generation, Authors, tools\nCLI command to auto-generate .http files with sample requests for all services including the Authors entity.\n\n```shell\ncds add http --filter Authors\n```\n",
    " April Release > Tools { tools} > Binding Shared Service Instances on Cloud Foundry\nshell, CDS CLI, service binding, cloud foundry, redis, messaging\nBind the messaging facet to a specific redis-cache service instance on Cloud Foundry, supporting shared service binding.\n\n```shell\ncds bind messaging --to redis-cache\n```\n",
    " April Release > Tools { tools} > Overwrite Cloud Service Credentials\nshell, CDS CLI, service binding, cloud foundry, credentials, overwrite\nCommand to overwrite/add cloud service credentials locally when connecting via SSH tunnel or similar scenarios in Cloud Foundry.\n\n```shell\ncds bind service --to my-service --credentials '{ \"proxy_host\": \"localhost\" }'\n```\n",
    " April Release > Tools { tools} > Playground for CDS ESLint Rules\ncds, ESLint, restrict, rule, auth-valid-restrict-where, playground, srv/cat-service.cds\nCDS code highlighting incorrect syntax in a restrict annotation's 'where' clause, used in the context of ESLint rule playgrounds for auth-valid-restrict-where.\n\n```cds\nservice CatalogService {\n  // invalid `where` expression, the equality operator is `=`\n  @(restrict: [{ grant: 'READ', to: 'Viewer', where: 'CreatedBy === $user' }])\n  entity ListOfBooks as projection on Books;\n  ...\n}\n```\n",
    " March Release > SAP HANA Cloud Vector Engine <Beta />\ncds modeling, domain model, vector embeddings, cds.Vector, hana, SAP HANA Cloud, entity\nDefines a CDS entity Books with a 'title', 'description', and 'embedding' element of type Vector(1536), showing how to model vector embeddings (e.g., for similarity search) in SAP HANA Cloud Vector Engine. The 'embedding' field stores a 1536-dimensional vector.\n\n```cds\nentity Books : cuid {\n  title         : String(111);\n  description   : LargeString;\n  embedding     : Vector(1536); // vector space w/ 1536 dimensions\n}\n```\n",
    " March Release > SAP HANA Cloud Vector Engine <Beta />\nJava, vector embeddings, SAP HANA Cloud, CQL, similarity search, use case, cosine similarity\nJava example for running a similarity search on SAP HANA Cloud Vector Engine using CQL: computes a vector embedding and queries for books with cosine similarity greater than 0.9.\n\n```java\n//  Compute vector embedding of Book description, for example, via LangChain4j\nfloat[] embedding = embeddingModel.embed(bookDescription).content().vector();\n\nResult similarBooks = service.run(Select.from(BOOKS).where(b ->\n  CQL.cosineSimilarity(b.embedding(), CQL.vector(embedding)).gt(0.9)));\n```\n",
    " March Release > SAP HANA Cloud Vector Engine <Beta />\nNode.js, vector embeddings, SAP HANA Cloud, similarity search, SQL, use case\nNode.js example querying the Books entity for similar embeddings using cosine similarity. The embedding is supplied as a string, and the query matches entries with similarity over 0.9.\n\n```js\nlet embedding; // vector embedding as string '[0.3,0.7,0.1,...]';\n\nlet similarBooks = await SELECT.from('Books')\n  .where`cosine_similarity(embedding, to_real_vector(${embedding})) > 0.9`\n```\n",
    " March Release > Node.js > Improved `cds.linked`\ncds toolkit, cds reflect, LinkedDefinitions, API, Node.js, js, project structure\nDemonstrates the new way to access CSN definitions using 'cds.linked' and LinkedDefinitions in Node.js. Supports both object-like and array-like (with order) access to entities.\n\n```js\nlet linked = cds.linked (model)\nlet { Books, Authors } = linked.entities // object-like\nlet [ Entity1, Entity2 ] = linked.entities // array-like, assumes a certain order\n```\n",
    " March Release > Node.js > Improved `cds.linked`\ncds toolkit, cds reflect, LinkedDefinitions, API, Node.js, array methods\nShows use of array methods and 'for..of' on 'linked.definitions' in Node.js, leveraging LinkedDefinitions' iterable capabilities. Allows filtering, mapping, finding, and logging CSN definition names.\n\n```js\nfor (let each of linked.definitions) console.log (each.name)\n\nlinked.definitions .forEach (d => console.log(d.name))\nlinked.definitions .filter (d => d.is_entity)\nlinked.definitions .find (d => d.name === 'Foo')\nlinked.definitions .some (d => d.name === 'Foo')\nlinked.definitions .map (d => d.name)\n```\n",
    " March Release > Node.js > Enhanced `cds.service`\ncds toolkit, cds reflect, cds.Service, API, Node.js, service definition\nShows enhanced 'cds.service' shortcut usage to access service entities both as object and array in Node.js projects.\n\n```js\nlet { CatalogService } = linked.definitions\nlet { Books, Authors } = CatalogService.entities // object-like\nlet [ Books, Authors ] = CatalogService.entities // array-like\n```\n",
    " March Release > Java > Outbox Enhancements > Optimized Processing\nJava, outbox, outbox configuration, optimized processing, asynchronous, yaml, custom outbox\nSample YAML configuration for a custom OutboxService in CAP Java, allowing unordered (parallel) processing with up to 10 maximum attempts. This increases throughput by allowing arbitrary message order.\n\n```yaml\ncds:\n  outbox:\n    services:\n      UnorderedOutbox:\n        maxAttempts: 10\n        ordered: false\n```\n",
    " March Release > Java > Outbox Enhancements > Type-Safe Service Access\nJava, outbox, AsyncCqnService, outboxed, remote service, type-safe\nShows how to wrap a remote CQN service in an asynchronous type-safe outbox wrapper with AsyncCqnService in CAP Java. Useful for handling remote OData service side effects asynchronously.\n\n```java\nOutboxService outboxService = ...;\nCqnService remoteS4Service = ...;\nAsyncCqnService outboxedS4 = outboxService.outboxed(remoteS4Service, AsyncCqnService.class);\n```\n",
    " March Release > Java > Wrapping On-Handlers\nJava, outbox, custom handler, exception handling, On-handler, event handler\nEvent handler method wrapping standard Outbox processing with custom exception logic. Demonstrates new 'proceed' API for chaining/adding error handling to default processing in Outbox events.\n\n```java\n@On(service = OutboxService.PERSISTENT_ORDERED_NAME, event = \"*\")\nvoid handleOutboxErrors(OutboxMessageEventContext context) {\n    try {\n        context.proceed();  // call standard event handlers\n    } catch (Exception e) {\n        if (isUnrecoverable(e)) {\n            executeCompensationLogic(context); // don't retry\n        } else {\n            throw e; // trigger standard retry logic\n        }\n    }\n}\n```\n",
    " March Release > Java > Simplified Remote Service Consumption\nJava, remote service, OData, configuration, system user, destination, yaml\nYAML config example for a remote OData service in CAP Java, showing how to bind a remote service (e.g., MeteringService) so it's accessed on behalf of the current user via systemUserProvider.\n\n```yaml\ncds:\n  remote.services:\n  - name: \"MeteringService\"\n    binding:\n      name: metering-service\n      onBehalfOf: systemUserProvider\n```\n",
    " March Release > Java > ETag in Remote OData Services\nJava, remote service, OData, ETag, Update, If-Match, optimistic locking\nShows how to manually include an ETagPredicate in the where clause when updating a remote OData entity. An If-Match header is sent for optimistic concurrency control.\n\n```java\nRemoteService remoteS4 = ...;\nremoteS4.run(Update.entity(\"BusinessPartner\")\n  .entry(Map.of(\"lastname\", \"Doe\"))\n  .where(b -> b.get(\"ID\").eq(4711).and(b.eTag(\"<eTag Value>\"))));\n```\n",
    " March Release > Java > ETag in Remote OData Services\nJava, remote service, OData, ETag, Update, read result\nIllustrates automatic ETag handling: upon reading and then updating an entity in a remote OData service, the If-Match header is automatically set with the previously read value.\n\n```java\nRemoteService remoteS4 = ...;\nCdsData partner = remoteS4.run(Select.from(\"BusinessPartner\").byId(4711)).single();\n\npartner.put(\"lastname\", \"Doe\");\n// If-Match automatically set to previously read ETag value\npartner = remoteS4.run(Update.entity(\"BusinessPartner\").entry(partner)).single();\n\n// ETag header value\nObject etag = partner.getMetadata(\"etag\");\n```\n",
    " March Release > CAP Plugins > New Attachments Plugin <Beta />\ninstallation, npm, attachments, plugin, @cap-js/attachments\nShell command to add the @cap-js/attachments plugin, enabling the Attachments type in your CAP application model for handling attachments.\n\n```shell\nnpm add @cap-js/attachments\n```\n",
    " February Release > Timezone Definition and Data\ncds modeling, domain model, CodeList, Timezone\nDefines a CDS entity for time zones as a code list, suitable for referencing common time zone values within a data model. Provided by @sap/cds-common-content package.\n\n```cds\nentity sap.common.Timezones : CodeList {\n  key code : String; //> for example, Europe/Berlin\n}\n```\n",
    " February Release > Audit Logging Plugin (GA)\ninstallation, npm, audit logging, plugin\nInstalls the open source @cap-js/audit-logging plugin, enabling automatic audit logging of personal data for CAP Node.js applications.\n\n```shell\nnpm add @cap-js/audit-logging\n```\n",
    " February Release > Java > Optimistic Locking API > ETag Predicate\nJava, optimistic locking, ETag, CQL, update\nUses the new CQL.eTag() API in CAP Java to implement optimistic locking via an ETag predicate in an update statement. Ensures updates only succeed if the entity has not been concurrently modified.\n\n```java\nInstant expectedLastModification = ...;\nUpdate.entity(ORDER)\n      .entry(newData)\n      .where(o -> o.id().eq(85).and(o.eTag(expectedLastModification)));\n```\n",
    " February Release > Java > Optimistic Locking API > Runtime Managed Versions <Beta />\ncds modeling, annotations, optimistic locking, Java, versioning\nCDS model example showing how to enable runtime-managed versioning for optimistic locking in CAP Java. The @cds.java.version annotation marks an element for use in optimistic conflict detection; combined with @odata.etag for OData protocol support.\n\n```cds\nentity Order : cuid {\n  @odata.etag\n  @cds.java.version\n  version : Int32;\n  product : Association to Product;\n}\n```\n",
    " February Release > Java > Optimistic Locking API > Runtime Managed Versions <Beta />\nJava, optimistic locking, update, versioning, PersistenceService\nPerforms an update on an Order entity using version-based optimistic concurrency: retrieves the order, modifies a value, and submits an update. If the concurrent version has changed, the update fails (rowCount == 0).\n\n```java\nPersistenceService db = ...\nCqnSelect select = Select.from(ORDER).byId(85);\nOrder order = db.run(select).single(Order.class);\norder.setAmount(5000);\nCqnUpdate update = Update.entity(ORDER).entry(order);\nResult rs = db.execute(update);\nif (rs.rowCount() == 0) {\n  // order 85 does not exist or was modified concurrently\n}\n```\n",
    " February Release > Java > Change Tracking <Beta />\ncds modeling, change tracking, annotations, aspect, changelog\nShows how to enable and configure change tracking in CAP Java. The example extends Orders for change tracking, sets a human-readable identifier, and marks fields to be tracked for changes.\n\n```cds\nusing {sap.changelog as changelog} from 'com.sap.cds/change-tracking';\n\n// domain entity level (basic support):\nextend my.Orders with changelog.changeTracked;\n\n// service entity level (identifier):\nannotate AdminService.Orders with @changelog: [\n  orderNo,\n  buyer\n];\n\n// service entity field level (tracked values):\nannotate AdminService.Orders {\n  total @changelog;\n};\n```\n",
    " February Release > Java > Change Tracking <Beta />\nUI, Facet, cds modeling, annotation, change tracking\nConfigures the UI annotation to add a facet for change history in a Fiori Elements app, linked to change tracking for the Orders entity.\n\n```cds\nannotate AdminService.Orders with @(\n  UI : { ...\n    Facets : [ ...\n       {\n          $Type               : 'UI.ReferenceFacet',\n          ID                  : 'ChangeHistoryFacet',\n          Label               : '{i18n>ChangeHistory}',\n          Target              : 'changes/@UI.PresentationVariant',\n          ![@UI.PartOfPreview]: false\n        } ...\n   ] ...\n  } ...);\n```\n",
    " February Release > Java > Generic Outbox\nyaml, Java, outbox, plugin, configuration\nDemonstrates configuring a custom OutboxService instance in CAP Java using YAML. Sets the outbox service name and behavior (max attempts, error storage).\n\n```yaml\ncds:\n  outbox:\n    services:\n      MyCustomOutbox:\n        maxAttempts: 10\n        storeLastError: true\n```\n",
    " February Release > Java > Generic Outbox\nJava, outbox, event emission, custom instance, service\nInjects and uses a custom outbox instance to wrap a service so that events are stored and managed by that specific outbox, allowing independent processing.\n\n```java\n@Autowired\n@Qualifier(\"MyService\")\nMyService myService;\n\n@Autowired\n@Qualifier(\"MyCustomOutbox\")\nOutboxService myCustomOutbox;\n\nService myServiceOutboxed = myCustomOutbox.outboxed(myService);\nmyServiceOutboxed.send(...);\n```\n",
    " February Release > Tools > New Snippet for annotate Statements\ncds modeling, annotate, snippet, elements\nDemonstrates use of the new elements… snippet for annotate statements in CDS. The snippet inserts all possible elements of an artifact for convenient annotation.\n\n```cds\nannotate Publisher with {\n  name    @title;\n  address @assert.unique;\n}\n```\n",
    " February Release > Tools > cds add html5-repo for Cloud Foundry (Beta)\nCLI, cds add, Cloud Foundry, html5-repo, installation, destination\nRuns the Beta command to add HTML5 Application Repository setup and prerequisites to a CAP project in the Cloud Foundry environment.\n\n```shell\ncds add html5-repo\n```\n",
    " February Release > Tools > cds add html5-repo for Cloud Foundry (Beta)\nconfiguration, cds, package.json, destination, html5-repo\nConfiguration snippet from package.json or .cdsrc.json for CAP: enables destinations and html5-repo features.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"destinations\": true,\n    \"html5-repo\": true\n  }\n}\n```\n",
    " February Release > Tools > cds add html5-repo for Cloud Foundry (Beta)\nconfiguration, mta.yaml, Cloud Foundry, html5-repo, destination, application module\nFragment of required resources for mta.yaml in a CAP project to support HTML5 application repository and destinations on Cloud Foundry.\n\n```yaml\nresources:\n- name: bookshop-destination\n  type: org.cloudfoundry.managed-service\n  parameters:\n    service: destination\n    service-plan: lite\n    config:\n      HTML5Runtime_enabled: true\n      init_data:\n        instance:\n          existing_destinations_policy: update\n          destinations:\n            - Name: bookshop-srv\n              URL: ~{srv-api/srv-url}\n              Authentication: NoAuthentication\n              Type: HTTP\n              ProxyType: Internet\n              HTML5.ForwardAuthToken: true\n              HTML5.DynamicDestination: true\n  requires:\n    - name: srv-api\n      group: destinations\n      properties:\n        name: srv-api # must be used in xs-app.json as well\n        url: ~{srv-url}\n        forwardAuthToken: true\n- name: bookshop-html5-repo-host\n  type: org.cloudfoundry.managed-service\n  parameters:\n    service: html5-apps-repo\n    service-plan: app-host\n- name: bookshop-html5-runtime\n  type: org.cloudfoundry.managed-service\n  parameters:\n    service: html5-apps-repo\n    service-plan: app-runtime\n```\n",
    " February Release > Tools > cds add html5-repo for Cloud Foundry (Beta)\nconfiguration, mta.yaml, application module, html5\nDefines a module in mta.yaml for hosting app content. Requires destination and html5-repo host services, with build parameters for artifacts.\n\n```yaml\n- name: bookshop-app-content\n  type: com.sap.application.content\n  path: app/\n  requires:\n    - name: bookshop-destination\n    - name: bookshop-html5-repo-host\n      parameters:\n        content-target: true\n  build-parameters:\n    build-result: resources\n    requires:\n      - name: bookshop-app-admin-books\n        artifacts:\n          - admin-books.zip\n        target-path: resources/\n      - ...\n```\n",
    " February Release > Tools > cds add html5-repo for Cloud Foundry (Beta)\nconfiguration, mta.yaml, html5, application module\nModule definitions for each HTML5 application in mta.yaml; specifies build process and paths for multiple UI apps.\n\n```yaml\n- name: bookshop-app-admin-books\n  type: html5\n  path: app/admin-books\n  build-parameters:\n    build-result: dist\n    builder: custom\n    commands:\n      - npm ci\n      - npm run build\n\n- name: bookshop-app-browse\n  type: html5\n  path: app/browse\n  build-parameters:\n    build-result: dist\n    builder: custom\n    commands:\n      - npm ci\n      - npm run build\n```\n",
    " February Release > Tools > cds add html5-repo for Cloud Foundry (Beta)\nconfiguration, xs-app.json, approuter, html5, Cloud Foundry\nExample xs-app.json configuration for approuter, routing all application paths and integrating with html5-apps-repo and xsuaa.\n\n```json\n{\n  \"welcomeFile\": \"/index.html\",\n  \"authenticationMethod\": \"route\",\n  \"routes\": [{\n    \"source\": \"^/{{app}}/(.*)$\",\n    \"target\": \"/{{app}}/$1\",\n    \"destination\": \"srv-api\",\n    \"authenticationType\": \"xsuaa\",\n    \"csrfProtection\": false\n  }, {\n    \"source\": \"^(.*)$\",\n    \"target\": \"$1\",\n    \"service\": \"html5-apps-repo-rt\",\n    \"authenticationType\": \"xsuaa\"\n  }]\n}\n```\n",
    " February Release > Tools > Convenience Options for cds bind\nCLI, cds bind, Cloud Foundry, service binding, convenience, automation\nBinds current application to all platform services attached to the specified Cloud Foundry app (bookshop-srv). Automates multi-service binding for CAP projects.\n\n```shell\ncds bind --to-app-services bookshop-srv\n```\n",
    " February Release > Tools > Convenience Options for cds bind\nCLI, commands, multitenancy, cds bind, cf, deployment\nIllustrates typical CLI flow to initialize, configure, build, deploy, and bind a multitenant CAP app with multiple Cloud Foundry platform services and service keys.\n\n```shell\ncds init bookshop --add tiny-sample && cd bookshop\ncds add xsuaa,hana,mtx,mta --for production\nnpm install\nmbt build -t gen/mta.tar\ncf deploy gen/mta.tar\ncds bind --to-app-services bookshop-srv # [!code ++]\ncf create-service-key bookshop-auth bookshop-auth-key # [!code --]\ncds bind -2 bookshop-auth # [!code --]\ncf create-service-key bookshop-db bookshop-db-key # [!code --]\ncds bind -2 bookshop-db # [!code --]\ncf create-service-key bookshop-registry bookshop-registry-key # [!code --]\ncds bind -2 bookshop-registry # [!code --]\n```\n",
    " February Release > Tools > Upgrade all tenants via the cds-mtx CLI\nCLI, multitenancy, cds-mtx, upgrade\nBatch-upgrades all tenants in a CAP multitenant application via the cds-mtx CLI.\n\n```shell\ncds-mtx upgrade *\n```\n",
    " January Release > Open Telemetry Plugin\nOpenTelemetry, telemetry, console output, tracing, plugin, metrics\nExample console output when using the @cap-js/telemetry plugin in a CAP project. Shows OpenTelemetry tracing including elapsed times for OData requests and nested CAP/db/sqlite calls. Output is written automatically upon plugin activation.\n\n```txt\n[odata] - GET /odata/v4/processor/Incidents\n[telemetry] - elapsed times:\n  0.00 → 2.85 = 2.85 ms  GET /odata/v4/processor/Incidents\n  0.47 → 1.24 = 0.76 ms    ProcessorService - READ ProcessorService.Incidents\n  0.78 → 1.17 = 0.38 ms      db - READ ProcessorService.Incidents\n  0.97 → 1.06 = 0.09 ms        @cap-js/sqlite - prepare SELECT json_object('ID',ID,'createdAt',createdAt,'creat…\n  1.10 → 1.13 = 0.03 ms        @cap-js/sqlite - stmt.all SELECT json_object('ID',ID,'createdAt',createdAt,'crea…\n  1.27 → 1.88 = 0.61 ms    ProcessorService - READ ProcessorService.Incidents.drafts\n  1.54 → 1.86 = 0.32 ms      db - READ ProcessorService.Incidents.drafts\n  1.74 → 1.78 = 0.04 ms        @cap-js/sqlite - prepare SELECT json_object('ID',ID,'DraftAdministrativeData_Dra…\n  1.81 → 1.85 = 0.04 ms        @cap-js/sqlite - stmt.all SELECT json_object('ID',ID,'DraftAdministrativeData_Dr…\n```\n",
    " January Release > CDS Language & Compiler > Define Event by Projection\ncds modeling, event, projection, events\nDefines a CDS event as a projection on an imported/external event. Enables defining events with a subset or remapped signature for integration or abstraction, only the effective projection signature is relevant.\n\n```cds\nevent CustomerChanged : projection on ImportedService.BusinessPartner.ChangedEvent {\n  BusinessPartner as ID,\n  BusinessPartnerFullName as name,\n  // ...\n}\n```\n",
    " January Release > Node.js > Media Data and Large Binaries\nmedia, large binary, cds, OData, streaming, deprecation, buffer\nDemonstrates new behavior for large binary properties (images/attachments) in CAP Node.js. Now only returned if explicitly selected, and as a stream, not a buffered value. Unannotated binaries are ignored in OData and general queries unless selected directly. Shows before and after code comments.\n\n```js\nSELECT.from(Attachments) //> [{ ID, title, image: Buffer }] [!code --]\nSELECT(['image']).from(Attachments) //> [{ image: Buffer }] [!code --]\n\nSELECT.from(Attachments) //> does not include \"image\" [!code ++]\nSELECT(['image']).from(Attachments) //> [{ image: <media stream> }] [!code ++]\n```\n",
    " January Release > Node.js > Media Data and Large Binaries\ncompatibility, media, large binary, buffer, configuration, feature toggle\nRestores previous behavior for large binary streaming (returning base64-encoded buffers instead of streams) via configuration flag. Add this to your package.json or cds configuration file for backward compatibility.\n\n```json\n{\n  \"cds\": {\n    \"features\": {\n      \"stream_compat\": true\n    }\n  }\n}\n```\n",
    " January Release > Node.js > Programmatic Outboxing of Services\noutbox, programmatic outboxing, event emission, cds, node.js, service\nShows how to get an outboxed variant of a CAP service instance for event emission. First emits the event via the outbox, then bypasses the outbox for an immediate emit. Useful for programmatic control of reliable messaging in CAP Node.js.\n\n```js\nconst outboxed = cds.outboxed(srv)\nawait outboxed.emit('someEvent', { some: 'message' }) //> deferred emit via outbox\nawait cds.unboxed(outboxed).emit('someEvent', { some: 'message' }) //> immediate emit w/o outbox\n```\n",
    " January Release > Node.js > Garbage Collection of Stale Drafts\nfiori, drafts, garbage collection, timeout, automatic deletion, configuration\nSets Fiori draft deletion timeout in the CAP configuration. Allows stale drafts to be purged after the specified days (here: 14), or enable with default (30d) using 'true'.\n\n```json\n{\n  \"cds\": {\n    \"fiori\": {\n      \"draft_deletion_timeout\": \"14d\"\n    }\n  }\n}\n```\n",
    " January Release > Java > Update with Expressions in Fluent Style\njava, fluent API, CQL, update expression, database, builder API\nBuilds a fluent CQN update for Java: updates a book's title to upper case and increments its stock by 1 where the title equals 'CAP'. Shows use of builder-style update expressions using model interfaces, supported in CAP Java.\n\n```java\nCqnUpdate update = Update.entity(BOOK).where(b -> b.title().eq(\"CAP\"))\n    .set(b -> b.title(), title -> title.toUpper())\n    .set(b -> b.stock(), stock -> stock.plus(1));\n```\n",
    " All of 2023\nVue.js, component, IndexList, usage\nThis Vue.js component renders an index list using the 'pages' prop as its data source. It is typically used in documentation or content-heavy applications to generate a navigation list dynamically from a list of page entries.\n\n```vue\n<IndexList :pages='pages' />\n```\n",
    "CDS Language & Compiler > Association-Valued Calculated Elements <Beta />\ncds modeling, association, calculated elements, association-like, cds, entity\nDefines an entity with an association-valued calculated element, where 'availableBooks' is a filtered association to Books having 'stock > 0'. Demonstrates 'association-like calculated elements' feature.\n\n```cds\nentity Authors : managed {\n  key ID       : Integer;\n  name         : String;\n  books        : Association to many Books on books.author = $self;\n  availableBooks = books[stock > 0];\n}\n```\n",
    "CDS Language & Compiler > Expressions in Annotations <Beta />\nannotations, expr in annotation, cds, authorization, restrict, where\nShows how to use an expression as the value of an annotation, specifically in the '@restrict' annotation's 'where' property. Expressions must be in parentheses.\n\n```cds\nentity Orders @(restrict: [\n    { grant: 'READ', to: 'Auditor', where: (AuditBy = $user.id) }\n  ]) {/*...*/}\n```\n",
    "CDS Language & Compiler > Expressions in Annotations <Beta />\nannotations, expressions, custom annotation, cds\nExample of using an expression as the value for a custom annotation at both entity and property level. Demonstrates early beta support for expressions in custom annotation values.\n\n```cds\n@MyCustomAnnotation : (a + b)\nentity Foo {\n  a : Integer;\n  @MyCustomAnnotation : (a + b)\n  b : Integer;\n}\n```\n",
    "Node.js > Important Changes ❗️\nconfiguration, Node.js, enterprise-messaging, vcap, require, json, cds.env\nConfiguration snippet to explicitly oversteer the default VCAP lookup for a messaging service. Shows how to deactivate default lookup when multiple service instances are bound.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"messaging\": {\n        \"kind\": \"enterprise-messaging-shared\",\n        \"vcap\": {\n          \"name\": \"<my-em-instance-name>\",\n          \"label\": false\n        }\n      }\n    }\n  }\n}\n```\n",
    "Node.js > Type Definitions Are Open Source\ntypescript, type definitions, Node.js, import, api, cds\nShows the recommended (and discouraged) way of importing TypeScript types from the @sap/cds package. Always import via the facade, not internal paths.\n\n```ts\nimport { Request } from '@sap/cds'  // [!code ++]\nimport { Request } from '@sap/cds/apis/events'  // [!code --]\n\nfunction myHandler(req: Request) { }\n```\n",
    "Node.js > Type Definitions Are Open Source\nJavaScript, type definitions, Node.js, import, api, cds\nDocuments the correct JSDoc style for importing types in JavaScript, using @sap/cds facade (recommended) versus deprecated internal imports.\n\n```js\n/** @param { import('@sap/cds').Request } req */ // [!code ++]\n/** @param { import('@sap/cds/apis/events').Request } req */ // [!code --]\n\nfunction myHandler(req) { }\n```\n",
    "Node.js > Log Formatting in Production\nconfiguration, cds log, Node.js, logging, formatting, json, plain\nShows how to configure the log format for cds.log in production. Sets output to 'plain' instead of the new default 'json'.\n\n```json\n// Opt-out of JSON log formatting in production\n\"cds.log.format\": \"plain\"\n```\n",
    "Node.js > SAPUI5 Mass Edit\nconfiguration, Fiori, SAPUI5, mass edit, bypass_draft\nEnables the SAPUI5 Mass Edit feature, which allows modifying multiple rows directly without creating drafts for each row.\n\n```properties\ncds.fiori.bypass_draft = true\n```\n",
    "Node.js > CSRF Token Configuration\nconfiguration, CSRF, remote service, Node.js, csrf token, jsonc\nSpecifies fine-grained configuration for fetching CSRF tokens from a remote OData v2 service, using the 'method' and 'url' properties.\n\n```jsonc\n{\n  \"cds\": {\n    \"requires\": {\n      \"API_BUSINESS_PARTNER\": {\n        \"kind\": \"odata-v2\",\n        \"csrf\": { // this configuration implies `csrf: true`\n          \"method\": \"get\",\n          \"url\": \"...\"\n        }\n      }\n    }\n  }\n}\n```\n",
    "Node.js > Eliminated `passport` Dependency\nnpm, dependency, authentication, passport, Node.js\nRemoves the unused 'passport' dependency from your Node.js project as the generic authentication implementation no longer requires it.\n\n```shell\nnpm uninstall passport\n```\n",
    "Java > Support for Expressions in Annotations\nannotation, expressions, Java, custom handler, reflection API\nDefines custom annotation '@my.check' holding an expression on entities Authors and Books, to be evaluated by CAP Java custom code.\n\n```cds\nannotate Authors with @my.check: (yearOfDeath is null or\n                                  yearOfBirth <  yearOfDeath);\nannotate Books with @my.check: (year > author.yearOfBirth);\n```\n",
    "Java > Support for Expressions in Annotations\nJava, annotation, expressions, after handler, custom logic, CQL, reflection API\nImplements a generic after-update handler that reads a custom annotation's expression and executes a check using it. Throws on failure.\n\n```java\n@After\npublic void checkAfterWrite(CdsUpdateEventContext ctx) {\n   CdsEntity target = ctx.getTarget();\n\n   CqnExpression xpr = target.getAnnotationValue(\"my.check\", CQL.TRUE);\n   ctx.getResult().stream().forEach(row -> {\n      CqnSelect query = Select.from(row.ref()).where(xpr.asPredicate()).limit(1);\n      if (db.run(query).first().isEmpty()) {\n        throw new ServiceException(BAD_REQUEST, \"check failed\");\n      }\n   });\n}\n```\n",
    "Java > Update with Expressions\nJava, update, expressions, CQL, decrement, set, Update\nUpdates the 'stock' property of a Book entity by decrementing it by 1 using an expression in the new Update.set API.\n\n```java\nUpdate.entity(BOOKS).byId(101).set(\"stock\", CQL.get(\"stock\").minus(1));\n```\n",
    "Java > On-the-fly Localization of EDMX\napplication.yaml, localization, EDMX, odata-v4, configuration, Java\nEnables on-the-fly localization of EDMX metadata for OData V4, reducing memory usage and allowing runtime text mixing. Requires specific versions of cds-dk and cds-mtxs.\n\n```yaml\ncds.odata-v4.lazy-i18n.enabled: true\n```\n",
    "Java > RegEx Pattern Matching\nJava, regex, pattern matching, predicate, Select, matchesPattern\nQueries for books whose titles match the regex '^C\\w*e$' using the new matchesPattern predicate. Demonstrates typed query construction.\n\n```java\nSelect.from(BOOKS).where(t -> t.title().matchesPattern(\"^C\\\\w*e$\") );\n```\n",
    "Java > RegEx Pattern Matching\nJava, regex, pattern matching, CQL, tree-style, Select, matchesPattern\nShows how to use the matchesPattern predicate in tree-style CQL for dynamic queries with pattern filtering.\n\n```java\nSelect.from(\"bookshop.Books\").where(CQL.matchesPattern(CQL.get(\"title\"), \"^C\\\\w*e$\"));\n```\n",
    "Java > RegEx Pattern Matching\nhttp, OData v4, regex, pattern matching, $filter, Java\nOData V4 HTTP query example using matchesPattern in a $filter, returning books whose title matches a regex.\n\n```http\nGET Books?$filter=matchesPattern(title, '^C\\w*e$')\n```\n",
    "Java > Auditlog Premium Plan\nJava, auditlog, premium plan, dependency, pom.xml\nAdds the 'cds-feature-auditlog-v2' dependency to enable Audit Log Service's premium plan support in CAP Java.\n\n```xml\n<dependency>\n <groupId>com.sap.cds</groupId>\n <artifactId>cds-feature-auditlog-v2</artifactId>\n</dependency>\n```\n",
    "Java > Open Telemetry Support\nJava, observability, Open Telemetry, cloud-logging, cf CLI, setup\nCreates a cloud-logging service instance on SAP BTP with Open Telemetry ingestion activated, required for Java observability.\n\n```shell\ncf create-service cloud-logging standard cls -c '{\"ingest_otlp\": {\"enabled\": \"true\"}}'\n```\n",
    "Java > Open Telemetry Support\nJava, observability, Open Telemetry, dependency, pom.xml\nAdds the logging extension library for Open Telemetry to the service's pom.xml, enabling advanced logging and tracing.\n\n```xml\n<dependency>\n  <groupId>com.sap.hcp.cf.logging</groupId>\n  <artifactId>cf-java-logging-support-opentelemetry-agent-extension</artifactId>\n  <version>${logging.support.version}</version>\n</dependency>\n```\n",
    "Java > Open Telemetry Support\nJava, observability, Open Telemetry, buildpack, environment, java opts, yaml\nYAML snippet showing how to configure Java Opts for Open Telemetry agent and extension jar with the SAP Java buildpack.\n\n```yaml\nJBP_CONFIG_JAVA_OPTS:\n  from_environment: false\n  java_opts: >\n    -javaagent:META-INF/.sap_java_buildpack/otel_agent/opentelemetry-javaagent.jar\n    -Dotel.javaagent.extensions=BOOT-INF/lib/cf-java-logging-support-opentelemetry-agent-extension-<logging.support.version>.jar\n```\n",
    " November Release > CAP Plugins > New Change Tracking Plugin\nCAP Plugins, installation, change tracking, npm, Node.js\nInstalls the '@cap-js/change-tracking' plugin, enabling automatic capturing, storing, and viewing of change records for CDS modeled entities. Simply add to dependencies to activate the out-of-the-box functionality.\n\n```shell\nnpm add @cap-js/change-tracking\n```\n",
    " November Release > CAP Plugins > Notifications Plugin for Business Notifications\nCAP Plugins, business notifications, notifications, npm, Node.js, installation\nInstalls the '@cap-js/notifications' plugin for publishing business notifications in CAP applications—currently for single tenant scenarios with notification type lifecycle management.\n\n```shell\nnpm add @cap-js/notifications\n```\n",
    " November Release > CDS Language & Compiler > Annotating Draft Entities\ncds, annotation, draft entity, draft administrative data, UI.Hidden, persistence, compiler\nDemonstrates adding annotations to draft-generated entities/elements—here adding a journal to drafts and making DraftAdministrativeData visible in the UI.\n\n```cds\nannotate AdminService.Books.drafts with @cds.persistence.journal;\nannotate AdminService.Books:DraftAdministrativeData with @UI.Hidden: false;\n```\n",
    " November Release > Node.js > Inferring Query Elements\ncds QL, Node.js, query, elements, reflection, result set, CDS QL, custom handler\nShows how to use the new req.query.elements API in Node.js to inspect CSN column metadata for a SELECT query—helpful for custom logic based on selected elements.\n\n```js\nlet q = SELECT.from(Books, b=>{ b.ID, b.title })\nq.elements //> will return a CSN struct object like that:\n{\n  ID: { key: true, type: 'cds.Integer' },\n  title: { type: 'cds.String', length: 111, localized: true }\n}\n```\n",
    " November Release > Node.js > Inferring Query Elements\nelements, CDS QL, Node.js, custom logic, reflection\nChecks if a specific property (e.g., 'foo') is present in the query elements, enabling custom handler logic triggered by query contents.\n\n```js\nif ('foo' in req.query.elements) doSomething()\n```\n",
    " November Release > Node.js > Persistent Outbox by Default\noutbox, Node.js, configuration, persistent outbox, default setting, messaging, audit-logging\nConfigures CAP Node.js to use the persistent outbox: outgoing messages and audit log entries are first stored in a database table, providing reliable delivery.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"outbox\": true\n    }\n  }\n}\n```\n",
    " November Release > Node.js > Persistent Outbox by Default\noutbox, Node.js, configuration, in-memory outbox, restore old behavior\nConfigures CAP Node.js to use the in-memory outbox, thereby restoring the old behavior for outgoing message delivery.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"outbox\": \"in-memory-outbox\"\n    }\n  }\n}\n```\n",
    " November Release > Java > JDK 21 Support\nJava, JDK 21, deployment, mta.yaml, SapMachine, Cloud Foundry, buildpack, Java 21\nSample mta.yaml snippet for deploying a CAP Java application on Cloud Foundry with JDK 21 using SapMachine and the SAP Java buildpack.\n\n```yaml\nmodules:\n  - name: MyCAPJavaApp\n    type: java\n    path: srv\n    parameters:\n      ...\n      buildpack: sap_java_buildpack\n    properties:\n      JBP_CONFIG_COMPONENTS: \"jres: ['com.sap.xs.java.buildpack.jre.SAPMachineJRE']\"\n      JBP_CONFIG_SAP_MACHINE_JRE: '{ use_offline_repository: false, version: 21.+ }'\n      JBP_CONFIG_JAVA_OPTS: '[from_environment: false, java_opts: ''-XX:+IgnoreUnrecognizedVMOptions'']'\n```\n",
    " November Release > Java > Reading Drafts > Split Persistence\nJava, drafts, event handler, split persistence, multitenancy, remote service, ActiveReadEventContext\nJava On-handler code that delegates reading active entities to a remote system when draft split persistence is enabled, using ActiveReadEventContext.\n\n```java\n@On(entity = MyRemoteDraftEnabledEntity_.CDS_NAME)\npublic Result delegateToS4(ActiveReadEventContext context) {\n    return remoteS4.run(context.getCqn());\n}\n```\n",
    " November Release > Java > Typed Service Interfaces\nJava, cds:generate, typed service interface, CatalogService, actions, functions, code generation\nJava interface generated by cds:generate codegen reflecting the type-safe API for a CDS service—showing direct method signatures for actions.\n\n```java\n@Generated(...)\npublic interface CatalogService extends CqnService {\n  Reviews addReview(Books_ ref, Integer rating, String title, String text);\n\n  SubmitOrderContext.ReturnType submitOrder(String book, Integer quantity);\n}\n```\n",
    " November Release > Java > Typed Service Interfaces\nJava, service invocation, typed interface, action call, CatalogService, Spring, autowired\nSimplified handler code calling a typed action from the generated service interface in a Java Spring application, returning a value (stock).\n\n```java\n@Autowired\nCatalogService catalogService;\n\nint stock = catalogService.submitOrder(bookID, 5).getStock();\n```\n",
    " November Release > Java > Typed Service Interfaces\nJava, Maven, disable codegen, cds:generate, typed service interface, pom.xml\nPOM configuration to turn off the generation of typed service interfaces by cds:generate in Maven for a CAP Java project.\n\n```xml\n<execution>\n <id>cds.gen</id>\n <goals>\n  <goal>generate</goal>\n </goals>\n <configuration>\n  <cqnService>false</cqnService>\n </configuration>\n</execution>\n```\n",
    " November Release > Java > Technical User Switch\nJava, system user, RequestContextRunner, technical user, multi-tenant, user context, provider tenant\nShows how to switch to a technical user context (provider user) using the RequestContextRunner API in CAP Java for technical operations.\n\n```java\n@Autowired\nCdsRuntime runtime;\n\nruntime.requestContext().systemUserProvider().run(reqContext -> {\n    ...  // running as provider user (tenant == null)\n});\n```\n",
    " November Release > Java > Custom EDMX Provider\nJava, EDMX, custom provider, EdmxV4Provider, OData V4, InputStream, Spring\nCustom EdmxV4Provider implementation for overriding or adapting OData V4 EDMX metadata in Java CAP—inject or wrap the standard provider's InputStream.\n\n```java\n@Component\npublic class CustomEdmxV4Provider implements EdmxV4Provider {\n\n    private EdmxV4Provider standardProvider;\n\n    @Override\n public InputStream getEdmx(String serviceName) {\n  return wrapped(standardProvider.getEdmx(serviceName));\n }\n\n private InputStream wrapped(InputStream edmxStream) {\n  ... // adapt stream\n }\n\n    @Override\n    public void setPrevious(EdmxV4Provider prev) {\n        this.standardProvider = prev;\n    }\n ...\n}\n```\n",
    " November Release > Java > Runtime Views <Beta />\ncds modeling, runtime view, projection, skip persistence, beta, cds.persistence.skip, Java\nCDS model snippet showing how to define a runtime view using @cds.persistence.skip, so no physical database view is created for the projection entity.\n\n```cds\nentity Books {\n  key id    : UUID;\n      title : String;\n      year  : Int16;\n}\n\n@cds.persistence.skip // [!code focus]\nentity BooksFromYear2000 as projection on Books { // [!code focus]\n   id, title as name // [!code focus]\n} where year = 2000; // [!code focus]\n```\n",
    " November Release > Java > Typed Entity References\nJava, CQL, typed entity reference, entity filter, Select, Delete, entity ref, query API\nJava code showing typed entity references using the new CQL.entity API, supporting typed filtering, projection, and cascading query building.\n\n```java\nBook_ books = CQL.entity(Book_.class);\nBook_ booksFromYear2000 = books.filter(b -> b.year().eq(2000));\n\n// get author names of books from year 2000\nSelect.from(booksFromYear2000.author()).columns(a -> a.name());\n\n// delete all books from year 2000\nDelete.from(booksFromYear2000);\n```\n",
    " November Release > Java > Use CDS Watch with Test Containers\nJava, maven, test containers, cds-maven-plugin, watch, test environment, spring-boot\nRuns the 'watch' goal of the cds-maven-plugin in test container mode, leveraging spring-boot's test-run for integrated live/test container development.\n\n```shell\nmvn cds:watch -DtestRun\n```\n",
    " November Release > Java > Add PostgreSQL and Liquibase support\ncds-maven-plugin, add feature, postgresql, shell, Java, CAP Java, PostgreSQL\nAdds PostgreSQL support to a CAP Java project using the CDS client.\n\n```shell\ncds add postgresql --for postgresql\n```\n",
    " November Release > Java > Add PostgreSQL and Liquibase support\ncds-maven-plugin, add feature, liquibase, maven, profile, Java, CAP Java\nAdds Liquibase feature (for schema migrations) to a CAP Java project for the postgresql profile using the cds-maven-plugin.\n\n```shell\nmvn com.sap.cds:cds-maven-plugin:add -Dfeature=LIQUIBASE -Dprofile=postgresql\n```\n",
    " November Release > Multitenancy > Job Queuing for Subscribe/Unsubscribe/Upgrade\nmultitenancy, job queue, configuration, metadata, cds-mtx, SaaSProvisioningService\nShows how to enable and configure the in-memory job queue for tenant subscribe/unsubscribe/upgrade in multitenancy, avoiding simultaneous tasks for a tenant.\n\n```jsonc\n// Job queuing example (setting in configuration)\n// In e.g. .cdsrc.json or environment variable:\n\"cds\": {\n  \"requires\": {\n    \"multitenancy\": {\n      \"jobs\": {\n        \"queueSize\": <size>\n      }\n    }\n  }\n}\n```\n",
    " PostgreSQL > Native `cds build` Support\nPostgreSQL, cds build, deployment, gen folder, Node.js\nThe snippet illustrates the folder structure created by a native cds build for @cap-js/postgres projects. The build generates a gen/pg/ directory containing deployment artifacts for PostgreSQL. This structure is relevant for handling deployment automation and build outputs.\n\n```shell\nbookshop/\n├─ db/\n├─ gen/\n│ └─ pg/\n│   ├─ package.json\n│   └─ db/\n│     ├─ csn.json\n│     └─ data/\n│       ├─ my.bookshop-Authors.csv\n│       ├─ my.bookshop-Books.csv\n│       └─ ...\n└─ ...\n```\n",
    " PostgreSQL > Using `cds add`\nPostgreSQL, cds add, Cloud Foundry, Node.js, configuration\nThis command adds PostgreSQL configuration to a CAP project for Node.js running on Cloud Foundry. It simplifies the adoption of PostgreSQL as a managed database for CAP applications.\n\n```shell\ncds add postgres\n```\n",
    " CDS Language & Compiler > Publish Association With Filter <Beta />\ncds modeling, association, publish association with filter, projection, beta, view, filter\nThis CDS snippet demonstrates publishing an association with a filter in a view/projection. The new association availableBooks only includes books with stock > 0 for each author. The association ON condition combines the original and filter conditions.\n\n```cds\nentity P_Authors as projection on Authors {\n  *,\n  books[stock > 0] as availableBooks\n};\n```\n",
    " CDS Language & Compiler > Defaults for Managed Associations\ncds modeling, defaults, managed associations, association, default value\nThis CDS example shows how to provide a default value for a managed association when the target has a single primary key. bookingStatus will get the default value 'N' if not set explicitly.\n\n```cds\nentity Booking {\n  // ...\n  bookingStatus : Association to one BookingStatus default 'N';\n}\n```\n",
    " CDS Language & Compiler > Defaults for Managed Associations\nSQL, managed associations, default, table definition, foreign key\nSQL table definition showing that the default value for the managed association is materialized as a default value on the foreign key column bookingStatus_code.\n\n```sql\nCREATE TABLE Booking (\n  ...\n  bookingStatus_code NVARCHAR(1) DEFAULT 'N',\n);\n```\n",
    " Security > Internal Users\nsecurity, internal-user, pseudo-role, authorization, service definition\nService definition using the new pseudo-role 'internal-user' to restrict access to endpoints intended for intra-application (technical) users. This is replacing custom role definitions for microservice internal communication.\n\n```cds\n@requires: 'internal-user'\nservice InternalService {\n  // only open for the technical PaaS provider\n  // ...\n}\n```\n",
    " Node.js > Optimized `cds.test`\ntest, cds.test, Node.js, env check, CDS_TEST_ENV_CHECK, error message\nSample error message produced by enabling the CDS_TEST_ENV_CHECK flag, warning the user that cds.env was loaded from a different directory than where cds.test is run from. This guides users to avoid misconfiguration during testing.\n\n```txt\nDetected cds.env loaded before running cds.test in different folder:\n1. cds.env loaded from:  ./\n2. cds.test running in:  cds/tests/bookshop\n\n    at Test.in (node_modules/@sap/cds/lib/utils/cds-test.js:65:17)\n    at test/cds.test.test.js:9:41\n    at Object.describe (test/cds.test.test.js:5:1)\n\n   5 | describe('cds.test', ()=>{\n>  6 |   cds.env.fiori.lean_draft = true\n     |       ^\n   7 |   cds.test(__dirname)\n\n  at env (test/cds.test.test.js:7:7)\n  at Object.describe (test/cds.test.test.js:5:1)\n```\n",
    " Java > Use List Values with IN\nJava, CQL, IN predicate, list values, filtering, query API\nJava code using CAP Java's CQL API to build a query with a composite IN predicate, filtering for tuples (AirlineID, ConnectionID) matching either (LH,454) or (BA,119). Demonstrates efficient multi-value filtering in Java.\n\n```java\nimport static com.sap.cds.ql.CQL.*;\n\n...\n\nCqnListValue elements = list(get(\"AirlineID\"), get(\"ConnectionID\"));\nCqnListValue lh454  = list(val(\"LH\"), val(454));\nCqnListValue ba119  = list(val(\"BA\"), val(119));\nList<CqnListValue> valueSets = List.of(lh454, ba119);\n\nCqnSelect q = Select.from(FLIGHT_CONNECTION).where(in(elements, valueSets));\n```\n",
    " Java > Use List Values with IN\nSQL, IN predicate, composite key, filter\nGenerated SQL statement for filtering rows by composite (AirlineID, ConnectionID) using an IN predicate. This is the runtime translation for corresponding Java CQL queries.\n\n```sql\nSELECT * FROM FlightConnection\n  WHERE (AirlineID, ConnectionID) IN ((?, ?), (?, ?))\n```\n",
    " Java > Collating on SAP HANA\nJava, CDS annotation, SAP HANA, collation, @cds.collate, locale-specific\nCDS entity definition using the @cds.collate:false annotation to indicate that the isbn field does not require locale-specific sorting on SAP HANA. Used to optimize performance for string columns.\n\n```cds\nentity Books : cuid {\n    title        : localized String(111);\n    descr        : localized String(1111);\n    @cds.collate : false\n    isbn         : String(40);  // does not require locale-specific sorting\n}\n```\n",
    " Java > Optimized Expand\nJava, expand, association, expand optimization, parent-keys, strategy\nDefines a self-referential entity with an expand strategy specified for the children composition. Setting @cds.java.expand: {using: 'parent-keys'} enables bulk expansion of associated entity sets in queries.\n\n```cds\nentity Person {\n  key id   : Int16;\n  name     : String;\n  parent   : Association to Person;\n  @cds.java.expand: {using: 'parent-keys'}\n  children : Composition of many Person on children.parent = $self;\n}\n```\n",
    " Java > Optimized Expand\nJava, expand, CQL, columns, expand, query\nJava CQL query to read Persons with ids 300 or 400 along with the names of their children. Touches on how expand queries are performed and bulk loading children with the parent-keys strategy.\n\n```java\nSelect.from(PERSON)\n  .where(p -> p.id().in(300, 400))\n  .columns(p -> p.name(),\n           p -> p.children().expand(c -> c.name()));\n```\n",
    " Java > Optimized Expand\nSQL, expand, bulk operation, query\nSQL queries generated by optimized expand strategy when bulk loading children for selected parents in the Person entity.\n\n```sql\nSELECT * FROM Person T0 WHERE T0.id in (?, ?)\nSELECT * FROM Person T0 INNER JOIN Person T1 ON (T1.parent_id = T0.id) and (T0.id in ((?), (?)))\n```\n",
    " Multitenancy > Download Migrated Projects\nmultitenancy, cds-mtx, extension download, migrated project, command line, cds client\nCommand to download migrated extension projects after migrating a CAP application to @sap/cds-mtxs, provided the legacy metadata containers still exist and the user has suitable developer scope.\n\n```shell\ncds extend <url> --download-migrated-projects\n```\n",
    " CDS Language & Compiler > Constraints for `.texts` Entities\ncds modeling, entity, localized data, database constraint, db/schema.cds\nDefines a CDS entity 'Books' with a localized string element 'title'. When foreign key constraints are enabled on the database, a constraint is also created for the generated '.texts' entity (for localized elements such as 'title').\n\n```cds\nentity Books {\n  key ID : Integer;\n  title : localized String;\n}\n```\n",
    " CDS Language & Compiler > Constraints for `.texts` Entities\nSQL, database constraint, localized data, db/schema.cds\nThis SQL statement adds a foreign key constraint to the 'Books_texts' table, referencing the 'Books' table. It enforces referential integrity for localized data, ensuring deletes are cascaded and updates are restricted.\n\n```sql\nALTER TABLE Books_texts\n  ADD CONSTRAINT Books_texts_texts\n  FOREIGN KEY(ID) REFERENCES Books(ID)\n  ON UPDATE RESTRICT\n  ON DELETE CASCADE\n  VALIDATED ENFORCED INITIALLY DEFERRED\n\n```\n",
    " Node.js > ‼️ Important Security Change ‼️\nauthentication, Node.js, configuration, environment, cdsrc.json, test, mock\nConfigures dummy authentication for the 'production' profile in a CAP Node.js application, commonly used for test or demo purposes when a proper authentication service binding is absent.\n\n```json\n{\n  \"cds\": {\n    \"requires\": { \"auth\": \"[production]\": { \"kind\": \"dummy\" }}\n  }\n}\n```\n",
    " Node.js > Calculated Elements in Node.js\ncds modeling, calculated element, Node.js, service definition, srv/register.cds\nDefines a CAP service 'Register' with an entity 'People' that includes calculated elements 'fullName' and 'upperName'. These elements derive their values from other fields and are not persisted in the database.\n\n```cds\nservice Register {\n  entity People : cuid {\n    lastName  : String(30);\n    firstName : String(30);\n    fullName  : String = firstName || ' ' || lastName;\n    upperName : String = upper(fullName);\n  }\n}\n```\n",
    " Node.js > Calculated Elements in Node.js\nJavaScript, cds QL, calculated element, querying, Node.js\nExecutes a query in Node.js selecting the calculated elements 'fullName' and 'upperName' from the 'People' entity. The CAP runtime rewrites the query to substitute calculated expressions.\n\n```js\nSELECT.from(People).columns('fullName', 'upperName');\n```\n",
    " Node.js > Calculated Elements in Node.js\nSQL, calculated element, querying, Node.js\nShows the underlying SQL generated by CAP Node.js to provide the calculated elements 'fullName' and 'upperName', based on expressions using 'firstName' and 'lastName'.\n\n```sql\nSELECT firstName || ' ' || lastName as fullName,\n       upper(firstName || ' ' || lastName) as upperName FROM People\n```\n",
    " Node.js > Consistent Timestamps in SQLite\nSQLite, timestamp, DateTime, data insert, Node.js\nDemonstrates the insertion of various date and timestamp formats into the 'Books' table using CAP's SQLite service in Node.js. Shows how timestamps are normalized (ISO strings, padding, truncation, and timezone adjustment).\n\n```js\nawait INSERT.into(Books).entries([\n  { createdAt: new Date },                       //> stored .toISOString()\n  { createdAt: '2022-11-11T11:11:11Z' },         //> padded with .000Z\n  { createdAt: '2022-11-11T11:11:11.123Z' },     //> stored as is\n  { createdAt: '2022-11-11T11:11:11.1234563Z' }, //> truncated to .123Z\n  { createdAt: '2022-11-11T11:11:11+02:00' },    //> converted to zulu time\n])\n```\n",
    " Java > CDS reuse models in Jars\nMaven, Java, cds reuse, dependency, pom.xml\nSpecifies a Maven dependency to reuse a CDS model (and resources like CSV and i18n files) packaged in a JAR, enabling Java projects to import shared CDS artifacts.\n\n```xml\n<dependency>\n  <groupId>com.sap.capire</groupId>\n  <artifactId>bookshop</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n",
    " Java > CDS reuse models in Jars\nMaven, plugin, cds-maven-plugin, Java, model extraction, build configuration\nMaven plugin configuration to execute the 'resolve' goal of the CDS Maven Plugin. This extracts included CDS models from dependencies into the project's target directory for further consumption by the CDS Compiler.\n\n```xml\n<plugin>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-maven-plugin</artifactId>\n  <version>${cds.services.version}</version>\n  <executions>\n    ...\n    <execution>\n      <id>cds.resolve</id>\n      <goals>\n        <goal>resolve</goal> // [!code focus]\n      </goals>\n    </execution>\n    ...\n  </executions>\n</plugin>\n```\n",
    " Java > CDS reuse models in Jars\ncds modeling, model import, Java, using directive\nCDS file snippet demonstrating how to import an entity or service (e.g., CatalogService) from a Maven-packaged reuse module in Java via the 'using' directive.\n\n```cds\nusing { CatalogService } from 'com.sap.capire/bookshop';\n```\n",
    " New Audit Logging Plugin <Beta />\nnpm, plugin, audit logging, security, installation\nInstalls the new '@cap-js/audit-logging' plugin for CAP Node.js applications, which provides automatic plug-and-play audit logging for personal data.\n\n```shell\nnpm add @cap-js/audit-logging\n```\n",
    " Node.js > Fixed Typescript APIs\ntypescript, import, cds, API, Node.js\nExample showing both default and named imports with '@sap/cds' in Typescript, verifying that individual exports correspond to properties on the default import object.\n\n```ts\nimport cds from '@sap/cds';               // default import\nimport { Session, User } from '@sap/cds'; // individual imports\n\nconsole.log (cds.Session === Session) //> true\nconsole.log (cds.User === User) //> true\n```\n",
    " Node.js > Fixed Typescript APIs\ntypescript, API, cds, Node.js\nShows usage of the 'cds.parse' and 'cds.linked' functions, accessible only via the default import object in '@sap/cds' (not as named imports).\n\n```ts\nlet csn = cds.parse(`entity Foo {}`)\nlet m = cds.linked(csn)\n```\n",
    " Node.js > Fixed Typescript APIs\ntypescript, import, api, cds, Node.js\nImports a list of key types and utility objects from '@sap/cds' for use in strongly-typed CAP Node.js/Typescript projects.\n\n```ts\nimport {\n  Service,\n  ApplicationService,\n  MessagingService,\n  DatabaseService,\n  RemoteService,\n  EventContext,\n  Request,\n  Event,\n  User,\n  Association,\n  Composition,\n  entity,\n  event,\n  type,\n  array,\n  struct,\n  service,\n} from '@sap/cds'\n```\n",
    " Node.js > Fixed Typescript APIs\ntypescript, import, api, cds, Node.js\nExample: accessing various properties, service APIs, and utility functions of the CDS object obtained from default import in Typescript/Node.js. Demonstrates the breadth of exported API surface.\n\n```ts\nimport cds from '@sap/cds'\n\ncds.env\ncds.requires\ncds.version\ncds.home\ncds.root\n\ncds.compile\ncds.resolve\ncds.load\ncds.get\ncds.parse\ncds.reflect\ncds.linked\n\ncds.builtin\ncds.Association\ncds.Composition\ncds.entity\ncds.event\ncds.type\ncds.array\ncds.struct\ncds.service\ncds.services\ncds.server\ncds.serve\ncds.connect\n\ncds.Service\ncds.ApplicationService\ncds.MessagingService\ncds.DatabaseService\ncds.RemoteService\n\ncds.EventContext\ncds.Request\ncds.Event\ncds.User\n\ncds.debug\ncds.log\ncds.test\ncds.utils\ncds.lazify\ncds.lazified\ncds.exit\n\ncds.ql\ncds.entities\ncds.context\ncds.spawn\ncds.tx\ncds.run\ncds.foreach\ncds.stream\ncds.read\ncds.create\ncds.insert\ncds.update\ncds.delete\n```\n",
    " Using H2 for Development in CAP Java > Setup & Configuration > Manual Configuration\nJava, H2, dependency, Maven, database, development, testing, JDBC driver\nThis Maven dependency snippet adds the H2 JDBC driver to your CAP Java project's runtime classpath. Including this dependency is required for enabling H2 as the in-memory database during local development or testing.\n\n```xml\n<dependency>\n  <groupId>com.h2database</groupId>\n  <artifactId>h2</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " CDS Language & Compiler > Calculated Elements\ncds modeling, calculated elements, localized, on-read, domain model\nDefines a CDS entity 'Product' with a localized 'description' property and a calculated element 'descr_len' that computes the length of the localized string. Demonstrates that calculated 'on-read' elements can now refer to localized elements.\n\n```cds\nentity Product {\n  // ...\n  description : localized String;\n  descr_len : Integer = length(description);\n}\n```\n",
    " CDS Language & Compiler > Aspects Without Elements\naspects, annotations, extend, cds modeling, cds\nShows how to define a CDS aspect with only annotations and no elements list (no curly braces). Useful for aspects that are meant solely for carrying annotations.\n\n```cds\n@restrict: [ /*...*/ ]\naspect AuthorizationAnnotations;\n```\n",
    " CDS Language & Compiler > Simplified Subqueries\ncds modeling, subqueries, simplified syntax, sql, CDL\nDemonstrates the simplified subquery syntax in CDS where select items inside a subquery don't require an alias if unused. Contrasts with old syntax that required explicit aliases.\n\n```cds\nselect from Products {\n  // …\n} where price < (select from Orders { 0.7 * amount })\n```\n",
    " CDS Language & Compiler > Simplified Subqueries\ncds modeling, subqueries, alias, CDL\nAn example of the previous requirement where every select item in a subquery had to have an alias, even if not used.\n\n```cds\nselect from Products {\n  // …\n} where price < (select from Orders { 0.7 * amount as foo} )\n```\n",
    " Node.js > cds.Service.endpoints (Beta)\nNode.js, cds Service, protocol, service definition, configuration, endpoints, OData, REST\nDefines a CDS service exposed with both OData V4 and REST protocols using specified path. Used to demonstrate how multiple protocols can be configured for one service.\n\n```cds\n@protocol: ['odata-v4', 'rest']\n@path: 'browse'\nservice CatalogService { ... }\n```\n",
    " Node.js > cds.Service.endpoints (Beta)\nNode.js, cds Service, protocol, endpoints, OData, REST\nResulting value of the 'endpoints' property for a cds.Service instance configured with OData V4 and REST. Lists available endpoint paths by protocol.\n\n```js\n[\n  { kind: 'odata-v4', path: '/odata/v4/browse' },\n  { kind: 'rest', path: '/rest/browse' }\n]\n```\n",
    " Java > Important Changes ❗️ > Changed Search Behaviour\nJava, cds modeling, search, computed fields, String, annotations\nSample entity definition to illustrate that in CAP Java's new search behavior, only non-computed String elements ('firstName' and 'lastName') are searchable by default; computed elements like 'fullName' are excluded unless explicitly annotated.\n\n```cds\nentity Persons : cuid {\n  firstName : String;\n  lastName : String;\n  fullName : String = firstName || ' ' || lastName; // not searched by default\n}\n```\n",
    " Java > Order by Alias\nJava, querying, Order By, alias, Query API\nJava code using the CAP Query API to sort query results by an alias derived from a complex expression, here by an upper-cased name with an alias 'aliasForName'.\n\n```java\nSelect.from(\"bookshop.Person\")\n    .columns(p -> p.get(\"name\").toUpper().as(\"aliasForName\"))\n    .orderBy(p -> p.get(\"aliasForName\").asc());\n```\n",
    " cds-typer: Enums, Arrays\ncds-typer, enums, arrays, typescript, generated types, domain model, open source\nDefines a CDS namespace with an enum type 'Priority' and an entity 'Issues' using enum, array and 'many' syntax. Demonstrates the model source for type generation by cds-typer.\n\n```cds\nnamespace issuetracker;\n\ntype Priority: String enum {\n  LOW = 'Low';\n  MED = 'Medium';\n  HIGH = 'High';\n}\n\nentity Issues {\n  priority: Priority;\n  tags: array of String;\n  categories: many String;\n}\n```\n",
    " cds-typer: Enums, Arrays\ncds-typer, enums, typescript, generated types\nTypeScript code auto-generated by cds-typer: an enum object for 'Priority' and a class 'Issue' with typed fields showing enum and array usage.\n\n```ts\nconst Priority = {\n  LOW: \"Low\",\n  MED: \"Medium\",\n  HIGH: \"High\",\n}\n\nclass Issue {\n  priority: Priority\n  tags: Array<string>\n  categories: Array<string>\n}\n```\n",
    " cds-typer: Enums, Arrays\ncds-typer, Node.js, usage sample, enum usage, service logic, require\nNode.js code sample showing how to use the generated types from cds-typer in a service, setting enum values in a 'before CREATE' handler.\n\n```js\nconst { Priority, Issue } = require('#cds-models/issuetracker')\n\nservice.before('CREATE', Issue, ({data}) => {\n  data.priority = Priority.LOW\n})\n```\n",
    "Mandatory Prerequisites ❗️ > Upgrade to cds-dk 7\ninstallation, Node.js, upgrade, CLI\nUpgrade the global CAP DevKit ('@sap/cds-dk') to version 7, which is required for using '@sap/cds' version 7 and above.\n\n```shell\nnpm i -g @sap/cds-dk\n```\n",
    "Mandatory Prerequisites ❗️ > Use cds-serve as Start Script\npackage.json, start script, CLI, cds-serve\nUse 'cds-serve' as the start script in package.json (instead of 'cds run') after upgrading to cds 7, due to executable renaming.\n\n```json\n\"scripts\": {\n  \"start\": \"cds-serve\"\n}\n```\n",
    "CDS Language > Important Changes > Default String Length\nconfiguration, defaults, package.json, string length\nSet the default string length for CDS string fields to 5000 via package.json configuration, overriding the new default of 255 (only for non-HANA databases).\n\n```json\n{\n  \"cds\": {\n    \"cdsc\": {\n      \"defaultStringLength\": 5000\n    }\n  }\n}\n```\n",
    "CDS Language > Important Changes > Default String Length\nconfiguration, defaults, .cdsrc.json, string length\nSet the default string length for CDS string fields to 5000 via .cdsrc.json, allowing override of the new default behavior for non-HANA databases.\n\n```json\n{\n  \"cdsc\": {\n    \"defaultStringLength\": 5000\n  }\n}\n```\n",
    "CDS Language > Important Changes > type of with Association Path\ncds modeling, cds, type of, association, type reference\nReplace element type references using 'type of association.element' with direct references to the target entity's element, as following associations in type references is no longer supported.\n\n```cds\nentity Books {\n  // ...\n  authorName : Authors:name; // [!code focus]\n}\n```\n",
    "CDS Language > Calculated Elements > Java Support for Calculated Elements (On-Read)\ncds modeling, calculated elements, java, on-read\nCDS modeling example using calculated elements for fullName and upperName ('on-read' expressions), now fully supported in Java runtime ad-hoc queries.\n\n```cds\nservice Register {\n  entity People : cuid {\n    lastName  : String(30);\n    firstName : String(30);\n    fullName  : String = firstName || ' ' || lastName;\n    upperName : String = upper(fullName);\n  }\n}\n```\n",
    "CDS Language > Calculated Elements > Java Support for Calculated Elements (On-Read)\njava, Select, calculated elements, ad-hoc query\nJava code to perform an ad-hoc query including calculated elements, demonstrating that 'fullName' and 'upperName' can be queried like ordinary fields.\n\n```java\nSelect.from(PEOPLE).columns(\"fullName\", \"upperName\");\n```\n",
    "CDS Language > Calculated Elements > Calculated Elements On-Write\nsql, calculated elements, on-write, hana\nSQL (SAP HANA) DDL defining an on-write calculated element 'fullName', which is stored as a generated column in the database.\n\n```sql\nCREATE TABLE Register_People (\n  lastName NVARCHAR,\n  firstName NVARCHAR,\n  fullName NVARCHAR GENERATED ALWAYS AS (firstName || ' ' || lastName)\n);\n```\n",
    "CDS Language > Annotated Return Types\ncds modeling, annotations, returns, actions, functions\nDefine return type annotations directly in action/function definitions in your CDS service; e.g., setting '@Core.MediaType' for binary returns.\n\n```cds\nservice SomeService {\n  entity SomeEntity {\n    key id: Integer;\n  } actions {\n    action boundAction() returns @Core.MediaType: 'application/json' LargeBinary;\n  };\n  action unboundAction() returns @Core.MediaType: 'application/json' LargeBinary;\n};\n```\n",
    "CDS Language > Annotated Return Types\ncds modeling, annotate, annotations, returns, actions\nAnnotate action/function return types via 'annotate' blocks; this allows separation of technical API from API decoration.\n\n```cds\nannotate SomeService.SomeEntity actions {\n  boundAction returns @Core.MediaType: 'application/json';\n};\nannotate SomeService.unboundAction with returns @Core.MediaType: 'application/json';\n```\n",
    "Node.js > Lean Draft\njs, lean draft, event handler, draft, Fiori Elements\nCDS service implementation can now clearly differentiate handlers for active and draft entities using 'lean draft' improvements in cds 7.\n\n```js\nsrv.after(\"READ\", MyEntity, () => {});\nsrv.after(\"READ\", MyEntity.drafts, () => {});\n```\n",
    "Node.js > Plugins\ninstallation, plugin, sqlite, cds-plugin\nInstall the new SQLite database service with plugin auto-wiring by adding '@cap-js/sqlite' to your project.\n\n```shell\nnpm add @cap-js/sqlite\n```\n",
    "Node.js > Protocols > Configuring Protocols\njs, cds plugin, protocol configuration, custom protocol\nPlugin registration code for a custom protocol (GraphQL) using the cds-plugin mechanism, allowing services to reference the protocol via annotations.\n\n```js\nconst cds = require('@sap/cds')\nconst protocols = cds.env.protocols ??= {}\nif (!protocols.graphql) protocols.graphql = {\n  path: \"/graphql\", impl: \"@cap-js/graphql\"\n}\n```\n",
    "Node.js > Simplified Handlers\njs, handlers, after, READ, array, simplified handlers\nSimplified 'after' handler in cds 7, with guaranteed array argument for result, eliminating the need to handle single/null result values.\n\n```js\nsrv.after('READ', Books, books => {\n  for (let each of books) // ... do something with each\n})\n```\n",
    "MTX Services > Simplified Configuration\nshell, CLI, cds add, multitenancy, extensibility\nEnable multitenancy for your CAP project by running 'cds add multitenancy', which adds '@sap/cds-mtxs' and configures sidecar setup.\n\n```shell\ncds add multitenancy\n```\n",
    "MTX Services > Simplified Configuration\njson, package.json, dependencies, multitenancy\nAfter using 'cds add multitenancy', your package.json should list '@sap/cds-mtxs' in dependencies to enable new MTX support.\n\n```json\n{\n   \"dependencies\": {\n      \"@sap/cds-mtxs\": \"^1\"\n   },\n}\n```\n",
    "MTX Services > Simplified Configuration\njson, package.json, profiles, sidecar, multitenancy\nExample package.json fragment for enabling multitenancy using the sidecar approach with CAP, applied via cds add multitenancy.\n\n```json\n{\n  \"cds\": {\n    \"profile\": \"with-mtx-sidecar\",\n    \"requires\": {\n      \"multitenancy\": true\n    }\n  }\n}\n```\n",
    "MTX Services > Simplified Configuration\njson, sidecar, package.json, mtx, multitenancy, node\nA template for the sidecar subproject's package.json auto-generated by 'cds add multitenancy', showing required dependencies and script setup.\n\n```json\n{\n  \"name\": \"<your app name>-mtx\",\n  \"dependencies\": {\n    \"@sap/cds\": \"^7\",\n    \"@sap/cds-hana\": \"^2\",\n    \"@sap/cds-mtxs\": \"^1.9\",\n    \"@sap/xssec\": \"^3\",\n    \"express\": \"^4\",\n    \"passport\": \">=0.6.0\"\n  },\n  \"devDependencies\": {\n    \"@cap-js/sqlite\": \">=0\"\n  },\n  \"scripts\": {\n    \"start\": \"cds-serve\"\n  },\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\"\n  }\n}\n```\n",
    "MTX Services > Simplified Configuration\njsonc, MTX, profile, multitenancy, sidecar\nSample profile settings for MTX sidecar, specifying database, required services, and development server settings. Useful for understanding and customizing multitenancy setups.\n\n```jsonc\n\"[mtx-sidecar]\": {\n    requires: {\n      db: {\n        \"[development]\": { ...sqlite_mt, credentials: { url: \"../../db.sqlite\" }},\n        \"[production]\": hana_mt,\n      },\n      \"cds.xt.ModelProviderService\": {\n        \"[development]\": { root: \"../..\" }, // sidecar is expected to reside in ./mtx/sidecar\n        \"[production]\": { root: \"_main\" },\n        \"[prod]\": { root: \"_main\" }, // for simulating production in local tests\n        _in_sidecar: true,\n      },\n      \"cds.xt.SaasProvisioningService\": true,\n      \"cds.xt.DeploymentService\": true,\n      \"cds.xt.ExtensibilityService\": true,\n    },\n    \"[development]\": {\n      // requires: { auth: \"dummy\" }, -> We need authentication for push and pull requests\n      server: { port: 4005 }\n    }\n  }\n```\n",
    "MTX Services > Improved Local Tests\nshell, upgrade, CLI, multitenancy, tenant upgrade\nCLI command to trigger a tenant upgrade for tenant 't1' at a given sidecar URL, supporting improved local multitenancy testing.\n\n```shell\ncds upgrade t1 --at http://localhost:4005 -u alice:\n```\n",
    "Toolkit / CLI > Deploy Format `hdbtable`\njsonc, package.json, hana, deploy format, cds build\nUse 'hdbtable' as deploy format for HANA in configuration, which is now the default. 'cds build' will generate .hdbtable and .hdbview files.\n\n```jsonc\n\"cds\": {\n  \"requires\": {\n    \"db\": \"hana\"\n  },\n  \"hana\": {\n    \"deploy-format\": \"hdbtable\"\n  }\n}\n```\n",
    "Toolkit / CLI > Deploy Format `hdbtable` > In case you still need `hdbcds`\njson, package.json, hana, deploy format, hdbcds, cds build\nIf you still need the older 'hdbcds' deploy format, override the default in your package.json. Not recommended for new projects.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"db\": {\n      \"kind\": \"hana\",\n      \"deploy-format\": \"hdbcds\"\n    }\n  }\n}\n```\n",
    "Toolkit / CLI > Improved `cds env`\nshell, CLI, config, cds env, list keys\nList all configured service keys of a Node.js CAP app for easier inspection using the new '--keys' option with 'cds env'.\n\n```shell\ncds env requires --keys\n```\n",
    "Java > Structured Event Messages\nyaml, messaging, java, configuration, structured\nEnables structured event messages in CAP Java by setting 'structured: true' in the messaging service configuration.\n\n```yaml\ncds:\n  messaging.services:\n    - name: \"messaging\"\n      kind: \"enterprise-messaging\"\n      structured: true\n```\n",
    "Java > Structured Event Messages\njava, messaging, event emission, structured message\nEmit a structured event message with custom payload and headers using MessagingService in CAP Java.\n\n```java\nmessagingService.emit(topic, Map.of(\"firstname\", \"John\", \"lastname\", \"Doe\"), Map.of(\"timestamp\", Instant.now()));\n```\n",
    "Java > Simplified @After-Handlers\njava, after handler, CRUD, Result, stream\nSimplified 'after' handler in CAP Java 2.x, receiving Result argument directly as POJO stream for CRUD events.\n\n```java\n@After(event = CqnService.EVENT_READ)\npublic void afterReadResult(Result result) {\n Stream<Row> rows = result.stream();\n // ...\n}\n```\n",
    " April 2023 > CDS Language & Compiler > Additional OData Annotation Vocabularies\nconfiguration, OData, vocabulary, package.json, .cdsrc.json\nExample configuration snippet for enabling a custom OData vocabulary in package.json for the CAP compiler. This allows OData metadata for additional custom annotations.\n\n```json\n{\n  \"cds\": {\n    \"cdsc\": {\n      \"odataVocabularies\": {\n        \"MyVocabulary\": {\n          \"Alias\": \"MyVocabulary\",\n          \"Namespace\": \"com.MyCompany.vocabularies.MyVocabulary.v1\",\n          \"Uri\": \"<link to vocabulary document>\"\n        }\n      }\n    }\n  }\n}\n```\n",
    " April 2023 > CDS Language & Compiler > Additional OData Annotation Vocabularies\nconfiguration, OData, vocabulary, .cdsrc.json\nSample .cdsrc.json configuration for registering a custom OData annotation vocabulary for use in CDS models.\n\n```json\n{\n  \"cdsc\": {\n    \"odataVocabularies\": {\n      \"MyVocabulary\": {\n        \"Alias\": \"MyVocabulary\",\n        \"Namespace\": \"com.MyCompany.vocabularies.MyVocabulary.v1\",\n        \"Uri\": \"<link to vocabulary document>\"\n      }\n    }\n  }\n}\n```\n",
    " April 2023 > CDS Language & Compiler > Additional OData Annotation Vocabularies\ncds modeling, OData, annotation, custom vocabulary\nSnippet for applying a custom annotation from a registered OData vocabulary to a CDS entity. The annotation uses the vocabulary alias as configured in the project settings.\n\n```cds\nservice S {\n  @MyVocabulary.MyAnno: 'My new Annotation'\n  entity E { /*...*/ };\n};\n```\n",
    " April 2023 > CDS Language & Compiler > Additional OData Annotation Vocabularies\nOData, metadata, custom vocabulary, edmx, output\nGenerated OData EDMX XML showing how the custom vocabulary reference and annotation appear in the resulting metadata. The reference to the vocabulary document and the annotation applied to an entity are included.\n\n```xml\n<edmx:Reference Uri=\"link to vocabulary document\">\n  <edmx:Include Alias=\"MyVocabulary\" Namespace=\"com.MyCompany.vocabularies.MyVocabulary.v1\"/>\n</edmx:Reference>\n...\n<Annotations Target=\"S.E\">\n  <Annotation Term=\"MyVocabulary.MyAnno\" String=\"My new Annotation\"/>\n</Annotations>\n```\n",
    " April 2023 > Java > Immutable References\nJava, CDS QL, ref, immutable references, modification\nDemonstrates the new immutable nature of CDS QL references in Java. The `as` and `type` methods return new reference objects, leaving the original unchanged.\n\n```java\nElementRef<?> authorName = CQL.get(\"name\").as(\"Author\");\nElementRef<?> nombre = authorName.as(\"nombre\");           // authorName is unchanged\nElementRef<?> string = authorName.type(\"cds.String\");     // authorName is unchanged\n```\n",
    " April 2023 > Java > Immutable References\nJava, CDS QL, ref segment, filter\nCreates an immutable ref segment with a filter using the Java CDS QL API. Required due to immutability of references and segments.\n\n```java\nSegment seg = CQL.refSegment(\"title\", predicate);\n```\n",
    " April 2023 > Java > Modification of Ref Segments\nJava, CDS QL, ref modification, RefBuilder\nExample of using a Modifier and the new RefBuilder API in Java to create modifiable copies of immutable references and apply changes such as filters. Ends with building the immutable ref for the final statement.\n\n```java\nModifier modifier = new Modifier() {\n @Override\n public CqnStructuredTypeRef ref(CqnStructuredTypeRef ref) {\n  RefBuilder<StructuredTypeRef> copy = CQL.copy(ref); // try to avoid copy\n  copy.targetSegment().filter(newFilter);\n  return copy.build();\n }\n\n @Override\n public CqnValue ref(CqnElementRef ref) {\n  List<Segment> segments = new ArrayList<>(ref.segments());\n  segments.add(0, CQL.refSegment(segments.get(0).id(), filter));\n  return CQL.get(segments).as(alias);\n }\n};\nCqnStatement copy = CQL.copy(statement, modifier);\n```\n",
    " April 2023 > Java > Compare Row Values\nJava, CDS QL, query builder, row value comparison, select, SQL\nCompose a CDS query in Java that compares row values, such as (year, quarter) > (2012, 2). Supported natively on databases like H2, SQLite, and Postgres, or unfolded on HANA.\n\n```java\nimport static com.sap.cds.ql.CQL.*;\n\n...\nCqnListValue props = list(get(\"year\"), get(\"quarter\"));\nCqnListValue vals  = list(val(2012), val(2));\nCqnSelect q = Select.from(SALES).where(comparison(props, GT, vals));\n```\n",
    " April 2023 > Java > Compare Row Values\nSQL, row value comparison\nSQL example demonstrating row value comparison for databases that support this syntax, as generated from the Java CDS QL query builder API.\n\n```sql\nSelect * from Sales where (year, quarter) > (2012, 2)\n```\n",
    " April 2023 > Java > Compare Row Values\nSQL, row value comparison, HANA\nSQL equivalent for SAP HANA to simulate row value comparison for compound keys. This unfolds the tuple comparison into multiple AND/OR conditions.\n\n```sql\nSelect * from Sales where year > 2012 or year = 2012 and quarter > 2\n```\n",
    " April 2023 > Java > Open Types in OData v4\ncds modeling, OData, open type\nCDS annotation to declare an entity as 'open', allowing clients to add additional properties dynamically when using OData v4.\n\n```cds\n@open\nentity Products {\n    key productId : Int32;\n}\n```\n",
    " April 2023 > Java > Open Types in OData v4\nOData, request, open type, json, Products\nHTTP POST request body for an OData v4 open-type entity, demonstrating how additional properties can be included besides those defined in the model.\n\n```json\n{\n    \"productId\": 17,\n    \"description\": \"box\",\n    \"details\": {\n        \"length\" : 17,\n        \"width\"  : 4,\n        \"height\" : 23\n    }\n}\n```\n",
    " April 2023 > Tools > AsyncAPI Import\ntools, CLI, AsyncAPI, cds import, import\nCommand to import an AsyncAPI document using the CAP CLI. This generates CDS services and events based on the event definitions in the AsyncAPI file.\n\n```shell\ncds import ~/Downloads/AsyncAPI_sample.json\n```\n",
    " March 2023 > Calculated Elements <Beta />\ncds modeling, calculated elements, on-read semantics\nDefines a calculated element 'name' in the Employees entity using an on-read calculation expression. Refers to other elements of the entity. Introduced as a beta feature for defining calculated elements in CAP entities.\n\n```cds\nentity Employees {\n  key ID : UUID;\n  firstName : String;\n  lastName : String;\n  name : String = firstName || ' ' || lastName;\n}\n```\n",
    " March 2023 > Calculated Elements <Beta />\nservice definition, projection, calculated elements\nProjecting the calculated element 'name' in a view. Shows how to expose a calculated element via a projection/entity in a service definition. Essential, as calculated elements must be accessed via projections.\n\n```cds\nservice Srv {\n  entity EmployeesWithName as projection on Employees { ID, name };\n}\n```\n",
    " March 2023 > Calculated Elements <Beta />\nservice definition, projection, calculated elements\nEquivalent definition to using a calculated element, but with the calculation in the projection itself. Demonstrates the semantic and performance equivalence between calculated elements and inline expressions in projections.\n\n```cds\nservice Srv {\n  entity EmployeesWithName as projection on Employees {\n    ID,\n    firstName || ' ' || lastName as name : String\n  }\n}\n```\n",
    " March 2023 > New cds-plugin technique\ncds toolkit, cds-plugin, npm, plugins, GraphQL, project setup\nDefines a cds-plugin module for integrating GraphQL into a CAP project. Illustrates the usage of the new cds-plugin loading technique. Automatically makes GraphQL available when the package is installed.\n\n```js\n// cds-plugin.js\nconst cds = require('@sap/cds')\nconst protocols = cds.env.protocols ??= {}\nif (!protocols.graphql) protocols.graphql = {\n  path: \"/graphql\", impl: \"@cap-js/graphql\"\n}\n```\n",
    " March 2023 > New cds-plugin technique\ninstallation, npm, GraphQL, plugin, cds toolkit\nInstalls the @cap-js/graphql plugin into a CAP project. Demonstrates the simplified plugin addition process using npm and the new cds-plugin technique.\n\n```shell\nnpm add @cap-js/graphql\n```\n",
    " March 2023 > New SQLite Service <Beta />\nJavaScript, querying, SQLite, path expressions, database\nShows a CQL query with full path expressions and infix filters, now supported in the new SQLite service. Demonstrates deep querying and navigation in CAP JavaScript APIs.\n\n```js\nSELECT.from (Books, b => { b.ID, b.title, b.author.name }) .where ('genre.name=','Drama')\n```\n",
    " March 2023 > New SQLite Service <Beta />\nSQL, querying, SQLite, path expressions, database\nDemonstrates a SQL query using path expressions with filters, returning authors with books whose titles contain 'a'. Shows new capabilities of the SQLite Database Service.\n\n```sql\nSELECT `from ${Authors} {\n   ID, name, books[where title like '%a%']{ title }\n}`\n```\n",
    " March 2023 > Lean Draft <Beta />\nconfiguration, cds.env, lean draft, database service, Fiori\nConfiguration to enable lean draft for Fiori in cds.env. Mandatory when using the new SQLite service. Enables new modular, non-intrusive draft handling.\n\n```jsonc\n{ ...,\n  \"cds\": {\n    \"fiori\": {\n      \"lean_draft\": true\n    }\n  }\n}\n```\n",
    " March 2023 > Lean Draft <Beta />\nshell, cds CLI, lean draft, profile, SQLite\nRuns a CAP server with the 'lean-draft' profile activated. Useful for testing the new draft handling and (optionally, if combined with better-sqlite) the new SQLite Database Service.\n\n```shell\ncds watch --profile lean-draft\n```\n",
    " March 2023 > Lean Draft <Beta />\nshell, cds CLI, lean draft, profile, SQLite\nStarts a CAP server with both 'lean-draft' and 'better-sqlite' activated for full experience of new draft implementation and SQLite service.\n\n```shell\ncds watch --profile lean-draft,better-sqlite\n```\n",
    " March 2023 > CDS Language and Compiler > Ternary Conditional Operator\ncds modeling, querying, conditional operator, CDL, ternary operator\nShows use of the new ternary conditional operator in CDL for calculated fields, equivalent to a CASE expression. Improves readability of source code.\n\n```cds\nSELECT FROM Books {\n  (stock>100 ? 0.3 : 0.1) as discount_ternary,\n  CASE WHEN stock>100 THEN 0.3 ELSE 0.1 END as discount_case\n}\n```\n",
    " March 2023 > Node.js > Important Changes ❗️\npackage.json, start script, cds-serve, Node.js, CLI\nUpdates the 'start' script in package.json to use 'cds-serve' instead of deprecated 'cds run' or 'cds serve'. Prepares projects for CAP v7+ compatibility.\n\n```shell\nnpm pkg set scripts.start=\"cds-serve\"\n```\n",
    " March 2023 > Node.js > Important Changes ❗️\npackage.json, start script, cds-serve, Node.js\nSample package.json scripts section showing correct configuration for 'cds-serve' as the start command in CAP Node.js projects.\n\n```jsonc\n\"scripts\": {\n  \"start\": \"cds-serve\"\n}\n```\n",
    " March 2023 > Node.js > Access Targeted Instances with req.subject\nservice implementation, req.subject, Node.js, custom action, SFlight\nCustom action handler for the 'acceptTravel' action, using req.subject to target the relevant instance(s) in CAP Node.js service handlers. Simplifies custom logic for both active and draft-enabled entities.\n\n```js\nthis.on ('acceptTravel', req => {\n  return UPDATE (req.subject) .with ({TravelStatus_code:'A'})\n})\n```\n",
    " March 2023 > Java > Important Changes ❗️\nJava, TenantProviderService, multitenancy, database id\nRetrieves tenant-specific SAP HANA database IDs using TenantProviderService in Java. Useful for advanced multitenancy scenarios.\n\n```java\n@Autowired ServiceCatalog serviceCatalog;\n\nTenantProviderService tenantProvider =\n    serviceCatalog.getService(TenantProviderService.class, TenantProviderService.DEFAULT_NAME);\n\ntenantProvider.readTenantsInfo().forEach(tenantInfo -> {\n  String tenantId = tenantInfo.getTenant();\n  String dbId = tenantInfo.get(\"database_id\");\n});\n```\n",
    " March 2023 > Tools > Update to Cloud Foundry CLI **8** ❗️\nCloud Foundry, CLI, cf CLI, deployment, tools\nWarning message output by CAP tools when an outdated Cloud Foundry CLI (<v8) is detected. Indicates the upcoming removal of support for legacy CLI versions.\n\n```txt\n[Warning] You are using Cloud Foundry client version 7.8.9.\nWe recommend version 8 or higher. Deployment will stop in the near future\nfor Cloud Foundry client versions < 8.\n```\n",
    "CDS Language & Compiler > Method-Style Syntax for Spatial Functions\ncds modeling, geospatial, spatial functions, method-style syntax, expression\nDemonstrates new instance method call syntax for geospatial (spatial) functions in CDS. It shows how to call methods like ST_Area on spatial columns and instantiate objects such as ST_Point with subsequent method calls (ST_X). Useful for modeling geospatial data and using native database spatial functions directly in CDS models.\n\n```cds\nentity Geo as select from Foo {\n  geoColumn.ST_Area() as area : Decimal,\n  new ST_Point(2.25, 3.41).ST_X() as x : Decimal\n};\n```\n",
    "Tools > AsyncAPI Export Tooling\ntools, asyncapi, export, documentation, CLI, events, API definition\nCommand to export CAP event documentation in AsyncAPI format using the CDS CLI. The result is written to the 'docs' directory. Enables interoperability with AsyncAPI tooling and helps document event-based APIs directly from your CAP project.\n\n```shell\ncds compile srv --service all -o docs --to asyncapi\n```\n",
    "CAP on Kyma/K8s > Changes in the Helm Chart\nhelm, yaml, deployment, configuration, BTP services, saas-registry, service binding\nOld configuration (values.yaml) for the saas-registry service in a Helm chart, with inline parameters under saas_registry. This format is no longer supported; for CAP on Kyma/K8s, use the updated keys and structure illustrated below.\n\n```yaml\nsaas_registry:\n  serviceOfferingName: saas-registry\n  servicePlanName: application\n  parameters:\n    getDependencies: \"/-/cds/saas-provisioning/dependencies\"\n    onSubscription: \"/-/cds/saas-provisioning/tenant/{tenantId}\"\n  ...\n```\n",
    "CAP on Kyma/K8s > Changes in the Helm Chart\nhelm, yaml, deployment, configuration, BTP services, saas-registry, service binding\nNew configuration for Helm values.yaml for the saas-registry service and parameters. Now uses two keys: 'saas-registry' for service instance properties with parameters coming from a secret, and 'saasRegistryParameters' for user-modifiable parameters (application metadata and URLs). This structure supports clearer separation and secure management of configuration and secrets for SAP BTP service bindings on Kyma/K8s deployments.\n\n```yaml\n...\nsaas-registry:\n  serviceOfferingName: saas-registry\n  servicePlanName: application\n  parametersFrom:\n    - secretKeyRef:\n        name: \"RELEASE-NAME-saas-registry-secret\"\n        key: parameters\nsaasRegistryParameters:\n  xsappname: bookshop\n  appName: bookshop\n  displayName: bookshop\n  description: A simple self-contained bookshop service.\n  category: \"CAP Application\"\n  appUrls:\n    getDependencies: \"/-/cds/saas-provisioning/dependencies\"\n    onSubscription: \"/-/cds/saas-provisioning/tenant/{tenantId}\"\n    onSubscriptionAsync: true\n    onUnSubscriptionAsync: true\n    onUpdateDependenciesAsync: true\n    callbackTimeoutMillis: 300000\n```\n",
    "CDS Language & Compiler > Simplified Syntax for Binding Parameters\ncds modeling, service definition, bound action, explicit binding parameter, parameter naming\nShows how to explicitly define the binding parameter for an action or function in a CDS service. Demonstrates defining a binding parameter either as a single entity ('$self') or a collection ('many $self'). The parameter name and cardinality can be controlled this way, replacing deprecated annotations.\n\n```cds\nservice CatalogService {\n  entity Products { ... }\n    actions { // bound actions or functions\n      action addReview (in: $self, stars: Integer, comment: String);\n      action archiveOutOfStock (products: many $self, since: Date);\n    }\n}\n```\n",
    "CDS Language & Compiler > Extending the Generated _.texts_ Entities\ncds modeling, extend, localized data, texts, aspect, association\nExtends the generated .texts entities for localized data by adding an association to a language code list. This approach allows collective extension via the TextsAspect for translation-related enhancements.\n\n```cds\nextend sap.common.TextsAspect with {\n  language : Association to sap.common.Languages on language.code = locale;\n}\n```\n",
    "CDS Language & Compiler > Extending the Generated _.texts_ Entities\ncds modeling, localized data, texts, entity, association\nResulting structure of a localized entity after extending TextsAspect with an association to Languages, showing how the generated entity's schema can be customized.\n\n```cds\nentity Books.texts {\n  key locale: sap.common.Locale;\n  language : Association to sap.common.Languages on language.code = locale;\n  key ID : UUID;\n  title : String;\n  descr : String;\n}\n```\n",
    "Node.js > Fixed Semantics of `.where` Function in Query API\nquerying, JavaScript, cds QL, where, SQL, API\nDemonstrates how .where clauses are built and modified in the CDS Query API. Describes the fix that correctly groups existing and new expressions as '(a = 1 or b = 2) and c = 3', ensuring SQL semantics are preserved.\n\n```js\nconst query = SELECT.from('Entity')\nquery.SELECT.where = [{ ref: [ 'a' ] }, '=', { val: 1 }, 'or', { ref: [ 'b' ] }, '=', { val: 2 }]\nquery.where({ c: 3 })\n```\n",
    "Java > Important Changes > Removed Support for Associations Between Unrelated Draft Entities\ncds modeling, association, draft, odata, inactive entities\nDefines two draft-enabled entities with an association between them. Used to illustrate the removal of support for associations from a draft entity to unrelated inactive draft entities.\n\n```cds\nservice Bookshop {\n  @odata.draft.enabled\n  entity Books {\n    author: Association to Authors;\n    ...\n  }\n\n  @odata.draft.enabled\n  entity Authors {\n    ...\n  }\n}\n```\n",
    "Java > JDK 17 Support\ndeployment, mta.yaml, JDK 17, SAPMachine, SAP Java buildpack, java\nShows how to configure SapMachine JDK 17 in a Cloud Foundry mta.yaml deployment descriptor for a Java CAP application. It specifies the buildpack and JRE version settings needed for running with JDK 17.\n\n```yaml\nmodules:\n  - name: MyCAPJavaApp\n    type: java\n    path: srv\n    parameters:\n      ...\n      disk-quota: 512M\n      buildpack: sap_java_buildpack\n    properties:\n      JBP_CONFIG_COMPONENTS: \"jres: ['com.sap.xs.java.buildpack.jre.SAPMachineJRE']\"\n      JBP_CONFIG_SAP_MACHINE_JRE: '{ use_offline_repository: false, version: 17.+ }'\n```\n",
    "Java > OData: Update Related Entities Using Delta Payload\nodata, PATCH, delta payload, deep update, json, Order, order items\nA sample OData PATCH payload with a nested delta for related entities. Demonstrates upserting an order item, removing others by ID or by @id reference, and making use of the now-optional 'reason' property on removals.\n\n```json\n{\n    \"ID\": \"o101\",\n    \"Items@delta\": [\n        {\n            \"ID\": \"i01\",\n            \"amount\": 101\n        },\n        {\n            \"ID\": \"i02\",\n            \"@removed\": { }\n        },\n        {\n            \"@id\": \"OrderItems(i03)\",\n            \"@removed\": { \"reason\": \"deleted\" }\n        }\n    ]\n}\n```\n",
    "Multitenancy > Simpler Deployment Service Configuration\nmultitenancy, deployment, configuration, cds-mtx, hdi\nNew, simplified deployment configuration for multitenancy HDI services in CAP projects. This replaces a more deeply nested structure to improve readability and maintainability.\n\n```jsonc\n\"hdi\": {\n  \"create\": {\n    \"database_id\": \"<ID>\"\n  },\n  \"bind\": {\n    \"key\": \"value\"\n  }\n}\n```\n",
    "Multitenancy > Simpler Deployment Service Configuration\nmultitenancy, deployment, configuration, cds-mtx, hdi, legacy\nLegacy deployment configuration style for HDI services in CAP multitenancy projects. Still supported, but less preferred compared to the new flat structure.\n\n```jsonc\n\"hdi\": {\n  \"create\": {\n    \"provisioning_parameters\": {\n      \"database_id\": \"<ID>\"\n    },\n    \"binding_parameters\": {\n      \"key\": \"value\"\n    }\n  }\n}\n```\n",
    "Multitenancy > Improved Job Status Response\nmultitenancy, job, cds-mtx, API, job status, tenant\nSample response from /-/cds/jobs/pollJob API showing improved job status reporting, including a per-tenant status field. Enables polling of tenant-specific upgrade tasks in a single call.\n\n```json\n{\n  \"status\": \"FAILED\",\n  \"op\": \"upgrade\",\n  \"tenants\": {\n      \"non-existing-tenant\": {\n         \"status\": \"FAILED\",\n         \"error\": \"Tenant 'non-existing-tenant' does not exist\"\n      },\n      \"existing-tenant\": {\n         \"status\": \"FINISHED\"\n      }\n   }\n}\n```\n",
    "CAP on Kyma/K8s > Changes in the Helm Chart\ndeployment, kyma, helm, chart, yaml, HTML5 Apps Deployer\nPrevious layout for configuring HTML5 Apps Deployer in Helm values.yaml before this release. Backend destinations were nested under html5_apps_deployer, and cloud service was also defined at this level.\n\n```yaml\nhtml5_apps_deployer:\n  cloudService: null\n  backendDestinations: {}\n  ...\n```\n",
    "CAP on Kyma/K8s > Changes in the Helm Chart\ndeployment, kyma, helm, chart, yaml, HTML5 Apps Deployer\nNew layout for configuring HTML5 Apps Deployer in Helm values.yaml as of this release. backendDestinations is now at the root, and SAP_CLOUD_SERVICE is in an env subkey under html5-apps-deployer.\n\n```yaml\nbackendDestinations: {}\nhtml5-apps-deployer:\n  env:\n    SAP_CLOUD_SERVICE: null\n  ...\n```\n",
    " All of 2022\nVue.js, component, code sample\nDemonstrates usage of the IndexList Vue.js component with a 'pages' prop bound to a data property named 'pages'. Useful for rendering an index or list of pages in a Vue-based frontend.\n\n```vue\n<IndexList :pages='pages' />\n```\n",
    "Common Content Package Available on npm\ninstallation, npm, common content, CAP, project setup\nInstalls the @sap/cds-common-content package from npm. This package provides prebuilt data for common entities such as Countries, Currencies, and Languages in CAP projects.\n\n```shell\nnpm add @sap/cds-common-content --save\n```\n",
    "Common Content Package Available on npm\ncds modeling, common content, reuse package, project setup\nImports all model definitions from the @sap/cds-common-content package into your CDS model. Enables reuse of common entities like Countries, Currencies, and Languages.\n\n```cds\nusing from '@sap/cds-common-content';\n```\n",
    "Open Source GraphQL Adapter\nGraphQL, protocol adapter, configuration, cds, protocols, middlewares\nConfiguration snippet to enable the new open source GraphQL adapter ('@cap-js/graphql') as a protocol for a CAP service. Activates middlewares, sets the GraphQL endpoint path, and specifies the adapter implementation in the 'cds' configuration section.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"middlewares\": true\n    },\n    \"protocols\": {\n      \"graphql\": { \"path\": \"/graphql\", \"impl\": \"@cap-js/graphql\" }\n    }\n  }\n}\n```\n",
    "Automatic Schema Migration for SQLite <Beta />\nsqlite, automatic schema migration, configuration, database, schema evolution\nEnables automatic schema evolution for SQLite in the database service configuration. Allows compatible model changes to evolve the database schema without dropping and recreating tables, reducing downtime. Intended as a beta feature.\n\n```json\n\"db\": {\n    \"kind\": \"sqlite\",\n    \"schema_evolution\": \"auto\"\n}\n```\n",
    "Node.js > UPSERT\nUPSERT, Node.js, databases, DatabaseService, CQL, insert, update\nPerforms an UPSERT query using CAP Node.js CQL API. This updates an existing entry in the db.Books table or inserts a new one if it does not exist. Available on all database services, useful for efficient data replication.\n\n```js\nUPSERT.into('db.Books')\n  .entries({ ID: 4711, title: 'Wuthering Heights', stock: 100 })\n```\n",
    "Node.js > CSRF Token Handling for Remote Services\nremote service, OData V2, CSRF token, configuration, cds, service consumption\nConfigures a consumed OData V2 remote service to automatically fetch a CSRF token. The 'csrf' property can be set per service in the 'cds.requires' section. The global 'cds.features.fetch_csrf' is deprecated.\n\n```jsonc\n\"cds\": {\n    \"requires\": {\n        \"API_BUSINESS_PARTNER\": {\n            \"kind\": \"odata-v2\",\n            \"model\": \"srv/external/API_BUSINESS_PARTNER\",\n            \"csrf\": true\n        }\n    }\n}\n```\n",
    "Java > Deep Update / Upsert with nested Deltas > OData: Update Related Entities using Delta Payload\ndeep update, delta payloads, OData, PATCH, Java, entity update, OrderItems, deletion\nSample OData PATCH request body using a delta payload. Updates Order(o1) with delta update semantics: upserts item oi1 and deletes item oi2. Other related entities are left untouched.\n\n```json\n{\n    \"ID\": \"o1\",\n    \"Items@delta\": [\n        {\n            \"ID\": \"oi1\",\n            \"amount\": 101\n        },\n        {\n            \"@id\": \"OrderItems(oi2)\",\n            \"@removed\": { \"reason\": \"deleted\" }\n        }\n    ]\n}\n```\n",
    "Java > Deep Update / Upsert with nested Deltas > Using Deltas in CDS QL\ndeep update, deep upsert, delta, Java, CQL, example, OrderItems, removal\nJava code example for using nested delta lists (CdsList) to perform a deep update or upsert. Marks item1 for update and item2 for removal in association Items for an Order, before calling Update.entity().\n\n```java\nOrderItems item1 = OrderItems.create(\"oi1\");\nitem1.setAmount(101);\nOrderItems item2 = OrderItems.create(\"oi2\");\nOrders order = Orders.create(\"o1\");\norder.setItems(delta(item1, item2.forRemoval()));\n\nUpdate.entity(ORDERS).data(order);\n```\n",
    "Java > Exception Handler for Messaging\nmessaging, exception handler, Java, CAP Java, error handling\nRegisters an error handler for messaging services in CAP Java. Explicitly inspects the event context for exceptions occurring during message handling and acknowledges the message if desired. Prevents repeated redelivery of unprocessable messages.\n\n```java\n@On(service = \"messaging\")\nprivate void handleError(MessagingErrorEventContext context) {\n  // access the event context of the raised exception\n  context.getException().getEventContexts().stream().findFirst().ifPresent(expContext -> {\n    TopicMessageEventContext messageEventContext = expContext.as(TopicMessageEventContext.class);\n    String event = messageEventContext.getEvent();\n    String data = messageEventContext.getData();\n    // handle the message according to event and data\n    // ...\n  });\n  context.setResult(true); // finally acknowledge the message\n}\n```\n",
    "Java > Type Propagation\nselect, type propagation, Java, CQL, max, query API, type-safe\nPerforms a select query fetching the maximum (max) value of the 'created' timestamp from the Orders entity, with result type propagation. The resulting element 'mx' has Java type java.time.Instant.\n\n```java\nSelect.from(ORDERS).columns(o -> o.created().max().as(\"mx\"));\n```\n",
    "Multitenancy > Persistence of onboarding metadata\nmultitenancy, saas-provisioning, metadata, REST, HTTP, onboarding\nREST API to read persisted onboarding metadata for a specific tenant. Omitting the tenant id returns metadata for all tenants. Useful in SaaS multi-tenant CAP applications.\n\n```http\nGET /-/cds/saas-provisioning/tenant/<tenant id>\n```\n",
    " October 2022 > Localization Support in Extensions\nlocalization, extensions, i18n, properties, localized extensions, configuration\nThis snippet shows how to define i18n properties for localization support in CAP extensions, using the same approach as for standard CAP applications. Place i18n files such as 'i18n/i18n.properties' within your extension to provide localized text for UI labels or fields.\n\n```properties\nSalesRegion_name_col = Sales Region\nOrders_priority_col = Priority\n...\n```\n",
    " October 2022 > CDS Language & Compiler > Reusing Annotations\ncds modeling, aspects, annotations, reuse, authorization\nThis code demonstrates how to reuse annotation aspects for multiple entities. Here, an aspect 'RestrictToOwner' with a @restrict annotation is defined and then extended into multiple entities (Orders, Vendors). This streamlines enforcing instance-based authorization.\n\n```cds\n@restrict: [{ grant: ['READ', 'WRITE'], where: 'CreatedBy = $user' }]\naspect RestrictToOwner {};\n\nextend Orders with RestrictToOwner;\nextend Vendors with RestrictToOwner;\n```\n",
    " October 2022 > Node.js > Simplified Usage of Correlated Sub-Queries\nnode.js, fluent API, subqueries, cql, where exists, query building\nDemonstrates simplified construction of (not) exists subqueries using the CAP Node.js fluent API. The first two queries use shorthand for exists/not exists. The third shows correlated subquery syntax by assigning an alias and referencing it in the subquery.\n\n```js\nSELECT.from(Authors).where({exists:'books'})\nSELECT.from(Authors).where({'not exists':'books'})\nSELECT.from(Authors).alias('a').where({ exists:\n  SELECT.from(Books).where({author_ID:{ref:['a','ID']}})\n})\n```\n",
    " October 2022 > Node.js > Simplified Usage of Correlated Sub-Queries\nnode.js, fluent API, query building, alias, table alias\nShows how to set up a table alias when building queries using the CAP Node.js fluent query API. This is useful for complex queries, including correlated subqueries, and allows precise column reference.\n\n```js\nSELECT.from(Authors).alias(a)\n```\n",
    " October 2022 > Node.js > SAP-Specific EDMX Annotations Respected in Service Consumption\nnode.js, OData, EDMX, service consumption, data transformation, SAP-specific\nIllustrates inserting data into an OData service, where SAP-specific EDMX annotations (like sap:display-format='Date') are respected. Here, the date is automatically transformed to the EDM string format required by the remote system.\n\n```js\nservice.insert({ name: 'Edgar Allan Poe', birthdate: '1809-01-19' }).into(Authors)\n```\n",
    " October 2022 > Java > Important Changes ❗️\nJava, cds-maven-plugin, installation, configuration, cds.install-cdsdk.version, build\nConfiguring the cds-maven-plugin requires explicit specification of the 'cds.install-cdsdk.version' property as of this release. This snippet shows how to set the version in Maven's pom.xml. Omitting this property will cause the build to fail.\n\n```xml\n// In pom.xml\n<properties>\n  <cds.install-cdsdk.version>4.8.9</cds.install-cdsdk.version>\n</properties>\n```\n",
    " October 2022 > Java > H2 2.x as Default Database\nJava, database, H2, deployment, cds CLI, dry run\nRuns a dry deployment to an H2 2.x in-memory database using CAP's CLI. Now, the default for Java projects is H2 2.x, and using this dialect requires such a command, e.g., for schema preview or testing.\n\n```shell\ncds deploy --to h2 --dry\n```\n",
    " October 2022 > Java > Support for Download Repositories with Authentication\nJava, cds-maven-plugin, authentication, settings.xml, remote repository\nShows configuring Maven's settings.xml and the cds-maven-plugin to use a serverId for authenticated downloads of Node.js contributions from a private or protected remote repository.\n\n```xml\n// In pom.xml for Maven goal\n<configuration>\n  <serverId>custom-repo</serverId>\n</configuration>\n\n// In settings.xml\n<servers>\n  <server>\n    <id>custom-repo</id>\n    <username>my-user</username>\n    <password>my-password</password>\n  </server>\n</servers>\n```\n",
    " October 2022 > Java > Create CDS QL Statements from Results\nJava, CQL, entity ref, query building, insert result, update result\nDemonstrates how to obtain an entity reference from a result row after an insert or update using CAP Java's CQL classes. The reference is then used to build further queries, such as fetching the books of the author. Useful for chaining data manipulation and queries programmatically.\n\n```java\nCqnUpdate update = Update.entity(AUTHOR).data(\"name\", \"James Joyce\").byId(101);\nAuthor joyce = service.run(update).single(Author.class);\n\nCqnSelect q = Select.from(joyce.ref().books());\n```\n",
    " CDS Language & Compiler > Reuse Type sap.common.Locale\ncds modeling, domain model, sap.common.Locale, reuse type\nDefines a reusable type sap.common.Locale as a String of length 14 with an i18n title. Use this for locale fields in generated text entities, included in @sap/cds/common.\n\n```cds\ntype sap.common.Locale : String(14) @title : '{i18n>LanguageCode}';\n```\n",
    " CDS Language & Compiler > Extending Scalar Types\ncds modeling, extend, scalar types, customization\nDemonstrates how to use the 'extend' directive to increase the length property of reusable types such as Locale and User. Now also supports extending precision and scale for decimals.\n\n```cds\nusing { User, Locale } from '@sap/cds/common';\nextend Locale with (length:16);\nextend User with (length:200);\n```\n",
    " CDS Language & Compiler > New Integer Types\ncds modeling, built-in types, UInt8, Int16, type definition\nShows how to use new built-in integer types UInt8 and Int16 for defining custom types such as Rating and Stock. These types map to TINYINT/SMALLINT in SQL and Byte/Int16 in EDMX.\n\n```cds\ntype Rating : UInt8;\ntype Stock : Int16;\n```\n",
    " Node.js > Messaging via Redis <Beta />\nconfiguration, redis, messaging, package.json\nSample package.json configuration to enable Redis PubSub-based Messaging Service in a CAP Node.js app. Set kind to 'redis-messaging' to use Redis for asynchronous service communication.\n\n```json\n{\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": \"redis-messaging\"\n    }\n  }\n}\n```\n",
    " Node.js > Improved cds.log()\ncds log, winston, logging, node.js\nShows how to set up out-of-the-box winston-based logging using cds.log.Logger in a Node.js CAP app. All subsequent log output will use winston.\n\n```js\ncds.log.Logger = cds.log.winstonLogger()\n```\n",
    " Java > Native UPSERT\njava, upsert, bulk upsert, deep upsert\nJava code to perform a bulk upsert of two Books entities using the redesigned Upsert operation. Efficiently updates existing or inserts new rows, aligning with new upsert semantics.\n\n```java\nBooks b1 = Books.create(101);\nb1.setTitle(\"Odyssey\");\n\nBooks b2 = Books.create(103);\nb2.put(\"title\", \"Ulysses\");\n\nCqnUpsert upsert = Upsert.into(BOOKS).entries(asList(b1, b2));\n```\n",
    " Java > Native UPSERT\njava, deep upsert, order, order items\nJava code for deep upsert: upserts an Orders entity including an associated OrderItems entity. Useful for nested data upserts with new deep update semantics.\n\n```java\nOrders order = Orders.create(1000);\n\nOrderItems item = OrderItems.create(1);\nitem.setBookId(101);\nitem.setQuantity(2);\norder.setItems(asList(item));\n\nCqnUpsert upsert = Upsert.into(ORDERS).entry(order);\n```\n",
    " Java > Input Validation for Actions\nvalidation, cds modeling, actions, functions, input validation\nCDS model snippet showing parameter validation for actions and functions. Demonstrates @assert.format, @assert.range, not null, and @mandatory annotations on parameters now enforced for input validation.\n\n```cds\ntype Contact {\n    @assert.format: '^\\p{Lu}.*' name : String(30);\n    @assert.range: [1, 10] priority: Integer;\n    address: Address not null;\n}\naction addContact(contact: Contact not null);\nfunction hasContact(@mandatory name: String) returns Boolean;\n```\n",
    " Java > Local Support for Streamlined MTX\nconfiguration, yaml, mtx, sidecar, multitenancy\nYAML configuration to enable local development and testing of Streamlined MTX with mtx sidecar and SQLite DB. Sets sidecar URL and enables mtxs for local multitenancy.\n\n```yaml\ncds:\n  multi-tenancy:\n    mtxs:\n      enabled: true\n    sidecar:\n      url: http://localhost:4004\n```\n",
    " Java > Improvements for PostgreSQL\nshell, PostgreSQL, cds deploy, sql\nShell command using the new 'postgres' SQL dialect to generate PostgreSQL-specific DDL with CDS Compiler. Use --dry to preview the generated SQL without deploying.\n\n```shell\ncds deploy --to postgres --dry\n```\n",
    " Using PostgreSQL > Setup & Configuration\ninstallation, npm, Node.js, PostgreSQL, database, setup\nInstalls the @cap-js/postgres npm package to use PostgreSQL with CAP Node.js applications. This enables PostgreSQL as a production database for your CAP project.\n\n```shell\nnpm add @cap-js/postgres\n```\n",
    " Using PostgreSQL > Setup & Configuration > Auto-Wired Configuration\nCLI, cds CLI, configuration, verify, PostgreSQL, database\nInspects the effective database configuration in the CAP project for the production profile. Useful to verify that PostgreSQL is properly set up via cds-plugin auto-wiring.\n\n```shell\ncds env requires.db --for production\n```\n",
    " Using PostgreSQL > Setup & Configuration > Auto-Wired Configuration\nconfiguration, project setup, package.json, PostgreSQL, database\nSample output from 'cds env requires.db --for production' showing the CAP configuration for PostgreSQL as the production database implementation.\n\n```js\n{\n  impl: '@cap-js/postgres',\n  dialect: 'postgres',\n  kind: 'postgres'\n}\n```\n",
    " Using PostgreSQL > Provisioning a DB Instance > Using Docker\ndocker, database, local development, PostgreSQL\nDocker Compose snippet (pg.yml) for running a local PostgreSQL instance using the official postgres:alpine Docker image. Configures default password and ports.\n\n```yaml\nservices:\n  db:\n    image: postgres:alpine\n    environment: { POSTGRES_PASSWORD: postgres }\n    ports: [ '5432:5432' ]\n    restart: always\n```\n",
    " Using PostgreSQL > Provisioning a DB Instance > Using Docker\ndocker, shell, local development, PostgreSQL\nStarts the PostgreSQL Docker container in detached mode using the previously defined Docker Compose file.\n\n```shell\ndocker-compose -f pg.yml up -d\n```\n",
    " Using PostgreSQL > Setup & Configuration\njava, maven, dependencies, PostgreSQL, database\nMaven dependency required to enable CAP Java PostgreSQL support. Add this to your srv/pom.xml to use PostgreSQL as the CAP backend database.\n\n```xml\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-postgresql</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n",
    " Using PostgreSQL > Service Bindings > Configure Connection Data {.java}\nconfiguration, java, database, application.yaml, PostgreSQL\nSpring Boot datasource configuration snippet in application.yaml for connecting a CAP Java service to a locally running PostgreSQL instance (matching the Docker Compose set up).\n\n```yaml\nspring:\n  config.activate.on-profile: postgres-docker\n  datasource:\n    url: jdbc:postgresql://localhost:5432/postgres\n    username: postgres\n    password: postgres\n    driver-class-name: org.postgresql.Driver\n```\n",
    " Using PostgreSQL > Service Bindings > In Your Private `.cdsrc-private.json`\ncdsrc-private.json, configuration, PostgreSQL, database, cds CLI, service binding\nExample .cdsrc-private.json configuration for providing custom PostgreSQL service credentials for CAP tooling locally. Required if not using default credentials in Docker.\n\n```json\n{\n  \"requires\": {\n    \"db\": {\n      \"kind\": \"postgres\",\n      \"credentials\": {\n        \"host\": \"localhost\",\n        \"port\": 5432,\n        \"user\": \"postgres\",\n        \"password\": \"postgres\",\n        \"database\": \"postgres\"\n      }\n    }\n  }\n}\n```\n",
    " Using PostgreSQL > Service Bindings > In Your private `~/.cdsrc.json`\ncdsrc.json, configuration, local development, profiles, PostgreSQL, database, team\nSample ~/.cdsrc.json configuration for selectively enabling a [pg] profile that provides default PostgreSQL connection settings, typically matching local Docker environments. Used for team-based, local PostgreSQL setups.\n\n```json\n{\n  \"requires\": {\n    \"db\": {\n      \"[pg]\": {\n        \"kind\": \"postgres\",\n        \"credentials\": {\n          \"host\": \"localhost\", \"port\": 5432,\n          \"user\": \"postgres\",\n          \"password\": \"postgres\",\n          \"database\": \"postgres\"\n        }\n      }\n    }\n  }\n}\n```\n",
    " Using PostgreSQL > Service Bindings > In Project `.env` Files\n.env, configuration, PostgreSQL, database, local development, profiles, team\n.env file example for configuring PostgreSQL credentials under the [pg] profile. Useful for teams wanting to share base config via environment variables and files instead of JSON.\n\n```properties\ncds.requires.db.[pg].kind = postgres\ncds.requires.db.[pg].credentials.host = localhost\ncds.requires.db.[pg].credentials.port = 5432\ncds.requires.db.[pg].credentials.user = postgres\ncds.requires.db.[pg].credentials.password = postgres\ncds.requires.db.[pg].credentials.database = postgres\n```\n",
    " Using PostgreSQL > Deployment > Using `cds deploy`\ndeployment, CLI, cds CLI, PostgreSQL, database, profile\nDeploys the CAP model and initial data to the PostgreSQL database using the [pg] profile, which typically includes Docker-based or .env/.cdsrc configuration for local development.\n\n```shell\ncds deploy --profile pg\n```\n",
    " Using PostgreSQL > Deployment > Using `cds deploy`\ndeployment, CLI, cds CLI, PostgreSQL, database\nDeploys the database using default configuration specified in the project. For PostgreSQL, uses current active CAP database configuration.\n\n```shell\ncds deploy\n```\n",
    " Using PostgreSQL > Deployment > With a Deployer App\nbuild, deployment, cds CLI, deployer app, PostgreSQL\nBuilds the project for production, generating a deployer app for PostgreSQL databases with all model and data resources under gen/pg.\n\n```shell\ncds build --production\n```\n",
    " Using PostgreSQL > Deployment > With a Deployer App\npackage.json, configuration, npm, PostgreSQL, deployer app\nSample package.json generated for the PostgreSQL deployer app after running cds build --production. The \"start\" script runs cds-deploy to initialize the database.\n\n```json\n{\n  \"dependencies\": {\n    \"@sap/cds\": \"^9\",\n    \"@cap-js/postgres\": \"^2\"\n  },\n  \"scripts\": {\n    \"start\": \"cds-deploy\"\n  }\n}\n```\n",
    " Using PostgreSQL > Deployment > Add PostgreSQL Deployment Configuration\ninstallation, CLI, cds CLI, add, PostgreSQL, setup\nRuns the cds add postgres command to automate PostgreSQL integration. Adds @cap-js/postgres dependency and sets up deployment descriptors like mta.yaml for Cloud Foundry environments.\n\n```shell\ncds add postgres\n```\n",
    " Using PostgreSQL > Deployment Using Liquibase\ndeployment, Java, maven, CAP Java, Liquibase, database\nMaven dependency configuration to add Liquibase for managing schema migrations in CAP Java projects with PostgreSQL.\n\n```xml\n<dependency>\n    <groupId>org.liquibase</groupId>\n    <artifactId>liquibase-core</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n",
    " Using PostgreSQL > Deployment Using Liquibase > ① Initial Schema Version\nLiquibase, changelog, YAML, schema migration, Java, PostgreSQL\nSample Liquibase change log (db.changelog-master.yml) that references a DDL SQL script generated by CAP for PostgreSQL. Used for initializing/managing database schema changes.\n\n```yaml\ndatabaseChangeLog:\n   - changeSet:\n       id: 1\n       author: me\n       changes:\n       - sqlFile:\n           dbms: postgresql\n           path: db/changelog/v1/model.sql\n```\n",
    " Using PostgreSQL > Deployment Using Liquibase > ② Schema Evolution { schema-evolution-with-liquibase }\nLiquibase, changelog, YAML, schema migration, Java, PostgreSQL\nLiquibase change log example for two sequential schema versions, each referencing a model or delta SQL script generated by CAP deploy tooling. Supports evolving the schema incrementally.\n\n```yaml\ndatabaseChangeLog:\n   - changeSet:\n       id: 1\n       author: me\n       changes:\n       - sqlFile:\n           dbms: postgresql\n           path: db/changelog/v1/model.sql\n   - changeSet:\n       id: 2\n       author: me\n       changes:\n       - sqlFile:\n           dbms: postgresql\n           path: db/changelog/v2/model.sql\n```\n",
    " Using PostgreSQL > Automatic Schema Evolution > Dry-Run Offline\nCLI, dry run, cds CLI, PostgreSQL, schema migration, offline, delta\nCaptures the current state of the CDS model in a CSN file without affecting the database. Useful as a basis for subsequent delta comparisons for schema evolution.\n\n```shell\ncds deploy --dry --model-only --out cds-model.csn\n```\n",
    " Using PostgreSQL > Automatic Schema Evolution > Dry-Run Offline\nCLI, dry run, cds CLI, PostgreSQL, schema migration, offline, delta\nGenerates SQL delta statements to migrate from the old model (referenced via cds-model.csn) to the new one after model changes, without applying them. Facilitates previewing upcoming migrations.\n\n```shell\ncds deploy --dry --delta-from cds-model.csn --out delta.sql\n```\n",
    " Using PostgreSQL > Automatic Schema Evolution > Dry-Run Offline\nSQL, schema migration, CAP output, PostgreSQL, views, delta\nSample SQL delta script generated by CAP's cds deploy --dry command illustrating the ALTER TABLE and view recreation operations performed during schema evolution for PostgreSQL.\n\n```sql\n-- Drop Affected Views\nDROP VIEW localized_CatalogService_ListOfBooks;\nDROP VIEW localized_CatalogService_Books;\nDROP VIEW localized_AdminService_Books;\nDROP VIEW CatalogService_ListOfBooks;\nDROP VIEW localized_sap_capire_bookshop_Books;\nDROP VIEW CatalogService_Books_texts;\nDROP VIEW AdminService_Books_texts;\nDROP VIEW CatalogService_Books;\nDROP VIEW AdminService_Books;\n\n-- Alter Tables for New or Altered Columns\nALTER TABLE sap_capire_bookshop_Books ALTER title TYPE VARCHAR(222);\nALTER TABLE sap_capire_bookshop_Books_texts ALTER title TYPE VARCHAR(222);\nALTER TABLE sap_capire_bookshop_Books ADD foo_ID VARCHAR(36);\nALTER TABLE sap_capire_bookshop_Books ADD bar VARCHAR(255);\n\n-- Create New Tables\nCREATE TABLE sap_capire_bookshop_Foo (\n  ID VARCHAR(36) NOT NULL,\n  PRIMARY KEY(ID)\n);\n\n-- Re-Create Affected Views\nCREATE VIEW AdminService_Books AS SELECT ... FROM sap_capire_bookshop_Books AS Books_0;\nCREATE VIEW CatalogService_Books AS SELECT ... FROM sap_capire_bookshop_Books AS Books_0 LEFT JOIN sap_capire_bookshop_Authors AS author_1 O ... ;\nCREATE VIEW AdminService_Books_texts AS SELECT ... FROM sap_capire_bookshop_Books_texts AS texts_0;\nCREATE VIEW CatalogService_Books_texts AS SELECT ... FROM sap_capire_bookshop_Books_texts AS texts_0;\nCREATE VIEW localized_sap_capire_bookshop_Books AS SELECT ... FROM sap_capire_bookshop_Books AS L_0 LEFT JOIN sap_capire_bookshop_Books_texts AS localized_1 ON localized_1.ID = L_0.ID AND localized_1.locale = session_context( '$user.locale' );\nCREATE VIEW CatalogService_ListOfBooks AS SELECT ... FROM CatalogService_Books AS Books_0;\nCREATE VIEW localized_AdminService_Books AS SELECT ... FROM localized_sap_capire_bookshop_Books AS Books_0;\nCREATE VIEW localized_CatalogService_Books AS SELECT ... FROM localized_sap_capire_bookshop_Books AS Books_0 LEFT JOIN localized_sap_capire_bookshop_Authors AS author_1 O ... ;\nCREATE VIEW localized_CatalogService_ListOfBooks AS SELECT ... FROM localized_CatalogService_Books AS Books_0;\n```\n",
    " Using PostgreSQL > Automatic Schema Evolution > Generate Scripts\nCLI, schema migration, generate script, cds CLI, PostgreSQL\nGenerates a SQL script (delta_script.sql) from the delta between an old and current model. Intended for manual execution, it may include potentially lossy statements not allowed in automatic migrations.\n\n```shell\ncds deploy --script --delta-from cds-model.csn --out delta_script.sql\n```\n",
    " Using PostgreSQL > Automatic Schema Evolution > Generate Scripts\nSQL, schema migration, lossy migration, PostgreSQL, CAP output\nExample of potentially lossy changes flagged in generated SQL by CAP cds deploy --script; dropping columns or reducing column size.\n\n```sql\n-- [WARNING] this statement is lossy\nALTER TABLE sap_capire_bookshop_Books DROP price;\n\n-- [WARNING] this statement could be lossy: length reduction of element \"title\"\nALTER TABLE sap_capire_bookshop_Books ALTER title TYPE VARCHAR(11);\n```\n",
    " Using PostgreSQL > Migration { .node } > `cds deploy --model-only`\nmigration, cds CLI, PostgreSQL, schema evolution\nInitializes the cds_model table and records the current model state, which is required for enabling schema evolution with newer CAP/PostgreSQL and for migrating from cds-pg.\n\n```shell\ncds deploy --model-only\n```\n",
    " CAP on Kyma/K8s > Configure Resources for Content Deployment Jobs > Add Environment Variables for Content Deployment Jobs\nhelm, yaml, html5 apps deployer, environment, configuration, deployment, add environment variable, content deployment job\nThis YAML snippet shows how to add an environment variable DEBUG with the value '*' to the html5 apps deployer job in the Helm chart, customizing container environment for deployment jobs on Kyma/K8s using CAP Helm charts.\n\n```yaml\nhtml5_apps_deployer:\n  env:\n    DEBUG: '*'\n```\n",
    " CDS Language & Compiler > SAP HANA Regex Functions\ncds, HANA, native database functions, SAP HANA Regex, substring_regexpr, SQL function, compilation\nThis CDS entity definition demonstrates the usage of the SAP HANA regex function 'substring_regexpr' directly within CDS projections. It enables regex-based substring extraction on HANA databases within CDS SQL views.\n\n```cds\nentity Foo as select from Bar {\n  /* ... */\n  substring_regexpr(pattern in name from 5) as sub\n};\n```\n",
    " CDS Language & Compiler > Actions and Functions in Aspects\naspects, actions, functions, cds modeling, service definition\nThis CDS aspect defines a set of bound actions and a function. The pattern allows custom business logic (e.g., 'rejectTravel', 'acceptTravel', 'isValid') to be reused by entities or services via extension.\n\n```cds\naspect TravelActions { }\n  actions {\n    action rejectTravel();\n    action acceptTravel();\n    function isValid() returns Boolean;\n  }\n```\n",
    " CDS Language & Compiler > Actions and Functions in Aspects\naspects, extend, service definition, cds modeling, actions\nThis code extends an entity in a CDS service with actions/functions defined in an aspect, showing how to reuse business actions like 'rejectTravel' and 'acceptTravel' in multiple services or entities.\n\n```cds\nservice TravelService {\n  entity Travel as projection on my.Travel;\n  extend Travel with TravelActions;\n}\n```\n",
    " Java SDK > Error Response Handler\nJava, Spring Boot, security, Event Handler, error handling, OData, ERROR_RESPONSE, ApplicationLifecycleService\nA sample Java Spring component registering an event handler for overriding error messages on authorization errors. It listens for the ERROR_RESPONSE event (e.g., from OData adapters) and customizes the returned message, enabling finer control over CAP Java error handling response.\n\n```java\n@Component\n@ServiceName(ApplicationLifecycleService.DEFAULT_NAME)\npublic class SimpleExceptionHandler implements EventHandler {\n\n  @After\n  public void overrideMissingAuthMessage(ErrorResponseEventContext context) {\n    if (context.getException().getErrorStatus().equals(CdsErrorStatuses.EVENT_FORBIDDEN)) {\n        context.getResult().getMessages().set(0,\n            Message.create(Severity.ERROR, \"You cannot execute this action\"));\n    }\n  }\n}\n```\n",
    " Java SDK > Messaging via Redis PubSub <Beta />\nJava, Redis, messaging, PubSub, dependency, pom.xml\nA Maven dependency snippet to include the CAP Redis PubSub messaging feature in a Java project. This enables Redis-backed asynchronous messaging support for microservices using CAP Java.\n\n```xml\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-redis</artifactId>\n</dependency>\n```\n",
    " Java SDK > Messaging via Redis PubSub <Beta />\nJava, Redis, messaging, application.yaml, service configuration\nConfigures a named Redis PubSub messaging service under the 'cds.messaging.services' section in application.yaml, allowing CAP Java to leverage Redis for message-based microservices communication.\n\n```yaml\ncds:\n  messaging.services:\n    my-redis-service:\n      kind: redis-pubsub\n```\n",
    " Java SDK > Character-based Media Streams\ncds, media, LargeString, entity, content, media type, Java handler\nDefines a Books entity with a 'content' property of type LargeString annotated as a plain text media type. Read/write to this column as a character-based stream in CAP Java handlers (e.g., via java.io.Reader).\n\n```cds\nentity Books : cuid {\n  title   : String;\n  content : LargeString @Core.MediaType: 'text/plain';\n}\n```\n",
    " Java SDK > Miscellaneous\nJava, data accessor, entity, single key, create, generated interface\nDemonstrates the use of a generated 'create' method on entity accessor interfaces for entities with a single key. This pattern instantiates typed data structures from key values directly in CAP Java applications.\n\n```java\nBooks book = Books.create(201);\nInteger bookId = book.getId(); // 201\n```\n",
    " Node.js Runtime > Important Changes\nNode.js, cds.ql, query API, sqlite_master, database reflection, CDS, SELECT, read\nDemonstrates querying a database table (sqlite_master) not present in a CDS model using the cds.ql and cds.read APIs. Useful for dynamic/ad-hoc inspection or administration tasks in Node.js CAP projects.\n\n```js\nawait SELECT.from('sqlite_master')\nawait cds.read('sqlite_master')\n```\n",
    " Node.js Runtime > Important Changes\nNode.js, cds.ql, qualified name, SELECT, cds.read, entity access\nShows proper model entity querying in CAP Node.js using the fully qualified CDS entity name as string for data access. Avoids fragile and deprecated unqualified entity name usage.\n\n```js\nconst Books = 'sap.capire.bookshop.Books'\nawait SELECT.from(Books)\nawait cds.read(Books)\n```\n",
    " Node.js Runtime > Important Changes\nNode.js, cds.ql, entity reflection, cds.entities, SELECT, cds.read, bookshop\nDemonstrates querying entities by name via cds.entities reflection in CAP Node.js, promoting reliable, refactor-safe code for data operations using entity symbols instead of strings.\n\n```js\nconst {Books} = cds.entities ('sap.capire.bookshop')\nawait SELECT.from(Books)\nawait cds.read(Books)\n```\n",
    " Node.js Runtime > Improved Consumption of Remote OData V2 Services\nNode.js, OData V2, CQN, search, remote consumption\nA CQN query object with a 'search' property, demonstrating how CAP Node.js converts a search expression into a SAP custom query option compatible with remote OData V2 endpoints.\n\n```json\n{\n  SELECT: {\n    from: [{ ref: ['Books'] }],\n    search: [{ val: 'wut' }]\n  }\n}\n```\n",
    " June 2022 > Database-Level Constraints & `@assert.target` > Input Validation for Associations — `@assert.target`\ninput validation, associations, cds modeling, assert target\nDemonstrates the use of the @assert.target annotation on a managed to-one association in a CDS entity. This enforces input validation to ensure the target exists, producing user-friendly validation errors when the referenced entity is missing. This replaces relying solely on DB- or service-level referential integrity errors.\n\n```cds\nentity Books {\n  ...\n  author : Association to Authors @assert.target;\n}\n```\n",
    " June 2022 > Improved Read After Write\nread after write, service implementation, event handler, after handler, response adjustment\nShows how to use an after READ handler in CAP to adjust an entity's response, e.g., dynamically add a discount label based on stock after a read. With recent changes, it's sufficient to implement READ handlers for post-write adjustment as well, as the framework now triggers READ after CREATE/UPDATE events.\n\n```js\n// Apply a discount for over-stocked books\nthis.after ('READ','Books', each  => {\n  if (each.stock > 111) each.title += ' -- 20% off'\n})\n```\n",
    " June 2022 > Improved Read After Write > Formerly\nservice implementation, event handler, after handler, on handler, response adjustment, deprecated pattern\nIllustrates the former approach for adjusting or post-processing write operation results for Books entities. Previously, it was necessary to add CREATE/UPDATE handlers to augment the response, but this pattern is now obsolete as the new read-after-write mechanism handles this automatically via READ handlers.\n\n```js\n// We additionally have to do that for responses after write\nthis.on (['CREATE','UPDATE'], 'Books', async (_, next) => {\n  const book = await next()\n  // Results of write operations might be minimized\n  if (!book.stock) {\n    let {stock} = await SELECT `stock` .from (Books,book.ID)\n    book.stock = stock\n  }\n  if (book.stock > 111) book.title += ' -- 20% off'\n  return book\n})\n```\n",
    " June 2022 > Experimental Support for ECMAScript Modules (ESM)\nexperimental, ESM, ECMAScript modules, Node.js, module conversion, JavaScript\nShows how to write custom CAP handler code as an ECMAScript module (ESM). This replaces the older require/module.exports approach, enabling the use of ES module syntax in CAP Node.js projects (experimental feature).\n\n```js\nimport cds from '@sap/cds'\nexport default function() { ... }\n```\n",
    " June 2022 > Experimental Support for ECMAScript Modules (ESM) > Enabling ESM support\nexperimental, ESM, ECMAScript modules, Node.js, package.json, configuration\nEnabling ESM support in CAP Node.js by adding \"type\": \"module\" in your package.json. This activates ES module loading and async dynamic imports for project JavaScript files.\n\n```jsonc\n{\n  ...\n  \"type\": \"module\",\n  ...\n}\n```\n",
    " June 2022 > Import OpenAPI\nimport, OpenAPI, csn, CLI, cds CLI\nImports an OpenAPI specification file into a CAP CSN model using the cds import CLI command. All OpenAPI operations are translated into actions/functions at the service level in the CSN.\n\n```shell\ncds import ~/Downloads/OpenAPI_sample.json\n```\n",
    " June 2022 > Shared Locks\npessimistic locking, Java, shared lock, CQL, Select.lock\nAcquires a shared lock on a Books entity row (ID 17) using the CAP Java CQL API. Shared locks prevent concurrent data modifications while allowing concurrent reads.\n\n```java\nimport static com.sap.cds.ql.cqn.CqnLock.Mode.SHARED;\nSelect.from(\"bookshop.Books\").byId(17).lock(SHARED);\n```\n",
    " June 2022 > Shared Locks\npessimistic locking, Node.js, shared lock, cds.ql, forShareLock\nObtains a shared lock on a Books row (ID 17) in a CAP Node.js application using forShareLock. This prevents concurrent writers but not readers.\n\n```js\nSELECT.from(Books,17).forShareLock()\n```\n",
    " June 2022 > Java > Feature Toggles Configuration for Mock Users > Configuration per User\nfeature toggles, Java, mock users, test configuration, YAML\nSample YAML configuration for assigning feature toggles to mock users in a CAP Java project. Users Bob and Alice have features enabled per user, aiding testing of feature toggling logic.\n\n```yaml\ncds:\n  security:\n    mock:\n      users:\n        - name: Bob\n          tenant: CrazyCars\n          features:\n            - wobble\n        - name: Alice\n          tenant: SmartCars\n          features:\n            - cruise\n            - parking\n```\n",
    " June 2022 > Java > Feature Toggles Configuration for Mock Users > Configuration per Tenant\nfeature toggles, Java, mock tenants, test configuration, YAML\nYAML configuration for setting up feature toggles at the mock tenant level for CAP Java. Features are assigned per tenant instead of per user. Useful in testing scenarios with multi-user and multi-tenant feature variations.\n\n```yaml\ncds:\n  security:\n    mock:\n      users:\n        - name: Bob\n          tenant: CrazyCars\n        - name: Alice\n          tenant: SmartCars\n      tenants:\n        - name CrazyCars\n          features:\n            - wobble\n        - name: SmartCars\n          features:\n            - cruise\n            - parking\n```\n",
    " June 2022 > CDS Language & Compiler > Define Association in a Projection\nprojection, association, cds modeling, define association in projection\nDemonstrates defining an unmanaged association directly within the select list of a view or projection. The association becomes part of the projection's signature.\n\n```cds\nentity BookReviews as projection on Reviews {\n  ...,\n  subject as bookID,\n  book : Association to Books on book.ID = bookID\n};\n```\n",
    " June 2022 > CDS Language & Compiler > Define Association in a Projection\nprojection, association, cds modeling, view extension, extend\nShows how to extend an existing view or projection by adding new unmanaged associations or columns, specifically adding an association to Books.\n\n```cds\nextend BookReviews with columns {\n  subject as bookID,\n  book : Association to Books on book.ID = bookID\n};\n```\n",
    " June 2022 > CDS Language & Compiler > Annotating OData Annotations\nodata annotation, cds modeling, UI.LineItem, nested annotation\nDemonstrates how to add a nested OData annotation to a scalar or array valued annotation using dot notation. This approach is simpler than previous $value wrapping, which is now deprecated.\n\n```cds\n@UI.LineItem: [\n    {Value: ApplicationName},\n    {Value: Description}\n]\n@UI.LineItem.@UI.Criticality: #Positive\n```\n",
    " June 2022 > CDS Language & Compiler > Annotating OData Annotations\nodata annotation, EDMX, annotation export, UI.Criticality\nShows the resulting EDMX XML output for a CDS OData annotation with a nested annotation. Useful for verification of annotation propagation in OData services.\n\n```xml\n<Annotation Term=\"UI.LineItem\">\n  <Collection>...</Collection>\n  <Annotation Term=\"UI.Criticality\" EnumMember=\"UI.CriticalityType/Positive\"/>\n</Annotation>\n```\n",
    " June 2022 > CDS Language & Compiler > Arguments for Simple Custom Types\ncustom type, cds modeling, arguments, type argument\nShows how to create and use a custom type with arguments in CDS. Here, NumericString is defined as a custom type and instantiated with a length argument for zipCode.\n\n```cds\ntype NumericString : String;\n\nentity Address {\n  ...,\n  zipCode : NumericString(5);\n}\n```\n",
    " June 2022 > CDS Language & Compiler > Overriding OData Type Mapping\noverride OData type mapping, cds modeling, annotation, EDM type\nDemonstrates overriding the default OData EDM type mapping for a specific entity property in CDS using the @odata.Type annotation.\n\n```cds\nentity Foo {\n  ...,\n  @odata: { Type: 'Edm.GeometryPolygon', SRID: 0 }\n  geoCollection : LargeBinary;\n};\n```\n",
    " June 2022 > Node.js > Added `<Entity>.data(...)` (experimental)\nservice implementation, event handler, after handler, canonical data access, cds.linked, Books.data\nShows how to access association fields in canonical (structured) shape using Books.data(), which wraps raw data as per the CDS model. Useful for handlers processing flattened entity data from Fiori or the database, letting you work with nested objects instead of flattened IDs.\n\n```js\nlet { Books } = this.entities\nthis.on ('UPDATE','Books', req => {\n  let {author} = Books.data(req.data) //> author = {ID:111}\n  // ...\n})\nthis.after ('READ','Books', each => {\n  let {author} = Books.data(each) //> author = {ID:111}\n  // ...\n})\n```\n",
    " June 2022 > Node.js > Added `cds.context.http`\nexpress, http context, cds.context.http, Node.js, request/response\nDemonstrates how to access the original Express.js request/response objects from anywhere in a CAP Node.js implementation, via cds.context.http. This replaces using less stable alternatives like req._.req.\n\n```js\nconst { req, res } = cds.context.http\nif (!req.headers.authentication)\n  return res.status(403).send('Please login')\n```\n",
    " June 2022 > Node.js > Improved `cds.tx()`\ntransaction, cds.tx, Node.js, function block, transaction context\nExample of encapsulating multiple DB operations inside a cds.tx function block. Ensures all included operations run within the same transaction context automatically—this is the recommended and now improved pattern.\n\n```js\ncds.tx (async ()=>{\n  // following are expected to run within the same transaction\n  await INSERT.into (Authors). entries ({...})\n  await INSERT.into (Books). entries ({...})\n})\n```\n",
    " June 2022 > Node.js > Improved `cds.tx()`\ntransaction, cds.tx, Node.js, legacy pattern\nPrevious workaround for ensuring all DB operations ran in the correct transaction context by manually setting cds.context inside a cds.tx block. No longer required with improved transaction handling.\n\n```js\ncds.tx (tx => {\n  cds.context = tx // ensure all subsequent cds.db calls are in this tx\n  await INSERT.into (Authors). entries ({...})\n  await INSERT.into (Books). entries ({...})\n})\n```\n",
    " June 2022 > Node.js > Improved `cds.tx()`\ntransaction, cds.tx, Node.js, legacy pattern\nFormer workaround for scoping operations under the transaction, using tx.run explicitly for each DB call. Now superseded by the improved cds.tx() global context approach.\n\n```js\ncds.tx (tx => {\n  await tx.run( INSERT.into (Authors). entries ({...}) )\n  await tx.run( INSERT.into (Books). entries ({...}) )\n})\n```\n",
    " March 2022 > Database Integrity Constraints\ncds modeling, association, database constraint, referential integrity, db/schema.cds\nDefines a managed to-one association in CDS that triggers generation of a native database referential integrity constraint. Example for auto-generation of a FOREIGN KEY constraint.\n\n```cds\nentity Books {\n  ...\n  author : Association to Authors;\n}\nentity Authors {\n  key ID : Integer;\n  ...\n}\n```\n",
    " March 2022 > Database Integrity Constraints\nSQL, database constraint, referential integrity, compilation, to sql\nGenerated SQL constraint for a CDS managed association, showing enforced referential integrity via foreign keys on SQL backends such as HANA and SQLite.\n\n```sql\nCONSTRAINT Books_author ON Books\n  FOREIGN KEY(author_ID) REFERENCES Authors(ID)\n  ON UPDATE RESTRICT\n  ON DELETE RESTRICT\n  VALIDATED\n  ENFORCED\n  INITIALLY DEFERRED\n```\n",
    " March 2022 > Database Integrity Constraints\nconfiguration, environment, assert_integrity, db, defaults\nConfiguration options to control database referential integrity constraints. Can be set to enable database-level, application-level, or no integrity checks.\n\n```js\ncds.env.features.assert_integrity = 'db' // db-constraints\ncds.env.features.assert_integrity = 'app' // runtime checks (default)\ncds.env.features.assert_integrity = false // no checks\n```\n",
    " March 2022 > Native Database Clauses\nannotation, cds modeling, native database clause, sql.append, sql.prepend, hana, sqlite\nDemonstrates use of @sql.append to inject native SQL clauses into CDS DDL output, enabling use of advanced or vendor-specific database features.\n\n```cds\n@sql.append: ```sql\n             GROUP TYPE foo\n             GROUP SUBTYPE bar\n             ```\nentity E {\n  ...,\n  @sql.append: 'FUZZY SEARCH INDEX ON'\n  text: String(100);\n}\n```\n",
    " March 2022 > Native Database Clauses\nSQL, native database clause, compilation, resulting SQL, hana\nSQL DDL generated from a CDS model using @sql.append annotation, adding custom clauses at column and table level for advanced HANA features.\n\n```sql\ncreate table E (\n  ...,\n  text nvarchar(100) FUZZY SEARCH INDEX ON\n) GROUP TYPE foo\nGROUP SUBTYPE bar\n```\n",
    " March 2022 > Native HANA Functions with non-standard syntax\nSQL, hana, native function\nExample of invoking a native SAP HANA aggregate function using a non-standard syntax with an ORDER BY clause in the argument list.\n\n```sql\nfirst_value(name order by price desc)\n```\n",
    " March 2022 > CDS Language > Simplified Syntax for Extending or Annotating Elements\ncds modeling, annotation, extend, annotate, syntax\nSimplified syntax to directly annotate or extend nested elements within a CDS entity, reducing boilerplate when customizing models.\n\n```cds\nannotate Foo:nestedStructField.existingField with @title:'Nested Field';\nextend Foo:nestedStructField with { newField : String; }\n```\n",
    " March 2022 > CDS Language > Default in Type Definitions\ncds modeling, type definition, default, annotation\nDefines a custom scalar type with a default value using the extended CDS type definition syntax.\n\n```cds\ntype CreatedAt : Timestamp default $now;\n```\n",
    " March 2022 > Node.js SDK > Important Changes\nNode.js, service API, OData, response structure, keys\nNode.js service query now fetches only requested columns (e.g., 'title'). Keys are no longer automatically included in results by default.\n\n```js\nlet { CatalogService } = cds.services\nlet books = await CatalogService.read('title').from('Books')\n// books = [{ title:'Wuthering Heights' }, ...]\n```\n",
    " March 2022 > Node.js SDK > Driver-Agnostic Results for Stored Procedures\nNode.js, SAP HANA, procedure call, driver-agnostic, stored procedure\nExample of calling SAP HANA stored procedures from Node.js SDK using driver-agnostic syntax, including retrieval of table and primitive output parameters.\n\n```js\nawait cds.run(' CALL PROC(P1 => ?,P2 => ?,P3 => ?)', 42)\n// returns:\n{\n  P1: [...],\n  P2: 4711\n}\n```\n",
    " March 2022 > Java SDK > Relaxed Deep Insert/Update\nJava, service implementation, deep insert, deep update, association\nIllustrates relaxed deep insert/update in CAP Java: only the association is updated if not set as cascading, not the referenced entity (Book).\n\n```java\nMap<String, Object> order = Map.of(\"book\",\n    Map.of(\"id\", 17, \"title\", \"Capricorn\"));\nCqnInsert insert = Insert.into(\"Orders\").entry(order);\ndb.run(insert);\n```\n",
    " March 2022 > Java SDK > Collectors for AND and OR\nJava, query API, collectors, predicate, CQL.withAnd, CQL.withOr\nShows collecting CQN predicates with OR using new CQL.withOr() for advanced filter expressions in CAP Java.\n\n```java\nList<Map<String, Object>> values = ...\nStream<CqnPredicate> predicates = values.stream().map(CQL.matching);\nCqnPredicate filter = predicates.collect(CQL.withOr());\n```\n",
    " March 2022 > Java SDK > Additional Values for Managed Data\ncds modeling, annotation, managed data, insert, update, UUID\nSets up managed fields to auto-generate UUID values on insert for Orders entity. Demonstrates both annotation and type property methods.\n\n```cds\nentity Orders {\n  @cds.on.insert : '$uuid'\n  id : String;\n}\n\nentity Orders {\n  @odata.Type : 'Edm.String'\n  id : UUID;\n}\n```\n",
    " March 2022 > Java SDK > Security & Compliance > Default Mock Users to Ease Testing\nJava, security, mock users, testing, pseudo roles, Spring\nDemonstrates using default mock users for authorization in CAP Java tests with Spring's @WithMockUser, enabling easier permission checks in testing scenarios.\n\n```java\n@WithMockUser(\"authenticated\")\n// ...\n```\n",
    " March 2022 > Java SDK > Security & Compliance > Improved Propagation of Authentication Information\nJava, authentication, JWT, AuthenticationInfo, RequestContext, Spring\nShows how to access and cast the AuthenticationInfo object (e.g., to get a JWT token) in CAP Java via Spring dependency injection.\n\n```java\n@Autowired AuthenticationInfo authInfo;\n...\nJwtTokenAuthenticationInfo jwtTokenInfo = authInfo.as(JwtTokenAuthenticationInfo.class);\nString jwtToken = jwtTokenInfo.getToken();\n```\n",
    " March 2022 > Improved `cds add <facets>`\ncds CLI, project setup, configuration, application setup, facets, deployment\nShows using the enhanced cds add command to set up common CAP project application facets, such as authentication, SaaS, logging, and multi-environment deployment configurations.\n\n```shell\ncds add xsuaa\ncds add mtx\ncds add approuter\ncds add kibana-logging\ncds add mta\ncds add mtx --for production\n```\n",
    " February 2022 > Multiline String Literals\ncds modeling, multiline string, annotation, escape sequences\nDemonstrates use of multiline string literals in CDS annotations, including single and triple backtick variants. Supports escape sequences and indentation stripping. Used for storing long text or XML payloads directly in the model.\n\n```cds\nannotate Customer with @Cache.UpdateHandler:\n{\n  XMLHttpRequest : `PUT /patients`,\n  XMLRequestBody : ```xml\n                    <patient id=\"\\${entity.PatientID}\">\n                        <name>\\${entity.Name}</name>\n                        <state>\\u{1f197}</state>\n                        <address>\\${entity.Address}</address>\n                        <dateOfBirth>\\${entity.DOB}</dateOfBirth>\n                    <patient>\n                   ```\n}\n```\n",
    " February 2022 > Native Database Clauses <Beta />\nconfiguration, cdsrc.json, beta, sql snippet, native database clause\nConfigures the CDS compiler to enable native database clauses using SQL snippets in DDL statements via .cdsrc.json. Required to activate support for @sql.prepend and @sql.append.\n\n```json\n\"cdsc\": {\n  \"beta\": { \"sqlSnippets\": true }\n}\n```\n",
    " February 2022 > Native Database Clauses <Beta />\ncds modeling, annotation, sql.append, native database clause\nCDS model showing usage of @sql.append annotation to inject arbitrary native SQL clauses into the generated DDL for advanced database features. Useful where CDS lacks built-in support.\n\n```cds\n@sql.append: ```sql\n             GROUP TYPE foo\n             GROUP SUBTYPE bar\n             ```\nentity E {\n  ...,\n  @sql.append: 'FUZZY SEARCH INDEX ON'\n  text: String(100);\n}\n```\n",
    " February 2022 > Native Database Clauses <Beta />\nsql, native database clause, sql.append\nResulting SQL DDL after @sql.append usage in a CDS model, demonstrating the actual native clauses appended to the CREATE TABLE statement.\n\n```sql\ncreate table E (\n  ...,\n  text nvarchar(100) FUZZY SEARCH INDEX ON\n) GROUP TYPE foo\nGROUP SUBTYPE bar\n```\n",
    " February 2022 > Extend Array-Like Annotation Values - Insert\ncds modeling, annotation, array annotation, extend, UI.LineItem\nDemonstrates the new syntax for extending array-like annotation values (@UI.LineItem) by inserting items after specific entries using ... up to in CDS.\n\n```cds\nannotate TravelService.Travel with @UI.LineItem: [\n  ... up to { Value : BeginDate },\n  { Value : BeginWeekday },  // inserted after BeginDate\n  ... up to { Value : EndDate },\n  { Value : EndWeekday },    // inserted after EndDate\n  ...                        // remaining array values\n];\n```\n",
    " February 2022 > Node.js Runtime > Important Changes ❗️ > New Hook `req.before('commit')`\nJavaScript, event handler, req.before('commit'), Node.js, hook, validation, custom logic\nShows how to use the new req.before('commit') hook in a CDS Node.js handler. Enables you to add business validation prior to committing the transaction, and veto (fail) the commit if the check fails.\n\n```js\nsrv.before('CREATE', Order, function(req) {\n  req.before('commit', async function() {\n    const { creditscore } = await SELECT.one.from(Customers)\n      .where({ ID: req.data.customer_ID })\n    if (creditscore < 42) throw new Error(\"We shouldn't make this sale\")\n  })\n})\n```\n",
    " February 2022 > Java SDK > Synchronous In-Memory Messaging to Ease Testing\nyaml, configuration, Java, local testing, MessagingService, in-memory messaging\nConfigures the CAP Java SDK to use the in-memory MessagingService for local testing purposes by specifying kind: local-messaging. Useful for synchronous event listening in tests.\n\n```yaml\ncds:\n  messaging.services:\n  - name: \"messaging\"\n    kind: \"local-messaging\"\n```\n",
    " February 2022 > Java SDK > ORDER BY ... NULLS FIRST | LAST\njava, order by, sorting, nulls first/last, Select, Java SDK\nCAP Java SDK sample for sorting a query result with NULL values appearing last (live authors at the end) using ascNullsLast().\n\n```java\nSelect.from(AUTHOR).orderyBy(a -> a.yearOfDeath().ascNullsLast());\n```\n",
    " All of 2021\nVue.js, component, index, records, format, JSON\nThis Vue.js component instantiates an IndexList and passes a pages property to it. Commonly used to render a list or index of records based on JSON-formatted data in the 'pages' variable. Helps format and display lists in a standardized way in CAP/Cap≽ire documentation sites.\n\n```vue\n<IndexList :pages='pages' />\n```\n",
    " December 2021 > Exists Predicates in CQL\nCQL, exists predicate, path expressions\nDemonstrates the use of an 'exists' predicate in CQL with a path expression. Selects authors who have at least one page in any of their books with a wordcount greater than 1000.\n\n```sql\nSELECT FROM Authors WHERE exists books.pages[wordcount > 1000]\n```\n",
    " December 2021 > Exists Predicates in CQL\nCQL, exists predicate, nested exists\nShows a nested 'exists' predicate in CQL, which is equivalent to a single path-based exists predicate. Useful for expressing complex relationships involving multiple associations.\n\n```sql\nSELECT FROM Authors WHERE exists books [\n  where exists pages [\n    where wordcount > 1000\n  ]\n]\n```\n",
    " December 2021 > Exists Predicates in CQL > Support in CDS Compiler\nCDS compiler, exists predicate, SQL translation\nSQL generated by the CDS compiler from a CQL 'exists' predicate with paths. Illustrates how nested subselects capture the semantics of the original CQL.\n\n```sql\nSELECT FROM sap_capire_bookshop_Authors a\nWHERE EXISTS (\n  SELECT 1 from sap_capire_bookshop_Books b\n  WHERE b.author_ID = a.ID and EXISTS (\n    SELECT 1 from sap_capire_bookshop_BookPages p\n    WHERE p.book_ID = b.ID\n  )\n)\n```\n",
    " December 2021 > Exists Predicates in CQL > Instance-based Authorization\ninstance-based authorization, exists predicate, restrict annotation\nDefines instance-based authorization using an 'exists' predicate in a restrict annotation. Grants READ access to projects only to users who are team members with the 'Editor' role.\n\n```cds\n@restrict: [{ grant: 'READ',\n  where: 'exists teams.members [userId = $user and role = `Editor`]' \n}]\nentity Projects {\n  // ...\n  teams : Association to many Teams;\n}\n\n```\n",
    " December 2021 > Database Constraints <Beta />\ndatabase constraint, managed association, composition\nDefines a managed to-one association 'author' from Books to Authors, which is used by CDS to generate a database-level foreign key constraint.\n\n```cds\nentity Books {\n  ...\n  author : Association to Authors;\n}\nentity Authors {\n  key ID : Integer;\n  ...\n}\n\n```\n",
    " December 2021 > Database Constraints <Beta />\ndatabase constraint, SQL, foreign key\nGenerated SQL for a foreign key constraint from Books.author_ID to Authors.ID, representing integrity enforcement for managed associations in the database.\n\n```sql\nCONSTRAINT Books_author ON Books\n  FOREIGN KEY(author_ID) REFERENCES Authors(ID)\n  ON UPDATE RESTRICT\n  ON DELETE RESTRICT\n  VALIDATED\n  ENFORCED\n  INITIALLY DEFERRED\n```\n",
    " December 2021 > SQL Window Functions\nSQL window function, CQL\nCQL syntax supporting SQL window functions, such as sum over partitions. The statement selects data with a computed window aggregate column 's'.\n\n```sql\nselect from Foo {\n  ...,\n  sum(x) over (partition by a order by b\n                 rows between unbounded preceding and current row) as s\n}\n```\n",
    " December 2021 > Node.js Runtime > Important Changes ❗️\nNode.js, DatabaseService, debug log, log sanitization\nDeactivates value sanitization in debug logs for cds.DatabaseService and cds.RemoteService in production environments.\n\n```js\ncds.env.log.sanitize_values = false\n```\n",
    " December 2021 > Java SDK > Configure DB Connection Properties in MT Scenario\nconfiguration, multi-tenancy, database pool, Hikari, application.yaml, Java\nShows how to configure additional Hikari connection pool properties (such as packetSize) for multitenant database bindings in CAP Java, via application.yaml.\n\n```yaml\ncds:\n  datasource:\n    <binding-name>:\n      hikari:\n        data-source-properties:\n          packetSize: 300000\n```\n",
    " December 2021 > Java SDK > CSV Import of Array-Typed Elements\ntest data, CSV import, array, Java, initial data, db/data\nCDS entity definition with an array of structured records, to illustrate how to import array-typed data via CSV.\n\n```cds\nentity Samples : cuid {\n    records : array of {\n        index: Integer;\n        flag: Boolean\n    }\n}\n```\n",
    " December 2021 > Java SDK > CSV Import of Array-Typed Elements\ntest data, CSV import, array, Java, db/data\nCSV row for importing array-typed elements, with the array serialized as a JSON array string for the 'records' field. Used for initial test data import in db/data.\n\n```csv\nID;records\n08[...]15;[{\"index\": 1, \"flag\": true}, {\"index\": 2, \"flag\": false}]\n```\n",
    " December 2021 > Java SDK > CQL Runtime > Aliased Expands\nJava, CQL, expand, alias\nJava code sample using CQL Select API to alias an expand of a managed association (author as 'writer'), and accessing nested properties via path.\n\n```java\nCqnSelect select = Select.from(BOOKS).columns(\n     b -> b.author().as(\"writer\").expand()).byId(101);\nRow book = dataStore.execute(select).single();\n\nObject writer = book.get(\"writer.name\"); // path access\n```\n",
    " December 2021 > Java SDK > CQL Runtime > Associations on the Select List\nJava, CQL, association, select list\nJava code for adding a managed to-one association (author) to the select list in a CQL Select statement, then accessing the association's key via the result row.\n\n```java\nCqnSelect select = Select.from(BOOKS).columns(\n     b -> b.author()).byId(101);\nRow book = dataStore.execute(select).single();\n\nObject authorId = book.get(\"author.Id\"); // path access\n```\n",
    " December 2021 > Java SDK > Reflection API: get/find Elements by Path\nJava, Reflection API, get element by path\nUsing Java Reflection API to retrieve elements of a structured or associated type in multiple steps (long version), for deeply nested properties.\n\n```java\nCdsEntity people = model.getEntity(\"People\");\nCdsElement name = people.getElement(\"name\");\nCdsStructuredType nameType = name.getType().as(CdsStructuredType.class);\nCdsElement firstName = nameType.getElement(\"first\");\n\nCdsElement car = people.getElement(\"car\");\nCdsStructuredType carType = car.getType(CdsAssociationType.class).getTarget();\nOptional<CdsElement> colorOfCar = carType.findElement(\"color\");\n```\n",
    " December 2021 > Java SDK > Reflection API: get/find Elements by Path\nJava, Reflection API, get element by path, short version\nShorter, path-based access using Java Reflection API to get elements of structured or associated entities, simplifying property navigation.\n\n```java\nCdsEntity people = model.getEntity(\"People\");\nCdsElement firstName = people.getElement(\"name.first\");\nOptional<CdsElement> colorOfCar = people.findElement(\"car.color\");\n```\n",
    " December 2021 > Java SDK > CDS Maven Plugin: Include/Exclude Definitions\nCDS Maven Plugin, code generation, include, exclude, configuration, static model\nExample Maven plugin configuration for including/excluding specific CDS namespaces when generating Java code artifacts. Includes CatalogService, excludes localized definitions.\n\n```xml\n<plugin>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-maven-plugin</artifactId>\n    <version>${cds.services.version}</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>generate</goal>\n            </goals>\n            <configuration>\n                <includes>\n                    <include>CatalogService.**</include>\n                </includes>\n                <excludes>\n                    <exclude>localized.**</exclude>\n                </excludes>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n",
    " Multitenancy > Handlers for Asynchronous Subscription\nmultitenancy, TenantPersistenceService, event handler, service definition, asynchronous provisioning\nCDS service definition for TenantPersistenceService, providing actions for asynchronous multi-tenant provisioning. Applications can add handlers for createTenant and deleteTenant, which are triggered when a tenant is created or deleted.\n\n```cds\n@protocol:'rest'\nservice TenantPersistenceService {\n    type JSON {\n        // any json\n    }\n\n    action createTenant(tenantId: UUID, subscriptionData: JSON) returns String;\n    action deleteTenant(tenantId: UUID);\n}\n```\n",
    " CDS Language & Compiler > Extend Array-Like Annotation Values\ncds modeling, extend, annotations, array annotation, UI.LineItem\nDemonstrates how to use the ellipsis (`...`) syntax to add annotation values to array-like annotations during an extend in CDS, preserving existing entries and appending new ones. Useful for enhancing Fiori UI annotations like UI.LineItem.\n\n```cds\nextend Books with @UI.LineItem: [\n  ...,  //> represents the existing array entires\n  { Value: ISBN },\n  { Value: pages }\n] {\n  ISBN : String;\n  pages : Integer;\n}\n```\n",
    " CDS Language & Compiler > Doc Comments Are Translated to SAP HANA COMMENT\ncds modeling, doc comment, SAP HANA, entity, compiler\nShows a CDS entity with a doc comment, which is now translated to a SAP HANA table COMMENT when compiling for HANA. Improves schema documentation in generated database artifacts.\n\n```cds\n/**\n * I am the description for \"Employee\"\n */\nentity Employees { ... }\n```\n",
    " CDS Language & Compiler > Doc Comments Are Translated to SAP HANA COMMENT\nsql, SAP HANA, COMMENT, compiler output\nGenerated SQL for SAP HANA. Doc comments from CDS entities are propagated as COMMENT annotations on the corresponding SQL tables. Facilitates better schema documentation on the database level.\n\n```sql\nCREATE TABLE Employees (...) COMMENT 'I am the description for \"Employee\"';\n```\n",
    " Java SDK > Convenient Debug Logging with Spring Log Groups\nJava, logging, Spring Boot, debugging, observability\nSpring Boot configuration to enable debug logging for all SQL statements generated by CAP Java runtime. Shows how to use logical logger groups introduced for better observability and troubleshooting.\n\n```yaml\nlogging.level.com.sap.cds.persistence.sql: DEBUG\n```\n",
    " July 2021 > On-the-fly TypeScript with `cds-ts`\ntypescript, cds toolkit, CLI, Node.js, on-the-fly, development, project setup\nThis command uses the cds-ts CLI tool to serve a CDS model (here: world.cds) with automatic on-the-fly TypeScript compilation. This allows developers to skip manual precompilation of TypeScript files, speeding up local development.\n\n```shell\ncds-ts serve world.cds\n```\n",
    " July 2021 > On-the-fly TypeScript with `cds-ts`\ntypescript, cds toolkit, CLI, watch, Node.js, development\nStarts the CDS TypeScript development server with file watching, automatically recompiling and reloading the app when your TypeScript files change. Useful for rapid development without manual builds.\n\n```shell\ncds-ts watch\n```\n",
    " July 2021 > Swagger UI Made Easier\nswagger, openapi, npm, Node.js, installation, devDependency\nInstalls the cds-swagger-ui-express package as a development dependency, allowing you to embed Swagger UI for your OpenAPI definitions in CAP Node.js apps. Useful for API documentation and testing.\n\n```shell\nnpm add --save-dev cds-swagger-ui-express\n```\n",
    " July 2021 > Swagger UI Made Easier\nswagger, openapi, Node.js, server, custom project layout, configuration\nDefines a server.js for CAP Node.js that conditionally mounts Swagger UI during bootstrap if not in production. This exposes OpenAPI definitions at runtime, making it easy to preview and test APIs locally.\n\n```js\nconst cds = require ('@sap/cds')\nmodule.exports = cds.server\n\nif (process.env.NODE_ENV !== 'production') {\n  const cds_swagger = require ('cds-swagger-ui-express')\n  cds.on ('bootstrap', app => app.use (cds_swagger()) )\n}\n```\n",
    " July 2021 > Command Line / Toolkit > Importer Improvements > Preserved Documentation\ncompiler, EDMX, documentation, import, openapi, csn, annotation, command line\nCompiles CDS models to EDMX format while preserving documentation tags (such as Core.Description) from imported OData metadata. Use this to generate OpenAPI/EDMX files with relevant documentation annotations.\n\n```shell\ncds compile --to edmx --docs\n```\n",
    " July 2021 > CDS Language & Compiler > Dynamic Expressions in SAP Fiori Annotations\nFiori, annotations, SAP Fiori, UI, dynamic expressions, CDL, cds modeling, annotation, edmJson\nDemonstrates how to define a dynamic annotation in CDS using an EDM JSON representation. In SAP Fiori scenarios, this hides a UI element if the status property equals 'visible'. The expression is processed and evaluated at the frontend.\n\n```cds\n@UI.Hidden: {$edmJson: {$If: [{$Eq: [{$Path: 'status'}, 'visible']}, false, true]}}\n```\n",
    " July 2021 > CDS Language & Compiler > Dynamic Expressions in SAP Fiori Annotations\nFiori, annotations, SAP Fiori, UI, dynamic expressions, edmx, output, xml\nShows the corresponding OData EDMX XML output for a dynamic annotation defined with $edmJson in CDS. This XML is generated by the compiler, enabling UI logic based on data values.\n\n```xml\n<Annotation Term=\"UI.Hidden\">\n  <If>\n    <Eq>\n      <Path>status</Path>\n      <String>visible</String>\n    </Eq>\n    <Bool>false</Bool>\n    <Bool>true</Bool>\n  </If>\n</Annotation>\n```\n",
    " July 2021 > CDS Language & Compiler > Define Views with the Exists Predicate\nSQL, exists predicate, view, cql, cds modeling, filter, authors, path expressions, define view\nExample CQL statement using the exists predicate with a path expression and infix filter. This selects all authors who have written at least one book in the year 2000. Simplifies correlated subqueries in view definitions.\n\n```sql\nSELECT from Authors where exists books[year=2000]\n```\n",
    " July 2021 > CDS Language & Compiler > Define Views with the Exists Predicate\nSQL, exists predicate, view, authors, books, correlated subquery, definition\nSQL that the previous CQL using exists predicate unfolds to. Implements a correlated subquery selecting authors with related books from the year 2000. Shows generated SQL for exists-based logic.\n\n```sql\nSELECT name FROM Authors AS a WHERE EXISTS (\n  SELECT 1 FROM Books AS b WHERE b.author_id = a.id AND b.year = 2000\n)\n```\n",
    " July 2021 > Java SDK > Enhanced Remote Service Consumption\nJava, projection, aliasing, remote service, OData, entity, consumption\nDefining a projection in CDS for a remote OData entity, using aliases to rename fields. Simplifies consumption of external services in CAP Java by mapping external fields to internal names.\n\n```cds\nentity Addresses as projection on external.A_BusinessPartnerAddress {\n  key AddressID as ID,\n  key BusinessPartner as businessPartner,\n  CityName as city,\n  StreetName as street,\n  HouseNumber as houseNumber\n}\n```\n",
    " July 2021 > Java SDK > Enhanced Remote Service Consumption\nJava, remote service, OData, service consumption, query, projection\nCAP Java code snippet showing how to query the Addresses projection and stream the results, accessing the 'city' alias. Demonstrates type-safe, alias-aware consumption of remote OData services in Java.\n\n```java\nbupa.run(Select.from(\"Addresses\")).stream().map(a -> a.get(\"city\"));\n```\n",
    " July 2021 > Java SDK > Path Expressions on Outer References in EXISTS\nJava, exists predicate, subquery, query building, path expressions\nUses the exists subquery in CAP Java with path expressions referencing an outer query entity, selecting books whose publisher's city matches the author's city of birth. Introduces support for referencing outer properties in nested queries.\n\n```java\nSelect.from(BOOKS).where(b -> b.exists(outer ->\n   Select.from(AUTHOR).where(a -> outer.publisher().city().eq(a.cityOfBirth()))));\n```\n",
    " July 2021 > Java SDK > Support Doc Comments in Code Generation\ncds modeling, entity, documentation, doc comments, Java, code generation\nShows how to document a CDS entity and its elements using doc comments. These comments are now converted to Javadoc in generated Java accessors, improving developer experience and API documentation.\n\n```cds\n/**\n * A medium for recording information in the form of writing\n */\nentity Books {\n  key id : GUID;\n\n  /**\n   * A name for the book which is usually chosen by the author\n   */\n  title : String;\n}\n```\n",
    " July 2021 > Java SDK > Support Doc Comments in Code Generation\nJava, code generation, documentation, javadoc, generated accessor interface\nRepresents the generated Java interface for a CDS entity where doc comments from the CDS model become Javadoc in Java. Ensures rich API documentation is carried over automatically.\n\n```java\n/**\n * A medium for recording information in the form of writing\n */\ninterface Books {\n  String getID();\n\n  /**\n   * A name for the book which is usually chosen by the author\n   */\n  String getTitle();\n}\n```\n",
    " March 2021 > Node.js Runtime > Major Version Update to v5\nupdate, npm, Node.js, cds, upgrade\nUpdates the @sap/cds package in your Node.js project to version 5, which is required together with @sap/cds-compiler^2 as part of the major runtime upgrade. Needed for compatibility with CDS Compiler v2.\n\n```shell\nnpm update @sap/cds\n```\n",
    " March 2021 > Command Line / Toolkit > Adding SAP HANA Support with `cds add hana`\nproject setup, SAP HANA, CLI, cds add hana\nEnhances your CAP project configuration for SAP HANA in a streamlined way using the CAP CLI. No need to manually modify package.json. Prepares the project for HANA deployment.\n\n```shell\ncds add hana\n```\n",
    " March 2021 > Command Line / Toolkit > Adding Cloud Foundry Native Deployment Support with `cds add cf-manifest`\ndeployment, Cloud Foundry, CLI, manifest, cds add cf-manifest\nGenerates manifest files required for Cloud Foundry native deployments as an alternative to MTA. Suitable for single-tenant applications. Replaces prior build base approach.\n\n```shell\ncds add cf-manifest\n```\n",
    " March 2021 > Command Line / Toolkit > Linting CDS Models with `cds lint`\nlint, CDS, CLI, cds lint\nRuns the CDS Linter on your CAP project to check CDS model files for issues. Available in beta. Useful for enforcing best practices and finding potential errors or anti-patterns.\n\n```shell\ncds lint\n```\n",
    " March 2021 > CDS Editors & Tools > Support for Semantic Highlighting > Configuration\nconfiguration, semantic highlighting, VS Code, editor\nEnables and configures semantic highlighting in Visual Studio Code for CDS source files. You define custom colors for token types (e.g., namespace, class, property) to improve code readability according to entity semantics. The 'cds.semanticHighlighting.enabled' setting must be set to true for CDS-specific highlighting.\n\n```json\n// settings.json\n{\n  \"editor.semanticTokenColorCustomizations\": {\n    \"rules\": {\n      \"namespace\": { \"foreground\": \"#C586C0\" },\n      \"class\": { \"foreground\": \"#4EC9B0\" },\n      \"property\": { \"foreground\": \"#9CDCFE\" },\n      \"type\": { \"foreground\": \"#569CD6\" },\n      \"typeParameter\": { \"foreground\": \"#B5CEA8\" }\n    }\n  },\n  \"cds.semanticHighlighting.enabled\": true\n}\n```\n",
    " March 2021 > Java SDK > Support for H2 Database\nCDS, Java, H2, configuration, sql dialect\nConfigures your CAP Java project's .cdsrc.json file to generate SQL statements for the H2 database. The 'plain' dialect is required when targeting H2 for local development and CI usage with the generated schema.sql file.\n\n```json\n{\n  \"sql\": {\n    \"dialect\": \"plain\"\n  }\n}\n```\n",
    " March 2021 > Java SDK > Support for Simple Projections in Remote Services <Beta />\nprojections, cds modeling, Java, remote service\nDefines simple projections for entities to be used with Remote Services in CAP Java. These projections restrict the selected fields or exclude specific fields from an external service's entity, currently without field renaming support.\n\n```cds\nentity SimpleBooks as projection on Books { ID, title, descr };\nentity SimpleAuthors as projection on Authors excluding { placeOfBirth, placeOfDeath };\n```\n",
    " March 2021 > Java SDK > Compositions of Aspects\ncomposition, aspect, cds modeling, Java\nShows how to model a composition of aspects in CDS. The main entity Orders contains a composition to OrderItems, defined as an aspect. This is now fully supported in CAP Java, and accessor/model interfaces are generated accordingly.\n\n```cds\nentity Orders {\n  key ID: Integer; //...\n  Items : Composition of many OrderItems;\n}\n\naspect OrderItems {\n  key pos : Integer;\n  product : Association to Products;\n  quantity : Integer;\n}\n```\n",
    " March 2021 > CDS Language & Compiler > Fixed  Temporal Data\nhttp, OData, temporal data\nExemplifies correctly sending a GET request to retrieve a single Book entity by ID via OData. With the fixed temporal data handling, 'validFrom' is no longer required in the key segment, making as-of-now and time-travel queries work as intended.\n\n```http\nGET .../Books(ID=201) HTTP/1.1\n```\n",
    " March 2021 > CDS Language & Compiler > Simplified Syntax for Annotated OData Annotations\ncds, annotation, syntax, OData\nDemonstrates simplified syntax for assigning OData annotations. Dots, @, and # can now be used directly in annotation names and values without requiring delimited identifiers, making CDS models more concise.\n\n```cds\n@Common.Text: {\n  @UI.TextArrangement: #TextOnly,\n  ...\n}\n```\n",
    " March 2021 > Node.js Runtime > Tagged Template Strings for `CDL`, `CQL`, and `CXL`\ntagged template, cds.ql, CQL, JavaScript\nIllustrates use of the new tagged template string (CQL) for safe, readable query construction in Node.js with cds.ql and the Querying API. Reduces boilerplate and improves parameter safety.\n\n```js\nconst result = await cds.db.run(CQL`SELECT from Books where title like ${'%cloud%'}`);\n```\n",
    " February 2021 > Node.js Runtime > Error Response Targets\nerror response, OData, absolute context url, response structure\nDemonstrates how error responses now include a fully qualified target path using OData path syntax. This helps UIs correctly identify and highlight the property that caused the error, allowing for better user feedback, especially when properties have name clashes.\n\n```cds\nPOST /Headers\n{\n  ID: 1,\n  items: [{\n    ID: 1,\n    description: null, //> a mandatory property\n  }]\n}\n\n\nError Response:\n{\n  code: '400',\n  message: 'Value is required',\n  target: 'items(ID=1)/description' //> fully qualified path\n}\n```\n",
    " February 2021 > Node.js Runtime > Authorization Enhancements\nauthorization, restrict annotation, instance-based authorization, CREATE, cds.env.features.skip_restrict_where\nShows how to control the skipping of instance-based @restrict.where clauses during CREATE requests in CAP Node.js by setting the associated feature flag. This impacts instance-based authorization on insert operations, allowing instance-based restrictions to be specified for WRITE grant types.\n\n```js\ncds.env.features.skip_restrict_where = false;\n```\n",
    " February 2021 > Node.js Runtime > Data in .after Handlers\ncds.env, after handler, arrayed_after, feature flag\nControls the consistency of data structure passed to .after handlers in CAP Node.js. Setting this feature flag reverts to the previous behavior where after handlers for read requests always receive an array, regardless of single or collection queries.\n\n```js\ncds.env.features.arrayed_after = true;\n```\n",
    " February 2021 > Node.js Runtime > Managed Properties in Composition Trees\nmanaged properties, composition, cds.env.features.update_header_item, feature flag\nDisables the automatic update of managed properties (e.g., modifiedAt) in a containing entity when one of its composition targets is updated. Provided as a feature flag for backward compatibility.\n\n```js\ncds.env.features.update_header_item = false;\n```\n",
    " Using SAP HANA Cloud for Production > Setup & Configuration\ninstallation, SAP HANA, Node.js, dependency, package.json\nInstalls the '@cap-js/hana' package as a dependency for CAP Node.js projects. Required to enable SAP HANA Cloud as the database backend.\n\n```shell\nnpm add @cap-js/hana\n```\n",
    " Using SAP HANA Cloud for Production > Setup & Configuration\ninstallation, SAP HANA, Java, dependency, pom.xml\nAdds the dependency for SAP HANA Cloud support in a CAP Java application's pom.xml. Required for enabling HANA connectivity.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-feature-hana</artifactId>\n  <scope>runtime</scope>\n</dependency>\n```\n",
    " Using SAP HANA Cloud for Production > Running `cds build`\nSAP HANA, build, HDI, deployment, CLI\nRuns the CAP build process, generating SAP HANA Deployment Infrastructure (HDI) artifacts for deploying the CDS model to SAP HANA Cloud. Used before deploying with HDI deployer tools.\n\n```shell\ncds build --for hana\n```\n",
    " Using SAP HANA Cloud for Production > Custom HDI Artifacts\nHDI, customization, index, SAP HANA\nCustom HDI artifact in the form of an HANA index for the 'title' column of 'Books'. Should be placed in 'db/src/sap.capire.bookshop.Books.hdbindex'.\n\n```sql\nINDEX sap_capire_bookshop_Books_title_index\nON sap_capire_bookshop_Books (title)\n```\n",
    " Using SAP HANA Cloud for Production > Prepare for Production\ninit, configuration, production, hybrid, SAP HANA\nConfigures the CAP project for SAP HANA deployments in hybrid mode (local service, remote DB). Modifies package.json with a 'hybrid' profile and deployment details.\n\n```shell\ncds add hana --for hybrid\n```\n",
    " Using SAP HANA Cloud for Production > Using `cds deploy` for Ad-Hoc Deployments\ndeploy, SAP HANA, HDI, CLI, ad-hoc deployment\nDeploys the database artifacts from the CAP project to an SAP HANA Cloud instance via HDI, provisioning the corresponding containers and service keys as required.\n\n```shell\ncds deploy --to hana\n```\n",
    " Using SAP HANA Cloud for Production > Using `cds deploy` for Ad-Hoc Deployments\ndeploy, SAP HANA, profile, HDI\nDeploys to SAP HANA Cloud database using the 'hybrid' profile, which controls connection and binding information for hybrid scenarios.\n\n```shell\ncds deploy --to hana --profile hybrid\n```\n",
    " Using SAP HANA Cloud for Production > Using `cds deploy` for Ad-Hoc Deployments > Deploy Parameters\ndeploy, SAP HANA, service name\nDeploys the database part of a CAP project to a SAP HANA service instance explicitly named 'myservice' rather than using the default naming convention.\n\n```shell\ncds deploy --to hana:myservice\n```\n",
    " Using SAP HANA Cloud for Production > Using `cds deploy` for Ad-Hoc Deployments > Deploy Parameters\ndeploy, SAP HANA, VCAP_SERVICES, environment variable\nDeploys with a specific service binding configuration, using the 'someEnvFile.json' as a custom VCAP_SERVICES environment file for service credentials.\n\n```shell\ncds deploy --vcap-file someEnvFile.json\n```\n",
    " Using SAP HANA Cloud for Production > Native SAP HANA Features > Vector Embeddings\ncds modeling, vector embeddings, AI, SAP HANA, cds.Vector\nDefines a CDS entity with an embedding column using 'Vector' type, suitable for storing vector embeddings (e.g., from a text embedding model with 1536 dimensions).\n\n```cds\nentity Books : cuid {\n  title       : String(111);\n  description : LargeString;\n  embedding   : Vector(1536); // adjust dimensions to embedding model\n}\n```\n",
    " Using SAP HANA Cloud for Production > Native SAP HANA Features > Vector Embeddings\nJava, vector embeddings, AI, SAP Cloud SDK\nShows how to generate vector embeddings for book descriptions in Java using SAP Cloud SDK for AI and store the result in the CDS entity's 'embedding' field.\n\n```java\nvar aiClient = OpenAiClient.forModel(OpenAiModel.TEXT_EMBEDDING_3_SMALL);\nvar response = aiClient.embedding(\n   new OpenAiEmbeddingRequest(List.of(book.getDescription())));\nbook.setEmbedding(CdsVector.of(response.getEmbeddingVectors().get(0)));\n```\n",
    " Using SAP HANA Cloud for Production > Native SAP HANA Features > Vector Embeddings\nJava, vector embeddings, AI, similarity search, SAP HANA\nPerforms a vector similarity search in Java: computes the embedding for a user question, calculates cosine similarity between the query and stored book vectors, and retrieves the top matching books from SAP HANA.\n\n```java\n// Compute embedding for user question\nvar request = new OpenAiEmbeddingRequest(List.of(\"How to use vector embeddings in CAP?\"));\nCdsVector userQuestion = CdsVector.of(\n aiClient.embedding(request).getEmbeddingVectors().get(0));\n// Compute similarity between user question and book embeddings\nvar similarity = CQL.cosineSimilarity( // computed on SAP HANA\n  CQL.get(Books.EMBEDDING), userQuestion);\n// Find Books related to user question ordered by similarity\nhana.run(Select.from(BOOKS).limit(10)\n.columns(b -> b.ID(), b -> b.title(),\n\t\t b -> similarity.as(\"similarity\"))\n.orderBy(b -> b.get(\"similarity\").desc()));\n```\n",
    " Using SAP HANA Cloud for Production > Native SAP HANA Features > Vector Embeddings\nNode.js, vector embeddings, AI, similarity search, SAP HANA\nDemonstrates a Node.js approach for semantic search of books using vector embeddings. Retrieves embedding for a user query and runs a similarity search on HANA using SQL functions.\n\n```js\nconst response = await new AzureOpenAiEmbeddingClient(\n 'text-embedding-3-small'\n).run({\n input: 'How to use vector embeddings in CAP?'\n});\nconst questionEmbedding = response.getEmbedding();\nlet similarBooks = await SELECT.from('Books')\n  .where`cosine_similarity(embedding, to_real_vector(${questionEmbedding})) > 0.9`;\n```\n",
    " Using SAP HANA Cloud for Production > Geospatial Functions\ncds modeling, geospatial, SAP HANA, spatial functions\nDefines a CDS projection entity using SAP HANA geospatial functions, computing the area of geometry and x coordinate of a point.\n\n```cds\nentity Geo as select from Foo {\n  geoColumn.ST_Area() as area : Decimal,\n  new ST_Point(2.25, 3.41).ST_X() as x : Decimal\n};\n```\n",
    " Using SAP HANA Cloud for Production > Spatial Grid Generators\ncds modeling, spatial, grid generators, SAP HANA\nCDS facade entity for using SAP HANA's ST_SquareGrid grid generator table function. Enables spatial grid operations in queries.\n\n```cds\n@cds.persistence.exists\nentity ST_SquareGrid(size: Double, geometry: hana.ST_GEOMETRY) {\n  geom: hana.ST_GEOMETRY;\n  i: Integer;\n  j: Integer;\n}\n```\n",
    " Using SAP HANA Cloud for Production > Spatial Grid Generators\ncds modeling, spatial, SAP HANA, function call\nCDS view entity calling the ST_SquareGrid spatial function with named arguments, returning spatial grid cells.\n\n```cds\nentity V as select\n  from ST_SquareGrid(size: 1.0, geometry: ST_GeomFromWkt('Point(1.5 -2.5)'))\n{ geom, i, j };\n```\n",
    " Using SAP HANA Cloud for Production > Functions Without Arguments\ncds modeling, SAP HANA, functions without arguments\nCDS model using native SAP HANA functions without parentheses (e.g., current_timestamp) in a projection entity.\n\n```cds\nentity Foo { key ID : UUID; }\nentity Bar as select from Foo {\n  ID, current_timestamp\n};\n```\n",
    " Using SAP HANA Cloud for Production > Functions Without Arguments\ncds modeling, SAP HANA, functions, parentheses\nShows how to use less-common SAP HANA functions (like sysuuid) in CDS by providing explicit parentheses to enable generic native function calls.\n\n```cds\nentity Foo { key ID : UUID; }\nentity Bar as select from Foo {\n  ID, current_timestamp,\n  sysuuid() as sysid // [!code focus]\n};\n```\n",
    " Using SAP HANA Cloud for Production > Regex Functions\nSAP HANA, regex, functions, CDS\nExamples of native SAP HANA regex and aggregate functions for use in custom artifacts. Useful for advanced filtering and ordering directly in the HANA backend.\n\n```sql\nlocate_regexpr(pattern in name from 5)\nfirst_value(name order by price desc)\n```\n",
    " Using SAP HANA Cloud for Production > Enabling hdbmigrationtable Generation for Selected Entities During CDS Build\nschema evolution, SAP HANA, hdbmigrationtable, cds.persistence.journal\nEntity definition using @cds.persistence.journal annotation. Causes CDS build to generate an .hdbmigrationtable artifact for schema evolution.\n\n```cds\nnamespace data.model;\n\n  @cds.persistence.journal\n  entity LargeBook {\n    key id : Integer;\n    title : String(100);\n    content : LargeString;\n  }\n```\n",
    " Using SAP HANA Cloud for Production > Enabling hdbmigrationtable Generation for Selected Entities During CDS Build\nhdbmigrationtable, manual resolution, CDS build, schema evolution\nSample of auto-generated manual resolution comments in an .hdbmigrationtable file for changes that would cause data loss. User intervention required.\n\n```txt\n>>>> Manual resolution required - DROP statements causing data loss are disabled\n>>>> by default.\n>>>> You may either:\n>>>>   uncomment statements to allow incompatible changes, or\n>>>>   refactor statements, e.g. replace DROP/ADD by single RENAME statement\n>>>> After manual resolution delete all lines starting with >>>>>\n-- ALTER TABLE my_bookshop_Books DROP (title);\n-- ALTER TABLE my_bookshop_Books ADD (title NVARCHAR(50));\n```\n",
    " Using SAP HANA Cloud for Production > Native Database Clauses\ncds modeling, sql.append, native database clause, schema evolution\nDemonstrates use of @sql.append CDS annotation to attach native SAP HANA clauses to tables and columns, enabling features like persistent memory and fuzzy search.\n\n```cds\n@cds.persistence.journal\n@sql.append: 'PERSISTENT MEMORY ON'\nentity E {\n  ...,\n  @sql.append: 'FUZZY SEARCH INDEX ON'\n  text: String(100);\n}\n```\n",
    " Using SAP HANA Cloud for Production > Native Database Clauses\nhdbmigrationtable, schema evolution, SQL, SAP HANA\nGenerated .hdbmigrationtable version and migration section showing the native SQL clauses from @sql.append merged into DDL and ALTER statements for schema evolution.\n\n```sql\n== version=2\nCOLUMN TABLE E (\n  ...,\n  text NVARCHAR(100) FUZZY SEARCH INDEX ON\n) PERSISTENT MEMORY ON\n\n== migration=2\nALTER TABLE E PERSISTENT MEMORY ON;\nALTER TABLE E ALTER (text NVARCHAR(100) FUZZY SEARCH INDEX ON);\n```\n",
    " Using SAP HANA Cloud for Production > Native Database Clauses\nhdbmigrationtable, schema evolution, manual resolution, SQL\nExample of migration version requiring manual ALTER statements due to removal of an @sql.append annotation. CDS build enforces this before continuing schema evolution.\n\n```txt\n== migration=3\n>>>>> Manual resolution required - insert ALTER statement(s) as described below.\n>>>>> After manual resolution delete all lines starting with >>>>>\n>>>>> Insert ALTER statement for: annotation @sql.append of artifact E has been removed (previous value: \"PERSISTENT MEMORY ON\")\n>>>>> Insert ALTER statement for: annotation @sql.append of element E:text has been removed (previous value: \"FUZZY SEARCH INDEX ON\")\n```\n",
    " Using SAP HANA Cloud for Production > Native Database Clauses\nhdbmigrationtable, schema evolution, manual resolution, SQL\nResolved migration section where native clauses have been explicitly undone using ALTER statements in accordance with the removal of @sql.append.\n\n```sql\n== migration=3\nALTER TABLE E PERSISTENT MEMORY DEFAULT;\nALTER TABLE E ALTER (text NVARCHAR(100) FUZZY SEARCH INDEX OFF);\n```\n",
    " Using SAP HANA Cloud for Production > Advanced Options\nhdbmigrationtable, schema evolution, options, configuration, SAP HANA\nConfiguration options for CDS build and SAP HANA, influencing .hdbmigrationtable generation and behavior regarding manual resolution and change modes.\n\n```json\n{\n  \"hana\" : {\n    \"journal\": {\n      \"enable-drop\": false,\n      \"change-mode\": \"alter\" // \"drop\"\n    },\n    // ...\n  }\n}\n```\n",
    " Using SAP HANA Cloud for Production > Undeploying Artifacts\nHDI, undeploy, undeploy.json, SAP HANA\nStandard 'db/undeploy.json' entries created by 'cds add hana'. Controlled which generated artifacts should be deleted when removed from the model.\n\n```json\n[\n  \"src/gen/**/*.hdbview\",\n  \"src/gen/**/*.hdbindex\",\n  \"src/gen/**/*.hdbconstraint\",\n  \"src/gen/**/*_drafts.hdbtable\",\n  \"src/gen/**/*.hdbcalculationview\"\n]\n```\n",
    " Using SAP HANA Cloud for Production > Undeploying Artifacts\nHDI, undeploy, undeploy.json, SAP HANA, CSV\nAdds the .hdbtabledata entry to 'db/undeploy.json' for undeploying CSV-based initial or configuration data from SAP HANA Cloud.\n\n```json\n[\n  [...]\n  \"src/gen/**/*.hdbtabledata\"\n]\n```\n",
    " January 2021 > Command Line / Toolkit > Important Changes❗️\nconfiguration, fiori_preview, mocked_bindings, package.json, cds features\nThis code snippet shows how to enable the Fiori preview and mocked service bindings in a CAP (Node.js) project by setting the respective flags in the cds.features section of your package.json. This is required when NODE_ENV=production, as those features are otherwise disabled by default.\n\n```json\n{\n  \"cds\": {\n    \"features\": {\n      \"fiori_preview\": true,\n      \"mocked_bindings\": true\n    }\n  }\n}\n```\n",
    " January 2021 > Java SDK > Keys Contained in Data Accessor Objects\nJava, entity keys, PATCH, PUT, data accessor, event handler, OrderItems, CdsService, CqnAnalyzer, key extraction, update, before handler, typed entity\nOld code for extracting the entity key (ID) from a PATCH or PUT request in a CAP Java handler, by directly analyzing the CQN from the event context. This approach is replaced by using accessor methods on the typed entity.\n\n```java\n@Before(event = CdsService.EVENT_UPDATE)\npublic void updateOrderItem(CdsUpdateEventContext context, OrderItems orderItem) {\n    // access ID of orderItem\n    String orderItemId = (String) CqnAnalyzer.create(context.getModel()).analyze(context.getCqn()).targetKeys().get(OrderItems.ID);\n    // use it...\n}\n```\n",
    " January 2021 > Java SDK > Keys Contained in Data Accessor Objects\nJava, entity keys, PATCH, PUT, data accessor, event handler, OrderItems, CdsService, key extraction, update, before handler, typed entity\nRecommended new approach in CAP Java event handlers for extracting entity keys from data accessor objects. The OrderItems entity's getId() method is used directly in the @Before update handler, reflecting improved support for type-safe access.\n\n```java\n@Before(event = CdsService.EVENT_UPDATE)\npublic void updateOrderItem(OrderItems orderItem) {\n    // access ID of orderItem\n    String orderItemId = orderItem.getId();\n    // use it...\n}\n```\n",
    " January 2021 > Java SDK > Maven Build Improvements\nmaven, cds-maven-plugin, install-cdsdk, build, cds-dk, update, build tool, build options\nThis Maven build option forces the update of the cds-dk tool when using the cds-maven-plugin. It is useful for ensuring the build uses the latest CAP development toolkit version. Set this property on the command line or in your Maven configuration.\n\n```yaml\ncds.install-cdsdk.force=true\n```\n",
    " January 2021 > Node.js Runtime > SAP HANA\nconfiguration, hana, localization, with_parameters, cds.env.features\nDisable SAP HANA's localization feature (WITH PARAMETERS ('LOCALE' = '<locale>')) in CAP Node.js applications by setting this configuration flag. This can improve performance if localization is not required.\n\n```js\ncds.env.features.with_parameters = false\n```\n",
    " January 2021 > Node.js Runtime > Protecting OData Metadata by Default\nconfiguration, metadata, odata, protection, cds.env.odata.protectMetadata\nDisables default protection of OData service root and /$metadata endpoints in CAP Node.js, allowing public access even when @requires is present, by changing the configuration flag.\n\n```js\ncds.env.odata.protectMetadata = false\n```\n",
    " January 2021 > Node.js Runtime > Generic Providers\nannotation, runtime, integrity, assert_integrity, service level, entity level, association, validation\nCDS annotation to globally or selectively disable runtime-based integrity checks for entities, services, or associations. Use for scenarios where you want to bypass certain validations (e.g., during data import).\n\n```cds\n@assert.integrity: false\n```\n",
    " All of 2020\nVue.js, component, code sample, IndexList\nThis is a Vue.js component usage snippet. It shows how to render the IndexList component and bind the pages prop to a local pages variable. Used in the context of displaying a navigable list of pages for the year 2020.\n\n```vue\n<IndexList :pages='pages' />\n```\n",
    " Command Line / Toolkit > Export to OpenAPI\nCLI, OpenAPI, export, cds compile, API definition\nExports all CAP services defined in the srv/ directory into OpenAPI Specification files, storing the results in the docs/ folder. Useful for generating API documentation in the OpenAPI standard and for API-first development.\n\n```shell\ncds compile srv --service all -o docs --to openapi\n```\n",
    " Command Line / Toolkit > Start with Different Ports on Node.js\nruntime, port, cds watch, Node.js, development\nDemonstrates CAP Node.js dev server automatically suggesting and switching to a different port if the default (4004) is occupied. The developer can accept (y) or reject (n) the change. This avoids port conflicts when running multiple instances.\n\n```shell\n$ cds watch\n...\n[cds] - serving CatalogService ...\n\nEADDRINUSE - port 4004 is already in use. Restart with new port? (Y/n)\n> y\nrestart\n...\n[cds] - server listening on { url: 'http://localhost:4005' }\n```\n",
    " Java SDK > Logging and Tracing\nJava, logging, tracing, OData, configuration, log level\nConfigures the CAP Java SDK logging level for OData V2 and V4 batch requests. By raising the log level to WARN, batch statement logging can be suppressed for less verbose output.\n\n```yaml\ncom.sap.cds.adapter.odata.v2.BatchAccess=WARN\ncom.sap.cds.adapter.odata.v4.BatchAccess=WARN\n```\n",
    " Java SDK > Datasource and Environment Configuration\nJava, configuration, datasource, connection pool, HikariCP\nSets datasource connection pool options (via HikariCP) in CAP Java projects. Substitute <service-name> and <hikari-property> for your service and connection pool property, respectively. Controls database pooling at the per-service level.\n\n```yaml\ncds.dataSource.<service-name>.hikari.<hikari-property>=...\n```\n",
    " Java SDK > Datasource and Environment Configuration\nJava, configuration, environment, Spring Boot\nSpecifies the path to a default-env.json for a specific Spring profile. Allows binding different environment credentials/configurations per profile for service binding and testing.\n\n```yaml\ncds.environment.local.defaultEnvPath=...\n```\n",
    " Node.js Runtime > Experimental: Convenience API on cds.Service\nOData, JavaScript, service, convenience API, remote service, action, function\nInvokes an unbound action (\"cancelOrder\") on a remote CAP service using the new convenience API enhancements in cds.Service. Use this syntax for simplified action/function invocations from JavaScript.\n\n```js\nconst remote = await cds.connect.to('remote')\nawait remote.cancelOrder('<the order ID>')\n```\n",
    " Command Line / Toolkit > Interactive Commands in `cds watch`\nCLI, cds watch, debug, Node.js, restart, interactive shell\nStarts the CDS development server in watch mode, enabling live reload and interactive command input. You can enter commands like 'debug', 'debug-brk', or 'ps' in this mode to control the running application.\n\n```shell\ncds watch\n```\n",
    " Command Line / Toolkit > Debug Handler Code with `cds watch`\ncds watch, debug, Node.js, VS Code, debugger\nTyped after starting 'cds watch', this command restarts the application in debug mode. Useful when developing with debugging enabled. Use 'debug-brk' to pause at first line for bootstrapping code debugging.\n\n```shell\ndebug\n```\n",
    " Node.js Runtime > Structured Elements in OData V4 for APIs\nNode.js, structured elements, OData V4, feature, odata.flavor\nProject setting to enable native support for structured elements in OData V4; structured queries and results are used instead of flattened notation.\n\n```properties\nodata.flavor = x4\n```\n",
    " Node.js Runtime > Structured Elements in OData V4 for APIs\nOData, structured, API, example, filter, HTTP\nOData V4 query (structured mode enabled): Filters books by associated author's ID using structured navigation.\n\n```http\nGET /Books?$filter=author/ID eq 5\n```\n",
    " Node.js Runtime > Structured Elements in OData V4 for APIs\nOData, structured elements, API, JSON, response, structured\nJSON response for structured OData V4 query showing nested author object instead of flattened fields.\n\n```json\n{\n    author : {\n      ID: 5\n    },\n    ...\n}\n```\n",
    " Node.js Runtime > Structured Elements in OData V4 for APIs\nOData, unstructured, API, example, filter\nOData query in unstructured (legacy) mode, filtering using flattened fields.\n\n```http\nGET /Books?$filter=author_ID eq 5\n```\n",
    " Node.js Runtime > Structured Elements in OData V4 for APIs\nOData, unstructured elements, API, JSON, response\nJSON response for unstructured OData query, with flattened author_ID field.\n\n```json\n{\n    author_ID: 5,\n    ...\n}\n```\n",
    " CDS Language & Compiler > Simplified type references\ncds modeling, type reference, CDL, type of, simplified reference\nExample of simplified type reference in CDS models using 'Foo:id' instead of the legacy 'type of Foo:id'.\n\n```cds\nentity Foo {\n  key id: Integer;\n}\n\nentity Bar {\n  key id: Foo:id;\n}\n```\n",
    " CDS Language & Compiler > Simplified type references\ncds modeling, type reference, CDL, type of, legacy\nOld syntax for referencing the type of an element (with 'type of'). Now, 'type of' is optional, you can use 'Foo:id' directly.\n\n```cds\nentity Foo {\n  key id: Integer;\n}\n\nentity Bar {\n  key id: type of Foo:id;\n}\n```\n",
    " CDS Language & Compiler > cast(element as Type)\ncast, CDL, compiler, type conversion\nCDL example showing usage of the 'cast(element as Type)' function, resulting in a SQL CAST operation. Also shows legacy 'as alias: Type' syntax.\n\n```cds\nview V as select from E {\n  cast( element as String ) as castedElement,\n  element as cdlCastedElement: String\n};\n```\n",
    " CDS Language & Compiler > cast(element as Type)\ncast, CSN, compiler, type conversion, JSON CSN\nEquivalent CSN representation of explicit type casting for columns, showing 'cast' object property for type conversion.\n\n```json\n\"columns\": [\n    {\n      \"xpr\": [\n        {\n          \"ref\": [\n            \"element\"\n          ],\n          \"cast\": {\n            \"type\": \"cds.String\"\n          }\n        }\n      ],\n      \"as\": \"castedElement\"\n    },\n    {\n      \"ref\": [\n        \"element\"\n      ],\n      \"as\": \"cdlCastedElement\",\n      \"cast\": {\n        \"type\": \"cds.String\"\n      }\n    }\n  ]\n```\n",
    " CDS Language & Compiler > cast(element as Type)\ncast, SQL, compiler, type conversion\nSQL DDL generated from a CDS view with explicit CAST operation for an element, matching cast usage in CDS/CDL source.\n\n```sql\nCREATE VIEW V AS SELECT\n  CAST(E_0.element AS NVARCHAR(5000)) AS castedElement,\n  E_0.element AS cdlCastedElement\nFROM E AS E_0;\n```\n",
    " Java Runtime > Native OData V2 Adapter (Beta)\nJava, OData, OData V2, OData V4, dependency, pom.xml, Spring Boot, adapter, configuration\nAdd these Maven dependencies to enable the native OData V2 adapter for CAP Java projects using Spring Boot.\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.sap.cds</groupId>\n        <artifactId>cds-starter-spring-boot</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>com.sap.cds</groupId>\n        <artifactId>cds-adapter-odata-v2</artifactId>\n    </dependency>\n    ...\n</dependencies>\n```\n",
    " Java Runtime > Native OData V2 Adapter (Beta)\nJava, OData, OData V4, dependency, pom.xml, removal\nRemove this dependency from your Maven pom.xml if switching to OData V2 adapter, as OData V2 and V4 cannot be used together currently.\n\n```xml\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-starter-spring-boot-odata</artifactId>\n</dependency>\n```\n",
    " Java Runtime > SAP Fiori Drafts with Timeouts\nJava, configuration, draft, timeout, yaml, garbage collection\nJava configuration YAML snippet to extend SAP Fiori inactive draft garbage collection timeout to 8 weeks.\n\n```yaml\ncds.drafts.deletionTimeout: 8w\n```\n",
    " Java Runtime > SAP Fiori Drafts with Timeouts\nJava, configuration, draft, timeout, yaml, garbage collection, disable\nJava configuration YAML snippet to disable SAP Fiori inactive draft garbage collection completely.\n\n```yaml\ncds.drafts.gc.enabled: false\n```\n",
    " Java Runtime > OData V4 Lambda Operators\nJava, OData, V4, lambda operator, all, any, HTTP, example\nHTTP example demonstrating use of OData V4 lambda operator 'any' to filter authors with a book from the year 2000.\n\n```http\nhttp://host/service/Authors?$filter=books/any(b:b/year eq 2000)\n```\n",
    " Java Runtime > AllMatch/anyMatch Predicates\nJava, query, builder, anyMatch, allMatch, predicate, example\nJava Builder API usage shown to filter 'Authors' having at least one related 'book' in year 2000 with .anyMatch().\n\n```java\nSelect.from(AUTHORS).where(a -> a.books().anyMatch(b -> b.year().eq(2000)));\n```\n",
    " Java Runtime > Entity References from Query Result\nJava, entity references, query, ref(), example\nFetches an 'Author' entity, obtains a reference via ref(), and demonstrates a subsequent query using this typed reference.\n\n```java\nCqnSelect query = Select.from(AUTHOR).byId(101);\nAuthor authorData = service.run(query).single(Author.class);\n\n// Author[101]\nAuthor_ author = authorData.ref();\n\n// SELECT from Author[101].books where year = 2000\nSelect.from(author.books()).where(b -> b.year().eq(2000));\n```\n",
    " CDS Editors & Tools > Preview Commands (currently not in Eclipse)\npreview, cds, VS Code, commands, cds compiler, CDS editors\nThis command in VS Code shows a quick preview (like CSN, SQL, OData) for a CDS file using the CDS extension. It allows developers to see what the compiler will generate without a full build, improving rapid prototyping and authoring.\n\n```js\n// In VS Code, activate the CDS extension commands\n// Select 'Preview: Show CSN' or 'Show SQL' from the Command Palette for a .cds file\n```\n",
    " CDS Editors & Tools > Code Completion Proposes Global Identifiers\ncode completion, editor, VS Code, workspace symbols, global identifiers\nConfigures the CDS extension in VS Code to propose all global (workspace-wide) symbols for code completion, even with no prefix. Allows convenient code completion for non-imported types/entities.\n\n```json\n// In your VS Code settings:\n\"cds.completion.workspaceSymbols.maxProposals\": -1,\n\"cds.completion.workspaceSymbols.minPrefixLength\": 0\n```\n",
    " CDS Language & Compiler > Foreign Key Access and Association to Join Translation\nforeign key access, join optimization, SQL, SAP HANA, association, view generation\nDemonstrates optimized SQL view generation where direct foreign key access avoids unnecessary joins if possible. This is relevant for CDS views translated to SQL for SAP HANA.\n\n```sql\nCREATE VIEW V AS SELECT\n  Source_0.managedAssociation_foreignKey AS foreignKey\nFROM Source AS Source_0;\n```\n",
    " CDS Language & Compiler > Foreign Key Access and Association to Join Translation\nforeign key access, join, SQL, association\nShows the previous SQL translation, where a join was done to resolve a managed association's foreign key. This was replaced by more optimal handling if possible.\n\n```sql\nCREATE VIEW V AS SELECT\n  managedAssociation_1.foreignKey\nFROM (Source AS Source_0 LEFT JOIN Source AS managedAssociation_1 ON (Source_0.managedAssociation_foreignKey = managedAssociation_1.foreignKey));\n```\n",
    " Node.js Runtime > Setting Headers for Remote Services\nremote service, headers, Node.js, emit, core services API, http, service transaction\nShows how to set custom HTTP headers when using tx.emit() to interact with a remote HTTP service in CAP Node.js. Used for advanced integrations or setting context properties for remote service calls.\n\n```js\nconst tx = service.transaction()\nconst resultUsingHeaders = await tx.emit({\n    query: SELECT.from('Entity'),\n    headers: { header1: 'content'}\n})\n```\n",
    " Node.js Runtime > Support for Privileged Users\nprivileged user, authorization, cds.User.Privileged, node.js, local service consumption\nIntroduces cds.User.Privileged to bypass all authorization checks in CAP Node.js. Useful for administrative or background tasks that require elevated permissions regardless of the original user context.\n\n```js\n// To bypass authorization checks:\nconst privilegedUser = cds.User.Privileged\n// Use this user when calling local services directly\n```\n",
    " Java Runtime > Remote OData V2 / V4 Service Consumption (alpha)\nCAP Java, remote service, OData V2, OData V4, destination, service consumption, SAP Cloud SDK\nExample configuration to enable a CDS service in a CAP Java project as a local proxy for a remote OData V2 or V4 service, leveraging SAP Cloud SDK's destination handling. Only GET (CqnSelect) queries are currently supported. Requires cds-feature-remote-odata dependency.\n\n```yaml\ncds:\n  services:\n  - name: API_BUSINESS_PARTNER # name of the service in the CDS model\n    destination:\n      name: \"s4-business-partner-api\" # the destination, retrieved from SAP Cloud SDKs DestinationAccessor\n      suffix: \"/sap/opu/odata/sap\" # an optional suffix appended to the destination's URL\n      type: \"odata-v2\" # or odata-v4\n```\n",
    " Java Runtime > Important Changes ❗️ > UPSERT event isn't used anymore!\nPUT, PATCH, OData V4, CAP Java, event handler, update, create, upsert deprecated\nIn CAP Java, OData V4 PUT requests now trigger UPDATE (and CREATE if entity doesn't exist) events, rather than UPSERT. Developers must migrate from UPSERT event handlers to UPDATE and CREATE event handlers for correct semantics.\n\n```java\n// Register handlers for CREATE and UPDATE events instead of UPSERT\n@On(event = CqnService.EVENT_UPDATE, entity = \"Books\")\npublic void onUpdate(UpdateEventContext context) {\n    // handle update\n}\n\n@On(event = CqnService.EVENT_CREATE, entity = \"Books\")\npublic void onCreate(CreateEventContext context) {\n    // handle create\n}\n// Don't use @On(event = CqnService.EVENT_UPSERT, ...)\n```\n",
    " CDS Language & Compiler > Unique Constraints\nCDS, unique constraint, annotation, assert unique\nDemonstrates using @assert.unique.<constraintName> annotation to enforce a unique constraint on the combination of part_no and supplier_id in a CDS entity. Supported for non-query entities or queries with @cds.persistence.table.\n\n```cds\n@assert.unique.PART_ID : ['part_no', 'supplier_id']\nentity Parts { key part_no : String; key supplier_id : String; ... }\n```\n",
    "Command Line / Toolkit > Streamlined and Modularized cds build\nCLI, cds build, build, Node.js, SAP HANA, shell, build task, build profile, environment, NODE_ENV\nThese are example shell commands for building a CAP project using the cds CLI. They show how to run specific build tasks (for SAP HANA), override options, enable the production profile, and use the help command.\nNote: Most CLI commands have moved to @sap/cds-dk; only 'run' and 'serve' remain in @sap/cds.\n\n```shell\ncds build --for hana\ncds build --for hana --opts model=[db,srv,schema.cds]\ncds build --production\nNODE_ENV=production cds build\ncds build --help\n```\n",
    "Command Line / Toolkit > CLI Commands Moved to @sap/cds-dk\nCLI, cds-dk, Node.js, npm, installation, dev dependency, package.json\nShows recommended ways to add the @sap/cds-dk package to your project, either by installing it before running build commands or by adding it as a dev dependency. This is necessary, as CLI commands (other than 'run' and 'serve') have been moved to @sap/cds-dk.\n\n```shell\nnpm i @sap/cds-dk && npm run ...\nnpm i @sap/cds-dk --save-dev\n```\n",
    "Command Line / Toolkit > CLI Commands Moved to @sap/cds-dk\ncli, Node.js, mta.yaml, npx, cds-dk\nThis command replaces 'npx cds' in Node.js projects' mta.yaml files due to moving CLI commands to the @sap/cds-dk package.\n\n```shell\nnpx -p @sap/cds-dk cds\n```\n",
    "Command Line / Toolkit > Using await in cds repl\nrepl, await, Node.js, CLI, interactive shell\nDemonstrates using 'await' directly in the cds repl (interactive shell), thanks to Node.js's --experimental-repl-await option. This allows for async operations in the shell.\n\n```shell\n[demo] cds repl\nWelcome to cds repl v4.1.5\n> m = await cds.load('*')\n```\n",
    "CDS Language & Compiler > Streamlined Compiler by Default\ncompiler, streamlined compiler, configuration, CDS features, package.json, cdsrc.json\nJSON snippet to disable the new streamlined compiler in CAP by setting 'snapi' to false in package.json or .cdsrc.json. This fallback is temporary and intended for migrations/issues.\n\n```json\n{\n  \"cds\": {\n    \"features\": { \"snapi\": false }\n  }\n}\n```\n",
    "CDS Language & Compiler > Managed Compositions for Improved Domain Modeling\ncds modeling, managed composition, domain model, entity, Composition, cds\nDefines a CDS entity with a managed composition, allowing nested, inline substructures (e.g., Items within Orders) without explicit separate entities. Enhances model conciseness and avoids complex reverse associations.\n\n```cds\nentity Orders {\n  Items : Composition of many {\n    product : Association to Products;\n    quantity : Integer;\n  }\n}\n```\n",
    "CDS Language & Compiler > Managed Compositions for Improved Domain Modeling\ncds modeling, managed composition, domain model, many-to-many, cds, entity\nExample of a managed composition to realize a many-to-many relationship between Teams and Users using Composition of many within the Teams entity.\n\n```cds\nentity Teams {\n  members : Composition of many { key user: Association to Users; }\n}\nentity Users { ... }\n```\n",
    "CDS Language & Compiler > Managed Compositions for Improved Domain Modeling\ncds modeling, managed composition, many-to-many, attributes, cds, enum\nShows how to model an attributed many-to-many relationship with managed compositions. Members can have roles (enum) associated with their user association.\n\n```cds\nentity Teams {\n  members : Composition of many {\n    key user : Association to Users;\n    role : String enum { Lead; Member; Collaborator; }\n  }\n}\nentity Users { ... }\n```\n",
    "CDS Language & Compiler > Arrayed Elements in Entities to Avoid Joins\ncds modeling, arrayed elements, entity, performance, JSON, cds\nDefines an entity with an arrayed element, using 'many' to create an embedded list (e.g., emails). These are stored as JSON in a single column, improving performance and model readability.\n\n```cds\nentity User {\n  emails: many { kind:String; address:String }\n}\n```\n",
    "CDS Language & Compiler > Structs and Associations in on Conditions\ncds modeling, entity, association, structs, on condition, cds\nAn example showing how to use structs and managed associations in 'on' conditions for associations, enabling more expressive and type-safe relationship definitions in CDS models.\n\n```cds\nentity Project {\n  teams : Association to many Teams\n    on teams.country = $self.country\n    and teams.validity = $self.validity;\n  country : Association to Country;\n  validity : Validity;\n}\nentity Teams {\n  country : Association to Country;\n  validity : Validity;\n}\ntype Validity : { _from:Date; to:Date }\n```\n",
    "Node.js Runtime Version 4 > Important Changes\nNode.js, cds.connect, service, await, promise, refactor, connection\nShows the correct way to use cds.connect.to with 'await'. As of CAP v4, Promise-related magic is removed and async/await is required for connecting to services.\n\n```js\nconst srv = await cds.connect.to('some-service')\n```\n",
    "Node.js Runtime Version 4 > Important Changes\nNode.js, on handler, event, request, next, async, framework, handler refactor\nDemonstrates the new explicit way to call 'next()' in custom event handlers, replacing the implicit next() call. Aligns with the removal of framework magic in request handler chaining.\n\n```js\nthis.on(..., async (req,next)=>{ /* ... */ await next(); /* ... */ })\nthis.on(..., (req,next)=>{ /* ... */ return next() })\n```\n",
    "Node.js Runtime Version 4 > INSERT Queries Return Generated Keys\nNode.js, insert, generated keys, cds.run, INSERT, authors, js, entity\nShows how INSERT queries return iterables with generated keys. Demonstrates inserting records into Authors and then reusing generated IDs for related inserts into Books.\n\n```js\nconst [ Emily, Charlotte ] = await INSERT.into (Authors,[\n   {name:'Emily Brontë'},\n   {name:'Charlotte Brontë'},\n])\nINSERT.into(Books).columns('title','author_ID').rows(\n   [ 'Wuthering Heights', Emily.ID ],\n   [ 'Jayne Eyre', Charlotte.ID ],\n)\n```\n",
    "Node.js Runtime Version 4 > Streamlined, Extensible Bootstrapping by cds.server\nNode.js, custom server.js, bootstrapping, middleware, cds.server, extend server\nOutlines how to extend a custom server.js in CAP Node.js, allowing you to add middleware during bootstrap or after services are served, while retaining the default server bootstrapping.\n\n```js\n// custom server.js\nconst cds = require('@sap/cds')\ncds.on('bootstrap', (app)=>{ /* add your own middleware */ })\ncds.on('served', ()=>{ /* add more middleware */ })\nmodule.exports = cds.server //> delegate to default server.js\n```\n",
    "Node.js Runtime Version 4 > Custom cds.Service Subclasses\nNode.js, service implementation, custom handler, class, ApplicationService, event handler, Books\nDemonstrates declaring a service class as a subclass of cds.ApplicationService and registering event handlers ('UPDATE', 'CREATE') for a Books entity. This is now a supported pattern for custom service implementation.\n\n```js\n// srv/cat-service.js\nconst cds = require('@sap/cds')\nclass CatalogService extends cds.ApplicationService {\n  async init(){\n    this.on ('UPDATE','Books', (req)=>{...})\n    await super.init()\n    this.before ('CREATE','Books', (req)=>{...})\n  }\n}\nmodule.exports = CatalogService\n```\n",
    "Node.js Runtime Version 4 > Custom Handlers on cds.connected Services\nNode.js, cds.connect, event handler, database service, db service, prepend, custom logic\nShows how to prepend custom event handlers to a connected service (e.g., a database service) from the consumer side, enabling custom logic on standard services.\n\n```js\nconst db = await cds.connect('db')\ndb.prepend (()=>{\n  db.on ('INSERT','Orders', req => {...})\n  db.after ('READ','*', each => {...})\n})\n```\n",
    " i18n/messages_en.properties\ni18n, messages, req.reject, localized messages, error handling\nDefines a localized message with parameter placeholders for reporting an order that exceeds available stock. Used for internationalization in CAP Node.js applications.\n\n```properties\nORDER_EXCEEDS_STOCK=The order of {0} books exceeds the stock by {1}\n```\n",
    " i18n/messages_en.properties\nreq.reject, error handling, localized messages, parameterized error\nRejects a request with error code 400 and a message key 'ORDER_EXCEEDS_STOCK', passing order quantity and the amount by which it exceeds the stock as parameters for localization. Supports parameterized and translated error messages in CAP Node.js.\n\n```js\nreq.reject( 400, 'ORDER_EXCEEDS_STOCK', [\n   order.quantity,\n   order.quantity - book.stock\n])\n```\n",
    "Docs and Samples > Tests Added to cap/samples\ntest, CLI, npm, Mocha, Jest\nRuns project tests using either Jest or Mocha test runners via npm scripts. This is used to qualify CAP sample content and can be used as a blueprint for testing CAP Node.js projects.\n\n```shell\nnpm run jest  # or...\nnpm run mocha test/<individual test file>.js\n```\n",
    "Command Line > cds watch <package name>\nCLI, cds CLI, watch, package, project setup\nStarts the CAP server and watches for changes using the content of the specified package. Allows running a named package directly.\n\n```shell\ncds watch @capire/bookshop\n```\n",
    "Command Line > cds version -ls\nCLI, cds CLI, version, npm, dependencies\nLists the installed @sap/cds packages and their dependencies in a format similar to 'npm ls'. Useful for troubleshooting and inventory of CAP-related npm modules.\n\n```shell\ncds version -ls\n```\n",
    "Command Line > cds build --log-level\nCLI, build, cds CLI, configuration\nControls the log level when building CAP projects. Filters messages based on severity.\n\n```shell\ncds build --log-level\n```\n",
    "CDS Language & Compiler > Parsed-only Output\ncds modeling, compilation, CDL, CSN, parse, CLI\nCompiles a CDS file with the --parse flag to generate a minimal, parsed-only CSN output. Does not resolve imports or expand/validate references.\n\n```shell\ncds compile --parse\n```\n",
    "CDS Language & Compiler > Arrayed Types\ncds modeling, cds, arrayed types, modeling, definition\nIntroduces the 'many' keyword as a substitute for 'array of', for defining arrayed types in CDS models. These are now supported in persistence and mapped to cds.LargeString.\n\n```cds\nelements: many String;\n```\n",
    "CDS Language & Compiler > Parsed-only Output\nCSN, parse, cds compile, parsed-only output\nSample CSN output generated using 'cds compile --parse' illustrating minimal parsed information, no import resolution, and no integrity validation.\n\n```json\n{\n  \"namespace\": \"parsecdl\",\n  \"requires\": [ \"./bar\" ],\n  \"definitions\": {\n    \"parsecdl.Foo\": {\n      \"kind\": \"entity\",\n      \"query\": {\n        \"SELECT\": {\"from\": {\"ref\":[\"Bar\",\"toBar\"]},\n          \"columns\": [ \"*\", {\"ref\":[\"unchecked\"]} ]\n        }\n      }\n    }\n  },\n  \"extensions\": [\n    { \"extend\": \"Bar\",\n      \"elements\": {\n        \"add\": { \"type\":\"cds.Integer\" },\n        \"not_expanded\": { \"localized\":true, \"type\":\"cds.String\" }\n      }\n    }\n  ]\n}\n```\n",
    "CDS Language & Compiler > UI Annotations for Draft Administrative Data\nannotation, UI, DraftAdministrativeData\nShows how 'DraftAdministrativeData' entity elements are annotated with @Common.Label and @UI.Hidden for improved Fiori UIs. These annotations support localization and UI behaviors.\n\n```cds\n@Common.Label : 'Draft Is Created By Me'\n@UI.Hidden : true\nDraftIsCreatedByMe : Boolean;\n```\n",
    "Java Runtime > Customizing Error Messages\nJava, exception handling, logging, configuration\nYAML config properties to control error stack trace visibility (frontend) and detailed error logging in CAP Java runtime. Used for customizing technical error exposure and verbosity.\n\n```yaml\ncds.errors.stackMessages.enabled: false\ncds.errors.extended: true\n```\n",
    "Java Runtime > Customizing Error Messages\nJava, error message, localization, message bundle\nProperties file entry for localizing error messages by error code. Maps error code 400002 to a German message for invalid values.\n\n```properties\n400002=Der Wert '{}' ist ungültig\n```\n",
    "Java Runtime > Concurrency Control Using ETags\nJava, concurrency, etag, optimistic locking, service\nETags are now supported for concurrency control (optimistic locking) in CAP Java services. Use the builder API and service logic to enable ETag functionality.\n\n```java\n// No code sample given, but refer to cookbook section and Java Query Builder API for .etag() usage.\n```\n",
    "Java Runtime > Fiori Drafts > Changes in Draft Orchestration\nJava, event handler, draft, event, before handler, Fiori\nUpdate event handler registration for draft-enabled entities: saving a draft now triggers an UPDATE event instead of an UPSERT. Add CdsService.EVENT_UPDATE for correct draft orchestration.\n\n```java\n@Before(event = { CdsService.EVENT_CREATE, CdsService.EVENT_UPSERT })\npublic void validateOrders(Stream<Orders> orders) {\n   ...\n}\n// After\n@Before(event = { CdsService.EVENT_CREATE, CdsService.EVENT_UPSERT, CdsService.EVENT_UPDATE })\npublic void validateOrders(Stream<Orders> orders) {\n    ...\n}\n```\n",
    "Java Runtime > Accessing XSUAA JWT Token Properties\nJava, xsuaa, JWT, token, user info\nShows how to access properties of XSUAA-issued JWT tokens using XsuaaUserInfo in CAP Java services, enabling logging or validation on user context.\n\n```java\nimport com.sap.cds.feature.xsuaa.XsuaaUserInfo;\n\n@Autowired\nprivate XsuaaUserInfo xsuaaToken;\n\n@Before(...)\npublic void eventHandler(EventContext event) {\n\tlogger.info(\"Request user: {} {} email: {}\",\n\t\txsuaaToken.getGivenName(),\n\t\txsuaaToken.getFamilyName(),\n\t\txsuaaToken.getEmail() );\n}\n```\n",
    "Java Runtime > CDS Query Builder\nJava, query builder, CQN, inline count\nJava Query Builder supports inline counting in queries. The 'inlineCount()' modifier enables OData $count result projection along with requested entities.\n\n```java\nResult result = dataStore.execute(Select.from(BOOK).limit(2).inlineCount());\nboolean hasCount = select.hasInlineCount();\n```\n",
    "Java Runtime > CDS Query Builder\nJava, query builder, CQN, exists, subquery\nFilter employees by complex EXISTS subquery using Java's Select builder. Enables correlated subquery predicates in CQL.\n\n```java\nSelect.from(EMPLOYEE)\n  .columns(c -> c.id(), c -> c.name())\n  .where(e -> e.exists(outer ->\n    Select.from(CAR)\n      .where(c -> c.owner().id().eq(outer.id()).and(c.licensePlate().eq(\"XYZ123\")))))\n```\n",
    "Java Runtime > CDS Query Builder\nJava, query builder, pessimistic locking, write lock\nShows how to use the .lock(timeout) modifier in the query builder for pessimistic locking (write lock) with optional timeout in CAP Java.\n\n```java\nSelect.from(\"bookshop.Books\").where(b -> b.get(\"ID\").eq(1)).lock(5);\n```\n",
    " Important Changes❗️ > cds build Uses New Build System\ncds CLI, build, new build system, cds build\nRuns 'cds build', which now delegates to the new build system by default (cds build/all). This system supports staging builds, SAP HANA Cloud Edition, and CSV-based initial data population.\n\n```shell\ncds build\n```\n",
    " Docs and Samples > Revamped and Reloaded _cap/samples_\nproject setup, monorepo, samples, Vue.js\nReference to the revamped cap/samples repository. Includes improved monorepo setup, project organization, and a bookshop with a Vue.js app.\n\n```txt\ncap/samples\n```\n",
    " CDS Language & Compiler > Documentation Comments\nCDS annotations, documentation comments, cds modeling, compiler\nShows how to add a documentation comment to an entity in CDS. With cds compile --docs, this comment is preserved and propagated in CSN and OData output as doc/Core.Description.\n\n```cds\n/** This is an example for a doc comment */\nentity Foo { key ID:UUID; ... }\n```\n",
    " CDS Language & Compiler > Documentation Comments\nCSN, doc comment, to json\nExample output in CSN format. The doc comment appears as the 'doc' property in the entity definition when using cds compile --docs.\n\n```json\n{\n  \"definitions\": {\n    \"Foo\": { \"kind\": \"entity\", \"doc\": \"This is an example for a doc comment\", ... }\n  }\n}\n```\n",
    " CDS Language & Compiler > DISTINCT and ALL\ncompilation, validate, function call, DISTINCT, ALL, aggregation\nThe compiler now supports using DISTINCT and ALL in aggregate functions for counting distinct/all values.\n\n```cds\ncount(distinct ...)\ncount(all ...)\n```\n",
    " CDS Language & Compiler > New Option --clean\ncompilation, validate, CSN, to json, compiler option, clean\nUse this to return a CSN that only includes items found in the .cds source, without derived/added information.\n\n```shell\ncds compile --clean\n```\n",
    " Command Line > Integrate and Mashup with cds watch\ncds CLI, watch, edmx, import, integration\nRuns the CDS application in watch mode. If an .edmx file is added, cds watch automatically triggers 'cds import' to convert it.\n\n```shell\ncds watch\n```\n",
    " Command Line > Start Service in Watch Mode\nservice implementation, serve, watch, CLI\nStarts a specific service (<srv>) in nodemon watch mode. Useful for rapid development cycles.\n\n```shell\ncds serve <srv> --watch\n```\n",
    " Command Line > List All Dependencies of Your Local _package.json_\ncds CLI, list, dependencies, package.json, version\nLists all dependencies from your local package.json via the cds CLI.\n\n```shell\ncds version --all\n```\n",
    " CDS Editors & Tools > Installation of CDS Development Kit\neditor, VS Code, CDS toolkit, install, update\nThe VS Code extension for CDS checks for missing or outdated installations of the CDS Development Kit and offers install/update actions.\n\n```txt\nSAP CDS extension for Visual Studio Code\n```\n",
    " Node.js Runtime > Important Changes❗️\nNode.js, user, req.user, authentication, multiTenant: true\nAccesses the currently logged-in user via req.user in Node.js event handlers. Relevant when multitenancy and authentication are enabled.\n\n```js\n// Access current user in handler\nconst user = req.user;\n```\n",
    " Node.js Runtime > Convenient Access to express Request Object\nNode.js, Express, request, cds.Request, express object\nAccess the original Express.js request and response objects in your handler via req._. Useful for low-level operations or integrating with middleware.\n\n```js\n// Get underlying express req/res\nconst { req: expressReq, res: expressRes } = req._;\n```\n",
    " Node.js Runtime > Localized Data - Access to Default Values\ncds modeling, localized, annotation, default values\nPrevents automatic redirection to localized views for a given localized entity. Place the annotation on the entity definition.\n\n```cds\n@cds.localized:false\n```\n",
    " Java Runtime > Build Improvements\nJava, maven, build, cds-dk, profile\nSpeeds up Java project builds by using a globally installed CDS-DK, invoked via the 'cdsdk-global' Maven profile.\n\n```shell\nmvn spring-boot:run -P cdsdk-global\n```\n",
    " Java Runtime > Build Improvements\nJava, maven, cds4j, eventContext, custom code, OData action\nInclude this configuration in the CDS4J Maven plugin to generate EventContext interfaces for OData actions and functions, providing type-safe accessors in Java handler code.\n\n```xml\n<eventContext>true</eventContext>\n```\n",
    " Java Runtime > Build Improvements\ncds modeling, action, Java, service definition\nCDS model defining an action 'review' on entity Books, with input parameter stars and output Reviews. Example for event context usage in Java.\n\n```cds\nentity Books {\n  ...\n  action review(stars: Integer) returns Reviews;\n  ...\n}\n\nentity Reviews {\n    book : Association to Books;\n    stars: Integer;\n}\n```\n",
    " Java Runtime > Build Improvements\nJava, handler, eventContext, generated type, action\nHandler implementation in Java for the 'review' action using generated ReviewContext and Reviews types.\n\n```java\n@On(entity = Books_.CDS_NAME)\npublic void review(ReviewContext context) {\n    int stars = context.getStars();\n    ...\n    Reviews review = [...]\n    context.setResult(review)\n}\n```\n",
    " Java Runtime > Spring Framework Integration\nJava, configuration, Spring Boot, actuator, CDS endpoint\nActivates the <basepath>/actuator/cds endpoint in Spring Boot for CAP Java applications, exposing CDS-related info for debugging and monitoring.\n\n```yaml\nmanagement.endpoints.web.exposure.include: info,health,cds\n```\n",
    " Java Runtime > OData V4\nJava, configuration, OData V4, absolute URL\nControls if the @context field in OData V4 responses contains an absolute (true) or a relative (false, default) path.\n\n```yaml\ncds.odatav4.contextAbsoluteUrl: true\n```\n",
    " Java Runtime > Miscellaneous\nJava, configuration, locales, i18n, whitelist\nConfigures the whitelist of normalized locales for CAP Java via application configuration.\n\n```yaml\ncds.locales.normalization:\n  defaults: true  # Keep default whitelist as documented in capire\n  whiteList:      # These locales are added to the default whitelist\n    - \"zh_CN\"\n    - \"zh_HK\"\n```\n",
    " Java Runtime > Miscellaneous\ncsv, Java, initial data, db/data, db/csv\nControls loading of .csv files (for configuration or initial data) into the database at startup, can be set to 'always' or 'never'.\n\n```yaml\ncds.datasource.csv-initialization-mode: always # or 'never'\n```\n",
    " Localization, i18n > Externalizing Texts Bundles\ncds modeling, annotations, externalizing texts, i18n\nDefines a CDS service with an entity 'Books' whose UI annotations use i18n text keys for labels and type names, pointing to externalized resource bundles. This is the essential pattern for externalizing literal texts to enable localization.\n\n```cds\nservice Bookshop {\n  entity Books @(\n    UI.HeaderInfo: {\n      Title.Label: '{i18n>Book}',\n      TypeName: '{i18n>Book}',\n      TypeNamePlural: '{i18n>Books}',\n    },\n  ){/*...*/}\n}\n```\n",
    " Localization, i18n > Externalizing Texts Bundles\nproperties, i18n, text bundles\nShows a sample i18n.properties bundle mapping keys to literal texts. These keys are referenced in CDS annotations for localization of static text.\n\n```properties\nBook = Book\nBooks = Books\nfoo = Foo\n```\n",
    " Localization, i18n > Externalizing Texts Bundles\ni18n, text bundles, folder structure\nIllustrates a typical folder structure for i18n property files, providing language-specific text bundles (with locale codes) for localization fallback and overlays.\n\n```shell\n_i18n/\n  i18n.properties           # dev main --› 'default fallback'\n  i18n_en.properties        # English    --› 'default language'\n  i18n_de.properties        # German\n  i18n_zh_TW.properties     # Traditional Chinese\n  ...\n```\n",
    " Localization, i18n > Where to Place Text Bundles?\ni18n, text bundles, project structure\nSample recommended project structure showing placement of language properties files in a dedicated _i18n folder at project root, for localized text handling.\n\n```shell\nbookshop/\n├─ _i18n/\n│  ├─ i18n_en.properties\n│  ├─ i18n_de.properties\n│  ├─ i18n_fr.properties\n│  └─ i18n.properties\n│  ...\n```\n",
    " Localization, i18n > Where to Place Text Bundles?\ni18n, text bundles, location, project structure\nShows an example overall CAP project structure with multiple CDS sources, illustrating that i18n bundles can be placed in _i18n or i18n folders alongside or above such files.\n\n```shell\nbookshop/\n├─ app/\n│  ├─ browse/\n│  │  └─ fiori.cds\n│  ├─ common.cds\n│  └─ index.cds\n├─ srv/\n│  ├─ admin-service.cds\n│  └─ cat-service.cds\n├─ db/\n│  └─ schema.cds\n└─ readme.md\n```\n",
    " Localization, i18n > Where to Place Text Bundles?\ni18n, text bundles, location\nLists all locations in a CAP project where i18n text bundles are loaded from, based on the folder and model hierarchy. Ensures correct language overlays for each CDS file context.\n\n```shell\nbookshop/app/browse/_i18n\nbookshop/app/_i18n\nbookshop/srv/_i18n\nbookshop/db/_i18n\nbookshop/_i18n\n```\n",
    " Localization, i18n > CSV-Based Text Bundles\ni18n, CSV, text bundles\nSample CSV-based i18n text bundle format, mapping keys to multi-language translations. Allows for editing in spreadsheet tools as an alternative to .properties files in small projects.\n\n```csv\nkey;en;de;zh_CN;...\nBook;Book;Buch;...\nBooks;Books;Bücher;...\n```\n",
    " Localization, i18n > Normalized Locales > Configuring Normalized Locales\nconfiguration, package.json, i18n, preserved_locales\nConfiguration in package.json to define the set of 'preserved' locales that are not normalized to only language codes, thus keeping distinct variants with country/region (e.g., en_GB, zh_TW) for Node.js-based CAP apps.\n\n```json\n{\"cds\":{\n  \"i18n\": {\n    \"preserved_locales\": [\n      \"en_GB\",\n      \"fr_CA\",\n      \"pt_PT\",\n      \"pt_BR\",\n      \"zh_CN\",\n      \"zh_HK\",\n      \"zh_TW\"\n    ]\n  }\n}}\n```\n",
    " Localized Data > Declaring Localized Data\ncds modeling, localized, entity, domain model\nDefines a Books entity with 'title' and 'descr' marked as localized elements. The 'localized' modifier indicates these fields should have translated versions in multiple languages. This is used to enable i18n of application data in CAP models.\n\n```cds\nentity Books {\n  key ID       : UUID;\n      title    : localized String;\n      descr    : localized String;\n      price    : Decimal;\n      currency : Currency;\n}\n```\n",
    " Localized Data > Behind the Scenes\ncds modeling, unfolded, localized, texts, CSN generation\nRepresents the compiler-generated Books.texts entity, which stores translations of localized fields for each locale. Complies with the automatic unfolding of the 'localized' modifier for persistent storage of multilingual data.\n\n```cds\nentity Books.texts {\n  key locale : sap.common.Locale;\n  key ID : UUID; //= source's primary key\n  title : String;\n  descr : String;\n}\n```\n",
    " Localized Data > Behind the Scenes\ncds modeling, unfolded, localized, associations\nShows the automatic extension of the Books entity with a composition ('texts') to all translations and an association ('localized') for retrieving translations base on the current user's locale.\n\n```cds\nextend entity Books with {\n  texts : Composition of many Books.texts on texts.ID=ID;\n  localized : Association to Books.texts on localized.ID=ID\n    and localized.locale = $user.locale;\n}\n```\n",
    " Localized Data > Behind the Scenes\ncds modeling, views, localized, sql, fallback\nIllustrates the view generated by the compiler to resolve localized fields using SQL COALESCE, falling back to the default value if no translation is found. This view is used for transparent localized data access.\n\n```cds\nentity localized.Books as select from Books {*,\n  coalesce (localized.title, title) as title,\n  coalesce (localized.descr, descr) as descr\n};\n```\n",
    " Localized Data > Behind the Scenes\nconfiguration, sqlite, i18n, package.json\nConfiguration snippet for package.json's 'cds' block to specify which languages CAP should prepare for localized views in SQLite during development and testing.\n\n```json\n{\n  \"i18n\": { \"for_sqlite\": [\"en\", ...] }\n}\n```\n",
    " Localized Data > Behind the Scenes\nconfiguration, H2, i18n, package.json\nConfiguration for 'i18n.for_sql' property in package.json, instructing CAP to include certain locales (languages) for localized support in H2 and other SQL databases.\n\n```json\n{\n  \"i18n\": { \"for_sql\": [\"en\", ...] }\n}\n```\n",
    " Localized Data > Behind the Scenes\ncds modeling, views, projection, localized\nA preferred view example excluding price and currency fields but preserving the 'localized' association. Ensures the view remains optimized for resolving localized texts in user queries.\n\n```cds\nentity OpenBookView as select from Books {*}\n  excluding { price, currency };\n```\n",
    " Localized Data > Behind the Scenes\ncds modeling, views, projection, localized, association\nExplicitly includes the 'localized' association in the projection of the Books entity. This enables optimized queries to retrieve localized texts in CAP applications.\n\n```cds\nentity ClosedBookView as select from Books { ID, title, descr, localized };\n```\n",
    " Localized Data > Extending *.texts* Entities\ncds modeling, aspects, extend, localized, texts, custom fields\nExtends the sap.common.TextsAspect to associate language metadata with each localized entry, supporting translation management processes and better modeling of localization.\n\n```cds\nextend sap.common.TextsAspect with {\n  language : Association to sap.common.Languages on language.code = locale;\n}\n```\n",
    " Localized Data > Extending *.texts* Entities\ncds modeling, localized, texts, aspects, include\nShows how Books.texts can inherit from sap.common.TextsAspect, ensuring a consistent set of fields for all text entities via includes and enabling easier extensibility.\n\n```cds\nentity Books.texts : sap.common.TextsAspect {\n  key ID : UUID;\n  title : String;\n  descr : String;\n}\n```\n",
    " Localized Data > Extending *.texts* Entities\ncds modeling, localized, texts, aspects, include, expanded\nDisplays an expanded version of a text entity after includes/extensions, demonstrating how new properties added via aspects are reflected in all localized text tables.\n\n```cds\nentity Books.texts {\n  // from sap.common.TextsAspect\n  key locale: sap.common.Locale;\n  language : Association to sap.common.Languages on language.code = locale;\n  // from Books\n  key ID : UUID;\n  title : String;\n  descr : String;\n}\n```\n",
    " Localized Data > Reading Localized Data\nsql, localized, read, default language\nQuery to select original (default language) texts from the Books table, without fetching any translations. Used in agnostic code for admin or technical use cases.\n\n```sql\nSELECT ID, title, descr from Books\n```\n",
    " Localized Data > Reading Localized Data\nsql, localized, read, user locale\nReads localized texts for end users by joining the Books table with its localized texts based on the user's current locale. This query pattern is used to serve i18n content automatically.\n\n```sql\nSELECT ID, localized.title, localized.descr from Books\n```\n",
    " Localized Data > Reading Localized Data\nsql, localized, read, translation UI\nShows how to read translated texts for a specific language (French) from the associated texts table. Used in translation UIs for editing or reviewing translations for specific languages.\n\n```sql\nSELECT ID, texts[locale='fr'].title, texts[locale='fr'].descr from Books\n```\n",
    " Localized Data > Reading Localized Data\nsql, localized, read, translation UI\nReads all available translations for each Books entry, returning all languages and their translations. Useful for administration and bulk translation maintenance.\n\n```sql\nSELECT ID, texts.locale, texts.title, texts.descr from Books\n```\n",
    " Localized Data > Serving Localized Data\ncds modeling, service definition, projection, localized\nDefines a CAP service (CatalogService) exposing multiple projections on the Books entity, including one with a substring expression on the localized title. Demonstrates how service exposures interact with localized fields.\n\n```cds\nusing { Books } from './books';\nservice CatalogService {\n  entity BooksList as projection on Books { ID, title, price };\n  entity BooksDetails as projection on Books;\n  entity BooksShort as projection on Books { \n    ID, price,\n    substr(title, 0, 10) as title : localized String(10), \n  };\n}\n```\n",
    " Localized Data > Serving Localized Data\ncds modeling, helper views, localized, service\nShows the generated 'localized.' helper entities mirroring service projections but sourcing from the localized tables or views. Useful for understanding SQL-side implementation and the automatic handling of localized data.\n\n```cds\nusing { localized.Books } from './books_localized';\n\nentity localized.CatalogService.BooksList as\n  SELECT from localized.Books { ID, title, price };\n\nentity localized.CatalogService.BooksDetails as\n  SELECT from localized.Books;\n  \nentity localized.CatalogService.BooksShort as\n    SELECT from localized.Books { ID, price,\n        substr(title, 0, 10) as title : localized String(10),\n    };\n```\n",
    " Localized Data > Serving Localized Data\ncds modeling, annotation, service definition, no-localized\nMarks a service entity with @cds.localized: false to bypass the framework's automatic redirection to localized views. All data will be served in the default language, ignoring any translations.\n\n```cds\nusing { Books } from './books';\nservice CatalogService {\n  @cds.localized: false //> direct access to base entity; all fields are non-localized defaults\n  entity BooksDetails as projection on Books;\n}\n```\n",
    " Localized Data > Serving Localized Data\nhttp, deep insert, write, localized, translation, text table\nExample HTTP POST request for a deep insert including an initial entry and a German translation. Demonstrates how CAP structured payloads support creating localized texts alongside the main entity data.\n\n```http\nPOST <your_service_url>/Entity HTTP/1.1\nContent-Type: application/json\n\n{\n  \"name\": \"Some name\",\n  \"description\": \"Some description\",\n  \"texts\": [ {\"name\": \"Ein Name\", \"description\": \"Eine Beschreibung\", \"locale\": \"de\"} ]\n}\n```\n",
    " Localized Data > Serving Localized Data\nhttp, write, localized, translation, text table\nAdds a new translation entry (e.g., in German) to an existing entity by posting data to the /texts navigation property on the service endpoint.\n\n```http\nPOST <your_service_url>/Entity(<entity_key>)/texts HTTP/1.1\nContent-Type: application/json\n\n{\n  {\"name\": \"Ein Name\", \"description\": \"Eine Beschreibung\", \"locale\": \"de\"}\n}\n```\n",
    " Localized Data > Serving Localized Data\nhttp, update, write, localized, translation, deep update\nIllustrates deep updating of both the default and localized texts for an entity. PATCH or PUT can be used; useful for maintenance UIs supporting multi-language updates in one request.\n\n```http\nPUT/PATCH <your_service_url>/Entity(<entity_key>) HTTP/1.1\nContent-Type: application/json\n\n{\n  \"name\": \"Some new name\",\n  \"description\": \"Some new description\",\n  \"texts\": [ {\"name\": \"Ein neuer Name\", \"description\": \"Eine neue Beschreibung\", \"locale\": \"de\"} ]\n}\n```\n",
    " Localized Data > Serving Localized Data\nhttp, update, write, localized, translation, field update\nUpdates a single field in a specific language's translation for a given entity via navigation to its localized texts table entry. Supports granular language-specific edits.\n\n```http\nPUT/PATCH <your_service_url>/Entity(<entity_key>)/texts(ID=<entity_key>,locale='<locale>')/<field_name> HTTP/1.1\nContent-Type: application/json\n\n{\n  {\"name\": \"Ein neuer Name\"} ]\n}\n```\n",
    " Localized Data > Serving Localized Data\nhttp, delete, localized, translation, text table\nPerforms deletion of a translation for a specific locale on an entity by targeting the navigation property in the service endpoint.\n\n```http\nDELETE <your_service_url>/Entity(<entity_key>)/texts(ID=<entity_key>,locale='<locale>') HTTP/1.1\n```\n",
    " Localized Data > Nested Localized Data\ncds modeling, localized, associations, nested\nDemonstrates redirection of associations to other entities (e.g., Currencies) with localized fields. Upon unfolding, associations to code lists are automatically adjusted to refer to their localized views in nested scenarios.\n\n```cds\nentity localized.Currencies as select from Currencies AS c {* /*...*/};\nentity localized.Books as select from Books AS p mixin {\n  // association is redirected to localized.Currencies\n  country : Association to localized.Currencies on country = p.country;\n} into {* /*...*/};\n```\n",
    " Localized Data > Nested Localized Data\nsql, nested, localized, read\nShows how to run a query retrieving localized fields both in the Books entity and its associated currency by joining against the localized views. This achieves nested localization with proper fallback.\n\n```sql\nSELECT from localized.Books {\n  ID, title, descr,\n  currency.name as currency\n} where title like '%pen%' or currency.name like '%land%'\n```\n",
    " Localized Data > Adding Initial Data\ncsv, initial data, localized, Books\nSample content for Books.csv, required for initial data in the default language. All book data is included in the base language (e.g., English).\n\n```csv\nID;title;descr;author_ID;stock;price;currency_code;genre_ID\n201;Wuthering Heights;Wuthering Heights, Emily Brontë's only novel ...;101;12;11.11;GBP;11\n207;Jane Eyre;Jane Eyre is a novel by English writer ...;107;11;12.34;GBP;11\n251;The Raven;The Raven is a narrative poem by ...;150;333;13.13;USD;16\n252;Eleonora;Eleonora is a short story by ...;150;555;14;USD;16\n271;Catweazle;Catweazle is a British fantasy ...;170;22;150;JPY;13\n```\n",
    " Localized Data > Adding Initial Data\ncsv, initial data, localized, Books_texts\nSample Books_texts.csv providing the corresponding translations for fields marked as localized in the domain model. Used alongside Books.csv for initial data loading in multiple languages.\n\n```csv\nID;locale;title;descr\n201;de;Sturmhöhe;Sturmhöhe (Originaltitel: Wuthering Heights) ist der einzige Roman...\n201;fr;Les Hauts de Hurlevent;Les Hauts de Hurlevent (titre original : Wuthering Heights)...\n207;de;Jane Eyre;Jane Eyre. Eine Autobiographie (Originaltitel: Jane Eyre. An Autobiography)...\n252;de;Eleonora;Eleonora ist eine Erzählung von Edgar Allan Poe. Sie wurde 1841...\n```\n",
    " Temporal Data > Starting with 'Timeless' Models > Timeless Model\ncds modeling, entity, association, project setup, domain model\nDefines a timeless CDS model for managing employees, work assignments, and departments. Demonstrates standard associations and compositions, assuming no temporal aspects yet. Useful as a starting model before adding temporal semantics.\n\n```cds\nnamespace com.acme.hr;\nusing { com.acme.common.Persons } from './common';\n\nentity Employees : Persons {\n  jobs : Composition of many WorkAssignments on jobs.empl=$self;\n  job1 : Association to one /*of*/ WorkAssignments;\n}\n\nentity WorkAssignments {\n  key ID  : UUID;\n  role    : String(111);\n  empl    : Association to Employees;\n  dept    : Association to Departments;\n}\n\nentity Departments {\n  key ID  : UUID;\n  name    : String(111);\n  head    : Association to Employees;\n  members : Association to many Employees on members.jobs.dept = $self;\n}\n```\n",
    " Temporal Data > Declaring Temporal Entities > Using Annotations `@cds.valid.from/to`\ncds modeling, annotations, cds.valid.from/to, temporal, temporal entity\nExtends a CDS entity definition with @cds.valid.from and @cds.valid.to annotations to enable temporal functionality. Indicates the start and end date fields for application-time period tracking, triggering built-in support for serving temporal data.\n\n```cds\nentity WorkAssignments { //...\n  start : Date @cds.valid.from;\n  end   : Date @cds.valid.to;\n}\n```\n",
    " Temporal Data > Declaring Temporal Entities > Using Common Aspect `temporal`\ncds modeling, aspect, temporal, declaration, @sap/cds/common\nShows how to declare an entity as temporal by using the predefined 'temporal' aspect from @sap/cds/common. This automatically adds validFrom and validTo fields with the necessary annotations, simplifying the declaration of temporal entities.\n\n```cds\nusing { temporal } from '@sap/cds/common';\nentity WorkAssignments : temporal {/*...*/}\n```\n",
    " Temporal Data > Declaring Temporal Entities > Using Common Aspect `temporal`\ncds modeling, aspect, temporal, @sap/cds/common\nThe 'temporal' aspect as defined in the @sap/cds/common package. It introduces validFrom and validTo timestamp fields, both annotated to trigger temporal handling. Intended for reuse across multiple entities requiring period validity.\n\n```cds\naspect temporal {\n  validFrom : Timestamp @cds.valid.from;\n  validTo   : Timestamp @cds.valid.to;\n}\n```\n",
    " Temporal Data > Declaring Temporal Entities > Separate Temporal Details\ncds modeling, composition, temporal, entity\nIllustrates how to separate non-temporal from temporal data by linking a non-temporal entity (WorkAssignments) to a temporal details entity (WorkDetails) through composition. Only WorkDetails is subject to change tracking over time.\n\n```cds\nentity WorkAssignments {          // non-temporal head entity\n  key ID  : UUID;\n  empl    : Association to Employees;\n  details : Composition of WorkDetails on details.ID = $self.ID;\n}\nentity WorkDetails : temporal {   // temporal details entity\n  key ID  : UUID;                 // logical record ID\n  role    : String(111);\n  dept    : Association to Departments;\n}\n```\n",
    " Temporal Data > Serving Temporal Data\nservice definition, OData, projection, exposure, cds\nCDS service definition exposing Employees, WorkAssignments, and Departments entities via OData using projections. Assumes temporal logic is handled in the model. Enables as-of-now and time-travel queries via the service.\n\n```cds\nusing { com.acme.hr } from './temporal-model';\nservice HRService {\n  entity Employees as projection on hr.Employees;\n  entity WorkAssignments as projection on hr.WorkAssignments;\n  entity Departments as projection on hr.Departments;\n}\n```\n",
    " Temporal Data > Reading Temporal Data > As-of-now Queries\nOData, sample request, http, cds, as-of-now, temporal\nSample OData HTTP GET request to retrieve all employees and their current work assignments and respective departments, expanding nested relationships. Demonstrates as-of-now query processing for temporal entities exposed by a CDS service.\n\n```http\nGET Employees?\n$expand=jobs($select=role&$expand=dept($select=name))\n```\n",
    " Temporal Data > Reading Temporal Data > As-of-now Queries\njson, OData, response structure, temporal, as-of-now\nExample payload returned from an as-of-now OData query for Employees, showing expanded jobs and department details. Reflects the current valid state (as of a given timestamp).\n\n```json\n[\n  { \"ID\": \"E1\", \"name\": \"Alice\", \"jobs\": [\n    { \"role\": \"Architect\", \"dept\": {\"name\": \"Core Development\"}},\n    { \"role\": \"Consultant\", \"dept\": {\"name\": \"App Development\"}}\n  ]},\n  { \"ID\": \"E2\", \"name\": \"Bob\", \"jobs\": [\n    { \"role\": \"Builder\", \"dept\": {\"name\": \"Construction\"}}\n  ]}\n]\n```\n",
    " Temporal Data > Reading Temporal Data > Time-Travel Queries\nOData, sample request, time-travel, http, cds, temporal\nSample OData HTTP GET request for a time-travel query. Retrieves Employees and their job/department details as of January 1, 2017, using the sap-valid-at query parameter. Requires temporal entities to be configured.\n\n```http\nGET Employees?sap-valid-at=date'2017-01-01'\n$expand=jobs($select=role&$expand=dept($select=name))\n```\n",
    " Temporal Data > Reading Temporal Data > Time-Travel Queries\njson, OData, response structure, temporal, time-travel\nExample JSON response showing the state of Employees' jobs at a previous point in time, as returned from a time-travel OData query. Demonstrates how temporal entities expose history slices.\n\n```json\n[\n    { \"ID\": \"E1\", \"name\": \"Alice\", \"jobs\": [\n      { \"role\": \"Developer\", \"dept\": {\"name\": \"Core Development\"}},\n      { \"role\": \"Consultant\", \"dept\": {\"name\": \"App Development\"}}\n    ]}, ...\n]\n```\n",
    " Temporal Data > Reading Temporal Data > Time-Period Queries\nOData, sample request, time-period, http, cds, temporal\nSample OData HTTP GET request for a time-period (history) query. Returns Employees with all job/department assignments valid since January 1, 2016, using the sap-valid-from parameter. Demonstrates retrieval of entity history.\n\n```http\nGET Employees?sap-valid-from=date'2016-01-01'\n$expand=jobs($select=role&$expand=dept($select=name))\n```\n",
    " Temporal Data > Reading Temporal Data > Time-Period Queries\njson, OData, response structure, temporal, time-period\nJSON response for a time-period OData query. Returns all job assignments for an employee, showing roles and departments over different validity intervals. Demonstrates the result of querying a temporal entity's change history.\n\n```json\n[\n  { \"ID\": \"E1\", \"name\": \"Alice\", \"jobs\": [\n    { \"role\": \"Developer\", \"dept\": {\"name\": \"App Development\"}},\n    { \"role\": \"Developer\", \"dept\": {\"name\": \"Core Development\"}},\n    { \"role\": \"Senior Developer\", \"dept\": {\"name\": \"Core Development\"}},\n    { \"role\": \"Consultant\", \"dept\": {\"name\": \"App Development\"}}\n  ]}, ...\n]\n```\n",
    " Temporal Data > Reading Temporal Data > Time-Period Queries\nOData, sample request, time-period, expand, http, cds, temporal\nSample OData GET request to retrieve Employees and their job history since 2016, including each job's validFrom date, role, and department name. Enables fine-grained historical analysis of temporal data records.\n\n```http\nGET Employees?sap-valid-from=date'2016-01-01'\n$expand=jobs($select=validFrom,role,dept/name)\n```\n",
    " Temporal Data > Reading Temporal Data > Transitive Temporal Data\ncds modeling, temporal, advanced associations, join, aspect-oriented modeling\nDemonstrates handling of advanced cases where both WorkAssignments and Departments are temporal. Shows how to define a transitive association (dept1) that matches the validity intervals to avoid redundant joins in expanded queries.\n\n```cds\nusing { temporal } from '@sap/cds/common';\nentity WorkAssignments : temporal {/*...*/\n  dept : Association to Departments;\n  dept1 : Association to Departments on dept1.id = dept.id\n    and dept1.validFrom <= validFrom and validFrom < dept1.validTo;\n}\nentity Departments : temporal {/*...*/}\n```\n",
    " Temporal Data > Primary Keys of Time Slices\nsql, DDL, temporal, primary key, row structure\nSample SQL DDL statement showing table structure for a temporal entity with a composite primary key on (ID, validFrom). This enables unique identification of time slices for each logical record.\n\n```sql\nCREATE TABLE com_acme_hr_WorkAssignments (\n    ID : nvarchar(36),\n    validFrom : timestamp,\n    validTo : timestamp,\n    -- ...\n    PRIMARY KEY ( ID, validFrom )\n)\n```\n",
    " Temporal Data > Primary Keys of Time Slices\nxml, OData, entity, API definition, temporal, output, primary key, edmx\nExcerpt from the OData EDMX entity definition for WorkAssignments. Shows that, despite using (ID, validFrom) as a technical key in SQL, only the conceptual key ID is exposed for the API, keeping the interface timeless.\n\n```xml\n<EntityType Name=\"WorkAssignments\">\n  <Key>\n    <PropertyRef Name=\"ID\"/>\n  </Key>\n  ...\n</EntityType>\n```\n",
    " Temporal Data > Primary Keys of Time Slices\nsql, temporal, querying, select, primary key\nSQL query to retrieve a specific time slice for a given WorkAssignment by matching both the logical key and the validFrom timestamp. Enables time-based data lookups in temporal tables.\n\n```sql\nSELECT from WorkAssignments WHERE ID='WA1' and validFrom='2017-01-01'\n```\n",
    " Temporal Data > Primary Keys of Time Slices\ncds modeling, temporal, association, entity\nShows how to reference individual time slices in associations by including both ID and validFrom fields, allowing navigation to a specific version of a temporal record.\n\n```cds\nentity SomeSnapshotEntity {\n  //...\n  workAssignment : Association to WorkAssignments { ID, validFrom }\n}\n```\n",
    " CDS-based Authorization > Authentication as Prerequisite > Defining Internal Services\nservice definition, internal services, protocol, CDS\nDefines a CDS service meant for internal usage only by annotating it with @protocol: 'none'. Such a service is not exposed via protocol adapters and can only be accessed by in-process handlers. Use this to prevent external access to sensitive services.\n\n```cds\n@protocol: 'none'\nservice InternalService {\n  ...\n}\n```\n",
    " CDS-based Authorization > Restrictions > @readonly and @insertonly\nreadonly, insertonly, service definition, restricting events, CDS\nRestricts allowed CRUD operations for entities in a service. @readonly makes the Books entity read-only for all users, while @insertonly allows insert operations only on Orders. Use these annotations to limit event types globally for all users.\n\n```cds\nservice BookshopService {\n  @readonly entity Books {...}\n  @insertonly entity Orders {...}\n}\n```\n",
    " CDS-based Authorization > Restrictions > @readonly and @insertonly\nservice definition, OData, Capabilities, configuration\nEnforces CRUD operation restrictions using standard OData Capabilities vocabulary annotation. Controls allowed operations on Foo entity via Insertable, Updatable, and Deletable flags.\n\n```cds\nservice SomeService {\n  @Capabilities: {\n    InsertRestrictions.Insertable: true,\n    UpdateRestrictions.Updatable: true,\n    DeleteRestrictions.Deletable: false\n  }\n  entity Foo { key ID : UUID }\n}\n```\n",
    " CDS-based Authorization > Restrictions > Events to Auto-Exposed Entities\nservice definition, autoexpose, association, composition, projection, CDS\nDemonstrates auto-exposed entities in CDS. 'Categories' is explicitly auto-exposed via @cds.autoexpose, 'Issues' is implicitly auto-exposed by composition, and 'Components' is explicitly exposed by projection. Shows how access rules apply to auto-exposed versus explicitly exposed entities.\n\n```cds\ncontext db {\n  @cds.autoexpose\n  entity Categories : cuid { ... }\n\n  entity Issues : cuid {\n    category: Association to Categories;\n    ...\n  }\n\n  entity Components : cuid {\n    issues: Composition of many Issues;\n    ...\n  }\n}\n\nservice IssuesService {\n  entity Components as projection on db.Components;\n}\n```\n",
    " CDS-based Authorization > Restrictions > @requires\nrestrict annotation, roles, pseudo roles, service definition, entity, CDS\nUses the @requires annotation to restrict service/entities/actions access to specific user roles or pseudo-roles like 'authenticated-user', 'Vendor', 'ProcurementManager', and 'system-user'. Important for basic role-based service and entity protection.\n\n```cds\nannotate BrowseBooksService with @(requires: 'authenticated-user');\nannotate ShopService.Books with @(requires: ['Vendor', 'ProcurementManager']);\nannotate ShopService.ReplicationAction with @(requires: 'system-user');\n```\n",
    " CDS-based Authorization > Restrictions > @restrict\nrestrict annotation, entity, CDS, fine-grained authorization, instance-based authorization\nDefines a fine-grained authorization on the Orders entity: only users with 'Auditor' role can read Orders where 'AuditBy' equals the current user. Demonstrates use of @restrict with grant, to, and where for instance-level access control.\n\n```cds\nentity Orders @(restrict: [\n    { grant: 'READ', to: 'Auditor', where: 'AuditBy = $user' }\n  ]) {/*...*/}\n```\n",
    " CDS-based Authorization > Restrictions > @restrict\nrestrict annotation, entity, roles, multiple grants, CDS\nGrants both 'Reviewer' and 'Customer' roles permission to read or write Reviews, showing the use of @restrict with multiple events and roles.\n\n```cds\nentity Reviews @(restrict: [\n    { grant:['READ', 'WRITE'], to: ['Reviewer', 'Customer'] }\n  ]) {/*...*/}\n```\n",
    " CDS-based Authorization > Restrictions > @restrict\nrestrict annotation, entity, multi-privilege, CDS\nCombines privileges: 'Admin' can read/write all Orders, and any user can read Orders where they are the buyer. A request passes if at least one privilege is met.\n\n```cds\nentity Orders @(restrict: [\n    { grant: ['READ','WRITE'], to: 'Admin' },\n    { grant: 'READ', where: 'buyer = $user' }\n  ]) {/*...*/}\n```\n",
    " CDS-based Authorization > Restrictions > @restrict\nrestrict annotation, entity, multiple conditions, CDS\nAllows Auditors to read Orders for their own country, and any user to read/write Orders they created. Illustrates logical OR between privileges and conditions.\n\n```cds\nentity Orders @(restrict: [\n    { grant: 'READ', to: 'Auditor', where: 'country = $user.country' },\n    { grant: ['READ','WRITE'], where: 'CreatedBy = $user' },\n  ]) {/*...*/}\n```\n",
    " CDS-based Authorization > Restrictions > @restrict\nservice definition, action, functions, requires, restrict annotation, CDS\nDemonstrates using @requires and @restrict to protect service actions and functions, specifically allowing only 'Admin' to add ratings or get view counts.\n\n```cds\nservice CatalogService {\n  entity Products as projection on db.Products { ... }\n  actions {\n    @(requires: 'Admin')\n    action addRating (stars: Integer);\n  }\n  function getViewsCount @(restrict: [{ to: 'Admin' }]) () returns Integer;\n}\n```\n",
    " CDS-based Authorization > Restrictions > Combined Restrictions\nservice definition, combined restrictions, actions, entity, CDS\nShows how restrictions at the service and entity/action level are combined (logical AND): restricts operations on Products and Orders entities and their actions based on role and instance.\n\n```cds\nservice CustomerService @(requires: 'authenticated-user') {\n  entity Products @(restrict: [\n    { grant: 'READ' },\n    { grant: 'WRITE', to: 'Vendor' },\n    { grant: 'addRating', to: 'Customer'}\n  ]) {/*...*/}\n  actions {\n     action addRating (stars: Integer);\n  }\n  entity Orders @(restrict: [\n    { grant: '*', to: 'Customer', where: 'CreatedBy = $user' }\n  ]) {/*...*/}\n  action monthlyBalance @(requires: 'Vendor') ();\n}\n```\n",
    " CDS-based Authorization > Restrictions > Auto-Exposed and Generated Entities\nautoexposed, generated entities, annotation, restrict, CDS\nApplies different authorizations for auto-exposed and generated entities: 'Supporter' can access all, authenticated users can only read 'Components'. Demonstrates how authorization is delegated for auto-exposed targets.\n\n```cds\nannotate IssuesService.Components with @(restrict: [\n  { grant: '*', to: 'Supporter' },\n  { grant: 'READ', to: 'authenticated-user' } ]);\n```\n",
    " CDS-based Authorization > Restrictions > Inheritance of Restrictions\ninheritance, projection, restriction, override, CDS\nShows how service-level restrictions can override inherited entity restrictions for projections. BuyerService's Books entity inherits, AdminService's overrides.\n\n```cds\nnamespace db;\nentity Books @(restrict: [\n  { grant: 'READ', to: 'Buyer' },\n]) {/*...*/}\n\nservice BuyerService @(requires: 'authenticated-user'){\n  entity Books as projection on db.Books; /* inherits */\n}\n\nservice AdminService @(requires: 'authenticated-user'){\n  entity Books @(restrict: [\n    { grant: '*', to: 'Admin'} /* overrides */\n  ]) as projection on db.Books;\n}\n```\n",
    " CDS-based Authorization > Instance-Based Authorization\ninstance-based authorization, restrict annotation, where clause, CDS\nOnly allows users to read, update, or delete Orders that they themselves created by filtering on CreatedBy = $user using a where-clause in @restrict.\n\n```cds\nannotate Orders with @(restrict: [\n  { grant: ['READ', 'UPDATE', 'DELETE'], where: 'CreatedBy = $user' } ]);\n```\n",
    " CDS-based Authorization > Instance-Based Authorization\ninstance-based authorization, restrict annotation, where clause, roles, CDS\nExample of a conditional update privilege: 'Vendor' can only UPDATE Articles if there is stock (stock > 0).\n\n```cds\nannotate Articles with @(restrict: [\n  { grant: ['UPDATE'], to: 'Vendor',  where: 'stock > 0' } ]);\n```\n",
    " CDS-based Authorization > Instance-Based Authorization > User Attribute Values > Unrestricted XSUAA Attributes\nunrestricted xsuaa attribute, restrict annotation, valueRequired, CDS\nExample showing how to filter access to entities using an unrestricted XSUAA attribute (country) where users without the attribute get unrestricted access. Demonstrates the use of valueRequired:false.\n\n```cds\nservice SalesService @(requires: ['SalesAdmin', 'SalesManager']) {\n  entity SalesOrgs @(restrict: [\n     { grant: '*',\n       to: ['SalesAdmin', 'SalesManager'],\n       where: '$user.country = countryCode or $user.country is null' } ]) {\n     countryCode: String; /*...*/\n  }\n}\n```\n",
    " CDS-based Authorization > Instance-Based Authorization > User Attribute Values > Unrestricted XSUAA Attributes\npreferable restrict, restricted xsuaa attribute, CDS\nPreferred modeling with a restricted (valueRequired:true) XSUAA attribute: SalesManagers are restricted by their country, SalesAdmins are not. Avoids confusing access rules.\n\n```cds\nservice SalesService @(requires: ['SalesAdmin', 'SalesManager']) {\n  entity SalesOrgs @(restrict: [\n     { grant: '*',\n       to: 'SalesManager',\n       where: '$user.country = countryCode' },\n     { grant: '*',\n       to: 'SalesAdmin' } ]) {\n     countryCode: String; /*...*/\n  }\n}\n```\n",
    " CDS-based Authorization > Instance-Based Authorization > Exists Predicate\nexists predicate, restrict annotation, domain-driven authorization, CDS\nAuthorizes access to Projects only if the current user is a member with role Editor, using exists predicate in @restrict. All authorization information except $user comes from business data.\n\n```cds\nservice ProjectService @(requires: 'authenticated-user') {\n  entity Projects @(restrict: [\n     { grant: ['READ', 'WRITE'],\n       where: 'exists members[userId = $user and role = `Editor`]' } ]) {\n    members: Association to many Members; /*...*/\n  }\n  @readonly entity Members {\n    key userId  : User;\n    key role: String enum { Viewer; Editor; }; /*...*/\n  }\n}\n```\n",
    " CDS-based Authorization > Instance-Based Authorization > Exists Predicate\nexists predicate, n:m relationship, complex authorization, CDS\nAccess to Products is authorized via an exists predicate on an n:m relationship: User can access Products if their division matches any division of a producer via ProducingDivisions join table.\n\n```cds\nservice ProductsService @(requires: 'authenticated-user') {\n entity Products @(restrict: [\n   { grant: '*',\n     where: 'exists producers.division[$user.division = name]'}]): cuid {\n    producers : Association to many ProducingDivisions\n                on producers.product = $self;\n  }\n  @readonly entity ProducingDivisions {\n    key product : Association to Products;\n    key division : Association to Divisions;\n  }\n  @readonly entity Divisions : cuid {\n    name : String;\n    producedProducts : Association to many ProducingDivisions\n                       on producedProducts.division = $self;\n  }\n}\n```\n",
    " CDS-based Authorization > Instance-Based Authorization > Association Paths\nassociation path, where clause, restrict annotation, CDS\nApplies an authorization filter using an association path: SalesOrders can be read only if related product's productType matches the user attribute.\n\n```cds\nservice SalesOrderService @(requires: 'authenticated-user') {\n  entity SalesOrders @(restrict: [\n     { grant: 'READ',\n       where: 'product.productType = $user.productType' } ]) {\n    product: Association to one Products;\n  }\n  entity Products {\n    productType: String(32); /*...*/\n  }\n}\n```\n",
    " CDS-based Authorization > Best Practices > Prefer Single-Purposed, Use-Case Specific Services\nbest practices, service definition, roles, dedicated services, CDS\nDemonstrates service separation: instead of combining multiple roles/services in one, define single-purposed services per role/use-case, each tightly controlling exposed entities and operations.\n\n```cds\n@path:'browse'\nservice CatalogService @(requires: 'authenticated-user') {\n  @readonly entity Books\n  as select from db.Books { title, publisher, price };\n}\n\n@path:'internal'\nservice VendorService @(requires: 'Vendor') {\n  entity Books @(restrict: [\n    { grant: 'READ' },\n    { grant: 'WRITE', to: 'vendor', where: '$user.publishers = publisher' } ])\n  as projection on db.Books;\n}\n\n@path:'internal'\nservice AccountantService @(requires: 'Accountant') {\n  @readonly entity Books as projection on db.Books;\n  action doAccounting();\n}\n```\n",
    " CDS-based Authorization > Best Practices > Prefer Dedicated Actions for Specific Use-Cases\naction, service definition, dedicated actions, CDS\nRestricts data access by allowing only Admin users to perform sensitive actions (rename, delete) on Organizations. Promotes usage of dedicated actions for such use-cases instead of allowing general entity updates.\n\n```cds\nservice GitHubRepositoryService @(requires: 'authenticated-user') {\n  @readonly entity Organizations as projection on GitHub.Organizations actions {\n    @(requires: 'Admin') action rename(newName : String);\n    @(requires: 'Admin') action delete();\n  };\n}\n```\n",
    " CDS-based Authorization > Best Practices > Separation of Concerns\nservice definition, authorization model separation, aspects, CDS\nUses separate CDS aspect files to decouple service structure (services.cds) from authorization (services-auth.cds). Keeps services concise and allows separate lifecycle/ownership for auth model.\n\n```cds\n// services.cds\nservice ReviewsService {\n  /*...*/\n}\n\nservice CustomerService {\n  entity Orders {/*...*/}\n  entity Approval {/*...*/}\n}\n\n// services-auth.cds\nservice ReviewsService @(requires: 'authenticated-user'){\n  /*...*/\n}\n\nservice CustomerService @(requires: 'authenticated-user'){\n  entity Orders @(restrict: [\n    { grant: ['READ','WRITE'], to: 'admin' },\n    { grant: 'READ', where: 'buyer = $user' },\n  ]){/*...*/}\n  entity Approval @(restrict: [\n    { grant: 'WRITE', where: '$user.level > 2' }\n  ]){/*...*/}\n}\n```\n",
    " CDS-based Authorization > Role Assignments with XSUAA > 1. Roles and Attributes Are Filled into the XSUAA Configuration\nxsuaa, configuration, role templates, attributes, scopes, CDS, security\nGenerated xs-security.json fragment after 'cds add xsuaa'. Shows how scopes, attributes, and role-templates are derived from CDS model for use in XSUAA configuration and role assignment workflows.\n\n```json\n{\n  \"scopes\": [\n    { \"name\": \"$XSAPPNAME.admin\", \"description\": \"admin\" }\n  ],\n  \"attributes\": [\n    { \"name\": \"level\", \"description\": \"level\", \"valueType\": \"s\" }\n  ],\n  \"role-templates\": [\n    { \"name\": \"admin\", \"scope-references\": [ \"$XSAPPNAME.admin\" ], \"description\": \"generated\" }\n  ]\n}\n```\n",
    " CDS-based Authorization > Role Assignments with XSUAA > 1. Roles and Attributes Are Filled into the XSUAA Configuration\ncommand line, CDS, xsuaa, security, configuration\nRuns the CDS tool to automatically add default XSUAA configuration and generate xs-security.json with scopes and role templates extracted from the model.\n\n```shell\ncds add xsuaa\n```\n",
    " CDS-based Authorization > Role Assignments with XSUAA > 1. Roles and Attributes Are Filled into the XSUAA Configuration\ncommand line, CDS, xsuaa, security, configuration\nRe-generates the xs-security.json file from the current CDS model, reflecting the latest roles, scopes, and attributes.\n\n```shell\ncds compile srv --to xsuaa > xs-security.json\n```\n",
    " CDS-based Authorization > Role Assignments with XSUAA > 2. XSUAA Configuration Is Completed and Published > Through MTA Build\nmta.yaml, xsuaa, security, deployment, configuration, YAML\nDefines xsuaa service resource and binding in an MTA deployment scenario. Links the application module to the xsuaa-managed authentication service, points path to xs-security.json, and sets xsappname and tenant mode.\n\n```yaml\nmodules:\n  - name: bookshop-srv\n    requires:\n      - bookshop-auth\nresources:\n  name: bookshop-auth\n  type: org.cloudfoundry.managed-service\n  parameters:\n    service: xsuaa\n    service-plan: application\n    path: ./xs-security.json\n    config:\n      xsappname: bookshop-${org}-${space}\n      tenant-mode: dedicated\n```\n",
    " CDS-based Authorization > Role Assignments with XSUAA > 4. Scopes Are Narrowed to Local Roles\nrole check, Node.js, user roles, authorization, JavaScript\nChecks if the current user has the 'admin' role within a service implementation. Demonstrates how to programmatically evaluate user role assignments using CAP's Node.js API.\n\n```js\nreq.user.is (\"admin\")\n```\n",
    " CDS-based Authorization > Role Assignments with XSUAA > 4. Scopes Are Narrowed to Local Roles\nrole check, Node.js, user roles, authorization, JavaScript\nChecks for a namespaced role (my.app.admin) in service implementations from outside the defining app, showing how to reference fully-qualified role names in multi-app environments.\n\n```js\nreq.user.is (\"my.app.admin\")\n```\n",
    "Best Practices by CAP > Domain Models\ncds modeling, domain model, cds, entity, association\nDefines CDS entities Books and Authors with associations, localized fields, and usage of aspects such as cuid and managed. Demonstrates basic domain modeling in CAP using the Conceptual Definition Language (CDL). Associations are shown including a navigation from Authors to Books.\n\n```cds\nusing { Country, cuid, managed } from '@sap/cds/common';\n\nentity Books : cuid, managed {\n  title  : localized String;\n  author : Association to Authors;\n}\n\nentity Authors : cuid, managed {\n  name    : String;\n  books   : Association to many Books on books.author = $self;\n  country : Country;\n}\n```\n",
    "Best Practices by CAP > Domain Models > Associations\ncds modeling, associations, path expressions, views\nDeclares a CDS view entity that selects Books where the author's country code is 'GB'. Demonstrates use of path expressions and associations for filtering in CDS queries.\n\n```cds\nentity EnglishBooks as select from Books\nwhere author.country.code = 'GB';\n```\n",
    "Best Practices by CAP > Domain Models > Associations\ncds modeling, associations, path expressions, views, infix filters\nShows a compact CDS view entity using infix filters and navigation to create a list of books by authors from Great Britain. Demonstrates advanced association navigation and filtering in CDS.\n\n```cds\nentity EnglishBooks as select from Authors[country.code='GB']:books;\n```\n",
    "Best Practices by CAP > Domain Models > Associations > See how that would look like in SQL...\nSQL, views, association, join\nPlain SQL representation of a view with associations resolved as INNER JOINs. Translates a CDS association path expression into SQL JOIN logic.\n\n```sql\nCREATE VIEW EnglishBooks AS SELECT * FROM Books\n-- for Association Books:author:\nINNER JOIN Authors as author ON author.ID = Books.author_ID\n-- for Association Authors:country:\nINNER JOIN Countries as country ON country.code = author.country_code\n-- the actual filter condition:\nWHERE country.code = 'GB';\n```\n",
    "Best Practices by CAP > Domain Models > Aspects\ncds modeling, aspect-oriented modeling, aspects, annotations\nIllustrates aspect-oriented modeling in CDS by separating authorization rules from domain models and using the @restrict annotation for Books entity.\n\n```cds\n// All authorization rules go in here, the domain models are kept clean\nusing { Books } from './my/clean/schema.cds';\nannotate Books with @restrict: [{ grant:'WRITE', to:'admin' }];\n```\n",
    "Best Practices by CAP > Domain Models > Aspects\ncds modeling, aspect-oriented modeling, aspects, extend\nDemonstrates how to extend existing CDS definitions (here, sap.common.Countries) with additional fields, supporting use case such as verticalization without changing the original model.\n\n```cds\nusing { sap.common.Countries } from '@sap/cds/common';\nextend Countries with { county: String } // for UK, ...\n```\n",
    "Best Practices by CAP > Domain Models > Aspects\ncds modeling, customization, extend\nExample showing how SaaS customers can customize a reuse model (Books) by extending it with new fields like ISBN.\n\n```cds\nusing { Books } from '@capire/bookshop';\nextend Books with { ISBN: String }\n```\n",
    "Best Practices by CAP > Services > Services as Interfaces\nservice definition, cds modeling, actions\nDeclares a CDS service interface for BookshopService, exposing Books and Authors entities and a submitOrder action. Illustrates service interface declaration for behavioral aspects in CAP.\n\n```cds\nservice BookshopService {\n  entity Books : cuid { title: String; author: Association to Authors }\n  entity Authors :cuid { name: String; }\n  action submitOrder ( book: UUID, quantity: Integer );\n}\n```\n",
    "Best Practices by CAP > Services > Services as Facades\nservice definition, cds modeling, facade, projection, readonly\nDefines a service CatalogService with a readonly entity ListOfBooks as a projection on underlying domain models, demonstrating a flattened view as a service facade using projection and denormalization.\n\n```cds\nusing { sap.capire.bookshop as underlying } from '../db/schema';\nservice CatalogService {\n  @readonly entity ListOfBooks as projection on underlying.Books {\n    ID, title, author.name as author // flattened\n  }\n}\n```\n",
    "Best Practices by CAP > Services > Services as Facades\nservice definition, inferred interface, projection, cds modeling\nShows the inferred interface structure of a service exposing a projection (ListOfBooks), demonstrating the resulting element types from the CDS projection definition.\n\n```cds\nservice CatalogService {\n  @readonly entity ListOfBooks {\n    key ID : UUID;\n    title  : String;\n    author : String, // flattened authors.name\n  }\n}\n```\n",
    "Best Practices by CAP > Events > Event Handlers\nservice implementation, event handler, Node.js, custom logic\nShows a Node.js-based service provider implementation for BookshopService using event handlers for UPDATE, READ, and a custom action (SubmitOrder). Illustrates where to place custom logic and event reaction in CAP.\n\n```js\nclass BookshopService extends cds.ApplicationService { init() {\n  const { Books } = this.entities\n  this.before ('UPDATE', Books, req => validate (req.data))\n  this.after ('READ', Books, books => ... )\n  this.on ('SubmitOrder', req => this.emit ('BookOrdered',req.data))\n}}\n```\n",
    "Best Practices by CAP > Events > Event Handlers\nservice implementation, event handler, generic handlers, Node.js\nDemonstrates generic event handler registration patterns in Node.js/CDS application services. Shows actions for all entities, all events for a given entity, and all requests for the service.\n\n```js\nthis.before ('READ','*', ...)   // for READ requests to all entities\nthis.before ('*','Books', ...)  // for all requests to Books\nthis.before ('*', ...)          // for all requests served by this srv\n```\n",
    "Best Practices by CAP > Events > Event Listeners\nevent handler, service provider, observer, event listener, Node.js\nNode.js event handler example for a service provider, showing how to implement logic for SomeEvent inside the service itself.\n\n```js\nclass SomeServiceProvider { async init() {\n  this.on ('SomeEvent', req => { ... })\n}}\n```\n",
    "Best Practices by CAP > Events > Event Listeners\nevent handler, observer, event listener, Node.js\nNode.js event handler example for an external observer, showing how to listen to events from another CAP service using cds.connect.to.\n\n```js\nclass Observer { async init() {\n  const that = await cds.connect.to ('SomeService')\n  that.on ('SomeEvent', req => { ... })\n}}\n```\n",
    "Best Practices by CAP > Events > Sync / Async\nevent handler, sync, async, Node.js, action\nIllustrates handling of synchronous requests using an action handler in a Node.js CAP service implementation. Handles incoming SubmitOrder requests with business logic.\n\n```js\nclass CatalogService { async init() {\n  this.on ('SubmitOrder', req => {        // sync action request\n    const { book, quantity } = req.data  // process it...\n  })\n}}\n```\n",
    "Best Practices by CAP > Events > Sync / Async\nevent handler, async, event message, Node.js\nShows handling of asynchronous event messages with a CAP service observer subscribing to the BookOrdered event from another service using cds.connect.to.\n\n```js\nclass AnotherService { async init() {\n  const cats = await cds.connect.to ('CatalogService')\n  cats.on ('BookOrdered', msg => {        // async event message\n    const { book, quantity } = msg.data  // process it...\n  })\n}}\n```\n",
    "Best Practices by CAP > Events > Sync / Async\nevent producer, sync, async, emit, send, Node.js\nDemonstrates sending synchronous requests and emitting asynchronous events using CAP's cats service proxy with .send and .emit.\n\n```js\nawait cats.send ('SubmitOrder', { book:201, quantity:1 })\nawait this.emit ('BookOrdered', { book:201, quantity:1 })\n```\n",
    "Best Practices by CAP > Events > Local / Remote\nservice consumer, local service, remote service, connect, Node.js\nIllustrates consumption of CAP services (local or remote) in an agnostic way using cds.connect.to in Node.js, and then sending requests or running queries.\n\n```js\nconst local_or_remote = await cds.connect.to('SomeService')\nawait local_or_remote.send ('SomeRequest', {...data})\nawait local_or_remote.read ('SomeEntity').where({ID:4711})\n```\n",
    "Best Practices by CAP > Events > Local / Remote\nevent handler, service implementation, Node.js\nStandard CAP event handler registration for custom requests and entity reads within a service, showcasing agnostic event handling for both data and actions.\n\n```js\nthis.on ('SomeRequest', req => {/* process req.data */})\nthis.on ('READ','SomeEntity', req => {/* process req.query */})\n```\n",
    "Best Practices by CAP > Data > Extensible Data\ncds modeling, extension, extensible data\nExtends the Books entity with an additional extension field, showcasing extensibility of CDS models for SaaS or customer-specific adaptations.\n\n```cds\nextend Books with {\n   some_extension_field : String;\n}\n```\n",
    "Best Practices by CAP > Data > Queried Data\ndata, querying, JavaScript, OData-like, nested projection\nShows a query for specific fields (ID, title, author.name) for Books entity in a JavaScript/Node.js CAP app, enabling optimized data retrieval using CQL.\n\n```js\nlet books = await GET `Books { ID, title, author.name as author }`\n```\n",
    "Best Practices by CAP > Data > Queried Data\ndata, querying, JavaScript\nCompares traditional data access by retrieving all fields (SELECT *) without projection, which is less optimal than targeted queries.\n\n```js\nlet books = await GET `Books` // always read in a SELECT * fashion\n```\n",
    "Best Practices by CAP > Querying > Query Language (CQL)\ncds modeling, service, projection, nested projection\nDefines a projected entity that flattens author.name into the books list, using CQL syntax for human-readable query language in CDS service modeling.\n\n```cds\nentity ListOfBooks as projection on underlying.Books {\n  ID, title, author.name as author\n}\n```\n",
    "Best Practices by CAP > Querying > Queries at Runtime\nquerying, cql, graphql, odata, sql, cqn\nDemonstrates a CQL query for Books, including nested projection of author.name. Used as a human-readable query in CAP models and services.\n\n```sql\nSELECT from Books { ID, title, author { name }}\n```\n",
    "Best Practices by CAP > Querying > Queries at Runtime\nquerying, cql/http, OData\nCDS CQL-over-http GET request syntax selecting IDs, titles and author names for Books, illustrating query capabilities in CAP.\n\n```http\nGET Books { ID, title, author { name }}\n```\n",
    "Best Practices by CAP > Querying > Queries at Runtime\nquerying, graphql\nGraphQL query for Books, with nested author.name, illustrating equivalence with CQL and OData queries for CAP service consumption.\n\n```json\nPOST query {\n  Books {\n    ID, title, author {\n      name\n    }\n  }\n}\n```\n",
    "Best Practices by CAP > Querying > Queries at Runtime\nquerying, OData\nShows an OData-compliant URL for retrieving IDs, titles and author names, mapping to CQL and GraphQL examples for CAP.\n\n```http\nGET Books?$select=ID,title&$expand=author($select=name)\n```\n",
    "Best Practices by CAP > Querying > Queries at Runtime\nquerying, CQN, csn, runtime\nMachine-readable CAP Query Notation (CQN) for the Books query. Used internally by CAP runtimes after query translation from protocol-specific queries.\n\n```json\n{ SELECT: { from: {ref:['Books']},\n    columns: [ 'ID', 'title', {ref:['author']},\n      expand:[ 'name' ]\n    ]}\n}\n```\n",
    "Best Practices by CAP > Querying > Queries at Runtime\nquerying, ttl, JavaScript, fluent API\nProgrammatic query using tagged template literals (TTL) in Node.js to retrieve books with titles and author names. Compiles to CQN.\n\n```js\nlet books = await SELECT `from Books {\n  ID, title, author { name }\n}`\n```\n",
    "Best Practices by CAP > Querying > Queries at Runtime\nquerying, fluent API, JavaScript\nProgrammatic query using CAP's fluent API in Node.js for selecting books with nested author names, resulting in the same CQN as other forms.\n\n```js\nlet books = await SELECT.from (Books, b => {\n  b.ID, b.title, b.author (a => a.name)\n})\n```\n",
    "Best Practices by CAP > Intrinsic Extensibility > Extending Models\ncds modeling, model extension, aspect, composition, history tracking\nExtends the managed aspect from @sap/cds/common to include ChangeNotes, enabling automatic history/comment-tracking for all entities inheriting the aspect.\n\n```cds\nusing { User, managed } from '@sap/cds/common';\nextend managed with {\n  ChangeNotes : Composition of many {\n    key timestamp : DateTime;\n    author : User;\n    note : String(1000);\n  }\n}\n```\n",
    "Best Practices by CAP > Intrinsic Extensibility > Extension Logic\nevent handler, extension logic, after, Node.js\nAttaches an after-create event handler to a reuse ReviewsService, extensibly executing additional business logic after review creation.\n\n```js\nconst ReviewsService = await cds.connect.to('ReviewsService')\nReviewsService.after ('CREATE', 'Reviews', req => {\n   // do something in addition...\n})\n```\n",
    "Best Practices by CAP > Intrinsic Extensibility > Extension Logic\ncds modeling, service definition, event, business event\nAdds a business-level ReviewAdded event definition to ReviewsService, creating an explicit extension point for consumers.\n\n```cds\nservice ReviewsService { ...\n   event ReviewAdded {\n      subject  : ReviewedSubject;\n      title    : String;\n      message  : String;\n      reviewer : User;\n   }\n}\n```\n",
    "Best Practices by CAP > Intrinsic Extensibility > Extension Logic\nevent handler, emit event, Node.js, extension point\nService implementation emits a ReviewAdded event after a review entity has been created, supporting extension via business events.\n\n```js\nclass ReviewsService { init() {\n   this.after ('CREATE','Reviews', req => this.emit('ReviewAdded', req.data))\n}}\n```\n",
    "Best Practices by CAP > Intrinsic Extensibility > Extension Logic\nevent handler, extension consumer, on event, Node.js\nConsumer registers an event listener for ReviewAdded, enabling external extension of business logic in response to domain events.\n\n```js\nconst ReviewsService = await cds.connect.to('ReviewsService')\nReviewsService.on ('ReviewAdded', msg => {\n   // do something in addition...\n})\n```\n",
    "Best Practices by CAP > Intrinsic Extensibility > Extensible Framework\nevent handler, framework extension, database service, Node.js\nExtends the CAP database service by registering a before hook for any event, logging information for all database operations.\n\n```js\ncds.db .before ('*', req => {\n  console.log (req.event, req.target.name)\n})\n```\n",
    "Best Practices by CAP > Intrinsic Extensibility > Extensible Framework\nevent handler, remote service proxy, Node.js, framework extension\nDemonstrates extension patterns for remote CAP service proxies, including intercepting, modifying, and post-processing of remote reads and results in Node.js.\n\n```js\nconst proxy = await cds.connect.to ('SomeRemoteService')\nproxy.on ('READ', 'Something', req => {\n  // handle that remote call yourself\n})\nproxy.before ('READ', '*', req => {\n  // modify requests before they go out\n})\nproxy.after ('READ', '*', result => {\n  // post-process recieved responses\n})\n```\n",
    "Best Practices by CAP > The Calesi Pattern\ncds modeling, integration, calesi, attachments plugin, composition\nShows integration of the Attachments plugin by composing many Attachments in an entity, following the Calesi pattern for seamless external service integration.\n\n```cds\nentity Foo { //...\n   attachments : Composition of many Attachments; // [!code focus]\n}\n```\n",
    "Best Practices by CAP > The Calesi Pattern\nservice definition, calesi, event, interface, integration\nDeclares a CAP service interface for outbound audit logging following the Calesi pattern. Defines the event PersonalDataModified and related structure.\n\n```cds\nservice AuditLogService {\n\n  event PersonalDataModified : LogEntry {\n    subject   : DataSubject;\n    changes   : many {\n      field : String;\n      old   : String;\n      new   : String;\n    };\n    tenant    : Tenant;\n    user      : User;\n    timestamp : DateTime:\n  }\n\n}\n```\n",
    "Best Practices by CAP > The Calesi Pattern\nservice implementation, calesi, mock implementation, Node.js\nImplements a mock AuditLogService with a handler for PersonalDataModified event, enabling inner loop development following the Calesi/Hexagonal Architecture ideas.\n\n```js\nclass AuditLogService {init(){\n  this.on('PersonalDataModified', msg => {\n    console.log('Received audit log message', red.data)\n  })\n}}\n```\n",
    "Best Practices by CAP > The Calesi Pattern\nconfiguration, profile, Node.js, calesi, mock/production\nShows CAP configuration snippet for profile-aware service implementations, switching between mock and real service based on the runtime environment.\n\n```json\n{\n  cds: {\n    requires: {\n      'audit-log': {\n        \"[development]\": { impl: \".../audit-log-mock.js\" },\n        \"[production]\":  { impl: \".../the-real-audit-log-srv.js\" },\n      }\n    }\n  }\n}\n```\n",
    "Best Practices by CAP > The Calesi Pattern\nNode.js, annotation, automation, event emission, calesi\nAutomates audit logging for all entities annotated with @PersonalData by registering update handlers emitting PersonalDataModified events to the AuditLog service when applicable.\n\n```js\ncds.on('served', async services => {\n  const auditlog = await cds.connect.to('AuditLog')\n  for (let each of services) {\n    for (let e of each.entities) if (e['@PersonalData']) {\n      each.on('UPDATE',e, auditlog.emit('PersonalDataModified', {...}))\n    }\n  }\n})\n```\n",
    " Secure Multi-Tenancy > Isolated Transient Data > Bad example\nsecure code, scoping, Node.js, CAP Node.js, bad example, custom logic, security\nThis Node.js CAP service implementation shows a bad example on how to declare and use variable scoping in service handlers. Having a non-static variable in the closure (let books) can leak data across tenants and concurrent requests, breaking tenant isolation and security guarantees. It is recommended never to cache tenant-specific or request-specific data in such a way.\n\n```js\nmodule.exports = srv => {\n  let books  // <- leaks data across tenants and concurrent requests // [!code error]\n  srv.on('READ', 'Books', async function(req, next) {\n    if (books) return books\n    return books = await next()\n  })\n}\n```\n",
    " Secure Authorization > Business Users\ncds, authorization, security, annotations, requires, restrict, CAP\nDemonstrates declarative access control in CDS models using the @restrict annotation. Allows the definition of fine-grained authorization rules for CAP services or entities, restricting who can perform specific operations (here, \"READ\" for Readers, \"WRITE\" for Editors). The CAP runtime enforces these at runtime based on user roles.\n\n```cds\n@restrict: [\n  { grant: 'READ', to: 'role::Reader' },\n  { grant: 'WRITE', to: 'role::Editor' }\n]\nservice Foo { ... }\n```\n",
    " Secure Against Untrusted Input > Injection Attacks > Common Attack Patterns\nsecure code, cql, input validation, CAP Node.js, query building, security\nThis Node.js snippet shows the construction of a CQL query with parts (entity or column) derived from user input. Such dynamic query building opens up the possibility of injection attacks if inputs are not properly validated. It highlights the need for an input validation step before passing user-controlled values into CQL query structures.\n\n```js\nconst entity = <from user input>\nconst column = <from user input>\nvalidate(entity, column) // for example, by comparing with positive list\nSELECT.from(entity).columns(column)\n```\n",
    " Secure Against Untrusted Input > Injection Attacks > Common Attack Patterns\nsecure code, cql, input validation, CAP Java, query building, security\nJava code example for CAP demonstrating the risk when building CQL queries from user input. Both entity and column names are user-supplied and require explicit validation before being used, to prevent injection vulnerabilities.\n\n```java\nString entity = ...; // from user input;\nString column = ...; // from user input;\nvalidate(entity, column); // for example, by comparing with positive list\nSelect.from(entity).columns(b -> b.get(column));\n```\n",
    " Annotating Personal Data > Reference App Sample\ncds modeling, personal data, annotations, srv/data-privacy.cds, @PersonalData, sample\nThis is a sample CDS annotation file (srv/data-privacy.cds) that augments the Incidents Management reference app's data model with @PersonalData annotations. It classifies entities as DataSubject, DataSubjectDetails, or Other, and marks fields that are potentially personal or sensitive, as well as establishing DataSubjectID references for compliance and audit logging automation.\n\n```cds\nusing { sap.capire.incidents as my } from '../db/schema';\n\nextend my.Customers with {\n    dateOfBirth : Date;\n};\n\nannotate my.Customers with @PersonalData : {\n  DataSubjectRole : 'Customer',\n  EntitySemantics : 'DataSubject'\n} {\n  ID           @PersonalData.FieldSemantics: 'DataSubjectID';\n  firstName    @PersonalData.IsPotentiallyPersonal;\n  lastName     @PersonalData.IsPotentiallyPersonal;\n  email        @PersonalData.IsPotentiallyPersonal;\n  phone        @PersonalData.IsPotentiallyPersonal;\n  dateOfBirth  @PersonalData.IsPotentiallyPersonal;\n  creditCardNo @PersonalData.IsPotentiallySensitive;\n};\n\nannotate my.Addresses with @PersonalData: {\n  EntitySemantics : 'DataSubjectDetails'\n} {\n  customer      @PersonalData.FieldSemantics: 'DataSubjectID';\n  city          @PersonalData.IsPotentiallyPersonal;\n  postCode      @PersonalData.IsPotentiallyPersonal;\n  streetAddress @PersonalData.IsPotentiallyPersonal;\n};\n\nannotate my.Incidents with @PersonalData : {\n  EntitySemantics : 'Other'\n} {\n  customer @PersonalData.FieldSemantics: 'DataSubjectID';\n};\n```\n",
    " Annotating Personal Data > Reference App Sample\ndata, sample data, csv, personal data\nExample initial customer data for Incidents Management app in CSV format, including fields such as firstName, lastName, email, phone, and dateOfBirth. Used together with the model annotations to demonstrate practical personal data handling.\n\n```csv\nID,firstName,lastName,email,phone,dateOfBirth\n1004155,Daniel,Watts,daniel.watts@demo.com,+44-555-123,1996-01-01\n1004161,Stormy,Weathers,stormy.weathers@demo.com,,1981-01-01\n1004100,Sunny,Sunshine,sunny.sunshine@demo.com,+01-555-789,1965-01-01\n```\n",
    " Annotating Personal Data > @PersonalData... > .EntitySemantics {.annotation}\nannotation, @PersonalData, EntitySemantics, cds modeling\nCDS snippets showing how to annotate entities with @PersonalData.EntitySemantics to classify them as DataSubject, DataSubjectDetails, or Other, for compliance and data privacy management. This enables downstream automation for audit logging and privacy controls.\n\n```cds\nannotate my.Customers with @PersonalData: {\n  EntitySemantics: 'DataSubject' // [!code focus]\n};\n\nannotate my.Addresses with @PersonalData: {\n  EntitySemantics: 'DataSubjectDetails' // [!code focus]\n};\n\nannotate my.Incidents with @PersonalData: {\n  EntitySemantics: 'Other' // [!code focus]\n};\n```\n",
    " Annotating Personal Data > @PersonalData... > .DataSubjectRole {.annotation}\nannotation, @PersonalData, DataSubjectRole, cds modeling\nShows how to use @PersonalData.DataSubjectRole to assign a logical role name (Customer) to an entity with DataSubject semantics. This enhances human readability and UI labelling for privacy-relevant entities.\n\n```cds\nannotate my.Customers with @PersonalData: {\n  EntitySemantics: 'DataSubject',\n  DataSubjectRole: 'Customer' // [!code focus]\n};\n```\n",
    " Annotating Personal Data > @PersonalData... > .FieldSemantics: DataSubjectID {.annotation}\nannotation, @PersonalData, FieldSemantics, DataSubjectID, cds modeling\nCDS snippets illustrating how to designate the element that functions as the DataSubjectID in entities, whether it is a primary key or a foreign key association to a data subject. This supports traceability and data subject identification.\n\n```cds\nannotate my.Customers with {\n  ID @PersonalData.FieldSemantics: 'DataSubjectID' // [!code focus]\n};\n\nannotate my.Addresses with {\n  customer @PersonalData.FieldSemantics: 'DataSubjectID' // [!code focus]\n};\n\nannotate my.Incidents with {\n  customer @PersonalData.FieldSemantics: 'DataSubjectID' // [!code focus]\n};\n```\n",
    " Annotating Personal Data > @PersonalData... > .IsPotentiallyPersonal {.annotation}\nannotation, @PersonalData, IsPotentiallyPersonal, cds modeling\nExample annotation marking multiple fields as @PersonalData.IsPotentiallyPersonal, indicating which elements contain personal information relevant for privacy compliance and audit.\n\n```cds\nannotate my.Customers with {\n  firstName @PersonalData.IsPotentiallyPersonal; // [!code focus]\n  lastName  @PersonalData.IsPotentiallyPersonal; // [!code focus]\n  email     @PersonalData.IsPotentiallyPersonal; // [!code focus]\n  phone     @PersonalData.IsPotentiallyPersonal; // [!code focus]\n};\n```\n",
    " Annotating Personal Data > @PersonalData... > .IsPotentiallySensitive {.annotation}\nannotation, @PersonalData, IsPotentiallySensitive, cds modeling\nAnnotates a single field (creditCardNo) with @PersonalData.IsPotentiallySensitive, flagging it as containing highly sensitive personal data and indicating the need for special audit logging on access.\n\n```cds\nannotate my.Customers with {\n  creditCardNo @PersonalData.IsPotentiallySensitive; // [!code focus]\n};\n```\n",
    " Audit Logging > Add the Plugin\ninstallation, setup, audit logging, plugin\nInstalls the @cap-js/audit-logging plugin to your CAP project, enabling automatic audit logging for personal and sensitive data events.\n\n```shell\nnpm add @cap-js/audit-logging\n```\n",
    " Audit Logging > Add the Plugin > Behind the Scenes…\nconfiguration, audit logging, defaults, jsonc\nDefault configuration preset for the @cap-js/audit-logging plugin, showing supported event types, outbox mechanism, and kind-specific implementation. Profiles for development and production select appropriate logging mechanisms.\n\n```json\n{\n  \"audit-log\": {\n    \"handle\": [\"READ\", \"WRITE\"],\n    \"outbox\": true,\n    \"[development]\": { \"kind\": \"audit-log-to-console\" },\n    \"[hybrid]\": { \"kind\": \"audit-log-to-restv2\" },\n    \"[production]\": { \"kind\": \"audit-log-to-restv2\" }\n  },\n  \"kinds\": {\n    \"audit-log-to-console\": {\n      \"impl\": \"@cap-js/audit-logging/srv/log2console\"\n    },\n    \"audit-log-to-restv2\": {\n      \"impl\": \"@cap-js/audit-logging/srv/log2restv2\",\n      \"vcap\": { \"label\": \"auditlog\" }\n    }\n  }\n}\n```\n",
    " Audit Logging > Add the Plugin > Behind the Scenes…\nverify, CLI, audit logging, configuration\nUse the 'cds env' CLI command to verify the effective audit log configuration, both without and with the 'production' profile.\n\n```shell\ncds env requires.audit-log\ncds env requires.audit-log --profile production\n```\n",
    " Audit Logging > Test-drive Locally\nrun server, audit logging, local server\nRuns the CAP server in watch mode for local testing, useful to test drive audit logging functionality.\n\n```shell\ncds watch\n```\n",
    " Audit Logging > Test-drive Locally\ntest, http, sample request, audit logging\nHTTP PATCH request updating personal data for a customer. This triggers automatic audit logging for personal data changes.\n\n```http\nPATCH http://localhost:4004/admin/Customers(2b87f6ca-28a2-41d6-8c69-ccf16aa6389d) HTTP/1.1\nAuthorization: Basic alice:in-wonderland\nContent-Type: application/json\n\n{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Doe\"\n}\n```\n",
    " Audit Logging > Test-drive Locally\naudit logging, logs, output, sample data\nExample audit log message structure emitted to the server's console when a personal data change has been detected and logged.\n\n```js\n{\n  data_subject: {\n    id: { ID: '2b87f6ca-28a2-41d6-8c69-ccf16aa6389d' },\n    role: 'Customer',\n    type: 'AdminService.Customers'\n  },\n  object: {\n    type: 'AdminService.Customers',\n    id: { ID: '2b87f6ca-28a2-41d6-8c69-ccf16aa6389d' }\n  },\n  attributes: [\n    { name: 'firstName', old: 'Sunny', new: 'Jane' },\n    { name: 'lastName', old: 'Sunshine', new: 'Doe' }\n  ],\n  uuid: '5cddbc91-8edf-4ba2-989b-87869d94070d',\n  tenant: 't1',\n  user: 'alice',\n  time: 2024-02-08T09:21:45.021Z\n}\n```\n",
    " Audit Logging > Use SAP Audit Log Service > Setup Instance and Deploy App\ndeployment, SAP Audit Log Service, Cloud Foundry, mta.yaml, resource\nAdd an existing SAP Audit Log Service instance to your MTA deployment descriptor to bind it as a resource for applications in Cloud Foundry.\n\n```yaml\nresources:\n- name: my-auditlog-service\n  type: org.cloudfoundry.existing-service\n```\n",
    " Audit Logging > Custom Audit Logging\ncustom audit logging, consume service, JavaScript, API\nProgrammatically connects to the audit-log service from a CAP Node.js application to enable sending custom audit log events.\n\n```js\nconst audit = await cds.connect.to('audit-log')\n```\n",
    " Audit Logging > Custom Audit Logging\ncustom audit logging, send event, JavaScript, API\nSends a custom audit log event to the audit-log service with the given event type and payload data.\n\n```js\nawait audit.log('Foo', { bar: 'baz' })\n```\n",
    " Audit Logging > Custom Audit Logging > Service Definition\nservice definition, cds, API, audit logging\nCDS service definition of the AuditLogService, including actions and events for logging sensitive data reads, personal data modifications, configuration changes, and security events. Includes type definitions for audit log entries.\n\n```cds\nnamespace sap.auditlog;\n\nservice AuditLogService {\n\n  action log(event : String, data : LogEntry);\n\n  event SensitiveDataRead : LogEntry {\n    data_subject : DataSubject;\n    object       : DataObject;\n    attributes   : many {\n      name       : String;\n    };\n    attachments  : many {\n      id         : String;\n      name       : String;\n    };\n    channel      : String;\n  };\n\n  event PersonalDataModified : LogEntry {\n    data_subject :      DataSubject;\n    object       :      DataObject;\n    attributes   : many Modification;\n    success      :      Boolean default true;\n  };\n\n  event ConfigurationModified : LogEntry {\n    object     :      DataObject;\n    attributes : many Modification;\n  };\n\n  event SecurityEvent : LogEntry {\n    data : {};\n    ip   : String;\n  };\n\n}\n\n/** Common fields, filled in automatically */\ntype LogEntry {\n  uuid   : UUID;\n  tenant : String;\n  user   : String;\n  time   : Timestamp;\n}\n\ntype DataObject {\n  type : String;\n  id   : {};\n}\n\ntype DataSubject : DataObject {\n  role : String;\n}\n\ntype Modification {\n  name : String;\n  old  : String;\n  new  : String;\n}\n```\n",
    " Audit Logging > Custom Audit Logging > Sensitive Data Read\nSensitiveDataRead, send event, JavaScript, audit logging\nSends a SensitiveDataRead audit event with subject, object, and attributes, useful for logging accesses to sensitive personal data.\n\n```js\nawait audit.log ('SensitiveDataRead', {\n  data_subject: {\n    type: 'sap.capire.bookshop.Customers',\n    id: { ID: '1923bd11-b1d6-47b6-a91b-732e755fa976' },\n    role: 'Customer',\n  },\n  object: {\n    type: 'sap.capire.bookshop.BillingData',\n    id: { ID: '399a2704-3d2d-4fa1-9e7d-a4e45c67749b' }\n  },\n  attributes: [\n    { name: 'creditCardNo' }\n  ]\n})\n```\n",
    " Audit Logging > Custom Audit Logging > Personal Data Modified\nPersonalDataModified, send event, JavaScript, audit logging\nSends a PersonalDataModified event to log modification of personal data fields, including old and new values for auditing.\n\n```js\nawait audit.log ('PersonalDataModified', {\n  data_subject: {\n    type: 'sap.capire.bookshop.Customers',\n    id: { ID: '1923bd11-b1d6-47b6-a91b-732e755fa976' },\n    role: 'Customer',\n  },\n  object: {\n    type: 'sap.capire.bookshop.Customers',\n    id: { ID: '1923bd11-b1d6-47b6-a91b-732e755fa976' }\n  },\n  attributes: [\n    { name: 'emailAddress', old: 'foo@example.com', new: 'bar@example.com' }\n  ]\n})\n```\n",
    " Audit Logging > Custom Audit Logging > Configuration Modified\nConfigurationModified, send event, JavaScript, audit logging\nSends a ConfigurationModified event audit log to record configuration changes and their before/after values.\n\n```js\nawait audit.log ('ConfigurationModified', {\n  object: {\n    type: 'sap.common.Currencies',\n    id: { ID: 'f79ba248-c348-4962-9fef-680c3b88807c' }\n  },\n  attributes: [\n    { name: 'symbol', old: 'EUR', new: '€' }\n  ]\n})\n```\n",
    " Audit Logging > Custom Audit Logging > Security Events\nSecurityEvent, send event, JavaScript, audit logging\nSends a SecurityEvent audit log message, including arbitrary metadata such as user, action, and the originating IP address.\n\n```js\nawait audit.log ('SecurityEvent', {\n  data: {\n    user: 'alice',\n    action: 'Attempt to access restricted service \"PDMService\" with insufficient authority'\n  },\n  ip: '127.0.0.1'\n})\n```\n",
    " Audit Logging > Custom Implementation\ncustom implementation, JavaScript, CAP service implementation\nExample of a custom CAP service implementation for audit logging, overriding event handling to print events to the console. Useful as a starting point for integrating custom logging sinks.\n\n```js\nconst { AuditLogService } = require('@cap-js/audit-logging')\nclass MyAuditLogService extends AuditLogService {\n  async init() {\n    this.on('*', function (req) {\n      const { event, data } = req\n      console.log(`[my-audit-log] - ${event}:`, data)\n    })\n    return super.init()\n  }\n}\nmodule.exports = MyAuditLogService\n```\n",
    " Audit Logging > Custom Implementation\nconfiguration, custom implementation, cds.env, settings\nCDS configuration fragment to register a custom audit log service implementation in the project's configuration.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"audit-log\": {\n        \"impl\": \"lib/MyAuditLogService.js\"\n      }\n    }\n  }\n}\n```\n",
    " Personal Data Management > Provide a Service Interface to SAP Personal Data Manager > CAP Service Model for SAP Personal Data Manager\nservice definition, srv/pdm-service.cds, projection, annotations, PersonalData, search fields, flat projection, security, CAP Service, OData\nDefines a dedicated CAP service model (PDMService) for SAP Personal Data Manager integration. Projects required entities from the domain model, introduces a flat projection (IncidentConversationView) to flatten joined data for SAP PDM, and uses @PersonalData and @Communication.Contact annotations to expose and categorize personal data and search fields. Enforces security using @requires. File: srv/pdm-service.cds.\n\n```cds\nusing {sap.capire.incidents as db} from '../db/schema';\n\n@requires: 'PersonalDataManagerUser' // security check\nservice PDMService @(path: '/pdm') {\n\n  // Data Privacy annotations on 'Customers' and 'Addresses' are derived from original entity definitions\n  entity Customers                as projection on db.Customers;\n  entity Addresses                as projection on db.Addresses;\n  entity Incidents                as projection on db.Incidents\n\n  // create view on Incidents and Conversations as flat projection\n  entity IncidentConversationView as\n      select from Incidents {\n              ID,\n              title,\n              urgency,\n              status,\n          key conversation.ID        as conversation_ID,\n              conversation.timestamp as conversation_timestamp,\n              conversation.author    as conversation_author,\n              conversation.message   as conversation_message,\n              customer.ID            as customer_ID,\n              customer.email         as customer_email\n      };\n\n  // annotate new view\n  annotate PDMService.IncidentConversationView with @(PersonalData.EntitySemantics: 'Other') {\n      customer_ID @PersonalData.FieldSemantics: 'DataSubjectID';\n  };\n\n  // annotations for Personal Data Manager - Search Fields\n  annotate Customers with @(Communication.Contact: {\n        n    : {\n            surname: lastName,\n            given  : firstName\n        },\n        bday : dateOfBirth,\n        email: [{\n          type   : #preferred,\n          address: email}]\n    });\n\n  };\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Activate Access Checks in _xs-security.json_\nsecurity, xs-security.json, role, access restriction, scopes\nDefines application security configuration for Cloud Foundry in xs-security.json. Grants a PersonalDataManagerUser role to users (specifically the SAP PDM service instance) allowed to access the protected PDMService endpoint. The specified service name ('pdm') corresponds with the service definition and deployment.\n\n```json\n{\n  \"xsappname\": \"incidents-mgmt\",\n  \"tenant-mode\": \"shared\",\n  \"scopes\": [\n    {\n      \"name\": \"$XSAPPNAME.PersonalDataManagerUser\",\n      \"description\": \"Authority for Personal Data Manager\",\n      \"grant-as-authority-to-apps\": [\n        \"$XSSERVICENAME(pdm)\"\n      ]\n    }\n  ]\n}\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Add @sap/xssec Library\nnpm, dependencies, authentication, Node.js\nInstalls the @sap/xssec package required for handling authentication and authorization in the CAP Node.js application, making security strategies such as JWT available.\n\n```shell\nnpm install @sap/xssec\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Build and Deploy Your Application\nCLI, build, production, cloud deployment\nPerforms a production build of the CAP application using the cds CLI, required before deploying to SAP BTP (Cloud Foundry).\n\n```shell\ncds build --production\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Build and Deploy Your Application\nCloud Foundry, deploy, cf CLI\nPushes the built CAP application to Cloud Foundry and creates required service instances as specified in the manifest, suitable for production deployment.\n\n```shell\ncf create-service-push\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Create a Service Instance\nservice instance, SAP Personal Data Manager, configuration, cloud, json\nSample configuration (pdm-instance-config.json) for creating a SAP Personal Data Manager service instance. This JSON ensures proper authority delegation and connects the instance with the app consent service (required for GDPR compliance workflows). Used during service instance creation.\n\n```json\n{\n  \"xs-security\": {\n    \"xsappname\": \"incidents-mgmt\",\n    \"authorities\": [\"$ACCEPT_GRANTED_AUTHORITIES\"]\n  },\n  \"fullyQualifiedApplicationName\": \"incidents-mgmt\",\n  \"appConsentServiceEnabled\": true\n}\n\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Create a Service Instance\ncf CLI, service instance, create-service, SAP Personal Data Manager, binding\nUses the cf CLI to create a Personal Data Manager service instance named 'incidents-mgmt-pdm' in Cloud Foundry, using the configuration from pdm-instance-config.json.\n\n```shell\ncf create-service personal-data-manager-service standard incidents-mgmt-pdm -c ./pdm-instance-config.json\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Bind the Service Instance to Your Application.\nservice binding, SAP Personal Data Manager, binding configuration, json, cloud\nSample binding configuration (pdm-binding-config.json) to associate the Personal Data Manager service instance with the deployed CAP app. Specifies application name, module, URL, and OData endpoint (matching CAP service and deployment). Required for proper routing and metadata in SAP BTP.\n\n```json\n{\n  \"fullyQualifiedApplicationName\": \"incidents-mgmt\",\n  \"fullyQualifiedModuleName\": \"incidents-mgmt-srv\",\n  \"applicationTitle\": \"PDM Incidents\",\n  \"applicationTitleKey\": \"PDM Incidents\",\n  \"applicationURL\": \"https://incidents-mgmt-srv.cfapps.eu10.hana.ondemand.com/\", // get the URL from the CF CLI command: cf apps\n  \"endPoints\": [\n    {\n      \"type\": \"odatav4\",\n      \"serviceName\": \"pdm-service\",\n      \"serviceTitle\": \"Incidents Management\",\n      \"serviceTitleKey\": \"IncidentsManagement\",\n      \"serviceURI\": \"pdm\",\n      \"hasGdprV4Annotations\": true,\n      \"cacheControl\": \"no-cache\"\n    }\n  ]\n}\n```\n",
    " Personal Data Management > Connecting SAP Personal Data Manager > Bind the Service Instance to Your Application.\ncf CLI, service binding, SAP Personal Data Manager\nBinds the Personal Data Manager service instance 'incidents-mgmt-pdm' to the CAP service module 'incidents-mgmt-srv' using the specified JSON binding configuration.\n\n```shell\ncf bind-service incidents-mgmt-srv incidents-mgmt-pdm -c ./pdm-binding-config.json\n```\n",
    " Deploy to Cloud Foundry > Prerequisites\nproject setup, init, bookshop, node\nInitializes a new CAP project named 'bookshop' using the Node.js flavor and includes sample files. Changes the working directory to the newly created project folder. Used as the starting point for running CAP locally and eventually deploying to Cloud Foundry.\n\n```shell\ncds init bookshop --add sample\ncd bookshop\n```\n",
    " Deploy to Cloud Foundry > Prerequisites\nproject setup, init, bookshop, clone, samples, node\nClones the complete set of CAP sample projects from GitHub and navigates to the bookshop subfolder. Useful when following Cloud Foundry deployment demos against the CAP bookshop sample.\n\n```shell\ngit clone https://github.com/sap-samples/cloud-cap-samples samples\ncd samples/bookshop\n```\n",
    " Deploy to Cloud Foundry > Prerequisites\nproject setup, init, bookshop, java\nInitializes a new CAP Java project named 'bookshop' with included sample content and changes the directory into the new project. For Java-based CAP deployments to Cloud Foundry.\n\n```shell\ncds init bookshop --java --add sample\ncd bookshop\n```\n",
    " Deploy to Cloud Foundry > Prerequisites > 2. Latest Versions of `@sap/cds-dk`\nenvironment, dependencies, cds toolkit, npm, verify, cds-dk\nChecks if the globally installed @sap/cds-dk is up-to-date, and installs the latest version if necessary. Essential for using the latest CAP CLI capabilities including deployment commands.\n\n```shell\nnpm -g outdated       #> check whether @sap/cds-dk is listed\nnpm i -g @sap/cds-dk  #> if necessary\n```\n",
    " Deploy to Cloud Foundry > Prerequisites > 2. Latest Versions of `@sap/cds-dk`\nenvironment, dependencies, cds toolkit, npm, verify, cds\nChecks if your local project has the latest version of @sap/cds and updates it if required. This ensures your Node.js CAP application uses the latest features.\n\n```shell\nnpm outdated          #> check whether @sap/cds is listed\nnpm i @sap/cds        #> if necessary\n```\n",
    " Deploy to Cloud Foundry > Prerequisites > 3. Cloud MTA Build Tool\nmta, cloud mta build tool, mbt, installation\nInstalls the Cloud MTA Build Tool (mbt) globally using npm on macOS/Linux, enabling MTA-based deployment for CAP applications.\n\n```shell\nnpm i -g mbt\n```\n",
    " Deploy to Cloud Foundry > Prerequisites > 4. Cloud Foundry CLI w/ MTA Plugins\ncloud foundry, CLI, mta plugins, installation\nAdds the Community plugin repository and installs the multiapps and html5-plugin plugins for the Cloud Foundry CLI. Required for deploying MTAs and handling HTML5 modules.\n\n```shell\ncf add-plugin-repo CF-Community https://plugins.cloudfoundry.org\ncf install-plugin -f multiapps\ncf install-plugin -f html5-plugin\n```\n",
    " Deploy to Cloud Foundry > Prepare for Production > 1. SAP HANA Database\nSAP HANA, database, production, cds add hana\nConfigures the CAP project for production deployment using an SAP HANA Cloud database by adding necessary configuration and dependencies. Replaces the default SQLite development database for Cloud Foundry deployments.\n\n```shell\ncds add hana\n```\n",
    " Deploy to Cloud Foundry > Prepare for Production > 2. Authorization/Authentication\nauthorization, authentication, xsuaa, cds add xsuaa, production\nConfigures the project for XSUAA-based authentication by adding required configuration files (like xs-security.json) and dependencies. Prepares the application for secure deployment to Cloud Foundry.\n\n```shell\ncds add xsuaa\n```\n",
    " Deploy to Cloud Foundry > Prepare for Production > 3. MTA-Based Deployment\nMTA, deployment, configuration, cds add mta\nGenerates an mta.yaml deployment descriptor, configuring all modules and services for multi-target application (MTA) deployment in Cloud Foundry. Essential for assembling and deploying CAP apps on SAP BTP.\n\n```shell\ncds add mta\n```\n",
    " Deploy to Cloud Foundry > Prepare for Production > 4. App Router as Gateway\napprouter, gateway, cds add approuter, authentication, routing\nEnhances the project with an application router (approuter), which acts as a gateway, manages user authentication, and routes HTTP requests to backend services. Required for custom deployments without managed Fiori Launchpad.\n\n```shell\ncds add approuter\n```\n",
    " Deploy to Cloud Foundry > Prepare for Production > 5. User Interfaces > Option A: SAP Cloud Portal\nUI, HTML5 repo, cloud portal, portal, cds add portal\nPrepares the application for HTML5 UI deployment by adding configuration for the SAP Cloud Portal service and HTML5 Application Repository. Used when serving UI modules from the cloud.\n\n```shell\ncds add portal\n```\n",
    " Deploy to Cloud Foundry > Prepare for Production > 5. User Interfaces > Option B: SAP Build Work Zone, Standard Edition <Beta />\nUI, workzone, cds add workzone\nIntegrates the SAP Build Work Zone, Standard Edition for single-tenant CAP applications, including necessary module and service configuration. Used to provide business users cloud-based UI access.\n\n```shell\ncds add workzone\n```\n",
    " Deploy to Cloud Foundry > Prepare for Production > 6. Optional: Multitenancy\nmultitenancy, production, cds add multitenancy\nAdds configuration and enables multi-tenant capabilities for the CAP project, preparing for multi-customer deployments and MTX services on Cloud Foundry.\n\n```shell\ncds add multitenancy\n```\n",
    " Deploy to Cloud Foundry > Build and Deploy\nCloud Foundry, login, cf login, select space\nLogs into the Cloud Foundry environment with Single Sign-On (recommended for SAP BTP), and sets the target org and space for deployment. A prerequisite for all deployment steps.\n\n```shell\ncf login --sso  # to log on with SAP Universal ID\ncf target\n```\n",
    " Deploy to Cloud Foundry > Build and Deploy\nnpm, dependencies, lockfile, update\nUpdates all dependencies and synchronizes the package-lock.json file to prevent lock file issues during the build and deployment process.\n\n```shell\nnpm update\n```\n",
    " Deploy to Cloud Foundry > Build and Deploy\nfreeze dependencies, build, deploy, cds up, CLI\nAutomates the process of freezing dependencies, building, and deploying the CAP application locally by starting all services. Used as a final verification step prior to cloud deployment.\n\n```shell\ncds up\n```\n",
    " Installing app dependencies, e.g.\ninstallation, npm, Node.js, dependencies\nInstalls application dependencies using npm. Each command installs a local app module ('browse' and 'admin-books') as dependencies in the current project. This is typically used during setup or when adding new apps to a CAP-based project.\n\n```shell\nnpm i app/browse\nnpm i app/admin-books\n```\n",
    " If project is monorepo\nmonorepo, installation, Node.js, npm, project setup\nCreates a symbolic link to the root package-lock.json file when working in a monorepo setup. This ensures that child packages or submodules within the monorepo share the same lockfile as the root, enabling consistent dependency management across the monorepo.\n\n```shell\nln -sf ../package-lock.json\n```\n",
    " If project is multitenant\ninstallation, multitenancy, npm, sidecar, project setup\nRuns npm install in the mtx/sidecar directory to generate/update only the package-lock.json file (without installing node_modules). This is typically used in multitenant CAP projects to ensure lockfile consistency for the MTX (multi-tenancy) sidecar's dependencies, especially in CI/CD pipelines or when preparing for deployment.\n\n```shell\nnpm i --package-lock-only --prefix mtx/sidecar\n```\n",
    " If package-lock.json doesn't exist\nnpm, package-lock.json, installation, dependencies\nGenerates a package-lock.json file without installing any dependencies. Use this when package-lock.json is missing and you want to lock your dependency versions without performing a full npm install.\n\n```shell\nnpm i --package-lock-only\n```\n",
    " Final assembly and deployment...\ndeployment, mbt, cloud foundry, MTA, CLI\nBuilds the MTA archive using the Multi-Target Application Build Tool (`mbt`) and deploys it to Cloud Foundry with the `cf` CLI. The generated MTAR file contains the application bundle for deployment on SAP BTP.\n\n```shell\nmbt build -t gen --mtar mta.tar\ncf deploy gen/mta.tar -f\n```\n",
    " Final assembly and deployment... > Test with `cds build`\nbuild, cds, CLI, project setup, production\nRuns `cds build` in production mode to inspect or prepare artifacts for production deployment. This step allows you to review and verify the generated outputs before deploying the application.\n\n```shell\ncds build --production\n```\n",
    " Final assembly and deployment...\nlog output, application URL, deployment\nSample log output indicating a successfully started application on SAP BTP. The message provides the public application URL where the approuter serves as the entry point.\n\n```txt\nApplication \"bookshop\" started and available at\n\"[org]-[space]-bookshop.<landscape-domain>.com\"\n```\n",
    " Keep Dependencies Up-to-date\ndependencies, npm, package-lock.json, project setup, freeze dependencies\n`cds up` ensures that dependencies are frozen by creating a package-lock.json for all application modules. Regularly updating these locks helps prevent security issues and keeps dependencies current.\n\n```shell\ncds up\n```\n",
    " Upgrade Tenants\nupgrade, multitenancy, CAP Java, Subscribe/Unsubscribe, CLI, Spring Boot\nRuns the `Subscribe` or `Unsubscribe` main class from CAP Java SDK to trigger tenant subscription or unsubscription. Invokes any custom handlers and requires that the MTX sidecar is running. Use this command for local testing or automation.\n\n```shell\njava -cp <jar-file> -Dloader.main=com.sap.cds.framework.spring.utils.Subscribe/Unsubscribe org.springframework.boot.loader.launch.PropertiesLauncher <tenant> [<tenant options>]\n```\n",
    " Upgrade Tenants\nupgrade, multitenancy, CAP Java, Subscribe/Unsubscribe, CLI, Spring Boot\nLegacy command for CAP Java tenant subscribe/unsubscribe based on Spring Boot version < 3.2.0. Accepts tenant ID and options as arguments, with alternative support via environment variables. Ensures handlers and messaging subscriptions are considered.\n\n```shell\njava -cp <jar-file> -Dloader.main=com.sap.cds.framework.spring.utils.Subscribe/Unsubscribe org.springframework.boot.loader.PropertiesLauncher <tenant> [<tenant options>]\n```\n",
    " Upgrade Tenants\nupgrade, multitenancy, Cloud Foundry, Subscribe/Unsubscribe, staging, Spring Boot, command-line\nAdapts the Java buildpack start command in a Cloud Foundry environment for running tenant subscribe/unsubscribe operations. Edits the staging_info.yml and injects loader and tenant information before executing the start command.\n\n```shell\nsed -i 's/org.springframework.boot.loader.launch.JarLauncher/org.springframework.boot.loader.launch.PropertiesLauncher/g' /home/vcap/staging_info.yml && sed -i 's/-Dsun.net.inetaddr.negative.ttl=0/-Dsun.net.inetaddr.negative.ttl=0 -Dloader.main=com.sap.cds.framework.spring.utils.Subscribe/Unsubscribe/g' /home/vcap/staging_info.yml && jq -r .start_command /home/vcap/staging_info.yml | sed 's/^/ MTCOMMAND_TENANTS=my-tenant [MTCOMMAND_TENANTS=<tenant options>]/' | bash\n```\n",
    " Upgrade Tenants\nupgrade, multitenancy, Cloud Foundry, Subscribe/Unsubscribe, staging, Spring Boot, command-line\nFor Spring Boot < 3.2.0: Adapts the Cloud Foundry Java buildpack start command to switch to the PropertiesLauncher loader and injects the main Subscribe/Unsubscribe class for tenant management.\n\n```shell\nsed -i 's/org.springframework.boot.loader.JarLauncher/org.springframework.boot.loader.PropertiesLauncher/g' /home/vcap/staging_info.yml && sed -i 's/-Dsun.net.inetaddr.negative.ttl=0/-Dsun.net.inetaddr.negative.ttl=0 -Dloader.main=com.sap.cds.framework.spring.utils.Subscribe/Unsubscribe/g' /home/vcap/staging_info.yml && jq -r .start_command /home/vcap/staging_info.yml | sed 's/^/ MTCOMMAND_TENANTS=my-tenant [MTCOMMAND_TENANTS=<tenant options>]/' | bash\n```\n",
    " Upgrade Tenants\nupgrade, multitenancy, Cloud Foundry, Subscribe/Unsubscribe, staging, Java 8, command-line\nFor Java 8 environments: Modifies the extracted start command in Cloud Foundry to launch tenant subscribe/unsubscribe logic using the PropertiesLauncher and main class defined in CAP Java.\n\n```shell\nsed -i 's/org.springframework.boot.loader.JarLauncher/-Dloader.main=com.sap.cds.framework.spring.utils.Subscribe/Unsubscribe org.springframework.boot.loader.PropertiesLauncher/g' /home/vcap/staging_info.yml && jq -r .start_command /home/vcap/staging_info.yml | sed 's/^/ MTCOMMAND_TENANTS=my-tenant [MTCOMMAND_TENANTS=<tenant options>]/' | bash\n```\n",
    " Deploy to Kyma > Prerequisites > Set Up Your Cluster for a Private Container Registry\nKubernetes, setup, pull secret, container registry, private registry, authentication, docker\nPrompts for Docker registry credentials and creates a Kubernetes image pull secret named 'docker-registry'. This secret allows your Kyma/Kubernetes cluster to pull container images from a private container registry, which is essential for deploying CAP applications on Kyma when using private repositories.\n\n```shell\necho -n \"Your docker registry server: \"; read YOUR_REGISTRY\necho -n \"Your user: \"; read YOUR_USER\necho -n \"Your email: \"; read YOUR_EMAIL\necho -n \"Your API token: \"; read -s YOUR_API_TOKEN\nkubectl create secret docker-registry \\\n  docker-registry \\\n  \"--docker-server=$YOUR_REGISTRY\" \\\n  \"--docker-username=$YOUR_USER\" \\\n  \"--docker-password=$YOUR_API_TOKEN\" \\\n  \"--docker-email=$YOUR_EMAIL\"\n```\n",
    " Deploy to Kyma\nproject setup, Java, CAP Java sample, SAP HANA, XSUAA, authentication, sample data\nInitializes a new CAP Java project called 'bookshop', adds sample data, and sets up SAP HANA and XSUAA for database and authentication integration.\n\n```shell\ncds init bookshop --java --add sample && cd bookshop\ncds add hana,xsuaa\n```\n",
    " Deploy to Kyma\nproject setup, Node.js, CAP sample, SAP HANA, XSUAA, authentication, sample data\nInitializes a new CAP Node.js project with sample data, then adds SAP HANA and XSUAA for persistence and authentication.\n\n```shell\ncds init bookshop --add sample && cd bookshop\ncds add hana,xsuaa\n```\n",
    " Deploy to Kyma > User Interfaces <Beta />\nuser interfaces, workzone, CAP, UI, project setup\nAdds SAP Build Work Zone support to the CAP project to scaffold a UI layer. Currently supported only for single-tenant CAP applications.\n\n```shell\ncds add workzone\n```\n",
    " Deploy to Kyma > Add CAP Helm Charts\nHelm, charts, deployment, CAP, Kubernetes\nAdds a CAP Helm chart to your Node.js or Java CAP project for use with Kubernetes-based deployments (e.g., Kyma). You will be prompted for Kyma domain, secret for image pull, and registry name.\n\n```shell\ncds add helm\n```\n",
    " Deploy to Kyma > Build and Deploy\nbuild, deploy, Kubernetes, CAP, local development\nBuilds and quickly deploys the CAP application to Kubernetes. Ensures the Docker daemon is running before using this command. This automates the build and deployment workflow for Kyma.\n\n```shell\ncds up -2 k8s\n```\n",
    " Deploy to Kyma > Build and Deploy\nbuild, Helm, containerization, prepare, CAP, Kubernetes\nAdds both Helm chart support and containerization for the CAP project, preparing it for deployment to a Kubernetes environment such as Kyma.\n\n```shell\ncds add helm,containerize\n```\n",
    " Installing app dependencies, e.g.\ninstallation, npm, app dependencies\nInstalls the required app dependencies for the project using npm. This installs modules from the local 'app/browse' and 'app/admin-books' directories. Use this command as part of project setup or when initializing new modules.\n\n```shell\nnpm i app/browse\nnpm i app/admin-books\n```\n",
    " If project is multitenant\nmultitenancy, installation, sidecar, npm\nInstalls the mtx/sidecar package required for multitenant projects, updating only the package-lock.json file without modifying node_modules or package.json. This command is used during initial setup or when preparing a project for multitenancy support in CAP environments.\n\n```shell\nnpm i --package-lock-only mtx/sidecar\n```\n",
    " If package-lock.json doesn't exist\ninstallation, npm, package-lock.json, dependencies\nGenerates a package-lock.json file without installing node modules. Useful when you want to create or update the lockfile for dependency tracking but do not want to modify node_modules. Run this command if package-lock.json does not exist in your project.\n\n```shell\nnpm i --package-lock-only\n```\n",
    " Final assembly and deployment\ncontainerization, deployment, ctz, Helm, kubectl, deployment verification, approuter, sidecar, final assembly, cloud native\nThis sequence of shell commands performs cloud-native final assembly and deployment of a CAP-based application. It uses the `ctz` tool for containerizing (building and optionally pushing images), Helm for installing/upgrading the generated Helm chart, and kubectl to verify status of the various deployed Kubernetes workloads. The commands cover the full deployment workflow: build, push, chart deploy, and readiness check for all service pods (srv, approuter, sidecar).\n\n```shell\nctz containerize.yaml --log --push\nhelm upgrade --install bookshop ./gen/chart --wait --wait-for-jobs --set-file xsuaa.jsonParameters=xs-security.json\nkubectl rollout status deployment bookshop-srv --timeout=8m\nkubectl rollout status deployment bookshop-approuter --timeout=8m\nkubectl rollout status deployment bookshop-sidecar --timeout=8m\n```\n",
    "Configure Image Repository\ncontainerization, repository, container registry, ctz, configuration, yaml\nThis YAML snippet shows how to specify the container image repository in your `containerize.yaml` configuration file before using the ctz build tool to build and push images. Replace `<your-container-registry>` with your desired container registry endpoint.\n\n```yaml\n...\nrepository: <your-container-registry>\n```\n",
    "Configure Image Repository\ncontainerization, ctz, build, push, images, logs, automation, shell\nThis shell command builds (and optionally pushes) all defined images using the `ctz` build tool, based on the configuration in `containerize.yaml`. The `--push` flag confirms the push action automatically, and `--log` enables more verbose output.\n\n```shell\nctz containerize.yaml\n# Optional:\nctz containerize.yaml --push --log\n```\n",
    "Customize Helm Chart > About CAP Helm Charts\nHelm, chart, scaffolding, CAP Helm charts, cds add helm, chart folder, values.yaml, Chart.yaml, values.schema.json\nThis directory structure snippet shows the files added by executing `cds add helm` to scaffold a Helm chart for a CAP application. It includes the main configuration (`values.yaml`), chart metadata (`Chart.yaml`), and a JSON schema for validation (`values.schema.json`).\n\n```shell\nchart/\n├── values.yaml         # Default configuration of the chart\n├── Chart.yaml          # Chart metadata\n└── values.schema.json  # JSON Schema for values.yaml file\n```\n",
    "Customize Helm Chart > About CAP Helm Charts\nHelm, chart, generated files, cds build, templates, Kubernetes manifests\nThis structure illustrates files generated into the `chart/templates/` directory as a result of running `cds build`, including Helm resource templates and deployment instructions. These templates define the Kubernetes manifests for deploying the CAP application.\n\n```shell\nchart/\n├── templates/\n│   ├── NOTES.txt # Message printed after Helm upgrade\n│   ├── *.tpl     # Template libraries used in template resources\n│   ├── *.yaml    # Template files for Kubernetes resources\n```\n",
    " Secret name to access container registry, only for private registries\nKubernetes, container registry, imagePullSecret, private registry, yaml, configuration\nThis YAML snippet defines the name of the Kubernetes secret (imagePullSecret) used to authenticate when pulling container images from a private registry. Replace <docker-secret> with the actual name of your secret that stores the credentials for the container registry.\n\n```yaml\nimagePullSecret:\n  name: <docker-secret>\n```\n",
    " Kubernetes cluster ingress domain (used for application URLs)\nKubernetes, configuration, domain, ingress\nSpecifies the ingress domain for a Kubernetes cluster. This domain is utilized for application URLs routed through the cluster's ingress controller. Replace <cluster-domain> with your actual cluster ingress domain value.\n\n```yaml\ndomain: <cluster-domain>\n```\n",
    " Container image registry > Deployment Properties\nHelm, values.yaml, Kubernetes, srv, configuration, environment variables, resources, health, image\nThis snippet shows the deployment properties for the 'srv' key inside Helm's values.yaml. You can specify service bindings, Kubernetes resources, environment variables, health/liveness/readiness probes, and the container image. Each section can be further configured as needed for your CAP application's deployment on Kubernetes.\n\n```yaml\nsrv:\n  # [Service bindings](#configuration-options-for-service-bindings)\n  bindings:\n\n  # Kubernetes container resources\n  # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n  resources:\n\n  # Map of additional env variables\n  env:\n    MY_ENV_VAR: 1\n\n  # Kubernetes Liveness, Readiness and Startup Probes\n  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/\n  health:\n    liveness:\n      path: <endpoint>\n    readiness:\n      path: <endpoint>\n    startupTimeout: <seconds>\n\n  # Container image\n  image:\n```\n",
    " Container image registry > SAP BTP Services > Built-in SAP BTP Services\nHelm, values.yaml, SAP BTP, service bindings, xsuaa, event-mesh, hana, services, configuration\nDemonstrates how to configure built-in SAP BTP services within values.yaml for deployment using a Helm chart. Common services such as xsuaa, hana, event-mesh, and more can be directly configured and are pre-populated based on your CAP application's 'requires' section. Custom parameters (like xsappname for xsuaa) can be provided as needed.\n\n```yaml\nxsuaa:\n  parameters:\n    xsappname: <name>\n    HTML5Runtime_enabled: true # for SAP Launchpad service\nevent-mesh: …\nconnectivity: …\ndestination: …\nhtml5-apps-repo-host: …\nhana: …\nservice-manager: …\nsaas-registry: …\n```\n",
    " Container image registry > SAP BTP Services > Arbitrary BTP Services\nHelm, Chart.yaml, arbitrary services, dependencies, service binding, feature toggles\nShows how to add a dependency in Chart.yaml for binding an arbitrary SAP BTP service instance (in this case, the feature-flags service) to your CAP application. The 'alias' property is used to reference this service in values.yaml and in srv bindings.\n\n```yaml\ndependencies:\n  ...\n  - name: service-instance\n    alias: feature-flags\n    version: 0.1.0\n```\n",
    " Container image registry > SAP BTP Services > Arbitrary BTP Services\nHelm, values.yaml, srv, arbitrary services, service binding, feature toggles\nDefines the configuration and binding of an arbitrary service instance (feature-flags) in values.yaml. The configuration includes the service offering and plan. The binding under 'srv' matches the alias set in Chart.yaml, enabling the CAP application to use this service.\n\n```yaml\nfeature-flags:\n  serviceOfferingName: feature-flags\n  servicePlanName: lite\n...\nsrv:\n   bindings:\n     feature-flags:\n        serviceInstanceName: feature-flags\n```\n",
    " Container image registry > SAP BTP Services > Arbitrary BTP Services > Additional requirements for the SAP Connectivity service\nKubernetes, kyma, CLI, connectivity-proxy, transparent-proxy, istio, connectivity, modules\nDemonstrates how to add required modules (connectivity-proxy, transparent-proxy, istio) to a Kyma cluster via the Kubernetes resource spec. This is needed when accessing the SAP Connectivity service from your application deployed on Kyma.\n\n```yaml\nspec:\n  modules:\n    - name: connectivity-proxy\n    - name: transparent-proxy\n    - name: istio\n```\n",
    " Container image registry > SAP BTP Services > Arbitrary BTP Services > Additional requirements for the SAP Connectivity service\nKubernetes, kyma, CLI, module edit, kubectl\nShows how to open the Kyma default resource for editing in the kyma-system namespace using kubectl. This is the first step in adding required modules for enhanced connectivity.\n\n```shell\nkubectl edit kyma default -n kyma-system\n```\n",
    " Use instead of generated nname\nKubernetes, Helm, configuration, chart, override, fullNameOverride\nThis YAML snippet shows how to override the automatically generated name for a Helm release using the fullNameOverride parameter. Place this in your values.yaml file to set a specific release name instead of the default name derived from chart and release metadata.\n\n```yaml\nfullNameOverride: <use instead of the generated name>\n```\n",
    " Name for service instance in SAP BTP\nSAP BTP, service instance, externalName, deployment, cloud\nSpecifies the externalName property used to define the name for a service instance when deploying to SAP BTP. This is typically used in deployment descriptors or configuration files to bind the CAP application to a specific managed service instance in the cloud environment.\n\n```yaml\nexternalName: <name for service instance in SAP BTP>\n```\n",
    "ServiceBinding > customTags\nServiceBinding, customTags, yaml, configuration\nSpecifies custom tags in a ServiceBinding configuration. The customTags field allows you to add arbitrary tags (such as 'foo' and 'bar'), which are then copied into the ServiceBinding secret under a 'tags' key. Useful for passing metadata to bound services or consuming applications.\n\n```yaml\ncustomTags:\n  - foo\n  - bar\n```\n",
    " as found in the respective service offering\nparameters, yaml, service offering, configuration\nThis YAML snippet shows how to specify parameters in a service offering context. The 'parameters' section is provided as a key-value list, and 'jsonParameters' is indicated as an empty object for additional configuration if necessary.\n\n```yaml\nparameters:\n  key: val\njsonParameters: {}\n```\n",
    "Configuration Options for Service Bindings\nhelm, jsonParameters, xsuaa, installation, configuration\nInstalls a Helm chart for the 'bookshop' application, supplying xsuaa service's jsonParameters from a local file. This demonstrates how to provide JSON configuration parameters via the --set-file flag while installing or upgrading Helm releases for CAP applications.\n\n```shell\nhelm install bookshop ./chart \\\n  --set-file xsuaa.jsonParameters=xs-security.json\n```\n",
    "Configuration Options for Service Bindings\nservice binding, configuration, values.yaml\nShows how to configure service bindings in the values.yaml file of a Helm chart, including either a local or absolute service instance name, plus custom parameters. This configuration pattern is used for connecting managed services to your CAP workload.\n\n```yaml\n<service name>:\n  # Exactly one of these must be specified\n  serviceInstanceName: my-service # within Helm chart\n  serviceInstanceFullName: my-service-full-name # using absolute name\n  # Additional parameters\n  parameters:\n    key: val\n```\n",
    "Configuration Options for Container Images\ncontainer image, configuration, values.yaml\nSpecifies the container image repository and optional version tag in the values.yaml for a Helm deployment of a CAP service. This is relevant for containerized deployments on Kubernetes or other platforms.\n\n```yaml\nrepository: my-repo.docker.io # container repo name\ntag: latest # optional container image version tag\n```\n",
    "HTML5 Applications\nHTML5, application, configuration, values.yaml\nExample configuration for deploying HTML5 applications with the CAP Helm chart. Specifies image, service bindings, resources, environment variables, and especially the SAP_CLOUD_SERVICE environment variable.\n\n```yaml\nhtml5-apps-deployer:\n  image:\n  bindings:\n  resources:\n  env:\n    # Name of your business service (unique per subaccount)\n    SAP_CLOUD_SERVICE: <service-name>\n```\n",
    "Backend Destinations\nbackend destination, external destination, HTML5, App Router, Kubernetes, values.yaml\nConfigures backend destinations for a service in values.yaml. Shows adding both internal and external (Internet-accessible) destinations for use by HTML5 apps or app router deployments, including the necessary keys for external HTTP services.\n\n```yaml\nsrv: # Key is the target service, e.g. 'srv'\n  backendDestinations:\n    srv-api:\n      service: srv\n    ui5:\n      external: true\n      name: ui5\n      Type: HTTP\n      proxyType: Internet\n      url: https://ui5.sap.com\n      Authentication: NoAuthentication\n```\n",
    "Services from Cloud Foundry\nKubernetes, secret, Cloud Foundry, service binding, hana, metadata\nIllustrates the format for a Kubernetes secret with metadata for binding a Cloud Foundry service instance (e.g., HANA hdi-shared) into a workload in Kyma via Helm. Includes credential and metadata properties needed for correct mapping by the CAP operator.\n\n```yaml\nstringData:\n  # <…>\n  .metadata: |\n    {\n      \"credentialProperties\":\n        [\n          { \"name\": \"certificate\", \"format\": \"text\"},\n          { \"name\": \"database_id\", \"format\": \"text\"},\n          { \"name\": \"driver\", \"format\": \"text\"},\n          { \"name\": \"hdi_password\", \"format\": \"text\"},\n          { \"name\": \"hdi_user\", \"format\": \"text\"},\n          { \"name\": \"host\", \"format\": \"text\"},\n          { \"name\": \"password\", \"format\": \"text\"},\n          { \"name\": \"port\", \"format\": \"text\"},\n          { \"name\": \"schema\", \"format\": \"text\"},\n          { \"name\": \"url\", \"format\": \"text\"},\n          { \"name\": \"user\", \"format\": \"text\"}\n        ],\n      \"metaDataProperties\":\n        [\n          { \"name\": \"plan\", \"format\": \"text\" },\n          { \"name\": \"label\", \"format\": \"text\" },\n          { \"name\": \"type\", \"format\": \"text\" },\n          { \"name\": \"tags\", \"format\": \"json\" }\n        ]\n    }\n  type: hana\n  label: hana\n  plan: hdi-shared\n  tags: '[ \"hana\", \"database\", \"relational\" ]'\n```\n",
    "Services from Cloud Foundry\nservice binding, fromSecret, values.yaml, hana, Cloud Foundry\nDemonstrates how to configure a workload (such as srv or hana-deployer) to bind a database by referencing a Kubernetes secret (created from a CF service key) using the 'fromSecret' property instead of 'serviceInstanceName' in values.yaml.\n\n```yaml\nsrv:\n  bindings:\n    db:\n      serviceInstanceName: ## [!code --]\n      fromSecret: <your secret> ## [!code ++]\nhana-deployer:\n  bindings:\n    hana:\n      serviceInstanceName: ## [!code --]\n      fromSecret: <your secret> ## [!code ++]\n```\n",
    "Services from Cloud Foundry\nhana, service removal, cleanup, values.yaml\nShows the required removal of the hana service section in values.yaml when service bindings are moved from Helm-managed instances to externally managed secrets (fromSecret).\n\n```yaml\nhana: ## [!code --]\n  serviceOfferingName: hana ## [!code --]\n  servicePlanName: hdi-shared ## [!code --]\n```\n",
    "Services from Cloud Foundry\nChart.yaml, dependency removal, hana, service-instance\nSpecifies deletion of the hana service dependency in Chart.yaml when you move to using external service bindings (fromSecret) for Cloud Foundry-created instances, removing automatic subchart management.\n\n```yaml\ndependencies:\n  …\n  - name: service-instance ## [!code --]\n    alias: hana ## [!code --]\n    version: \">0.0.0\" ## [!code --]\n  …\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, init, project setup\nInitializes a new CAP project. Use this command to quickly jump-start a cds-based project by generating the basic folder structure and configuration files.\n\n```shell\ncds init <project>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, add, project setup\nAdds a specific feature or facet to an existing CAP project, such as database or authentication support.\n\n```shell\ncds add <facets>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, import, project setup\nImports models from external sources, such as APIs, into your CAP project. Useful for service integration and code reuse.\n\n```shell\ncds import <api>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, compilation, to json, to yml, to sql\nCompiles CDS models to various target outputs such as CSN (JSON), YAML, SQL, and EDMX. Central for model transformations and deployment.\n\n```shell\ncds compile <models>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, service, local server\nRuns specified CAP services on a local Node.js server for development and testing.\n\n```shell\ncds serve <services>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, watch, project setup\nRuns CAP services and restarts them automatically on file changes, speeding up development cycles.\n\n```shell\ncds watch\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, repl, interactive shell\nStarts a read-eval-print-loop for live interaction with the CAP environment. Useful for debugging and experimentation.\n\n```shell\ncds repl\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, configuration, environment\nPrints the effective configuration resolved from all sources in the CAP project, including environment variables and configuration files.\n\n```shell\ncds env\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, build, deploy\nPrepares artifacts for deployment to database or cloud by building all required resources from CDS models.\n\n```shell\ncds build\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, deploy\nDeploys the current project artifacts to supported databases (SAP HANA, SQLite, PostgreSQL, etc.) or to cloud environments.\n\n```shell\ncds deploy\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, multitenancy, SaaS\nLogs into a multitenant SaaS CAP application for tenant administration actions.\n\n```shell\ncds login <app-url>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, multitenancy, SaaS, upgrade\nUpgrades all or specific SaaS tenants of a CAP application to the latest version of deployed models and services.\n\n```shell\ncds upgrade\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, multitenancy, SaaS\nLogs out from the current multitenant SaaS CAP application session.\n\n```shell\ncds logout\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, multitenancy, SaaS\nSubscribes a tenant to a CAP-based SaaS application, initializing required resources for that tenant.\n\n```shell\ncds subscribe <tenant>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, multitenancy, SaaS\nUnsubscribes a tenant from a CAP-based SaaS application, removing related resources.\n\n```shell\ncds unsubscribe <tenant>\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, extension, pull\nPulls the base model for a SaaS extension, to enable extensions based on an existing base project.\n\n```shell\ncds pull\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, extension, push\nPushes a SaaS extension (like additional models) to the provider CAP application.\n\n```shell\ncds push\n```\n",
    " Features Overview > CLI & Tools Support\nCLI, cds CLI, version\nDisplays the installed CAP 'cds' tool version. Use to verify your local CLI against the release notes.\n\n```shell\ncds version\n```\n",
    " Deploy using CI/CD Pipelines > GitHub Actions\nCI/CD, GitHub Actions, Node.js, Java, workflow, sample, testing\nThis is a simple GitHub Actions workflow that automatically checks out your code, installs dependencies, and runs tests on multiple Node.js versions. Use it as a template for CI/CD pipelines for CAP (Cloud Application Programming Model) Node.js projects. Similar workflows can be found in the SAP SFlight sample for both Node.js and Java versions.\n\n```yaml\nname: Node.js CI\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm install\n      - run: npm test\n```\n",
    " Deploy using CI/CD Pipelines > GitHub Actions\nCI/CD, GitHub Actions, Java, Maven, workflow, sample, testing\nThis sample GitHub Actions workflow shows how to build and test CAP Java projects with Maven across multiple Java versions. It checks out the code, sets up the required JDK, and runs the Maven install command. This matches examples from SAP's SFlight sample repositories.\n\n```yaml\nname: Java CI\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java-version: [11, 17]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK ${{ matrix.java-version }}\n        uses: actions/setup-java@v2\n        with:\n          java-version: ${{ matrix.java-version }}\n          distribution: 'temurin'\n      - name: Build with Maven\n        run: mvn install --batch-mode\n```\n",
    " Health Checks\nhealth check, Node.js, liveness, readiness, availability, server.js\nThe CAP Node.js runtime automatically exposes a /health endpoint for both liveness and readiness checks. Any HTTP request to /health receives a 200 status code with a JSON body { status: 'UP' }. This allows platform probes (e.g., Cloud Foundry, Kubernetes) to verify application health without custom implementation.\n\n```http\nGET /health\n// Response:\n{\n  status: 'UP'\n}\n```\n",
    " Health Checks\nhealth check, Java, Spring Boot, readiness, liveness, actuator, dependency\nFor CAP Java applications, the endpoints /actuator/health/liveness and /actuator/health/readiness are made available when appropriate facets (mta, cf-manifest, helm, helm-unified-runtime) are added via 'cds add'. These support the typical health probe requirements in container orchestrators and platforms like Kubernetes and Cloud Foundry.\n\n```http\nGET /actuator/health/liveness\nGET /actuator/health/readiness\n```\n",
    " Health Checks\ndeployment, Kubernetes, Helm, Kyma, configuration, cds toolkit\nWhen deploying CAP projects to Kubernetes (including Kyma), Helm charts managed by @sap/cds-dk are automatically configured to probe the /health endpoint using liveness and readiness probes. Adjust these YAML values if your project exposes custom health-check paths or uses a custom server.js.\n\n```yaml\n# Example: Helm snippet for liveness/readiness probes\nlivenessProbe:\n  httpGet:\n    path: /health\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\nreadinessProbe:\n  httpGet:\n    path: /health\n    port: http\n  initialDelaySeconds: 10\n  periodSeconds: 10\n```\n",
    " Multitenancy > Prerequisites\ninstallation, npm, cds toolkit\nUpdates the globally installed CAP development toolkit to the latest version, ensuring access to the most recent features and compatibility.\n\n```shell\nnpm update -g @sap/cds-dk\n```\n",
    " Multitenancy > Jumpstart with an application\ninit, project setup, Node.js, samples\nInitializes a new sample CAP bookshop application in Node.js for development and experimentation.\n\n```shell\ncds init bookshop --add sample\ncd bookshop\n```\n",
    " Multitenancy > Jumpstart with an application\ninit, project setup, Java, samples\nInitializes a new sample CAP bookshop application in Java for Java-based CAP projects.\n\n```shell\ncds init bookshop --java --add tiny-sample\ncd bookshop\n```\n",
    " Multitenancy > Enable Multitenancy\nenable multitenancy, cds CLI, multitenancy\nEnables multitenancy support in the CAP project, orchestrating setup necessary for SaaS scenarios.\n\n```shell\ncds add multitenancy\n```\n",
    " Multitenancy > Enable Multitenancy > See what this adds to your Node.js project…\nnpm, dependencies, multitenancy, Node.js\nAdds the @sap/cds-mtxs package to Node.js project dependencies in package.json to support CAP multitenancy features.\n\n```jsonc\n{\n   \"dependencies\": {\n      \"@sap/cds-mtxs\": \"^3\"\n   },\n}\n```\n",
    " Multitenancy > Enable Multitenancy > See what this adds to your Node.js project…\npackage.json, configuration, multitenancy, sidecar, Node.js\nConfigures package.json for multitenancy sidecar with profile and production-specific multitenancy activation.\n\n```jsonc\n{\n  \"cds\": {\n    \"profile\": \"with-mtx-sidecar\",\n    \"requires\": {\n      \"[production]\": {\n        \"multitenancy\": true\n      }\n    }\n  }\n}\n```\n",
    " Multitenancy > Enable Multitenancy > See what this adds to your Node.js project…\npackage.json, sidecar, multitenancy, Node.js, project structure\nDefines the MTX sidecar Node.js subproject for multitenancy features and service separation.\n\n```json\n{\n  \"name\": \"bookshop-mtx\",\n  \"dependencies\": {\n    \"@cap-js/hana\": \"^2\",\n    \"@sap/cds\": \"^9\",\n    \"@sap/cds-mtxs\": \"^3\",\n    \"@sap/xssec\": \"^4\",\n    \"express\": \"^4\"\n  },\n  \"devDependencies\": {\n    \"@cap-js/sqlite\": \"^2\"\n  },\n  \"engines\": {\n    \"node\": \">=20\"\n  },\n  \"scripts\": {\n    \"start\": \"cds-serve\"\n  },\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\"\n  }\n}\n```\n",
    " Multitenancy > Enable Multitenancy > See what this adds to your Java project…\ncdsrc.json, java, multitenancy, profile\nAdds configuration for multitenancy and profiles to .cdsrc.json in Java-based projects.\n\n```jsonc\n{\n  \"profiles\": [\n    \"with-mtx-sidecar\",\n    \"java\"\n  ],\n  \"requires\": {\n    \"[production]\": {\n      \"multitenancy\": true\n    }\n  }\n}\n```\n",
    " Multitenancy > Enable Multitenancy > See what this adds to your Java project…\npom.xml, Java, multitenancy, dependency\nIncludes the CAP Java multitenancy feature dependency in the project Maven configuration.\n\n```xml\n<dependency>\n    <groupId>com.sap.cds</groupId>\n    <artifactId>cds-feature-mt</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n",
    " Multitenancy > Enable Multitenancy > See what this adds to your Java project…\napplication.yaml, Java, Spring Boot, multitenancy, configuration\nConfigures Spring Boot's application.yaml for multitenancy enabling in CAP Java applications.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: cloud\ncds:\n  multi-tenancy:\n    mtxs.enabled: true\n```\n",
    " Multitenancy > Install Dependencies\ninstall, dependencies, Node.js\nInstalls all Node.js project dependencies after enabling multitenancy.\n\n```shell\nnpm i\n```\n",
    " Multitenancy > Install Dependencies\ninstall, dependencies, Java, maven\nUses Maven to install Java dependencies and generate model artifacts after enabling multitenancy.\n\n```shell\nmvn install\n```\n",
    " Multitenancy > Test-Drive Locally\nmultitenancy, local testing, profile, configuration, Node.js\nCreates a new configuration profile for local multitenancy testing using the cds add command.\n\n```shell\ncds add multitenancy --for local-multitenancy\n```\n",
    " Multitenancy > Test-Drive Locally\nmock users, Spring Boot, application.yaml, Java, multitenancy\nSets up mock users with associated tenants and roles for CAP Java local multitenancy testing in Spring Boot application.yaml.\n\n```yaml\n---\nspring:\n  config.activate.on-profile: local-multitenancy\n#...\ncds:\n  multi-tenancy:\n    mtxs.enabled: true\n  security.mock.users:\n    - name: alice\n      tenant: t1\n      roles: [ admin ]\n    - name: bob\n      tenant: t1\n      roles: [ cds.ExtensionDeveloper ]\n    - name: erin\n      tenant: t2\n      roles: [ admin, cds.ExtensionDeveloper ]\n```\n",
    " Multitenancy > Test-Drive Locally\nsidecar, mtx, dummy auth, package.json, Node.js, local testing\nConfigures the MTX sidecar in development mode to use dummy authentication for local testing.\n\n```json\n{\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\",\n    \"[development]\": {\n      \"requires\": {\n        \"auth\": \"dummy\"\n      }\n    }\n  }\n}\n```\n",
    " Multitenancy > Test-Drive Locally > 1. Start MTX Sidecar\nservice, sidecar, start, Node.js, watch, CLI\nStarts the MTX sidecar microservice in watch mode for live development and multitenancy testing.\n\n```shell\ncds watch mtx/sidecar\n```\n",
    " Multitenancy > Test-Drive Locally > 2. Launch App Server\nstart, app server, local-multitenancy, Node.js, CLI\nLaunches the main app server with the local-multitenancy profile for local SaaS simulation.\n\n```shell\ncds watch --profile local-multitenancy\n```\n",
    " Multitenancy > Test-Drive Locally > 2. Launch App Server\nstart, app server, local-multitenancy, Java, Spring Boot, CLI\nStarts the Java app server with the local-multitenancy profile for multitenancy development and testing.\n\n```shell\ncd srv\nmvn cds:watch -Dspring-boot.run.profiles=local-multitenancy\n```\n",
    " Multitenancy > Test-Drive Locally > 3. Subscribe Tenants\ntenant subscription, CLI, test, mtx\nSubscribes two test tenants (t1 and t2) to the running MTX service locally using the CLI.\n\n```shell\ncds subscribe t1 --to http://localhost:4005 -u yves:\ncds subscribe t2 --to http://localhost:4005 -u yves:\n```\n",
    " Multitenancy > Test-Drive Locally > 3. Subscribe Tenants\ntenant subscription, http, API, test\nHTTP API request to subscribe tenant 't1' to MTX DeploymentService, emulating tenant provisioning.\n\n```http\nPOST http://localhost:4005/-/cds/deployment/subscribe HTTP/1.1\nContent-Type: application/json\nAuthorization: Basic yves:\n\n{ \"tenant\": \"t1\" }\n```\n",
    " Multitenancy > Test-Drive Locally > 3. Subscribe Tenants\ntenant subscription, JavaScript API, test, DeploymentService\nJavaScript code to subscribe tenant 't1' using the cds.xt.DeploymentService API for integration or advanced automation.\n\n```js\nconst ds = await cds.connect.to('cds.xt.DeploymentService')\nawait ds.subscribe('t1')\n```\n",
    " Multitenancy > Test-Drive Locally > Pre-defined users in `mocked-auth`\nmock users, auth config, users, package.json, Node.js\nAdds or overrides users and their tenant assignments for mocked authentication by adapting the package.json configuration.\n\n```jsonc\n\"cds\":{\n \"requires\": {\n   \"auth\": {\n     \"users\": {\n       \"u2\": { \"tenant\": \"t2\" },\n       \"u3\": { \"tenant\": \"t3\" }\n     }\n   }\n }\n}\n```\n",
    " Multitenancy > Test-Drive Locally > 4. Upgrade Your Tenant\ntenant upgrade, CLI, mtx, upgrade\nCLI command to manually upgrade tenant 't1' after data or schema changes for multitenant scenario testing.\n\n```shell\ncds upgrade t1 --at http://localhost:4005 -u yves:\n```\n",
    " Multitenancy > Test-Drive Locally > 4. Upgrade Your Tenant\ntenant upgrade, http, mtx, upgrade\nHTTP request to the MTX DeploymentService to upgrade tenant 't1' after application or data model change.\n\n```http\nPOST http://localhost:4005/-/cds/deployment/upgrade HTTP/1.1\nContent-Type: application/json\nAuthorization: Basic yves:\n\n{ \"tenant\": \"t1\" }\n```\n",
    " Multitenancy > Test-Drive Locally > 4. Upgrade Your Tenant\ntenant upgrade, JavaScript, mtx, upgrade\nJavaScript usage of cds.xt.DeploymentService API to perform an upgrade for tenant 't1'.\n\n```js\nconst ds = await cds.connect.to('cds.xt.DeploymentService')\nawait ds.upgrade('t1')\n```\n",
    " Multitenancy > Deploy to Cloud > Cloud Foundry / Kyma\nCloud Foundry, dependencies, deployment, hana, xsuaa\nAdds SAP HANA Cloud and XSUAA services to the project for deployment support on Cloud Foundry/Kyma.\n\n```shell\ncds add hana,xsuaa\n```\n",
    " Multitenancy > Deploy to Cloud > Cloud Foundry / Kyma\nSAP Portal, cloud portal, CDS CLI\nConfigures SAP Cloud Portal service for serving UIs as part of the CAP SaaS setup.\n\n```shell\ncds add portal\n```\n",
    " Multitenancy > Deploy to Cloud > Cloud Foundry / Kyma\ndeployment descriptor, mta, CLI, Cloud Foundry\nAdds the MTA deployment descriptor for SAP Cloud Foundry applications.\n\n```shell\ncds add mta\n```\n",
    " Multitenancy > Deploy to Cloud > Cloud Foundry / Kyma\ndeployment descriptor, helm, containerization, Kyma, CLI\nAdds Helm chart and containerization support for deploying to Kyma.\n\n```shell\ncds add helm,containerize\n```\n",
    " Multitenancy > Deploy to Cloud > Cloud Foundry / Kyma\nxsuaa, redirect-uris, xs-security.json, Cloud Foundry\nSpecifies allowed redirect URIs for XSUAA in xs-security.json to match trial or extension landscape requirements.\n\n```json\n\"oauth2-configuration\": {\n  \"redirect-uris\": [\"https://*.cfapps.us10-001.hana.ondemand.com/**\"]\n}\n```\n",
    " Multitenancy > Deploy to Cloud > Cloud Foundry\ncf, map-route, Cloud Foundry, app routing\nMaps a custom route to the deployed Cloud Foundry application to make it accessible for a tenant/subaccount.\n\n```shell\ncf map-route <app> <paasDomain> --hostname <subscriberSubdomain>-<saasAppName>\n```\n",
    " Multitenancy > Deploy to Cloud > Cloud Foundry\nmta.yaml, deployment descriptor, CF\nDefines the saas-registry service binding in the MTA deployment descriptor to support SaaS subscription scenarios.\n\n```yaml\n- name: bookshop-registry\n  type: org.cloudfoundry.managed-service\n  parameters:\n    service: saas-registry\n    service-plan: application\n    config:\n      appName: bookshop-${org}-${space}\n```\n",
    " Multitenancy > Deploy to Cloud > Update Database Schema > Run as Cloud Foundry hook\nmtx sidecar, API, upgrade, cds-mtx, Cloud Foundry, deployment, hook\nDefines an MTA deployment hook to upgrade all tenants' databases via cds-mtx during deployment.\n\n```yaml\nhooks:\n  - name: upgrade-all\n    type: task\n    phases:\n      - deploy.application.before-start\n    parameters:\n      name: upgrade\n      memory: 512M\n      disk-quota: 768M\n      command: cds-mtx upgrade '*'\n```\n",
    " Multitenancy > Deploy to Cloud > Update Database Schema > Manually run as Cloud Foundry Task\nCloud Foundry, cf, manual upgrade, task, database schema\nManually runs CDS-MTX upgrade as a CF task to upgrade database schema for all tenants.\n\n```shell\ncf run-task <app> --name \"upgrade-all\" --command \"cds-mtx upgrade '*'\"\n```\n",
    " Multitenancy > Test-Drive with Hybrid Setup\nhybrid testing, cloud, cds bind, local, service binding\nBinds local CAP application to remote SAP BTP services, allowing for realistic hybrid development/testing scenarios.\n\n```shell\ncds bind --to-app-services bookshop-srv\n```\n",
    " Multitenancy > Test-Drive with Hybrid Setup\nhybrid testing, sidecar, service binding, mtx\nBinds the MTX sidecar to app services to ensure sidecar is correctly connected in a hybrid test landscape.\n\n```shell\ncd mtx/sidecar\ncds bind --to-app-services bookshop-srv\n```\n",
    " Multitenancy > Test-Drive with Hybrid Setup\nhana, HDI, build, production, deployment, hybrid\nBuilds SAP HANA deployment artifacts in production mode, necessary after any model changes before deployment or hybrid testing.\n\n```shell\ncds build --production\n```\n",
    " Multitenancy > Test-Drive with Hybrid Setup\nhybrid testing, sidecar, mtx, server, profile\nRuns the MTX sidecar in hybrid mode, using cloud service bindings for realistic integration testing.\n\n```shell\ncds watch mtx/sidecar --profile hybrid\n```\n",
    " Multitenancy > Test-Drive with Hybrid Setup\nhybrid testing, Java, profiles, Spring Boot\nRuns Java CAP application in hybrid mode with cloud bindings to mirror production-like cloud setup during testing.\n\n```shell\ncd srv\nmvn cds:watch -Dspring-boot.run.profiles=hybrid\n```\n",
    " Multitenancy > Test-Drive with Hybrid Setup\nhybrid testing, Node.js, profiles\nRuns the main Node.js app in hybrid mode, making use of remote service bindings for advanced local/cloud integration test.\n\n```shell\ncds watch --profile hybrid\n```\n",
    " Multitenancy > Test-Drive with Hybrid Setup\nprofile, deployment, cds bind, Node.js, multi-deployment\nBinds to a database with a specific profile and starts the app server for environments like dev/test/prod.\n\n```shell\ncds bind -2 bookshop-db --profile dev\ncds watch --profile dev\n```\n",
    " Multitenancy > SaaS Dependencies\ndependencies, saas, multitenancy, sidecar, Node.js, SAP BTP services\nActivates SaaS dependencies for various SAP BTP services in a CAP Node.js application using CDS configuration.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"audit-log\": true,\n    \"connectivity\": true,\n    \"destinations\": true,\n    \"html5-repo\": true,\n    \"portal\": true\n  }\n}\n```\n",
    " Multitenancy > SaaS Dependencies > Additional Services\ndependencies, saas, subscriptionDependency, custom, Node.js\nDeclares a custom subscription dependency for a service by referencing the xsappname attribute in configuration.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"my-service\": {\n      \"subscriptionDependency\": \"xsappname\"\n    }\n  }\n}\n```\n",
    " Multitenancy > Add Custom Handlers > In the Java Main Project\ncustom handler, Java, tenant events, multitenancy\nDemonstrates how to implement custom event handlers for subscribe, upgrade, and unsubscribe events in CAP Java SaaS scenarios.\n\n```java\n@After\nprivate void subscribeToService(SubscribeEventContext context) {\n   String tenant = context.getTenant();\n   Map<String, Object> options = context.getOptions();\n}\n\n@On\nprivate void upgradeService(UpgradeEventContext context) {\n   List<String> tenants = context.getTenants();\n   Map<String, Object> options = context.getOptions();\n}\n\n@Before\nprivate void unsubscribeFromService(UnsubscribeEventContext context) {\n   String tenant = context.getTenant();\n   Map<String, Object> options = context.getOptions();\n}\n```\n",
    " Multitenancy > Add Custom Handlers > In the Sidecar Subproject\ncustom handler, Node.js, sidecar, DeploymentService\nShows how to register event handlers for subscription and deployment lifecycle events in MTX sidecar projects (Node.js).\n\n```js\ncds.on('served', () => {\n  const { 'cds.xt.DeploymentService': ds } = cds.services\n  ds.before('subscribe', async (req) => {\n    // HDI container credentials are not yet available here\n    const { tenant } = req.data\n  })\n  ds.before('upgrade', async (req) => {\n    // HDI container credentials are not yet available here\n    const { tenant } = req.data\n  })\n  ds.after('deploy', async (result, req) => {\n    const { container } = req.data.options\n    const { tenant } = req.data\n    ...\n  })\n  ds.after('unsubscribe', async (result, req) => {\n    const { container } = req.data.options\n    const { tenant } = req.data\n  })\n})\n```\n",
    " Multitenancy > Configuring the Java Service\nmta.yaml, Cloud Foundry, multitenancy, sidecar, Java, environment variable\nDefines required SaaS multitenancy configuration and dependencies for the Java bookshop in Cloud Foundry's mta.yaml.\n\n```yaml\nmodules:\n  - name: bookshop-srv\n    type: java\n    path: srv\n    parameters:\n      ...\n    provides:\n      - name: srv-api # required by consumers of CAP services (e.g. approuter)\n        properties:\n          srv-url: ${default-url}\n    requires:\n      - name: app-api\n        properties:\n          CDS_MULTITENANCY_APPUI_URL: ~{url}\n          CDS_MULTITENANCY_APPUI_TENANTSEPARATOR: \"-\"\n      - name: bookshop-auth\n      - name: bookshop-db\n      - name: mtx-api\n        properties:\n          CDS_MULTITENANCY_SIDECAR_URL: ~{mtx-url}\n      - name: bookshop-registry\n```\n",
    " Multitenancy > Configuring the Java Service\nvalues.yaml, Kyma, environment variable, multitenancy, Java\nConfigures environment variables for the service in Kyma deployment for proper multitenancy routing and sidecar connection.\n\n```yaml\nsrv:\n  bindings:\n    ...\n  image:\n    repository: bookshop-srv\n  env:\n    SPRING_PROFILES_ACTIVE: cloud\n    CDS_MULTITENANCY_APPUI_TENANTSEPARATOR: \"-\"\n    CDS_MULTITENANCY_APPUI_URL: https://{{ .Release.Name }}-srv-{{ .Release.Namespace }}.{{ .Values.global.domain }}\n    CDS_MULTITENANCY_SIDECAR_URL: https://{{ .Release.Name }}-sidecar-{{ .Release.Namespace }}.{{ .Values.global.domain }}\n  ...\n```\n",
    " Multitenancy > Configuring the Java Service > Option: Provisioning Only\ncdsrc.json, sidecar, provisioning-only, Java, extensibility, feature toggles\nConfigures Java project and sidecar for provisioning-only setup by disabling extensibility and feature toggles.\n\n```json\n{\n    \"requires\": {\n        \"multitenancy\": true,\n        \"extensibility\": false,\n        \"toggles\": false\n    },\n    \"build\": {\n        ...\n    }\n}\n```\n",
    " Multitenancy > Configuring the Java Service > Option: Provisioning Only\napplication.yaml, provisioning-only, Java, sidecar, extensibility, feature toggles\nDisables sidecar lookups for extension and toggle models, enabling static model usage in Java apps for maximum performance.\n\n```yaml\ncds:\n  model:\n    provider:\n      extensibility: false\n      toggles: false\n```\n",
    " Getting Started… > Add `@sap/cds-mtxs` Package Dependency\ninstallation, cds toolkit, npm, Node.js, MTX, dependencies\nInstall the @sap/cds-mtxs package in your CAP Node.js project to add support for MTX services (multitenancy, extensibility, feature toggles).\n\n```shell\nnpm add @sap/cds-mtxs\n```\n",
    " Getting Started… > Enable MTX Functionality\nconfiguration, cds, package.json, MTX, multitenancy, extensibility, feature toggles, defaults\nEnable MTX features (multitenancy, extensibility, toggles) in a Node.js-based CAP project by adding configuration under the cds section in package.json.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"multitenancy\": true,\n      \"extensibility\": true,\n      \"toggles\": true\n    }\n  }\n}\n```\n",
    " Getting Started… > Test-Drive Locally\nCLI, local server, watch, MTX, development\nStarts your CAP server in development mode and also serves the MTX services if enabled.\n\n```shell\ncds watch\n```\n",
    " Grow As You Go > Enable MTX Only if Required\nCLI, local server, watch, profile, MTX, development\nStarts the CAP server using the 'local-multitenancy' profile, useful for occasional MTX feature testing during development.\n\n```shell\ncds watch --profile local-multitenancy\n```\n",
    " Grow As You Go > Enable MTX Only if Required\nconfiguration, cds, package.json, profile, environment, MTX, multitenancy, extensibility, feature toggles\nShows profile-based configuration to enable MTX only in specific environments (development or production).\n\n```jsonc\n{\n  \"cds\": {\n    \"requires\": {\n      \"[local-multitenancy]\": {\n         \"multitenancy\": true,\n         \"extensibility\": true,\n         \"toggles\": true\n      },\n      \"[production]\": {\n         \"multitenancy\": true,\n         \"extensibility\": true,\n         \"toggles\": true\n      }\n    }\n  }\n}\n```\n",
    " Sidecar Setups > Create Sidecar as a Node.js Subproject\nproject setup, sidecar, Node.js, MTX, package.json, dependencies\nA minimal package.json for setting up a Node.js-based MTX sidecar service as a subproject, with necessary dependencies and the 'mtx-sidecar' profile.\n\n```json\n{\n  \"name\": \"bookshop-mtx\", \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"@sap/cds\": \"^9\",\n    \"@cap-js/hana\": \"^2\",\n    \"@sap/cds-mtxs\": \"^3\",\n    \"@sap/xssec\": \"^4\",\n    \"express\": \"^4\"\n  },\n  \"devDependencies\": {\n    \"@cap-js/sqlite\": \"^2\"\n  },\n  \"scripts\": {\n    \"start\": \"cds-serve\"\n  },\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\"\n  }\n}\n```\n",
    " Sidecar Setups > Create Sidecar as a Node.js Subproject > Required MTX Services\nconfiguration, cds, sidecar, MTX, profile, requires\nShows enabling all MTX services in a sidecar using standard configuration and the 'in-sidecar' preset for the ModelProviderService.\n\n```jsonc\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.ModelProviderService\": \"in-sidecar\",\n      \"cds.xt.DeploymentService\": true,\n      \"cds.xt.SaasProvisioningService\": true,\n      \"cds.xt.ExtensibilityService\": true\n      // ...\n    }\n  }\n}\n```\n",
    " Sidecar Setups > Create Sidecar as a Node.js Subproject > Using Shared Database\nconfiguration, cds, sqlite, sidecar, shared database\nConfigures the sidecar to use the same SQLite database instance as the main app during development.\n\n```jsonc\n{\n  \"[development]\": {\n    \"db\": { \"kind\": \"sqlite\", \"credentials\": {\n      \"url\": \"../../db.sqlite\"\n    }}\n  }\n}\n```\n",
    " Sidecar Setups > Create Sidecar as a Node.js Subproject > Additional `[development]` Settings\nconfiguration, cds, sidecar, development, port, auth\nSupports local sidecar tests by configuring a specific server port (4005) and mocked authentication.\n\n```jsonc\n{\n  \"[development]\": {\n    \"requires\": { \"auth\": \"mocked\" },\n    \"server\": { \"port\": 4005 }\n  }\n}\n```\n",
    " Sidecar Setups > Testing Sidecar Setups\nCLI, local server, watch, sidecar, development\nStart the MTX sidecar service for local development. Should be run in a separate shell from your main app.\n\n```shell\ncds watch mtx/sidecar\n```\n",
    " Sidecar Setups > Test-Drive Production Locally\nCLI, local server, watch, sidecar, production\nRun the generated production-ready sidecar build locally for testing using both development and production profiles.\n\n```shell\ncds watch gen/mtx/sidecar --profile development,prod\n```\n",
    " Sidecar Setups > Build Sidecar for Production\nbuild, sidecar, CLI\nCompiles the entire project, including a deployable version of the sidecar (for example, in gen/mtx/sidecar), for production usage.\n\n```shell\ncds build\n```\n",
    " Configuration > Shortcuts `cds.requires.multitenancy / extensibility / toggles`\nconfiguration, cds, MTX, shortcuts, multitenancy, extensibility, feature toggles\nIt shows a shortcut for enabling all three main MTX features at once via the cds.requires section.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"multitenancy\": true,\n      \"extensibility\": true,\n      \"toggles\": true\n    }\n  }\n}\n```\n",
    " Configuration > Configuring Individual Services\nconfiguration, cds, MTX, service definition, individual services\nShows how to activate the DeploymentService individually using cds.requires.\n\n```jsonc\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.DeploymentService\": true\n    }\n  }\n}\n```\n",
    " Configuration > Configuring Individual Services > Combined with Convenience Flags\nconfiguration, cds, MTX, multitenancy, service definition, individual services, REST\nExample of mixing the multitenancy shortcut with individual service deactivation and configuring ModelProviderService to use REST protocol for remote consumption.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"multitenancy\": true,\n      \"cds.xt.SaasProvisioningService\": false,\n      \"cds.xt.DeploymentService\": false,\n      \"cds.xt.ModelProviderService\": { \"kind\": \"rest\" }\n    }\n  }\n}\n```\n",
    " Configuration > Configuring Individual Services > Individual Configurations Only\nconfiguration, cds, MTX, service definition, root, model\nSelective activation and configuration of individual MTX services, setting the root for the ModelProviderService.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.DeploymentService\": true,\n      \"cds.xt.ModelProviderService\": { \"root\": \"../..\" }\n    }\n  }\n}\n```\n",
    " Configuration > Using Configuration Presets > Profile-based configuration\nconfiguration, cds, profile, preset, mtx-sidecar\nMinimal profile-based configuration for a sidecar project using the 'mtx-sidecar' profile.\n\n```json\n\"cds\": {\n  \"profile\": \"mtx-sidecar\"\n}\n```\n",
    " Configuration > Using Configuration Presets > Preset-based configuration\nconfiguration, cds, ModelProviderService, preset, in-sidecar\nEnables ModelProviderService using the built-in 'in-sidecar' configuration preset for sidecar scenarios.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.ModelProviderService\": \"in-sidecar\"\n    }\n  }\n}\n```\n",
    " Configuration > Inspecting Effective Configuration\nCLI, environment, inspect, cds env, configuration\nInspect the effective service configuration for the current (sidecar) project. Useful for troubleshooting and verification.\n\n```shell\ncds env get requires\n```\n",
    " Configuration > Inspecting Effective Configuration\nCLI, environment, inspect, cds env, profile\nInspect the effective configuration for specified profiles (such as development or production) using the cds CLI.\n\n```shell\ncds env get requires --profile development\ncds env get requires --profile production\n```\n",
    " Customization > Customizing Service Definitions\ncds modeling, cds, customization, service definition, annotations, ModelProviderService, override endpoint\nCustomize the endpoint of ModelProviderService by overriding it with a specific path annotation in your sidecar project.\n\n```cds\nusing { cds.xt.ModelProviderService } from '@sap/cds-mtxs';\nannotate ModelProviderService with @path: '/mtx/mps';\n```\n",
    " Customization > Adding Custom Lifecycle Event Handlers\ncustomization, server.js, event handler, ModelProviderService, DeploymentService\nRegister custom lifecycle and event handlers for MTX services in your sidecar server.js file.\n\n```js\nconst cds = require('@sap/cds')\ncds.on('served', ()=>{\n  const { 'cds.xt.ModelProviderService': mps } = cds.services\n  const { 'cds.xt.DeploymentService': ds } = cds.services\n  ds.before ('upgrade', (req) => { ... })\n  ds.after ('subscribe', (_,req) => { ... })\n  mps.after ('getCsn', (csn) => { ... })\n})\n```\n",
    " Consumption > Via Programmatic APIs\ntesting, repl, programmatic API, service consumer, ModelProviderService, DeploymentService\nSample REPL script for testing and exploring MTX service APIs programmatically using CAP's standard service API.\n\n```js\nawait cds.test()\nvar { 'cds.xt.ModelProviderService': mps } = cds.services\nvar { 'cds.xt.DeploymentService': ds } = cds.services\nvar db = await ds.subscribe ('t1')\nvar csn = await mps.getCsn('t1')\ncds.context = { tenant:'t1' }\nawait db.run('SELECT type, name from sqlite_master')\n```\n",
    " ModelProviderService > `getCsn` _(tenant, toggles) → CSN_\nsample request, REST, ModelProviderService, getCsn, multitenancy, toggles\nExample REST API call to ModelProviderService to retrieve an effective CSN for a tenant including all feature toggles.\n\n```http\nPOST /-/cds/model-provider/getCsn HTTP/1.1\nContent-Type: application/json\n\n{\n  \"tenant\": \"t1\",\n  \"toggles\": [\"*\"]\n}\n```\n",
    " ModelProviderService > `getEdmx` _(tenant, toggles, service, locale) → EDMX_\nsample request, REST, ModelProviderService, getEdmx, multitenancy, OData\nExample REST API request to ModelProviderService to retrieve the OData EDMX metadata document for a given service, tenant, and locale.\n\n```http\nPOST /-/cds/model-provider/getEdmx HTTP/1.1\nContent-Type: application/json\n\n{\n  \"tenant\": \"t1\",\n  \"toggles\": [\"*\"],\n  \"service\": \"CatalogService\",\n  \"locale\": \"en\"\n}\n```\n",
    " ExtensibilityService > Configuration\nconfiguration, cds, ExtensibilityService, allowlist, blocklist, element-prefix\nAdvanced configuration for ExtensibilityService, specifying field name prefixes, namespace blocklist, and entity/field allowlists for tenant-specific extension management.\n\n```jsonc\n{\n  \"cds.xt.ExtensibilityService\": {\n    \"element-prefix\": [\"x_\", \"xx_\"],\n    \"namespace-blocklist\": [\"com.sap.\", \"sap.\"],\n    \"extension-allowlist\": [\n      {\n        \"for\": [\"my.bookshop\"],\n        \"kind\": \"entity\",\n        \"new-fields\": 2,\n        \"fields\": [\"description\"]\n      },\n      {\n        \"for\": [\"CatalogService\"],\n        \"new-entities\": 2,\n        \"annotations\": [\"@readonly\"]\n      }\n    ]\n  }\n}\n```\n",
    " ExtensibilityService > GET `Extensions/<ID>` _→ [{ ID, csn, timestamp }]_\nsample request, REST, ExtensibilityService, GET, extension list\nHTTP GET request retrieving a list of all tenant-specific extensions via the ExtensibilityService.\n\n```http\nGET /-/cds/extensibility/Extensions HTTP/1.1\nContent-Type: application/json\n```\n",
    " ExtensibilityService > GET `Extensions/<ID>` _→ [{ ID, csn, timestamp }]_\nsample request, REST, ExtensibilityService, GET, extension\nHTTP GET request retrieving a specific tenant-specific extension (identified by ID) using ExtensibilityService.\n\n```http\nGET /-/cds/extensibility/Extensions/isbn-extension HTTP/1.1\nContent-Type: application/json\n```\n",
    " ExtensibilityService > PUT `Extensions/<ID>` (\\[csn\\]) _→ \\[{ ID, csn, timestamp }\\]_\nsample request, REST, ExtensibilityService, PUT, extension\nHTTP PUT request for creating a new tenant-specific extension with both CSN and i18n data using ExtensibilityService.\n\n```http\nPUT /-/cds/extensibility/Extensions/isbn-extension HTTP/1.1\nContent-Type: application/json\n\n{\n  \"csn\": [\"using my.bookshop.Books from '_base/db/data-model';\\n extend my.bookshop.Books with { Z_ISBN: String };\"] ,\n  \"i18n\": [{ \"name\": \"i18n.properties\", \"content\": \"Books_stock=Stock\" },\n           { \"name\": \"i18n_de.properties\", \"content\": \"Books_stock=Bestand\" }]\n}\n```\n",
    " ExtensibilityService > DELETE `Extensions/<ID>`\nsample request, REST, ExtensibilityService, DELETE, extension\nHTTP DELETE request for removing a given tenant-specific extension by ID with ExtensibilityService.\n\n```http\nDELETE /-/cds/extensibility/Extensions/isbn-extension HTTP/1.1\nContent-Type: application/json\n```\n",
    " SaasProvisioningService > GET `tenant/<tenant>`\nsample request, REST, saas-provisioning, GET, tenant metadata\nHTTP GET request for retrieving metadata for a specific tenant using SaasProvisioningService.\n\n```http\nGET /-/cds/saas-provisioning/tenant/t1 HTTP/1.1\nContent-Type: application/json\n```\n",
    " SaasProvisioningService > PUT `tenant/<tenant>` (...)\nsample request, REST, saas-provisioning, PUT, tenant\nHTTP PUT request for onboarding and provisioning a new tenant resource with all required metadata, via the SaasProvisioningService.\n\n```http\nPUT /-/cds/saas-provisioning/tenant/t1 HTTP/1.1\nContent-Type: application/json\n\n{\n  \"subscribedTenantId\": \"t1\",\n  \"subscribedSubdomain\": \"subdomain1\",\n  \"eventType\": \"CREATE\"\n}\n```\n",
    " SaasProvisioningService > `upgrade` _[tenants] → Jobs_\nsample request, REST, saas-provisioning, POST, upgrade\nHTTP POST request to asynchronously upgrade a list of tenants using the SaasProvisioningService, passing HDI deploy options.\n\n```http\nPOST /-/cds/saas-provisioning/upgrade HTTP/1.1\nContent-Type: application/json\nPrefer: respond-async\n\n{\n  \"tenants\": [\"t1\", \"t2\"],\n  \"options\": {\n      \"_\": {\n          \"hdi\": {\n              \"deploy\": {\n                  \"trace\": \"true\",\n                  \"version\": \"true\"\n              }\n          }\n      }\n    }\n}\n```\n",
    " SaasProvisioningService > `upgrade` _[tenants] → Jobs_\nsample request, REST, saas-provisioning, jobs, status, GET\nCheck the status of an asynchronous job (e.g., tenant upgrade or extension activation) by polling its task ID.\n\n```http\nGET /-/cds/jobs/pollTask(ID='<taskID>') HTTP/1.1\n```\n",
    " Migration from Old MTX > Migration Steps > Adapt Project Configuration > Switch to `@sap/cds-mtxs`\ninstallation, package.json, project setup, multitenancy, Node.js, cds-mtx, cds-mtxs\nRemoves the deprecated @sap/cds-mtx package from your Node.js project as a preparatory step for migration to the new multitenancy solution.\n\n```shell\nnpm remove @sap/cds-mtx\n```\n",
    " Migration from Old MTX > Migration Steps > Adapt Project Configuration > Switch to `@sap/cds-mtxs`\ninstallation, package.json, project setup, multitenancy, Node.js, cds-mtxs\nInstalls the new @sap/cds-mtxs package in a Node.js project to enable modern multitenancy features.\n\n```shell\nnpm add @sap/cds-mtxs\n```\n",
    " Migration from Old MTX > Migration Steps > Adapt Project Configuration > Switch to `@sap/cds-mtxs`\nconfiguration, package.json, multitenancy, cds-mtxs, cds\nConfigures the project to enable multitenancy support using the 'multitenancy: true' flag under the 'cds.requires' section in package.json. Required after switching to @sap/cds-mtxs.\n\n```json\n\"cds\": {\n    \"requires\": {\n        \"multitenancy\": true\n    }\n}\n```\n",
    " Migration from Old MTX > Migration Steps > Adapt Project Configuration > Enable Extensibility\nconfiguration, package.json, .cdsrc.json, extensibility, multitenancy, cds-mtxs\nEnables both multitenancy and extensibility features in the CDS configuration, either in package.json or .cdsrc.json. This is necessary if your project supports extensibility using @sap/cds-mtxs.\n\n```json\n\"requires\": {\n  \"multitenancy\": true,\n  \"extensibility\": true\n}\n```\n",
    " Migration from Old MTX > Migration Steps > Adapt Project Configuration > Create New Sidecar and Adapt mta.yaml\nmultitenancy, sidecar, cds-mtxs, CLI, project setup, Java\nGenerates a new sidecar folder (mtx/sidecar) and modifies project files, including mta.yaml, to set up multitenancy in a Java (or multi-language) project. Used for transitioning to @sap/cds-mtxs in CAP projects.\n\n```shell\ncds add multitenancy\n```\n",
    " Migration from Old MTX > Functional Differences > Extensibility > Changes of Extension Persistence\npackage.json, extensibility, cds-mtxs, extension project, Push API, tags\nShows the structure of an extension project's package.json. The 'name' property will be used as the 'tag' when pushing the compiled extension (CSN) via `cds push` when using @sap/cds-mtxs.\n\n```json\n{\n  \"name\": \"@capire/orders-ext\",\n  \"extends\": \"@capire/orders\"\n  ...\n}\n```\n",
    "\ninstallation, npm, Node.js\nInstalls production dependencies for a Node.js application using npm. The --production flag ensures only the packages needed at runtime (not devDependencies) are installed. Use in deployment scenarios or continuous integration pipelines.\n\n```shell\nnpm install --production\n```\n",
    " Troubleshooting > Setup > Check the Node.js version\nverify, Node.js, CLI\nChecks the currently installed version of Node.js. Use this to verify that you are running an even-numbered LTS version, as odd versions may lack native module support and cause installation failures.\n\n```shell\nnode -v\n```\n",
    " Troubleshooting > Setup > Check access permissions on macOS or Linux\npermissions, npm, environment, installation\nConfigures npm to use a user-writable directory (in your home directory) as the prefix for global modules to resolve EACCES permission errors on macOS/Linux. Update your profile file to persist the PATH change.\n\n```shell\nmkdir ~/.npm-global ; npm set prefix '~/.npm-global'\nexport PATH=~/.npm-global/bin:$PATH\n```\n",
    " Troubleshooting > Setup > Check if your environment variables are properly set on Windows\nnpm, environment, Windows, installation\nPath for globally installed npm binaries on Windows. Make sure your PATH includes this location to use globally installed modules from the command line.\n\n```shell\nC:\\Users\\<your-username>\\AppData\\Roaming\\npm\n```\n",
    " Troubleshooting > Setup > Check if your environment variables are properly set on Windows\nnpm, environment, Windows, NODE_PATH\nSet the NODE_PATH environment variable to this value on Windows to help Node.js resolve globally installed modules.\n\n```shell\nC:\\Users\\<your-username>\\AppData\\Roaming\\npm\\node_modules\n```\n",
    " Troubleshooting > Setup > How Do I Consume a New Version of CDS?\ncds CLI, Node.js, project setup, installation\nInstalls or updates the @sap/cds-dk tool globally, making design time tools like 'cds init' available.\n\n```shell\nnpm i -g @sap/cds-dk\n```\n",
    " Troubleshooting > Setup > How Do I Consume a New Version of CDS?\ndependencies, Node.js, package.json\nDefines the version of @sap/cds to use at runtime in the application's package.json file. Update as needed to control runtime version.\n\n```json\n\"dependencies\": {\n  \"@sap/cds\": \"<desired-version>\"\n}\n```\n",
    " Troubleshooting > Setup > How Do I Consume a New Version of CDS?\nJava, samples, dependencies\nSpecifies the CAP Java SDK version in the pom.xml for Java modules. Modify the cds.services.version property to consume a new CDS version.\n\n```xml\n<properties>\n    <cds.services.version>...</cds.services.version>\n</properties>\n```\n",
    " Troubleshooting > Node.js > How can I start Node.js apps on different ports?\ncds CLI, Node.js, CLI, port\nDemonstrates how 'cds watch' prompts for a new port when the default (4004) is already in use and how it re-binds the server to a new available port.\n\n```shell\ncds watch\n# ...\n# EADDRINUSE - port 4004 is already in use. Restart with new port? (Y/n)\n> y\n# [cds] - server listening on { url: 'http://localhost:4005' }\n```\n",
    " Troubleshooting > Node.js > Why do I lose registered event handlers?\nevent handler, service implementation, Node.js\nPreferred pattern for registering event handlers in Node.js' CAP model during bootstrap. Avoids asynchronous operations to prevent race conditions.\n\n```js\ncds.on('served', ()=>{\n  const { db } = cds.services\n  db.on('before',(req)=> console.log(req.event, req.path))\n})\n```\n",
    " Troubleshooting > Node.js > Why do I lose registered event handlers?\nevent handler, service implementation, Node.js\nShows an anti-pattern: using async/await when registering event handlers in 'cds.on(served)'. This can result in lost or unreliable handler registration due to race conditions.\n\n```js\ncds.on('served', async ()=>{\n  const db = await cds.connect.to('db') // DANGER: will cause race condition !!!\n  db.on('before',(req)=> console.log(req.event, req.path))\n})\n```\n",
    " Troubleshooting > Node.js > Why are requests rejected with status 502 and do not seem to reach the application?\nconfiguration, Node.js, http, keepAliveTimeout\nSets the Node.js http.Server's keepAliveTimeout to over 3 minutes in a CAP app to avoid 502 errors from premature TCP connection closure by the server behind a load balancer.\n\n```js\nconst cds = require('@sap/cds')\ncds.once('listening', ({ server }) => {\n  server.keepAliveTimeout = 3 * 60 * 1000 // > 3 mins\n})\nmodule.exports = cds.server\n```\n",
    " Troubleshooting > TypeScript > Install package as dev dependency\ntypescript, cds toolkit, npm, installation\nAdds TypeScript support to a CAP project and installs @cap-js/cds-types for type definitions using the cds toolkit.\n\n```shell\ncds add typescript\n```\n",
    " Troubleshooting > TypeScript > Install package as dev dependency\ntypescript, npm, installation\nManually installs @cap-js/cds-types as a development dependency for '@sap/cds' TypeScript type definitions.\n\n```shell\nnpm i -D @cap-js/cds-types\n```\n",
    " Troubleshooting > TypeScript > Fix missing symlink\ntypescript, configuration, tsconfig.json\nExplicitly points TypeScript's type resolution to @cap-js/cds-types in the tsconfig.json to fix issues with missing or incomplete type definitions.\n\n```json\n{\n  \"compilerOptions\": {\n    \"types\": [\"@cap-js/cds-types\"],\n  }\n}\n```\n",
    " Troubleshooting > Java > Why do I get an \"Error on server start\"?\nJava, dependency, pom.xml\nForces a specific Node.js version via the cds-maven-plugin in pom.xml to avoid runtime errors due to version mismatches during server start.\n\n```xml\n<properties>\n    <cds.install-node.nodeVersion>v20.11.0</cds.install-node.nodeVersion>\n</properties>\n```\n",
    " Troubleshooting > Java > How can I build a CAP Java application without SQL database?\nJava, dependencies, exclusion\nExcludes Spring Boot and CAP Java JDBC dependencies from the CAP Java project to disable SQL database/persistence support.\n\n```xml\n<dependency>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-starter-spring-boot</artifactId>\n  <exclusions>\n    <exclusion>\n      <groupId>com.sap.cds</groupId>\n      <artifactId>cds-feature-jdbc</artifactId>\n    </exclusion>\n    <exclusion>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jdbc</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```\n",
    " Troubleshooting > OData > How Do I Generate an OData Response in Node.js for Error 404?\nOData, Node.js, service implementation\nHandles unhandled requests by returning an OData-compliant JSON 404 response in a custom CAP Node.js server setup.\n\n```js\nlet app\ncds.on('bootstrap', a => {\n  app = a\n})\ncds.on('served', () => {\n  app.use((req, res, next) => {\n    // > unhandled request\n    res.status(404).json({ message: 'Not Found' })\n  })\n})\n```\n",
    " Troubleshooting > SQLite > How Do I Install SQLite on Windows?\nSQLite, installation, Windows\nShows how to start the SQLite shell executable (sqlite3.exe) on Windows to connect to either a transient in-memory or persistent database.\n\n```shell\nC:\\sqlite>sqlite3\nSQLite version ...\nEnter \".help\" for instructions\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite>\n```\n",
    " Troubleshooting > SAP HANA > How do I keep existing data?\nSAP HANA, configuration, deployment, multitenancy\nConfigures CDS DeploymentService for multi-tenant applications to undeploy specific HDI artifacts but retain their data using the skip_data_deletion path_parameter.\n\n```json\n{\n  \"cds.xt.DeploymentService\": {\n    \"hdi\": {\n      \"deploy\": {\n        \"undeploy\": [\n          \"src/gen/data/my.bookshop-Books.hdbtabledata\"\n        ],\n        \"path_parameter\": {\n          \"src/gen/data/my.bookshop-Books.hdbtabledata:skip_data_deletion\": \"true\"\n        }\n      },\n      ...\n    }\n  }\n}\n```\n",
    " Troubleshooting > SAP HANA > How do I keep existing data?\nSAP HANA, deployment, API, multitenancy\nPayload example for calling the SaaS Provisioning Service upgrade API to modify HDI deployment behavior for all tenants, preserving existing data in HDI containers.\n\n```json\n{\n  \"tenants\": [\"*\"],\n  \"_\": {\n      \"hdi\": {\n        \"deploy\": {\n          \"undeploy\": [\n            \"src/gen/data/my.bookshop-Books.hdbtabledata\"\n          ],\n          \"path_parameter\": {\n            \"src/gen/data/my.bookshop-Books.hdbtabledata:skip_data_deletion\": \"true\"\n          }\n        }\n      }\n  }\n}\n```\n",
    " Troubleshooting > CAP on Cloud Foundry > How Can I Connect to a Backing Service Container like SAP HANA from My Local Machine?\nCloud Foundry, cf CLI, ssh, proxy, integration\nOpens an SSH tunnel from your localhost to a Cloud Foundry app container and forwards a remote service port, enabling local access to remote SAP HANA (or other) containers.\n\n```shell\ncf ssh <app> -L localhost:<LocalPort>:<RemoteIP>:<RemotePort>\n```\n",
    " Troubleshooting > CAP on Cloud Foundry > How Can I Connect to a Backing Service Container like SAP HANA from My Local Machine?\nCloud Foundry, integration, proxy\nUses the Chisel proxy tool to tunnel TCP traffic over HTTP via an application running in the Cloud Foundry target space for scenarios with HTTP proxies or no direct network access.\n\n```shell\nbin/chisel_... client --auth secrets https://<url_to_chisel_server_app> localhost:30010:10.10.10.10:30010\n```\n",
    " Troubleshooting > CAP on Cloud Foundry > How Can I Get Logs From My Application in Cloud Foundry?\nCloud Foundry, cf CLI, logs\nRetrieves recent application logs from a Cloud Foundry app instance for troubleshooting and analysis.\n\n```shell\ncf logs <appname> --recent\n```\n",
    " Troubleshooting > CAP on Cloud Foundry > Why do I get \"404 Not Found: Requested route does not exist\"?\nCloud Foundry, cf CLI, app status, routes\nSeries of Cloud Foundry CLI commands to troubleshoot 404 errors and readiness checks: lists apps, their states, routes, and checks each instance's routable status via the V3 API.\n\n```shell\ncf apps # -> list all apps\ncf app <your app name> # -> get details on your app, incl. state and routes\ncf app <your app name> --guid # -> get your app's guid\ncf curl \"/v3/processes/<your app guid>/stats\"\n```\n",
    " Troubleshooting > CAP on Cloud Foundry > Deployment Crashes With \"No space left on device\" Error\nMTA, manifest, configuration\nMTA (Multi-Target Application) YAML snippet for adjusting module resource allocations (disk quota, memory) to resolve 'No space left on device' deployment errors in Cloud Foundry.\n\n```shell\nparameters:\n  disk-quota: 512M\n  memory: 256M\n```\n",
    " Troubleshooting > MTA > How Can I Reduce the MTA Archive Size During Development?\nMTA, installation, build, ignore node_modules\nMTA extension file (less.mtaext) that configures a module build to ignore the node_modules folder, reducing archive size for development/test builds.\n\n```yaml\n_schema-version: '3.1'\nID: bookshop-small\nextends: capire.bookshop\nmodules:\n - name: bookshop-srv\n   build-parameters:\n     ignore: [\"node_modules/\"]\n```\n",
    " Troubleshooting > MTA > How Can I Reduce the MTA Archive Size During Development?\nMTA, build, CLI\nBuilds the MTA archive with custom extension (ignoring node_modules) to reduce deployment size and speed up test deployments.\n\n```shell\nmbt build -t gen --mtar mta.tar -e less.mtaext\n```\n",
    " Troubleshooting > CAP on Cloud Foundry > How Do I Resolve Errors with cf Executable?\nCloud Foundry, manifest, cf CLI, installation\nWorkaround for 'mkdir ... The system cannot find the path specified' cf CLI installation error on Windows by setting the HOMEDRIVE variable.\n\n```shell\nSET HOMEDRIVE=C:\n```\n",
    " Adapt _mta.yaml_ to Use New Sidecar\nMTA, Cloud Foundry, sidecar, mta.yaml, build, custom build\nDefines a Cloud Foundry MTA module for the MTX sidecar, specifying a custom build process for the 'mtx/sidecar' folder and its dependencies. Sets memory/disk usage and provides the mtx-api URL property for other modules. Required for streamlined MTX deployments.\n\n```yaml\nmodules:\n  - name: bookshop-mtx\n    type: nodejs\n    path: mtx/sidecar # adapted path\n    build-parameters: # added build section\n      builder: custom\n      build-result: gen\n      commands:\n        - npm run build\n    requires:\n      - name: bookshop-srv\n    parameters:\n      memory: 256M\n      disk-quota: 1G\n    requires:\n      - name: bookshop-auth\n      - name: bookshop-db\n    provides:\n      - name: mtx-api\n        properties:\n          mtx-url: ${default-url}\n```\n",
    " Add Workspace for Sidecar in Root package.json\npackage.json, workspaces, sidecar, monorepo\nAdds the 'mtx/sidecar' as a workspace in the root package.json for monorepo support, ensuring that sidecar dependencies are installed when running npm install at the root. This is needed for correct dependency management in projects using @sap/cds-mtxs.\n\n```json\n\"workspaces\": [\n  \"mtx/sidecar\"\n]\n```\n",
    " Add Workspace for Sidecar in Root package.json > Freeze Sidecar Dependencies\nnpm, sidecar, build, package-lock.json, MTA\nGenerates a package-lock.json for the MTX sidecar by running npm install in lock-only mode under the 'mtx/sidecar' directory. Required for consistent sidecar builds in MTA projects.\n\n```shell\nnpm i --package-lock-only --prefix mtx/sidecar\n```\n",
    " Adapt Build Tasks\nbuild configuration, cdsrc.json, build target, multitenancy, profile\nMinimal build configuration after removing the separate 'mtx' build task for the mtx sidecar. Specifies build target, sets profiles, and requires multitenancy. Used with default CAP project layouts.\n\n```json\n{\n  \"build\": {\n    \"target\": \".\"\n  },\n  \"profiles\": [\"with-mtx-sidecar\", \"java\"],\n  \"requires\": {\n    \"multitenancy\": true\n  }\n}\n```\n",
    " Enable Extensibility\ncds configuration, multitenancy, extensibility, .cdsrc.json, package.json\nEnables both multitenancy and extensibility in the CAP project by adding them to the 'requires' section of the configuration (.cdsrc.json or package.json). Needed when project uses both features.\n\n```json\n\"requires\": {\n    \"multitenancy\": true,\n    \"extensibility\": true\n  }\n```\n",
    " Security Adaptations\nxs-security.json, authorization, scope, ExtensionDeveloper\nIndicates the change in required scope names for extension developers in security configuration files. The old scopes 'ExtendCDS'/'ExtendCDSdelete' are replaced by 'cds.ExtensionDeveloper' for streamlined MTX.\n\n```txt\n// replace\n\"ExtendCDS\", \"ExtendCDSdelete\"\n// with\n\"cds.ExtensionDeveloper\"\n```\n",
    " Handler Registration\nNode.js, handler registration, server.js, ProvisioningService, DeploymentService, multi-tenancy, event handler\nShows how to register handlers for tenant provisioning and deployment using the new service names ('cds.xt.SaasProvisioningService', 'cds.xt.DeploymentService') and the 'served' event. Uses prepend to register custom logic on tenant update and deployment events. For use in server.js when migrating to @sap/cds-mtxs.\n\n```js\ncds.on('served', async () => {\n  const { 'cds.xt.SaasProvisioningService': provisioning } = cds.services\n  const { 'cds.xt.DeploymentService': deployment } = cds.services\n\n  await provisioning.prepend(() => {\n    provisioning.on('UPDATE', 'tenant', async (req, next) => { ... })\n    provisioning.on('dependencies', async (req, next) => { ... })\n    ...\n  })\n  await deployment.prepend(() => {\n    // previously this was `upgradeTenant`\n    deployment.on('upgrade', async (req) => {\n      // HDI container credentials are not yet available here\n    })\n    // previously this was `deployToDb`\n    deployment.on('deploy', async (req) => {\n      const { tenant, options: { container } } = req.data\n      ...\n    })\n    ...\n  })\n})\n```\n",
    " Handler Registration\nmta.yaml, saas-registry, Node.js, endpoint\nDefines new application URLs for the SaaS provisioning service endpoints in mta.yaml using the '/-/cds/saas-provisioning/' path. Update these parameters when migrating to @sap/cds-mtxs and Node.js runtime.\n\n```yaml\nparameters:\n  service: saas-registry\n  config:\n    appUrls:\n      getDependencies: ~{mtx-api/mtx-url}/-/cds/saas-provisioning/dependencies\n      onSubscription: ~{mtx-api/mtx-url}/-/cds/saas-provisioning/tenant/{tenantId}\n```\n",
    " Miscellaneous Configuration > HDI Container Configuration\nhdicontainer, config, multitenancy, @sap/cds-mtx, database_id, metadata container\nConfigures HDI container creation and provisioning settings for multitenancy in legacy @sap/cds-mtx projects. Allows lazy metadata container creation, and sets both container and binding parameters, as well as separate metadata container provisioning.\n\n```json\n{\n  \"mtx\": {\n    \"provisioning\": {\n        \"lazymetadatacontainercreation\": true,\n        \"container\": {\n            \"provisioning_parameters\": {\n                \"database_id\": \"<ID>\"\n            },\n            \"binding_parameters\": {\n              \"key\": \"value\"\n            }\n        },\n        \"metadatacontainer\": {\n          \"provisioning_parameters\": {\n                \"database_id\": \"<ID_META>\"\n            }\n        }\n    }\n  }\n}\n```\n",
    " Miscellaneous Configuration > HDI Container Configuration\nhdicontainer, DeploymentService, @sap/cds-mtxs, database_id, binding parameters, metadata container\nProvides equivalent HDI and metadata container configuration for the new @sap/cds-mtxs setup by customizing the 'cds.xt.DeploymentService' requirement. Includes container creation, binding parameters, and metadata container ID.\n\n```json\n{\n  \"requires\": {\n    \"cds.xt.DeploymentService\": {\n      \"lazyT0\": true,\n      \"hdi\": {\n        \"create\": {\n            \"database_id\": \"<ID>\"\n        },\n        \"bind\": {\n          \"key\": \"value\"\n        }\n      },\n      \"for\": {\n        \"t0\": {\n          \"hdi\": {\n            \"create\": {\n              \"database_id\": \"<ID_META>\"\n            }\n          }\n        }\n      }\n    },\n  }\n}\n```\n",
    " Miscellaneous Configuration > Extension Restrictions\nextension restrictions, allowlist, mtx, extensibility\nDefines extension allowlist in legacy @sap/cds-mtx, limiting the number of new fields or restricting extensions to specific entities/services. Ensures only specified models can be extended in tenant projects.\n\n```json\n{\n  \"mtx\" : {\n    \"extension-allowlist\": [\n      {\n          \"for\": [\"my.bookshop.Authors\", \"my.bookshop.Books\"],\n          \"new-fields\": 2\n      },\n      {\n          \"for\": [\"CatalogService\"]\n      }\n    ]\n  }\n}\n```\n",
    " Miscellaneous Configuration > Extension Restrictions\nextension restrictions, allowlist, mtxs, ExtensibilityService\nShows migration of extension allowlist configuration to the cds.xt.ExtensibilityService, used in @sap/cds-mtxs. Specifies which entities/services can be extended and the limits for new fields, for extensibility control.\n\n```json\n{\n  \"requires\": {\n    \"cds.xt.ExtensibilityService\": {\n      \"extension-allowlist\": [\n        {\n            \"for\": [\"my.bookshop.Authors\", \"my.bookshop.Books\"],\n            \"new-fields\": 2\n        },\n        {\n            \"for\": [\"CatalogService\"]\n        }]\n    }\n  }\n}\n```\n",
    " Migrate Tenant Content of Existing Applications > Multitenancy Only\nsubscription, metadata, MTX, saas-provisioning, tenant, example, multitenancy\nExample metadata object representing tenant subscription information sent to the SaaS Provisioning Service/MTX API. Includes IDs and app info used by MTX migration and tenant management.\n\n```json\n{\n    \"subscriptionAppId\": \"...\",\n    \"subscriptionAppName\": \"...\" ,\n    \"subscribedTenantId\": \"...\",\n    ...\n}\n```\n",
    " Run the Migration Script > Run the Migration Script Locally\nmigration, MTXS, migrate script, hybrid mode, dry run, tenants\nRuns the MTXS migration script for all tenants in dry run mode, using the production and hybrid profiles, and resolving service bindings. Useful for validating migration steps locally before making any data changes.\n\n```shell\ncds migrate \"*\" --dry --profile hybrid,production --resolve-bindings\n```\n",
    " Run the Migration Script > Options\nmigration, MTXS, migrate script, tenants\nExecutes the MTXS migration for all or specific tenants. Replace <tenant> with tenant IDs or use '*' for all. Used for content/data migration during upgrade to @sap/cds-mtxs.\n\n```shell\ncds migrate <tenant>[,<tenant>]|\"*\"\n```\n",
    " Run the Migration Script > Save Existing Extension Projects\nmigration, MTXS, extension project, save migration, directory\nRuns the migration script for specified tenants and saves the migrated extension projects into a provided directory via the '-d' option. Useful for backup or migration review.\n\n```shell\ncds migrate <tenant>[,<tenant>]|\"*\" -d <your directory>\n```\n",
    " Run the Migration Script > Add the Migration Script as Cloud Foundry Task to mta.yaml\nmta.yaml, CF Task, migration script, cds-mtx-migrate, hook, Blue-Green, deployment\nDefines a task in mta.yaml for Cloud Foundry deployment that runs the MTXS migration script as a hook before application/startup. Ensures tenant data/extensions are migrated during deployment lifecycle.\n\n```yaml\n- name: bookshop-mt-sidecar\n  type: nodejs\n  path: mtx/sidecar\n  ...\n  hooks:\n    - name: migrate-tenants\n      type: task\n      phases:\n      #  - blue-green.application.before-start.idle\n        - deploy.application.before-start\n      parameters:\n        name: migration\n        memory: 512M\n        disk-quota: 768M\n        command: cds-mtx-migrate \"*\"\n```\n",
    " Run the Migration Script > Advanced: Separate Extensions Based on Extension File Names\nmigration, MTXS, extension tag, tagRule, splitting extensions, regex\nMigrates all tenants' extension projects, splitting extensions into separate CSN files using a regex rule to extract tags from filenames (e.g., 'ext_id_1.cds' → tag 'id_1'). Used for advanced phased migration of complex extension setups.\n\n```shell\ncds migrate \"*\" -d migrated_projects --tagRule \"(?:ext_|extension_)(.*)\\.cds\"\n```\n",
    " Run the Migration Script > Advanced: Separate Extensions Based on Extension File Names\nmigration, MTXS, extension tag, tagRule, dry run\nPerforms a dry run of the migration script using tagRule to assign tags to extension CSNs, allowing verification of extension splitting without affecting data. Check output in the specified directory.\n\n```shell\ncds migrate \"*\" -d migrated_projects --tagRule \"(?:ext_|extension_)(.*)\\.cds\" --dry\n```\n",
    " Download of Migrated Extension Projects\nCDS, extension download, ExtensionDeveloper, cds CLI, MTXS\nDownloads migrated extension projects for a given tenant or application URL, requiring the cds.ExtensionDeveloper scope. Produces an archive 'migrated_projects.tgz' containing migrated extension data for @sap/cds-mtxs.\n\n```shell\ncds extend <url> --download-migrated-projects\n```\n",
    " Extending SaaS Applications > Prerequisites\nproject setup, multitenancy, cloning, orders app, cds add\nClones the ready-to-use Orders Management CAP sample application from GitHub, enters the orders directory, and adds multitenancy features. This is a jumpstart setup for building a CAP-based SaaS application that can be extended.\n\n```shell\ngit clone https://github.com/SAP-samples/cloud-cap-samples\ncd cloud-cap-samples/orders\ncds add multitenancy\n```\n",
    " Extending SaaS Applications > Prerequisites\nnpm, cds toolkit, installation\nUpdates the CDS development kit globally to the latest version. This ensures you have the latest CLI and development tools for CAP.\n\n```shell\nnpm update -g @sap/cds-dk\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 1. Enable Extensibility\nextensibility, CLI, cds CLI, project setup\nEnables extensibility features in your CAP SaaS project, preparing it as a base for customer extensions. This command adapts the configuration and necessary dependencies for CAP extensibility.\n\n```shell\ncds add extensibility\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 1. Enable Extensibility\ndependencies, extensibility, npm\nManually adds the @sap/cds-mtxs package as a dependency to your project, which is required for SaaS extensibility support.\n\n```shell\nnpm add @sap/cds-mtxs\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 1. Enable Extensibility\nconfiguration, package.json, extensibility\nShows an example package.json with @sap/cds-mtxs dependency and cds.requires.extensibility set to true. This enables project extensibility features for CAP SaaS applications.\n\n```json\n{\n  \"name\": \"@capire/orders\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"@capire/common\": \"*\",\n    \"@sap/cds\": \">=9\",\n    \"@sap/cds-mtxs\": \"^3\"\n  },\n  \"cds\": {\n    \"requires\": {\n      \"extensibility\": true // [!code focus]\n    }\n  }\n}\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 1. Enable Extensibility\nnpm, dependencies, installation\nInstalls project dependencies including any new packages added (such as @sap/cds-mtxs). Required after changing package.json.\n\n```shell\nnpm i\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 2. Restrict Extension Points\nextensibility, restrictions, extension-allowlist, configuration\nConfigures extension restrictions in mtx/sidecar/package.json: prefixes new extension elements with 'x_', allows extending entities in sap.capire.orders with 2 new fields max, and extending OrdersService with up to 2 new entities. Used to control extension scope for SaaS customers.\n\n```jsonc\n{\n  \"cds\": {\n    \"requires\": {\n      \"cds.xt.ExtensibilityService\": {\n        \"element-prefix\": [\"x_\"],\n        \"extension-allowlist\": [\n          {\n            \"for\": [\"sap.capire.orders\"],\n            \"kind\": \"entity\",\n            \"new-fields\": 2\n          },\n          {\n            \"for\": [\"OrdersService\"],\n            \"new-entities\": 2\n          }\n        ]\n      }\n    }\n  }\n}\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 3. Provide Template Projects > Create an Extension Project (Template)\nproject setup, init, cds toolkit, extension project, CLI\nCreates a new CAP extension project called 'orders-ext' to extend the SaaS base app. The project is initialized and opened in VS Code. Typical first step for a customer/partner starting an extension.\n\n```shell\ncd ..\ncds init orders-ext\ncode orders-ext # open in VS Code\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 3. Provide Template Projects > Create an Extension Project (Template)\npackage.json, extension project, configuration\nShows package.json for a CAP extension project. 'name' identifies the extension, 'extends' points to the SaaS base model used for extension, and 'workspaces' lists folders such as '.base'. Required for wiring up extension to the correct base application.\n\n```jsonc\n{\n  \"name\": \"@capire/orders-ext\",\n  \"extends\": \"@capire/orders\",\n  \"workspaces\": [ \".base\" ]\n}\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 3. Provide Template Projects > Add Sample Content\ncds, sample extension, Fiori annotations, extension project\nDefines a sample CAP extension in app/extensions.cds which adds a new field to Orders and annotates it for Fiori UI. Demonstrates the use of 'extend' and how to wire Fiori annotations for the extension.\n\n```cds\nnamespace x_orders.ext; // only applies to new entities defined below\nusing { OrdersService, sap.capire.orders.Orders } from '@capire/orders';\n\nextend Orders with {\n  x_new_field : String;\n}\n\n// -------------------------------------------\n// Fiori Annotations\n\nannotate Orders:x_new_field with @title: 'New Field';\nannotate OrdersService.Orders with @UI.LineItem: [\n  ... up to { Value: OrderNo },\n  { Value : x_new_field },\n  ...\n];\n```\n",
    " Extending SaaS Applications > As a SaaS Provider > 3. Provide Template Projects > Add Test Data\ncsv, sample data, test data, extension project\nProvides sample test data for the Orders entity to support quick-turnaround extension tests. Used in test/data/sap.capire.orders-Orders.csv of the extension project, allowing local testing of extension logic.\n\n```csv\nID;createdAt;buyer;OrderNo;currency_code;\n7e2f2640-6866-4dcf-8f4d-3027aa831cad;2019-01-31;john.doe@test.com;1;EUR\n64e718c9-ff99-47f1-8ca3-950c850777d4;2019-01-30;jane.doe@test.com;2;EUR\n```\n",
    " Getting Started > Next Steps\ninstallation, project setup, cds CLI, init\nDownloads the latest models from the SaaS application and sets up the extension base model. Should be run at the beginning of an extension project to keep models in sync.\n\n```shell\ncds pull\n```\n",
    " Getting Started > Next Steps\neditor, project open, VS Code\nOpens the extension project's folder ('orders-ext') in Visual Studio Code for editing. This step enables you to begin customizing the extension.\n\n```shell\ncode ../orders-ext\n```\n",
    " Getting Started > Next Steps\ncds CLI, watch, project setup, run server, test\nStarts the local application server for development, monitors for changes, and reloads the project as you modify files. Used to test-drive extensions locally before deployment.\n\n```shell\ncds watch\n```\n",
    " Getting Started > Next Steps\ncds CLI, push, deploy, test, test tenant\nDeploys the extension to a chosen (test or prod) tenant. Use after locally validating your extension project. Pushes code and data as part of the deployment.\n\n```shell\ncds push\n```\n",
    " Main Header > As a SaaS Customer > 1. Subscribe to SaaS App\ncds CLI, SaaS, multitenancy, tenant, subscription\nSimulates SaaS tenant subscription. Subscribes local test tenant 't1' to the SaaS application URL as user 'yves'. Used in local development to emulate multi-tenant behavior.\n\n```shell\ncds subscribe t1 --to http://localhost:4005 -u yves:\n```\n",
    " Main Header > As a SaaS Customer > 2. Prepare an Extension Tenant\ncds CLI, test tenant, multitenancy, mock user, subscription\nCreates and subscribes a test tenant ('t1-ext') for extension development, using the mock user 'yves'. Enables local development and verification of extensions before production deployment.\n\n```shell\ncds subscribe t1-ext --to http://localhost:4005 -u yves:\n```\n",
    " Main Header > As a SaaS Customer > 2. Prepare an Extension Tenant\npackage.json, configuration, test tenant, assign roles, extension developer, mock user\nAssigns user 'bob' as an extension developer for the test tenant 't1-ext' in the SaaS application's package.json configuration. Used when simulating authentication and role assignment via mocked auth in local tests.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"auth\": {\n        \"users\": {\n          \"bob\": {\n            \"tenant\": \"t1-ext\",\n            \"roles\": [\"cds.ExtensionDeveloper\"]\n          }\n        }\n      }\n    }\n  }\n}\n```\n",
    " Main Header > As a SaaS Customer > 4. Pull the Latest Base Model\ncds CLI, pull, base model, sync, JavaScript API\nFetches and downloads the latest application base model from the SaaS app as user 'bob'. Prepares the extension project to reference and extend the up-to-date base model.\n\n```shell\ncds pull --from http://localhost:4005 -u bob:\n```\n",
    " Main Header > As a SaaS Customer > 5. Install the Base Model\nnpm, installation, base model, node_modules\nInstalls the downloaded base model as a package within the extension project, linking it into node_modules. Ensures the extension can resolve and extend the SaaS application's base services and entities.\n\n```shell\nnpm install\n```\n",
    " Main Header > As a SaaS Customer > 6. Write the Extension\ncds modeling, domain model, extension, CDS, service definition, annotations, Fiori annotations\nSample CDS extension model that extends the Orders entity with new fields and associations. It declares a new entity for Sales Regions and adds Fiori annotations for UI integration, including LineItem enhancements.\n\n```cds\nnamespace x_orders.ext; // for new entities like SalesRegion below\nusing { OrdersService, sap, sap.capire.orders.Orders } from '@capire/orders';\n\nextend Orders with { // 2 new fields....\n  x_priority    : String enum {high; medium; low} default 'medium';\n  x_salesRegion : Association to x_SalesRegion;\n}\n\nentity x_SalesRegion : sap.common.CodeList { // Value Help\n  key code : String(11);\n}\n\n// -------------------------------------------\n// Fiori Annotations\n\nannotate Orders:x_priority with @title: 'Priority';\nannotate x_SalesRegion:name with @title: 'Sales Region';\n\nannotate OrdersService.Orders with @UI.LineItem: [\n  ... up to { Value: OrderNo },\n  { Value: x_priority },\n  { Value: x_salesRegion.name },\n  ...\n];\n```\n",
    " Main Header > As a SaaS Customer > 7. Test-Drive Locally\ncds CLI, watch, project setup, run server, testing, local development\nRuns a local Node.js server with the extension and base model merged, serving on port 4006. Used to verify and test-drive the new extension and test data in an in-memory database.\n\n```shell\ncds watch --port 4006\n```\n",
    " Main Header > As a SaaS Customer > 7. Test-Drive Locally > Add Local Test Data\ncsv, test data, sample data, db/data, extension\nSample CSV test data for the Orders entity, including values for newly added extension fields: x_priority and x_salesRegion_code. Used to validate extensions locally.\n\n```csv\nID;createdAt;buyer;OrderNo;currency_code;x_priority;x_salesRegion_code\n7e2f2640-6866-4dcf-8f4d-3027aa831cad;2019-01-31;john.doe@test.com;1;EUR;high;EMEA\n64e718c9-ff99-47f1-8ca3-950c850777d4;2019-01-30;jane.doe@test.com;2;EUR;low;APJ\n```\n",
    " Main Header > As a SaaS Customer > 7. Test-Drive Locally > Add Local Test Data\ncsv, test data, db/data, extension, custom entity\nTest data CSV for the x_SalesRegion extension entity, providing examples for each region. Used during local validation of extensions adding new value help/reference entities.\n\n```csv\ncode;name;descr\nAMER;Americas;North, Central and South America\nEMEA;Europe, the Middle East and Africa;Europe, the Middle East and Africa\nAPJ;Asia Pacific and Japan;Asia Pacific and Japan\n```\n",
    " Main Header > As a SaaS Customer > 8. Push to Test Tenant\ncds CLI, push, deploy, test tenant, extension testing\nPushes the extension project to the test tenant using user 'bob'. Ensures safe deployment and verifiability before updating production tenants.\n\n```shell\ncds push --to http://localhost:4005 -u bob:\n```\n",
    " Main Header > As a SaaS Customer > 10. Activate the Extension\ncds CLI, push, production, multitenancy\nDeploys and activates the extension for the production tenant ('t1') as user 'carol'. Should be run after testing and validating the extension in test tenants.\n\n```shell\ncds push --to http://localhost:4005 -u carol:\n```\n",
    " Appendices > Configuring App Router\nconfiguration, App Router, multitenancy, routes, MTX Sidecar, authentication\nConfigures xs-app.json in the App Router to forward /-/cds/* routes to the MTX Sidecar without authentication. This is needed in CAP SaaS multitenant deployments to let CLI/CDS tools access the MTX Sidecar API endpoints directly. Requests for those paths are not authenticated by the router (authenticationType: none).\n\n```json\n{\n  \"routes\": [\n    {\n      \"source\": \"^/-/cds/.*\",\n      \"destination\": \"mtx-api\",\n      \"authenticationType\": \"none\"\n    }\n  ]\n}\n```\n",
    " Appendices > About Extension Models > Extending the Data Model\ncds modeling, extension, annotations, extend, entity, CDS, default, assert, association, composition\nExtends the CAP data model using CDS: adds associations, compositions, fields with assertions, enums, default values, mandatory checks, and new entities. Includes a unique constraint on email for x_Customers, and demonstrates extending entities and annotation for business logic. Used in SaaS extension scenarios.\n\n```cds\nusing {sap.capire.bookshop, sap.capire.orders} from '@capire/fiori';\nusing {\n  cuid, managed, Country, sap.common.CodeList\n} from '@sap/cds/common';\n\nnamespace x_bookshop.extension;\n\n// extend existing entity\nextend orders.Orders with {\n  x_Customer    : Association to one x_Customers;\n  x_SalesRegion : Association to one x_SalesRegion;\n  x_priority    : String @assert.range enum {high; medium; low} default 'medium';\n  x_Remarks     : Composition of many x_Remarks on x_Remarks.parent = $self;\n}\n// new entity - as association target\nentity x_Customers : cuid, managed {\n  email        : String;\n  firstName    : String;\n  lastName     : String;\n  creditCardNo : String;\n  dateOfBirth  : Date;\n  status       : String   @assert.range enum {platinum; gold; silver; bronze} default 'bronze';\n  creditScore  : Decimal  @assert.range: [ 1.0, 100.0 ] default 50.0;\n  PostalAddresses : Composition of many x_CustomerPostalAddresses on PostalAddresses.Customer = $self;\n}\n\n// new unique constraint (secondary index)\nannotate x_Customers with @assert.unique: { email: [ email ] } {\n  email @mandatory;  // mandatory check\n}\n\n// new entity - as composition target\nentity x_CustomerPostalAddresses : cuid, managed {\n  Customer     : Association to one x_Customers;\n  description  : String;\n  street       : String;\n  town         : String;\n  country      : Country;\n}\n\n// new entity - as code list\nentity x_SalesRegion: CodeList {\n  key regionCode : String(11);\n}\n\n// new entity - as composition target\nentity x_Remarks : cuid, managed {\n  parent      : Association to one orders.Orders;\n  number      : Integer;\n  remarksLine : String;\n}\n```\n",
    " Appendices > About Extension Models > Extending the Service Model\nservice definition, projection, CDS, OrdersService, autoexpose\nExplicitly exposes extension entities x_Customers and x_SalesRegion as projections within OrdersService. Use this pattern if you want to override the default autoexpose/read-only behavior for CodeLists in CAP service extensions.\n\n```cds\nusing { OrdersService } from '@capire/fiori';\n\nextend service OrdersService with {\n  entity x_Customers   as projection on extension.x_Customers;\n  entity x_SalesRegion as projection on extension.x_SalesRegion;\n}\n```\n",
    " Appendices > About Extension Models > Extending UI Annotations\nCDS, annotations, UI, Fiori annotations, OrdersService, titles, HeaderInfo, LineItem, Facets\nAnnotates extension entities with Fiori UI annotations for proper SAP Fiori Elements UI exposure: sets draft support, field titles, UI.HeaderInfo, UI.LineItem, facets, and field groups for OrdersService.x_Customers, x_CustomerPostalAddresses, x_SalesRegion, and x_Remarks. Required for enabling extension entities on the frontend.\n\n```cds\nusing { OrdersService } from '@capire/fiori';\n\n// new entity -- draft enabled\nannotate OrdersService.x_Customers with @odata.draft.enabled;\n\n// new entity -- titles\nannotate OrdersService.x_Customers with {\n  ID           @(\n    UI.Hidden,\n    Common : {Text : email}\n  );\n  firstName    @title : 'First Name';\n  lastName     @title : 'Last Name';\n  email        @title : 'Email';\n  creditCardNo @title : 'Credit Card No';\n  dateOfBirth  @title : 'Date of Birth';\n  status       @title : 'Status';\n  creditScore  @title : 'Credit Score';\n}\n\n// new entity -- titles\nannotate OrdersService.x_CustomerPostalAddresses with {\n  ID          @(\n    UI.Hidden,\n    Common : {Text : description}\n  );\n  description @title : 'Description';\n  street      @title : 'Street';\n  town        @title : 'Town';\n  country     @title : 'Country';\n}\n\n// new entity -- titles\nannotate x_SalesRegion : regionCode with @(\n  title : 'Region Code',\n  Common: { Text: name, TextArrangement: #TextOnly }\n);\n\n// new entity in service -- UI\nannotate OrdersService.x_Customers with @(UI : {\n  HeaderInfo       : {\n    TypeName       : 'Customer',\n    TypeNamePlural : 'Customers',\n    Title          : { Value : email}\n  },\n  LineItem         : [\n    {Value : firstName},\n    {Value : lastName},\n    {Value : email},\n    {Value : status},\n    {Value : creditScore}\n  ],\n  Facets           : [\n  {$Type: 'UI.ReferenceFacet', Label: 'Main', Target : '@UI.FieldGroup#Main'},\n  {$Type: 'UI.ReferenceFacet', Label: 'Customer Postal Addresses', Target: 'PostalAddresses/@UI.LineItem'}\n],\n  FieldGroup #Main : {Data : [\n    {Value : firstName},\n    {Value : lastName},\n    {Value : email},\n    {Value : status},\n    {Value : creditScore}\n  ]}\n});\n\n// new entity -- UI\nannotate OrdersService.x_CustomerPostalAddresses with @(UI : {\n  HeaderInfo       : {\n    TypeName       : 'CustomerPostalAddress',\n    TypeNamePlural : 'CustomerPostalAddresses',\n    Title          : { Value : description }\n  },\n  LineItem         : [\n    {Value : description},\n    {Value : street},\n    {Value : town},\n    {Value : country_code}\n  ],\n  Facets           : [\n    {$Type: 'UI.ReferenceFacet', Label: 'Main', Target : '@UI.FieldGroup#Main'}\n  ],\n  FieldGroup #Main : {Data : [\n    {Value : description},\n    {Value : street},\n    {Value : town},\n    {Value : country_code}\n  ]}\n}) {};\n\n// new entity -- UI\nannotate OrdersService.x_SalesRegion with @(\n  UI: {\n    HeaderInfo: {\n      TypeName       : 'Sales Region',\n      TypeNamePlural : 'Sales Regions',\n      Title          : { Value : regionCode }\n    },\n    LineItem: [\n      {Value: regionCode},\n      {Value: name},\n      {Value: descr}\n    ],\n    Facets: [\n      {$Type: 'UI.ReferenceFacet', Label: 'Main', Target: '@UI.FieldGroup#Main'}\n    ],\n    FieldGroup#Main: {\n      Data: [\n        {Value: regionCode},\n        {Value: name},\n        {Value: descr}\n      ]\n    }\n  }\n) {};\n\n// new entity -- UI\nannotate OrdersService.x_Remarks with @(\n  UI: {\n    HeaderInfo: {\n      TypeName       : 'Remark',\n      TypeNamePlural : 'Remarks',\n      Title          : { Value : number }\n    },\n    LineItem: [\n      {Value: number},\n      {Value: remarksLine}\n    ],\n    Facets: [\n      {$Type: 'UI.ReferenceFacet', Label: 'Main', Target: '@UI.FieldGroup#Main'}\n    ],\n    FieldGroup#Main: {\n      Data: [\n          {Value: number},\n          {Value: remarksLine}\n      ]\n    }\n  }\n) {};\n```\n",
    " Appendices > About Extension Models > Extending Array Values\nCDS, annotations, UI, array annotations, extend, delta, LineItem, Facets\nDemonstrates extending an existing array-valued annotation (UI.LineItem, Facets, FieldGroups) of Orders entity using delta syntax in CDS. Only new UI fields and facets for extensions have to be provided, not a full copy. Used in extension scenarios for enhancing Fiori UI without duplicating existing content.\n\n```cds\n// extend existing entity Orders with new extension fields and new composition\nannotate OrdersService.Orders with @(\n  UI: {\n    LineItem: [\n      ... up to { Value: OrderNo },                             // head\n      {Value: x_Customer_ID,            Label:'Customer'},     //> extension field\n      {Value: x_SalesRegion.regionCode, Label:'Sales Region'}, //> extension field\n      {Value: x_priority,               Label:'Priority'},     //> extension field\n      ...,                                                     // rest\n    ],\n    Facets: [...,\n      {$Type: 'UI.ReferenceFacet', Label: 'Remarks', Target: 'x_Remarks/@UI.LineItem'} // new composition\n    ],\n    FieldGroup#Details: {\n      Data: [...,\n        {Value: x_Customer_ID,            Label:'Customer'},      // extension field\n        {Value: x_SalesRegion.regionCode, Label:'Sales Region'},  // extension field\n        {Value: x_priority,               Label:'Priority'}       // extension field\n      ]\n    }\n  }\n);\n```\n",
    " Appendices > About Extension Models > Semantic IDs\nCDS, annotations, semantic id, human-readable key, ValueList, OrdersService, x_Customers, text arrangement\nAnnotates the x_Customer association on OrdersService.Orders with a ValueList and text arrangement so the UI displays the customer's email rather than internal ID. Demonstrates linking CDS UI/ValueHelp to a human-readable field for user-friendly display and selection.\n\n```cds\n// new field in existing service -- exchange ID with text\nannotate OrdersService.Orders:x_Customer with @(\n  Common: {\n    //show email, not id for Customer in the context of Orders\n    Text: x_Customer.email  , TextArrangement: #TextOnly,\n    ValueList: {\n      Label: 'Customers',\n      CollectionPath: 'x_Customers',\n      Parameters: [\n        { $Type: 'Common.ValueListParameterInOut',\n          LocalDataProperty: x_Customer_ID,\n          ValueListProperty: 'ID'\n        },\n        { $Type: 'Common.ValueListParameterDisplayOnly',\n          ValueListProperty: 'email'\n        }\n      ]\n    }\n  }\n);\n```\n",
    " Appendices > About Extension Models > Localizable Texts\nproperties, localization, i18n, texts, Fiori, translatable\nSample i18n/i18n.properties file for custom localizable texts in extension models. Keys are referenced from model/UI for translation, enabling Fiori Elements UI to display translatable captions/labels. CAP will prefer extension's translation over base SaaS app if key collision.\n\n```properties\nSalesRegion_name_col = Sales Region\nOrders_priority_col = Priority\n...\n```\n",
    " Appendices > Simplify Your Workflow With `cds login` > Where Tokens Are Stored\ninstallation, keyring, token storage, cds login, security, Node.js, keytar\nInstalls the keytar Node.js module globally, enabling secure token storage in the desktop keyring (libsecret/macOS Keychain/Windows Vault) when using cds login for SaaS extension development. Required for secure OAuth token management on local machines.\n\n```shell\nnpm i -g keytar\n```\n",
    " Appendices > Simplify Your Workflow With `cds login` > How to Login\ncds CLI, cds login, authentication, Cloud Foundry, passcode, extension development\nLogs in to a SaaS app using the cds login command. If using Cloud Foundry, the passcode will be prompted interactively (or can be supplied). This will store tokens and other auth settings for use with cds pull/push, streamlining the extension workflow.\n\n```shell\ncds login [-p <passcode>]\n```\n",
    " Appendices > Simplify Your Workflow With `cds login` > How to Login (Advanced options)\ncds CLI, cds login, authentication, oauth, client credentials, VCAP_SERVICES, automation\nPerforms cds login authentication using OAuth2 client credentials grant—either X.509 (mTLS: -m) or client secret (-c), with credentials retrieved from VCAP_SERVICES (MTX xsuaa binding). Suitable for scripting and CI/CD or non-interactive login. Secrets must be handled securely.\n\n```shell\ncds login … -m <clientid>[:key]\ncds login … -c <clientid>[:<clientsecret>]\n```\n",
    " Appendices > Simplify Your Workflow With `cds login` > How to Login (Advanced options)\ncds CLI, cds login, stdin, secret, automation\nDemonstrates securely supplying the key/secret to cds login using standard input, avoiding storage of sensitive credentials on disk. Useful for CI or scripting with dynamically provided access keys.\n\n```shell\necho $MY_KEY | cds login … -m <clientid>\n```\n",
    " Appendices > Simplify Your Workflow With `cds login` > Login without CF CLI\ncds CLI, cds login, no CF CLI, app url, subdomain, authentication, SaaS\nLogs in to a SaaS app without needing the CF CLI. Explicitly passes the BTP subdomain and the SaaS application URL for manual login, allowing extension developers to authenticate via cds CLI where CF metadata is unavailable.\n\n```shell\ncds login [<auth-options>] -s <subdomain> <app-url>\n```\n",
    " Appendices > Simplify Your Workflow With `cds login` > Simplified Workflow\ncds CLI, cds pull, extension development, workflow, authentication\nRuns cds pull to fetch the base model/data from the SaaS app after authentication using cds login. No need to supply credentials or passcode again—streamlines SaaS extension developer workflow.\n\n```shell\ncds pull\n```\n",
    " develop your extension\nCLI, push, extension, cds CLI\nThis shell command is used with the CDS CLI to push your extension to a CAP application. It deploys code and model changes defined in your extension project to the runtime environment, typically in the context of CAP multi-tenancy or extensibility workflows.\n\n```shell\ncds push\n```\n",
    " develop your extension\nextension, cds CLI, push, deployment\nThis shell command uses the CDS CLI to push (deploy) your current extension to the configured target, typically within a multi-tenant/extension-enabled CAP environment. Used when developing custom extensions to update or activate latest changes on the target system.\n\n```shell\ncds push\n```\n",
    "Refreshing Tokens > Override saved values with options\nCLI, configuration, cds push, authentication, login, subdomain, passcode\nRuns the 'cds push' command to activate your extension in a different subdomain by specifying an alternative subdomain and passcode. Useful for cross-client transport scenarios and when working across multiple environments.\n\n```shell\ncds push -s <otherSubdomain> -p <otherPasscode>\n```\n",
    "Cleaning Up\nCLI, logout, authentication, project settings, cleanup\nLogs the user out from the current extension project folder and removes any locally saved authentication data as well as the saved project settings if '--delete-settings' is specified. Useful for cleanup and in cases where role-collection assignments have changed.\n\n```shell\ncds logout --delete-settings\n```\n",
    "Cleaning Up\nCLI, help, logout, documentation\nDisplays detailed help information about the 'cds logout' command to provide guidance on its usage and available options.\n\n```shell\ncds help logout\n```\n",
    "Debugging\nCLI, debugging, environment, DEBUG variable\nSets the 'DEBUG' environment variable to 'cli' for Mac/Linux systems. This enables debug logging for the command-line interface, aiding in troubleshooting unexpected behaviors.\n\n```shell\nexport DEBUG=\"cli\"\n```\n",
    "Debugging\nCLI, debugging, environment, DEBUG variable, Windows\nSets the 'DEBUG' environment variable to 'cli' for Windows command prompt. Enables detailed debug logs for the CLI, useful during error investigation.\n\n```shell\nset DEBUG=cli\n```\n",
    "Debugging\nCLI, debugging, environment, DEBUG variable, Powershell\nConfigures the 'DEBUG' environment variable for Powershell to enable verbose CLI logging. Helps with diagnosing issues during CLI command execution.\n\n```powershell\nSet-Variable -Name \"DEBUG\" -Value \"cli\"\n```\n",
    "Add Data to Extensions\ncsv, data, test data, initial data, sqlite, db/data, extension\nSample CSV data for the 'sap.capire.orders-Orders.csv' file containing ID (primary key) and new extension columns (x_priority, x_salesRegion_code). Intended for adding new data in the db/data folder during extension development, especially with SQLite where providing only new columns plus the primary key is supported.\n\n```csv\nID;x_priority;x_salesRegion_code\n7e2f2640-6866-4dcf-8f4d-3027aa831cad;high;EMEA\n64e718c9-ff99-47f1-8ca3-950c850777d4;low;APJ\n```\n",
    " Feature Toggles > Introduction and Overview > Get `cloud-cap-samples-java` for step-by-step Exercises {.java}\ninstallation, CAP Java, project setup\nClones the cloud-cap-samples-java repository and installs all dependencies using Maven. This prepares the Java sample CAP project for feature toggle demonstrations.\n\n```shell\ngit clone https://github.com/SAP-samples/cloud-cap-samples-java\ncd cloud-cap-samples-java\nmvn clean install\n```\n",
    " Feature Toggles > Introduction and Overview > Get `cloud-cap-samples-java` for step-by-step Exercises {.java}\nproject open, editor, VS Code\nOpens the current folder in Visual Studio Code, suitable after setting up the Java sample project.\n\n```shell\ncode .\n```\n",
    " Feature Toggles > Introduction and Overview > Get `cap/samples` for Step-By-Step Exercises {.node}\ninstallation, Node.js, project setup\nClones the CAP Node.js sample repository and installs all npm dependencies. Used to prepare the Node.js/Fiori app sample environment for demonstration of feature toggles.\n\n```shell\ngit clone https://github.com/sap-samples/cloud-cap-samples samples\ncd samples\nnpm install\n```\n",
    " Feature Toggles > Introduction and Overview > Get `cap/samples` for Step-By-Step Exercises {.node}\nproject open, editor, VS Code\nOpens the 'fiori' subfolder in Visual Studio Code, after setting up the CAP Node.js/Fiori sample app.\n\n```shell\ncode fiori\n```\n",
    " Feature Toggles > Enable Feature Toggles {.node} > Add `@sap/cds-mtxs` Package Dependency\ndependencies, Node.js, feature toggles, cds-mtxs\nAdds the @sap/cds-mtxs package as a dependency to enable feature toggle support in a CAP Node.js project.\n\n```shell\nnpm add @sap/cds-mtxs\n```\n",
    " Feature Toggles > Enable Feature Toggles {.node} > Switch on `cds.requires.toggles`\nconfiguration, feature toggles, cds.env\nConfiguration snippet for enabling feature toggle support in cds.env or related config. Activates the toggles capability in CAP.\n\n```txt\ncds.requires.toggles: true\n```\n",
    " Feature Toggles > Adding Features in CDS > Feature *fts/isbn*\ncds modeling, domain model, feature extension, fts\nCDS file example that implements a feature toggle for 'isbn'. Adds an 'isbn' field to Books and updates the Fiori UI annotations accordingly.\n\n```cds\nusing { CatalogService, sap.capire.bookshop.Books }\nfrom '../../app/browse/fiori-service';\n\n// Add new field `isbn` to Books\nextend Books with {\n  isbn : String @title:'ISBN';\n}\n\n// Display that new field in list on Fiori UI\nannotate CatalogService.Books with @(\n  UI.LineItem: [... up to {Value:author}, {Value:isbn}, ...]\n);\n```\n",
    " Feature Toggles > Adding Features in CDS > Feature *fts/reviews*\ncds modeling, annotations, feature extension, fts\nCDS file example for the 'reviews' feature, extending Fiori annotations to display an existing 'rating' field for Books in the UI.\n\n```cds\nusing { CatalogService } from '../../app/browse/fiori-service';\n\n// Display existing field `rating` in list on Fiori UI\nannotate CatalogService.Books with @(\n  UI.LineItem: [... up to {Value:author}, {Value:rating}, ...]\n);\n```\n",
    " Feature Toggles > Toggling Features > In Development\nconfiguration, package.json, mock, users, feature toggles\nExample 'cds' configuration in package.json for feature toggling. Assigns features per user and tenant in development using mocked authentication in CAP Node.js.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"auth\": {\n        \"users\": {\n          \"carol\": { \"tenant\": \"t1\" },\n          \"erin\":  { \"tenant\": \"t2\" },\n          \"fred\":  { \"tenant\": \"t2\", \"features\":[] }\n        },\n        \"tenants\": {\n          \"t1\": { \"features\": [\"isbn\"] },\n          \"t2\": { \"features\": \"*\" }\n        }\n      }\n    }\n  }\n}\n```\n",
    " Feature Toggles > Toggling Features > In Development\nconfiguration, Java, application.yaml, mock, users, feature toggles\nSample Spring Boot YAML configuration for CAP Java to assign feature toggles per mock user. Each user is enabled for a list of features for local development.\n\n```yaml\ncds:\n  security.mock.users:\n    - name: carol\n      features:\n      - isbn\n    - name: erin\n      features:\n      - isbn\n      - reviews\n    - name: fred\n      features:\n```\n",
    " Feature Toggles > Test-Drive Locally {.node} > Run `cds watch`\nrun server, development, watch\nStarts the CAP development server with auto-reload support, including feature toggle logic and support for model provider service.\n\n```shell\ncds watch\n```\n",
    " Feature Toggles > Model Provider in Sidecar > Create Sidecar as Node.js Project\nsidecar, cds-mtxs, Node.js, package.json, ModelProviderService\nMinimal package.json for an MTX sidecar Node.js project providing ModelProviderService for feature toggling in a CAP Java app context.\n\n```json\n{\n  \"name\": \"mtx-sidecar\", \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"@sap/cds\": \"^9\",\n    \"@sap/cds-mtxs\": \"^3\",\n    \"express\": \"^4\"\n  },\n  \"cds\": {\n    \"profile\": \"mtx-sidecar\"\n  }\n}\n```\n",
    " Feature Toggles > Model Provider in Sidecar > Add Remote Service Link to Sidecar\nconfiguration, ModelProviderService, sidecar, Node.js, feature toggles\nConfigures a Node.js app to use the remote ModelProviderService via the sidecar using the 'from-sidecar' preset for feature model resolution.\n\n```json\n\"cds\":{\n  \"requires\": {\n    \"toggles\": true,\n    \"cds.xt.ModelProviderService\": \"from-sidecar\"\n  }\n}\n```\n",
    " Feature Toggles > Model Provider in Sidecar > Add Remote Service Link to Sidecar\nconfiguration, Java, application.yaml, ModelProviderService, sidecar\nSpring Boot configuration for a CAP Java app to connect to a local ModelProviderService sidecar. Specifies the URL and disables extensibility if needed.\n\n```yaml\ncds:\n  model:\n    provider:\n      url: http://localhost:4005\n      # remove, in case you need tenant extensibility\n      extensibility: false\n```\n",
    " Feature Toggles > Model Provider in Sidecar > Test-Drive Sidecar Locally\nrun server, sidecar, cds-mtxs, development\nStarts the sidecar service (containing ModelProviderService) locally. This should be executed before starting the main app for local development with feature toggles.\n\n```shell\ncds watch mtx/sidecar\n```\n",
    " Feature Toggles > Model Provider in Sidecar > Test-Drive Sidecar Locally\nrun server, main app, Node.js, development\nStarts the main Node.js CAP application, connecting to the already running sidecar for model resolution and feature toggles.\n\n```shell\ncds watch\n```\n",
    " Feature Toggles > Model Provider in Sidecar > Test-Drive Sidecar Locally\nrun server, main app, Java, Spring Boot, development\nStarts the Spring Boot main CAP Java application, which fetches its feature-toggled models from the local sidecar.\n\n```shell\nmvn spring-boot:run\n```\n",
    " Feature Toggles > Feature Vector Providers {.node}\nfeature toggles, middleware, Node.js, Express, custom logic\nExpress.js middleware for setting feature toggles per request in development. Reads features from the HTTP headers or sets a default. Used to connect any feature toggle management logic in CAP Node.js.\n\n```js\nconst cds = require ('@sap/cds')\ncds.on('bootstrap', app => app.use ((req,res,next) => {\n  req.features = req.headers.features || 'isbn'\n  next()\n}))\n```\n",
    " Feature Toggles > Feature-Toggled Custom Logic\ncustom logic, feature toggles, Java\nCAP Java code example for checking the current feature toggles using the FeatureTogglesInfo API. Branches logic based on whether a feature is enabled.\n\n```java\n@Autowired FeatureTogglesInfo features;\n\n...\n\nif (features.isEnabled(\"discount\")) {\n  // specific coding when feature 'discount' is enabled...\n}\n```\n",
    " Feature Toggles > Feature-Toggled Custom Logic\ncustom logic, feature toggles, Node.js\nNode.js service implementation example for checking if specific features such as 'isbn' or 'reviews' are currently enabled in the CAP processing context.\n\n```js\nconst { features } = cds.context\nif ('isbn' in features) {\n  // specific coding when feature 'isbn' is enabled...\n}\nif ('reviews' in features) {\n  // specific coding when feature 'reviews' is enabled...\n}\n// common coding...\n```\n",
    " Feature Toggles > Feature-Toggled Custom Logic\ncustom logic, feature toggles, Node.js\nAlternative syntax for Node.js service implementation to check directly if 'isbn' or 'reviews' features are enabled before executing feature-specific code.\n\n```js\nconst { isbn, reviews } = cds.context.features\nif (isbn) {\n  // specific coding when feature 'isbn' is enabled...\n}\nif (reviews) {\n  // specific coding when feature 'reviews' is enabled...\n}\n// common coding...\n```\n",
    " Reuse and Compose > Introduction and Overview > Preparation for Exercises\ninstallation, cap/samples, git, npm, project setup, example, reuse and compose\nClones the 'cap/samples' repository from GitHub, changes into the samples directory, and installs its Node.js dependencies. This is the initial preparation step to get CAP sample projects for following along with code examples on reuse and composition in CAP.\n\n```shell\ngit clone https://github.com/sap-samples/cloud-cap-samples samples\ncd samples\nnpm install\n```\n",
    " Reuse and Compose > Introduction and Overview > Preparation for Exercises\nproject setup, cds CLI, init, npm, sample project, example, reuse and compose\nInitializes a new CAP project using the 'cds init' command with the project name 'sample', enters that directory, and installs the project's Node.js dependencies. This prepares a runnable CAP sample project environment, suitable for testing and extending reuse scenarios.\n\n```shell\ncds init sample\ncd sample\nnpm i\n```\n",
    " Importing Reuse Packages > Using `npm add/install` from _npm_ Registries\nnpm, installation, import, reuse package\nInstalls the @capire/bookshop and @capire/common reuse packages from npm into your project, enabling reuse of their models, services, and other CAP artifacts.\n\n```shell\nnpm add @capire/bookshop @capire/common\n```\n",
    " Importing Reuse Packages > Using `npm add/install` from _npm_ Registries\nnpm, package.json, dependencies\nExample package.json showing dependencies after installing @capire/bookshop and @capire/common, ensuring their availability as reusable CAP content.\n\n```json\n{\n  \"name\": \"sample\", \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"@capire/bookshop\": \"^1.0.0\",\n    \"@capire/common\": \"^1.0.0\",\n    ...\n  }\n}\n```\n",
    " Importing Reuse Packages > Importing from Other Sources\nnpm, import, local package, tarball\nImports reuse packages into your CAP project from local tarballs or folders, not just from npm registries. Useful for testing or sharing custom packages.\n\n```shell\nnpm add ~/Downloads/@capire-bookshop-1.0.0.tgz\nnpm add ../bookshop\n```\n",
    " Importing Reuse Packages > Importing from Maven Dependencies\nMaven, Java, dependency, import\nSpecifies how to import a reuse package as a dependency in the Maven pom.xml file for Java-based CAP projects.\n\n```xml\n<dependency>\n  <groupId>com.sap.capire</groupId>\n  <artifactId>bookshop</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n",
    " Importing Reuse Packages > Importing from Maven Dependencies\nMaven, plugin, cds-maven-plugin, resolve\nAdds the cds-maven-plugin and defines the cds.resolve goal to make Maven-based reuse package content available locally in the project.\n\n```xml\n<plugin>\n  <groupId>com.sap.cds</groupId>\n  <artifactId>cds-maven-plugin</artifactId>\n  <version>${cds.services.version}</version>\n  <executions>\n    ...\n    <execution>\n      <id>cds.resolve</id>\n      <goals>\n        <goal>resolve</goal>\n      </goals>\n    </execution>\n    ...\n  </executions>\n</plugin>\n```\n",
    " Reuse & Extend Models > Via `using from` Directives\ncds modeling, model imports, using directive, index.cds\nImports all exported models from the @capire/bookshop and @capire/common packages via using directives in a .cds file.\n\n```cds\nusing from '@capire/bookshop';\nusing from '@capire/common';\n```\n",
    " Reuse & Extend Models > Using _index.cds_ Entry Points\ncds modeling, index.cds, entry point\nAn example index.cds file that exposes all models and services of a reuse package as public entry points for consumers.\n\n```cds\n// exposing everything...\nusing from './db/schema';\nusing from './srv/cat-service';\nusing from './srv/admin-service';\n```\n",
    " Reuse & Extend Models > Using Different Entry Points\ncds modeling, model imports, partial import\nImports only the CatalogService from the srv/cat-service entry point of @capire/bookshop, allowing selective model reuse.\n\n```cds\nusing { CatalogService } from '@capire/bookshop/srv/cat-service';\n```\n",
    " Reuse & Extend Models > Extending Imported Definitions\ncds modeling, extend, Composition, cross-package association\nExtends the imported Books entity from @capire/bookshop with a reviews Composition and a rating element, linking to Reviews from another package.\n\n```cds\nusing { sap.capire.bookshop.Books } from '@capire/bookshop';\nusing { ReviewsService.Reviews } from '@capire/reviews';\n\n// Extend Books with access to Reviews and average ratings\nextend Books with {\n  reviews : Composition of many Reviews on reviews.subject = $self.ID;\n  rating  : Decimal;\n}\n```\n",
    " Reuse & Extend Code > In Node.js\nNode.js, service implementation, custom handler, override\nInstructs CAP to use a custom service implementation (srv/my-cat-service-impl.js) for CatalogService in a Node.js project.\n\n```cds\nusing { CatalogService } from '@capire/bookshop';\nannotate CatalogService with @impl:'srv/my-cat-service-impl';\n```\n",
    " Reuse & Extend Code > In Node.js\nNode.js, service implementation, custom handler\nDefines a custom Node.js implementation file for a CAP service, allowing the addition of custom event handlers.\n\n```js\nmodule.exports = cds.service.impl (function(){\n  this.on (...) // add your event handlers\n})\n```\n",
    " Reuse & Extend Code > In Node.js\nNode.js, service implementation, custom handler, inherit base\nShows how to extend and chain to the reuse package's base service implementation when adding your own custom logic in Node.js CAP.\n\n```js\nconst base_impl = require ('@capire/bookshop/srv/cat-service')\nmodule.exports = cds.service.impl (async function(){\n  this.on (...) // add your event handlers\n  await base_impl.call (this,this)\n})\n```\n",
    " Reuse & Extend Code > In Java\nJava, CAP, service implementation, custom handler\nImplements a custom CatalogService handler in CAP Java using the EventHandler interface and Spring annotations.\n\n```java\n@Component\n@ServiceName(\"CatalogService\")\npublic class CatalogServiceHandler implements EventHandler {\n\n  @On(/* ... */)\n  void myHandler(EventContext context) {\n    // ...\n  }\n\n}\n```\n",
    " Reuse & Extend UIs\nNode.js, Express, serve UI, imported package\nShows how to mount and serve static UI assets from imported packages using CAP's Express integration.\n\n```js\nconst express = require('express')\nconst cds = require('@sap/cds')\n\n// Add routes to UIs from imported packages\ncds.once('bootstrap',(app)=>{\n  app.serve ('/bookshop') .from ('@capire/bookshop','app/vue')\n  app.serve ('/reviews') .from ('@capire/reviews','app/vue')\n  app.serve ('/orders') .from('@capire/orders','app/orders')\n})\n```\n",
    " Service Integration > Import the Remote Service's APIs\npackage.json, dependencies, import, remote service\nDefines multiple imported packages in the dependencies of a bookshop CAP project, preparing for integration of remote services.\n\n```json\n\"dependencies\": {\n  \"@capire/bookshop\": \"^1.0.0\",\n  \"@capire/reviews\": \"^1.0.0\",\n  \"@capire/orders\": \"^1.0.0\",\n  \"@capire/common\": \"^1.0.0\",\n  ...\n},\n```\n",
    " Service Integration > Configuring Required Services\ncds, service integration, configuration, cds.requires\nConfigures remote services ReviewsService and OrdersService as required OData endpoints, with models imported from their respective reuse packages.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"ReviewsService\": {\n      \"kind\": \"odata\", \"model\": \"@capire/reviews\"\n    },\n    \"OrdersService\": {\n      \"kind\": \"odata\", \"model\": \"@capire/orders\"\n    },\n  }\n}\n```\n",
    " Service Integration > Delegating Calls to Remote Services\nNode.js, service delegate, remote service integration, prepend handler\nDelegates read requests for Books/reviews from the local CatalogService to the remote ReviewsService, achieving seamless integration in CAP Node.js.\n\n```js\nconst CatalogService = await cds.connect.to ('CatalogService')\nconst ReviewsService = await cds.connect.to ('ReviewsService')\nCatalogService.prepend (srv => srv.on ('READ', 'Books/reviews', (req) => {\n  console.debug ('> delegating request to ReviewsService')\n  const [id] = req.params, { columns, limit } = req.query.SELECT\n  return ReviewsService.tx(req).read ('Reviews',columns).limit(limit).where({subject:String(id)})\n}))\n```\n",
    " Service Integration > Testing Remote Integration Locally\nshell, local development, multi-service, cds watch\nStarts multiple CAP service applications (orders, reviews, bookstore) in separate processes locally, enabling realistic integration testing.\n\n```shell\ncds watch orders --port 4006\ncds watch reviews --port 4005\ncds watch bookstore --port 4004\n```\n",
    " Service Integration > Testing Remote Integration Locally\nhttp, sample request, ReviewsService, POST\nAdds a review to the remote ReviewsService for testing the integration and data propagation between services.\n\n```http\nPOST http://localhost:4005/Reviews\nContent-Type: application/json;IEEE754Compatible=true\nAuthorization: Basic itsme:secret\n{\"subject\":\"201\", \"title\":\"boo\", \"rating\":3 }\n```\n",
    " Service Integration > Testing Remote Integration Locally\nhttp, sample request, CatalogService, GET\nFetches reviews for a specific book (ID 201) from the CatalogService, which internally delegates to the remote ReviewsService.\n\n```http\nGET http://localhost:4004/browse/Books/201/reviews?\n&$select=rating,date,title\n&$top=3\n```\n",
    " Service Integration > Binding Required Services > Through Process Environment Variables\nenv, service binding, environment variable\nShows how to provide binding credentials for a required service (ReviewsService) via environment variable when starting the bookstore CAP app.\n\n```shell\nexport cds_requires_ReviewsService_credentials_url=http://localhost:4005/reviews\ncds watch bookstore\n```\n",
    " Service Integration > Binding Required Services > Through Process Environment Variables\nenv, .env, service binding, credentials\nPlaces service binding credentials in a .env file for repeated local testing of remote service integration in a CAP project.\n\n```properties\ncds.requires.ReviewsService.credentials = { \"url\": \"http://localhost:4005/reviews\" }\n```\n",
    " Service Integration > Binding Required Services > Automatic Bindings by `cds watch`\njson, service registry, local binding, cds watch\nContent of ~/.cds-services.json, generated by cds watch, showing local service binding URLs for provided services used during local integration testing.\n\n```json\n{\n  \"cds\": {\n    \"provides\": {\n      \"OrdersService\": {\n        \"kind\": \"odata\",\n        \"credentials\": {\n          \"url\": \"http://localhost:4006/orders\"\n        }\n      },\n      \"ReviewsService\": {\n        \"kind\": \"odata\",\n        \"credentials\": {\n          \"url\": \"http://localhost:4005/reviews\"\n        }\n      },\n      ...\n    }\n  }\n}\n```\n",
    " Providing Reuse Packages > Considerations for Maven-based reuse packages\nJava, Maven, CAP, reuse package\nFile structure for packaging CDS, CSV, and i18n files into a Maven JAR as a CAP reuse package under the CDS folder.\n\n```txt\nsrc/main/resources/cds/\n  com.sap.capire/bookshop/\n    index.cds\n    CatalogService.cds\n    data/\n      com.sap.capire.bookshop-Books.csv\n    i18n/\n      i18n.properties\n```\n",
    " Providing Reuse Packages > Provide Public Entry Points\ncds modeling, index.cds, entry point, expose\nExample of an index.cds entry point in a provider package, exposing schema and services for convenient import by consumers.\n\n```cds\nnamespace my.reuse.package;\nusing from './db/schema';\nusing from './srv/cat-service';\nusing from './srv/admin-service';\n```\n",
    " Providing Reuse Packages > Provide Public Entry Points\ncds modeling, entry point, partial import\nImports a definition from a reuse package via its index.cds entry point, using a simple package name reference.\n\n```cds\nusing { my.thing } from 'my-reuse-package';\n```\n",
    " Providing Reuse Packages > Provide Public Entry Points\ncds modeling, entry point, selective import\nDemonstrates providing and using alternative entry points in a reuse package for more granular or partial imports.\n\n```cds\nusing { my.domain.entity } from 'my-reuse-package/schema';\nusing { my.service } from 'my-reuse-package/services';\n```\n",
    " Providing Reuse Packages > Provide Custom Handlers > In Node.js\nNode.js, service implementation, custom handler, @impl\nSpecifies the custom JavaScript handler file for a service in a reuse package, using the @impl annotation.\n\n```cds\nservice CatalogService @(impl: '@sap/bookshop/srv/cat-service.js') {...}\n```\n",
    " Providing Reuse Packages > Provide Custom Handlers > In Java\nJava, CAP, custom handler, CdsRuntimeConfiguration\nCustom Java event handler configuration for CAP reuse packages, used if the project is not Spring Boot-based.\n\n```java\npublic class BookshopConfiguration implements CdsRuntimeConfiguration {\n\n\t@Override\n\tpublic void eventHandlers(CdsRuntimeConfigurer configurer) {\n\t\tconfigurer.eventHandler(new CatalogServiceHandler());\n\t}\n}\n```\n",
    " Providing Reuse Packages > Provide Custom Handlers > In Java\nJava, CAP, custom handler registration, META-INF\nRegisters CAP Java CdsRuntimeConfiguration class for discovery by the runtime, enabling automatic handler loading.\n\n```txt\ncom.sap.capire.bookshop.BookshopConfiguration\n```\n",
    " Core Data Services (CDS) > Language Reference Documentation\nCDS, CDS model, CSN, JavaScript\nThis snippet demonstrates how to use the CDS Node.js API to parse a Core Schema Notation (CSN) representation of a CDS model into a JavaScript object at runtime. This is useful for working with dynamic or programmatically generated models.\n\n```js\n// Loading a CDS model as a plain JS object at runtime\nconst cds = require('@sap/cds');\nconst csn = require('./db/schema.csn.json'); // CSN file generated from a CDS model\nconst model = cds.parse(csn);\n// model is now a plain JS object complying to CSN\n```\n",
    " Core Data Services (CDS) > Language Reference Documentation\nCSN, CDS, model, json\nExample of a simple CDS model in Core Schema Notation (CSN) format. This JSON structure is the compiled representation of a CDS model, useful for processing and interpretation at runtime.\n\n```json\n{\n  \"$schema\": \"https://sap.github.io/odata-vocabularies/sap-cds/csn.json#\",\n  \"definitions\": {\n    \"Books\": {\n      \"kind\": \"entity\",\n      \"elements\": {\n        \"ID\": {\"key\": true, \"type\": \"cds.Integer\"},\n        \"title\": {\"type\": \"cds.String\"}\n      }\n    }\n  }\n}\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Keywords & Identifiers\ncds modeling, keywords, identifiers, aspect, namespace, association, entity, aspect-oriented modeling\nDemonstrates the use of keywords (like 'namespace', 'using', 'aspect', 'entity') and identifiers in a CDS model. Shows aspect definition, namespace declaration, entity definition, and associations, illustrating case sensitivity of identifiers and the difference between keywords and identifiers.\n\n```cds\nnamespace capire.bookshop;\nusing { managed } from `@sap/cds/common`;\naspect entity : managed { key ID: Integer }\n\nentity Books : entity {\n  title  : String;\n  author : Association to Authors;\n}\n\nentity Authors : entity {\n  name   : String;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Built-in Types\ncds modeling, built-in types, entity, type definition, domain model\nDefines an entity with built-in types such as UUID, String, Integer, and a custom type Price based on Decimal. Illustrates how built-in and derived types are used to model entities in CDS and their mapping to database types.\n\n```cds\nentity Books {\n  key ID : UUID;\n  title  : String(111);\n  stock  : Integer;\n  price  : Price;\n}\ntype Price : Decimal;\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Literals\ncds modeling, literals, string literals, date, array, record, syntax\nShows the literal expressions available in CDL for booleans, numbers, strings (single and backtick-quoted), records, and arrays. Useful for assigning static values or defaults, compatible with other languages' notation.\n\n```cds\ntrue , false , null        // as in all common languages\n11 , 2.4 , 1e3, 1.23e-11   // for numbers\n'A string''s literal'      // for strings\n`A string\\n paragraph`     // for strings with escape sequences\n{ foo:'boo', bar:'car' }   // for records\n[ 1, 'two', {three:4} ]    // for arrays\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Literals > Date & Time Literals\ncds modeling, literals, date, time, timestamp, syntax\nShows type-keyword-prefixed syntax for date, time, and timestamp literals in CDL. Used for assigning explicit date/time values in models.\n\n```cds\ndate'2016-11-24'\ntime'16:11:32'\ntimestamp'2016-11-24T12:34:56.789Z'\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Literals > Multiline String Literals\ncds modeling, literals, multiline string, annotation, string escape, syntax\nDemonstrates the usage of single and triple backtick string literals for multiline strings in CDL model annotations. Shows support for escape sequences and the optional use of syntax tags (e.g., xml).\n\n```cds\n@escaped: `OK Emoji: \\u{1f197}`\n@multiline: ```\n    This is a CDS multiline string.\n    - The indentation is stripped.\n    - \\u{0055}nicode escape sequences are possible,\n      just like common escapes from JavaScript such as\n      \\r \\t \\n and more! ```\n@data: ```xml\n    <main>\n      The tag is ignored by the core-compiler but may be\n      used for syntax highlighting, similar to markdown.\n    </main> ```\nentity DocumentedEntity {\n  // ...\n}\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Model Imports > The `using` Directive\nmodel imports, cds modeling, using, import, module resolution\nShows the use of the 'using' directive for importing specific definitions from other CDS files, with and without local aliases. Also demonstrates referencing imported definitions in entity declarations.\n\n```cds\nusing foo.bar.scoped.Bar from './contexts';\nusing foo.bar.scoped.nested from './contexts';\nusing foo.bar.scoped.nested as specified from './contexts';\n\nentity Car : Bar {}            //> : foo.bar.scoped.Bar\nentity Moo : nested.Zoo {}     //> : foo.bar.scoped.nested.Zoo\nentity Zoo : specified.Zoo {}  //> : foo.bar.scoped.nested.Zoo\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Model Imports > The `using` Directive\nmodel imports, cds modeling, using, import, deconstructor, alias\nIllustrates importing multiple named definitions (with renaming) using a deconstructor pattern in the 'using' directive. Entities are based on these imports.\n\n```cds\nusing { Foo as Moo, sub.Bar } from './base-model';\nentity Boo : Moo { /*...*/ }\nentity Car : Bar { /*...*/ }\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Namespaces > The `context` Directive\nnamespace, context, scoping, cds modeling\nDemonstrates namespace and context usage in CDL to organize entities in hierarchical, fully qualified names. Contexts allow defining nested scopes within a namespace.\n\n```cds\nnamespace foo.bar;\nentity Foo {}           //> foo.bar.Foo\ncontext scoped {\n  entity Bar : Foo {}   //> foo.bar.scoped.Bar\n  context nested {\n    entity Zoo {}       //> foo.bar.scoped.nested.Zoo\n  }\n}\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Namespaces > Scoped Definitions\nnamespace, scoped definition, type, cds modeling\nShows how to define scoped entities and types, with namespacing enabling nested, hierarchical model definition.\n\n```cds\nnamespace foo.bar;\nentity Foo {}           //> foo.bar.Foo\nentity Foo.Bar {}       //> foo.bar.Foo.Bar\ntype Foo.Bar.Car {}     //> foo.bar.Foo.Bar.Car\n```\n",
    " Conceptual Definition Language (CDL) > Language Preliminaries > Comments > Doc Comments\ncomment, doc comment, csn, annotation, cds modeling\nDemonstrates how to use doc comments in CDL for entities and elements. These comments are stored in the CSN as 'doc' properties and can be propagated to OData annotations or database comments during code generation.\n\n```cds\n/**\n * I am the description for \"Employee\"\n */\nentity Employees {\n  key ID : Integer;\n  /**\n   * I am the description for \"name\"\n   */\n  name : String;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Entity Definitions / Type Definitions\ncds modeling, entity, primary key, type definition, custom type\nDefines entities with primary keys and elements of built-in and custom types. Shows how to create both simple and structured custom types, potentially with references to other entities (associations).\n\n```cds\ndefine entity Employees {\n  key ID : Integer;\n  name : String;\n  jobTitle : String;\n}\n\ndefine type User : String(111);\ndefine type Amount {\n  value : Decimal(10,3);\n  currency : Currency;\n}\ndefine type Currency : Association to Currencies;\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Structured Types\ncds modeling, structured type, entity, inline struct, projection\nDemonstrates creation and usage of structured types in entity design, both as named types and anonymous inline structures. Shows structured type projection for selecting/renaming fields.\n\n```cds\ntype Amount {\n  value : Decimal(10,3);\n  currency : Currency;\n}\nentity Books {\n  price : Amount;\n}\n\nentity Books {\n  price : {\n    value : Decimal(10,3);\n    currency : Currency;\n  };\n}\n\ntype CustomerData : projection on Customer {\n  name.firstName, // select from structures\n  name.lastName,\n  address as customerAddress, // aliases\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Arrayed Types\ncds modeling, array type, many, entity, type definition\nIllustrates defining arrayed types (with 'many' or 'array of') in entities and custom type definitions, enabling collection fields. Notes on OData rendering and storage as denormalized JSON arrays.\n\n```cds\nentity Foo { emails: many String; }\nentity Bar { emails: many { kind:String; address:String; }; }\nentity Car { emails: many EmailAddress; }\nentity Car { emails: EmailAddresses; }\ntype EmailAddresses : many { kind:String; address:String; }\ntype EmailAddress : { kind:String; address:String; }\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Arrayed Types > Null Values\ncds modeling, array type, nullability, constraint\nDefines an entity with an arrayed field where both field members and certain subfields may be nullable or non-nullable. Shows applying 'null' and 'not null' constraints in nested types.\n\n```cds\nentity Bar {\n    emails      : many {\n        kind    : String null;\n        address : String not null;\n    } null;  // -> collection emails may hold null values, overwriting default\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Virtual Elements\ncds modeling, virtual element, entity, annotation, readonly\nDeclares a virtual (non-persistent, computed) element in an entity. Such fields are not mapped to database tables and are by default readonly in the service interface.\n\n```cds\nentity Employees {\n  [...]\n  virtual something : String(11);\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Calculated Elements > On-read\ncds modeling, calculated element, on-read, expression\nDefines calculated elements in an entity using expressions, evaluated on-read (when queried). Supports referencing other elements and calculated expressions for string concatenation and computed fields.\n\n```cds\nentity Employees {\n  firstName : String;\n  lastName : String;\n  name : String = firstName || ' ' || lastName;\n  name_upper = upper(name);\n  addresses : Association to many Addresses;\n  city = addresses[kind='home'].city;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Calculated Elements > On-write\ncds modeling, calculated element, on-write, stored expression\nDemonstrates an on-write (stored) calculated element, where the result of the expression is evaluated when writing and persisted in the database. Useful for performance in queries involving computed fields.\n\n```cds\nentity Employees {\n  firstName : String;\n  lastName : String;\n  name : String = (firstName || ' ' || lastName) stored;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Calculated Elements > Association-like calculated elements\ncds modeling, calculated element, association-like, infix filter\nShows a calculated element that defines a filtered association (e.g., selecting a specific related entity by filter). Important for exposing filtered navigations as computed fields.\n\n```cds\nentity Employees {\n  addresses : Association to many Addresses;\n  homeAddress = addresses [1: kind='home'];\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Default Values\ncds modeling, default value, enum, annotation\nDemonstrates specifying default values for various types and shows use of enum values as defaults for entity elements. Defaults can be used in both entity and custom type definitions.\n\n```cds\nentity Foo {\n  bar : String default 'bar';\n  boo : Integer default 1;\n}\ntype CreatedAt : Timestamp default $now;\ntype Complex {\n  real : Decimal default 0.0;\n  imag : Decimal default 0.0;\n}\ntype Status : String enum {open; closed;}\nentity Order {\n  status : Status default #open;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Type References\ncds modeling, type reference, type of, element reference, structured types\nShows referencing types of other elements using 'type of' within a structure, and cross-entity element type referencing via ':' notation. Useful for DRY modeling in complex schemas.\n\n```cds\nentity Author {\n  firstname : String(100);\n   lastname : type of firstname; // has type \"String(100)\"\n}\nentity Employees {\n  firstname: Author:firstname;\n  lastname: Author:lastname;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Constraints\ncds modeling, constraint, not null, entity\nIllustrates the use of the 'not null' constraint on entity elements to enforce data integrity at the model level.\n\n```cds\nentity Employees {\n  name : String(111) not null;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Entities & Type Definitions > Enums\ncds modeling, enum, type, entity\nDefines enums for types (with optional actual values) and shows their usage in entity elements. Enums enable controlled vocabulary and optional runtime enforcement.\n\n```cds\ntype Gender : String enum { male; female; non_binary = 'non-binary'; }\nentity Order {\n  status : Integer enum {\n    submitted =  1;\n    fulfilled =  2;\n    shipped   =  3;\n    canceled  = -1;\n  };\n}\n```\n",
    " Conceptual Definition Language (CDL) > Views & Projections > The `as select from` Variant\ncds modeling, view, projection, select from, sql view\nShows view definitions using 'as select from' for full, SQL-like projection including joins, expressions, and subqueries. The entity is used as a view mapped to the underlying database.\n\n```cds\nentity Foo1 as select from Bar; //> implicit {*}\nentity Foo2 as select from Employees { * };\nentity Foo3 as select from Employees LEFT JOIN Bar on Employees.ID=Bar.ID {\n  foo, bar as car, sum(boo) as moo\n} where exists (\n  SELECT 1 as anyXY from SomeOtherEntity as soe where soe.x = y\n)\ngroup by foo, bar\norder by moo asc;\n```\n",
    " Conceptual Definition Language (CDL) > Views & Projections > The `as projection on` Variant\ncds modeling, view, projection, as projection on, restriction\nDemonstrates the 'as projection on' variant for defining a projection restricted to a subset of another entity's fields. Used for OData-friendly views, disallowing joins and subqueries.\n\n```cds\nentity Foo as projection on Bar {...}\n```\n",
    " Conceptual Definition Language (CDL) > Views & Projections > Virtual elements in views\ncds modeling, view, projection, virtual element\nDefines a view with additional virtual elements, which do not exist in the source table/entity and are treated as virtual (non-persistent) fields in services.\n\n```cds\nentity SomeView as select from Employee {\n  // ...,\n  virtual virt1 : String(22),\n  virtual virt2  // virtual element without type\n}\n```\n",
    " Conceptual Definition Language (CDL) > Views & Projections > Views with Parameters\ncds modeling, view, parameters, projection, cqn\nShows how to define a parametrized view in CDL, requiring parameters on query. Used in advanced reporting or entity filtering scenarios.\n\n```cds\nentity SomeView ( foo: Integer, bar: Boolean )\nas SELECT * from Employees where ID=:foo;\n```\n",
    " Conceptual Definition Language (CDL) > Associations > Unmanaged Associations\nassociations, cds modeling, unmanaged association, join\nDefines an unmanaged association with a custom ON clause specifying join logic, including explicit foreign key declaration.\n\n```cds\nentity Employees {\n  address : Association to Addresses on address.ID = address_ID;\n  address_ID : Integer;  //> foreign key\n}\nentity Addresses {\n  key ID : Integer;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Associations > Managed (To-One) Associations\nassociations, cds modeling, managed association, foreign key\nDefines a managed (to-one) association. The necessary foreign keys are added automatically by the framework during deployment.\n\n```cds\nentity Employees {\n  address : Association to Addresses;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Associations > To-many Associations\nassociations, cds modeling, to-many association, backlink\nDefines a to-many association using an ON clause with $self as canonical backlink reference, and the corresponding backlink association in the related table.\n\n```cds\nentity Employees {\n  key ID : Integer;\n  addresses : Association to many Addresses\n    on addresses.owner = $self;\n}\nentity Addresses {\n  owner : Association to Employees;  //> the backlink\n}\n```\n",
    " Conceptual Definition Language (CDL) > Associations > Many-to-many Associations\nassociations, cds modeling, many-to-many, link entity\nImplements a many-to-many association by introducing a link entity that holds associations (as keys) to both joined entities.\n\n```cds\nentity Employees { [...]\n  addresses : Association to many Emp2Addr on addresses.emp = $self;\n}\nentity Emp2Addr {\n  key emp : Association to Employees;\n  key adr : Association to Addresses;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Associations > Compositions\ncomposition, cds modeling, contained-in, to-many, inline composition\nShows explicit composition between Orders and inline Orders.Items entity, modeling header/detail relationships with containment semantics. Items' parent is an association back to Orders.\n\n```cds\nentity Orders {\n  key ID: Integer; //...\n  Items : Composition of many Orders.Items on Items.parent = $self;\n}\nentity Orders.Items {\n  key pos : Integer;\n  key parent : Association to Orders;\n  product : Association to Products;\n  quantity : Integer;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Associations > Managed Compositions of Aspects\ncomposition, cds modeling, managed composition, inline type, aspect\nDefines a managed composition using an anonymous inline type for the composed items, enabling auto-generation of names and containment relationships.\n\n```cds\nentity Orders {\n  key ID: Integer; //...\n  Items : Composition of many {\n    key pos : Integer;\n    product : Association to Products;\n    quantity : Integer;\n  }\n};\n```\n",
    " Conceptual Definition Language (CDL) > Associations > Managed Compositions of Aspects > With Named Targets\ncomposition, cds modeling, managed composition, named aspect\nShows managed composition using a named aspect (OrderItems), providing reusable structure for composition targets in the data model.\n\n```cds\nentity Orders {\n  key ID: Integer; //...\n  Items : Composition of many OrderItems;\n}\naspect OrderItems {\n  key pos : Integer;\n  product : Association to Products;\n  quantity : Integer;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Annotations > Annotation Syntax\nannotation, cds modeling, syntax, directive\nDemonstrates different annotation syntax options, including placement before/after names/elements and using group notation for multiple annotations. Shows equivalence of expanded and compact forms.\n\n```cds\n@before entity Foo @inner {\n  @before simpleElement @inner : String @after;\n  @before structElement @inner { /* elements */ }\n}\n\nentity Foo @(\n  my.annotation: foo,\n  another.one: 4711\n) { /* elements */ }\n\n@my.annotation:foo\n@another.one: 4711\nentity Foo { /* elements */ }\n```\n",
    " Conceptual Definition Language (CDL) > Annotations > Annotation Syntax > Using `annotate` Directives\nannotation, cds modeling, annotate directive, extend directive\nShows how to annotate existing CD definitions using the 'annotate' directive to add or extend annotation metadata.\n\n```cds\nannotate Foo with @(\n  my.annotation: foo,\n  another.one: 4711\n);\n```\n",
    " Conceptual Definition Language (CDL) > Annotations > Annotation Values\nannotation, cds modeling, annotation value, literal, array\nDescribes various forms of annotation values, including default booleans, literals, references, arrays, and expressions. Used to enrich model elements with metadata.\n\n```cds\n@aFlag //= true, if no value is given\n@aBoolean: false\n@aString: 'foo'\n@anInteger: 11\n@aDecimal: 11.1\n@aSymbol: #foo\n@aReference: foo.bar\n@anArray: [ /* can contain any kind of value */ ]\n@anExpression: ( foo.bar * 17 )  // expression, see next section\n```\n",
    " Conceptual Definition Language (CDL) > Annotations > Records as Syntax Shortcuts\nannotation, cds modeling, record shortcut, syntax\nShows various equivalent ways of writing record-based annotations in CDS, where nested records serve as syntax shortcuts for common annotation prefixes.\n\n```cds\n@Common.foo.bar\n@Common.foo.car: 'wheels'\n@Common: { foo.bar, foo.car: 'wheels' }\n@Common.foo: { bar }\n@Common.foo: { bar, car: 'wheels' }\n```\n",
    " Conceptual Definition Language (CDL) > Annotations > Expressions as Annotation Values\nannotation, cds modeling, expression, csn, annotation propagation\nDefines annotations using expressions as values, enabling compiler-checked references, value expressions and usage in propagation for metadata generation.\n\n```cds\n@anExpression: ( foo.bar * 11 )\n@aRefExpr: ( foo.bar )\n@aValueExpr: ( 11 )\n```\n",
    " Conceptual Definition Language (CDL) > Annotations > Extend Array Annotations\nannotation, cds modeling, array annotation, ellipsis, annotate directive\nDemonstrates extending existing array-valued annotations using the ellipsis `...` in the 'annotate' directive. Can prepend, append or insert entries before/after comparator values.\n\n```cds\n@anArray: [3, 4] entity Foo { /* elements */ }\nannotate Foo with @anArray: [1, 2, ...];  //> prepend new values: [1, 2, 3, 4]\nannotate Foo with @anArray: [..., 5, 6];  //> append new values: [3, 4, 5, 6]\nannotate Foo with @anArray: [1, 2, ..., 5, 6]; //> prepend and append\n```\n",
    " Conceptual Definition Language (CDL) > Aspects > The `extend` Directive\naspect, extend, annotate, cds modeling, element extension\nShows how to use the 'extend' directive to add new fields and override annotations within existing entities or elements. Includes nested extension for structured fields.\n\n```cds\nextend Foo with @title:'Foo';\nextend Bar with @title:'Bar' {\n  newField : String;\n  extend nestedStructField {\n    newField : String;\n    extend existingField @title:'Nested Field';\n  }\n}\n```\n",
    " Conceptual Definition Language (CDL) > Aspects > The `annotate` Directive\naspect, annotate, cds modeling, element annotation\nDemonstrates annotating existing models and elements using the 'annotate' directive, providing a concise way to add only annotations (without structural extension).\n\n```cds\nannotate Foo with @title:'Foo';\nannotate Bar with @title:'Bar' {\n  nestedStructField {\n    existingField @title:'Nested Field';\n  }\n}\n```\n",
    " Conceptual Definition Language (CDL) > Aspects > Named Aspects\naspect, named aspect, reuse, cds modeling\nDefines a named aspect with both fields and actions, and then shows extending multiple entities with that aspect to share common fields and behaviors.\n\n```cds\n@annotation\naspect NamedAspect {\n  created { at: Timestamp; _by: User; }\n} actions {\n  action A() returns String;\n}\nextend Foo with NamedAspect;\nextend Bar with NamedAspect;\n```\n",
    " Conceptual Definition Language (CDL) > Aspects > Includes -- `:` as Shortcut Syntax\naspect, include, shortcut syntax, cds modeling\nDemonstrates using the inheritance-like ':' syntax to include one or more aspects in an entity, serving as syntactic sugar for extended model composition.\n\n```cds\ndefine entity Foo : SomeAspect, AnotherAspect {\n  key ID : Integer;\n  name : String;\n  [...]\n}\n```\n",
    " Conceptual Definition Language (CDL) > Aspects > Extending Views and Projections\naspect, extend, view, projection, cds modeling\nExtends an existing view (projection) select list with new calculated fields, renamed columns, and new associations using the 'extend <entity> with columns' syntax.\n\n```cds\nextend SomeView with columns {\n  foo as moo @woo,\n  1 + 1 as two,\n  bar : Association to Bar on bar.ID = moo\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > Service Definitions / Exposed Entities\nservice definition, cds modeling, exposed entities, projection, readonly\nDefines two services exposing entities via projections and views, and shows how to optionally modify exposure with additional annotations or filters (e.g., based on $user.id).\n\n```cds\nservice CatalogService {\n  entity Product as projection on data.Products {\n    *, created.at as since\n  } excluding { created };\n}\nservice MyOrders {\n  //> $user only implemented for SAP HANA\n  entity Order as select from data.Orders { * } where buyer=$user.id;\n  entity Product as projection on CatalogService.Product;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > Exposed Entities > Views with Parameters\nservice parameters, view parameters, cds modeling, odata\nShows how to expose entities with parameters in service definitions, useful for parameterized OData endpoints for filtered or specialized queries.\n\n```cds\nservice MyOrders {\n  entity OrderWithParameter( foo: Integer ) as select from data.Orders where id=:foo;\n}\nservice SomeService {\n  entity ViewInService( p1: Integer, p2: Boolean ) as select from data.SomeView(foo: :p1, bar: :p2) {*};\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > (Auto-) Redirected Associations\nservice, association, redirected association, projection, cds modeling\nDemonstrates auto-redirection of associations when projecting entities within a service, enabling seamless navigation between exposed entities.\n\n```cds\nservice AdminService {\n  entity Books as projection on my.Books;\n  entity Authors as projection on my.Authors;\n  //> AdminService.Authors.books refers to AdminService.Books\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > (Auto-) Redirected Associations > Using `redirected to` with Projected Associations\nservice, association, redirected association, ambiguity, cds.redirection.target, cds modeling\nShows how to manually resolve ambiguous auto-redirection of associations using 'redirected to' and the '@cds.redirection.target' annotation in complex service projections.\n\n```cds\nservice AdminService {\n  entity ListOfBooks as projection on my.Books;\n  entity Books as projection on my.Books;\n  entity Authors as projection on my.Authors { *, // [!code focus]\n    books : redirected to Books //> resolved ambiguity // [!code focus]\n  };\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > Auto-Exposed Entities\nservice, autoexpose, association, cds modeling\nShows how to annotate entities with '@cds.autoexpose' to enable automatic exposure (auto-expose) in services when referenced by associations.\n\n```cds\n// schema.cds\nnamespace schema;\nentity Bar @cds.autoexpose { key id: Integer; }\n\nusing { sap.common.CodeList } from '@sap/cds/common';\nentity Car : CodeList { key code: Integer; }\n//> inherits  @cds.autoexpose from  sap.common.CodeList\n```\n",
    " Conceptual Definition Language (CDL) > Services > Custom Actions and Functions\nservice, action, function, custom logic, cds modeling\nDefines custom unbound actions and functions at the service level, including usage of structured return types and enums. Shows designing custom business logic in a CDS service.\n\n```cds\nservice MyOrders {\n  entity Order { /*...*/ };\n  // unbound actions / functions\n  type cancelOrderRet {\n    acknowledge: String enum { succeeded; failed; };\n    message: String;\n  }\n  action cancelOrder ( orderID:Integer, reason:String ) returns cancelOrderRet;\n  function countOrders() returns Integer;\n  function getOpenOrders() returns array of Order;\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > Bound Actions and Functions\nservice, action, function, bound action, explicit binding, cds modeling\nShows defining bound actions/functions within an entity as part of a service, binding them implicitly to service entity instances (e.g., Products).\n\n```cds\nservice CatalogService {\n  entity Products as projection on data.Products { ... }\n    actions {\n      // bound actions/functions\n      action addRating (stars: Integer);\n      function getViewsCount() returns Integer;\n    }\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > Bound Actions and Functions\nservice, action, function, explicit binding, cds modeling\nShows use of explicit binding parameters for bound actions/functions, controlling which entity instance(s) the action/function is bound to.\n\n```cds\nservice CatalogService {\n  entity Products as projection on data.Products { ... }\n    actions {\n      // bound actions/functions with explicit binding parameter\n      action A1 (prod: $self, stars: Integer);\n      action A2 (in: many $self);  // bound to collection of Products\n    }\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > Custom-Defined Events\nservice, event, cds modeling, event message\nDefines service-emitted events with structured payloads, both as standalone definitions and as projections, supporting event-driven architectures.\n\n```cds\nservice MyOrders { ...\n  event OrderCanceled {\n    orderID: Integer;\n    reason: String;\n  }\n}\nservice MyOrders { ...\n  event OrderCanceledNarrow : projection on OrderCanceled { orderID }\n}\n```\n",
    " Conceptual Definition Language (CDL) > Services > Extending Services\nservice, extend, entity, action, cds modeling\nShows extending a service with additional entities or actions, and extending an existing service entity with new actions. Supports modular service composition.\n\n```cds\nextend service CatalogService with {\n  entity Foo {};\n  function getRatings() returns Integer;\n}\nextend entity CatalogService.Products with actions {\n  function getRatings() returns Integer;\n}\n```\n",
    " Core Schema Notation (CSN) > Anatomy\ncsn, json, project structure\nA complete example of a CSN model in JSON format. It contains external dependencies, definitions (types and structured types), and model extensions. This serves as the canonical serialized form used for model interchange or persistence.\n\n```json\n{\n  \"requires\": [ \"@sap/cds/common\", \"./db/schema\" ],\n  \"definitions\": {\n    \"some.type\": { \"type\": \"cds.String\", \"length\": 11 },\n    \"another.type\": { \"type\": \"some.type\" },\n    \"structured.type\": { \"elements\": {\n      \"foo\": { \"type\": \"cds.Integer\" },\n      \"bar\": { \"type\": \"cds.String\" }\n    }}\n  },\n  \"extensions\": [\n    { \"extend\":\"Foo\", \"elements\":{\n      \"bar\": { \"type\": \"cds.String\" }\n    }}\n  ]\n}\n```\n",
    " Core Schema Notation (CSN) > Anatomy\ncsn, yaml, project structure\nAn equivalent representation of a CSN model in YAML format. Contains requires, definitions, and extensions. YAML can be used for easier human editing of CSN models.\n\n```yaml\nrequires:\n  - @sap/cds/common\n  - ./db/schema\ndefinitions:\n  some.type: {type: cds.String, length: 11}\n  another.type: {type: some.type }\n  structured.type:\n    elements:\n      foo: {type: cds.Integer}\n      bar: {type: cds.String}\nextensions: [\n  - extend: Foo\n    elements:\n      bar: {type: cds.String}\n]\n```\n",
    " Core Schema Notation (CSN) > Anatomy\ncsn, JavaScript, project structure\nA CSN model expressed as a plain JavaScript object literal. This form is used internally and for documentation examples, showing how to represent requires, definitions, and extensions inline.\n\n```js\n({\n  requires:[ '@sap/cds/common', './db/schema' ],\n  definitions: {\n    'some.type': { type:\"cds.String\", length:11 },\n    'another.type': { type:\"some.type\" },\n    'structured.type': { elements: {\n      'foo': { type:\"cds.Integer\" },\n      'bar': { type:\"cds.String\" }\n    }}\n  },\n  extensions: [\n    { extend:'Foo', elements:{\n      'bar': { type:\"cds.String\" }\n    }\n  ],\n})\n```\n",
    " Core Schema Notation (CSN) > Definitions\ncsn, JavaScript, type definition\nShows how to define several CSN type definitions, including scalar, structured, and enum types. Names must follow specific rules and are fully qualified in the enclosing dictionary.\n\n```js\n({definitions:{\n  'Name':     {type:\"cds.String\"},\n  'Currency': {type:\"cds.String\", length:3},\n  'USD':      {type:\"Currency\"},\n  'Amount':   {elements:{\n    'value':    {type:\"cds.Decimal\", precision:11, scale:3},\n    'currency': {type:\"Currency\"},\n  }},\n  'SortOrder':{enum:{ 'asc':{}, 'desc':{} }}\n}})\n```\n",
    " Core Schema Notation (CSN) > Type Definitions\ncsn, JavaScript, type definition\nDefines examples of scalar, structured, arrayed, and enum types in CSN using the 'definitions' dictionary for modeling custom types.\n\n```js\n({definitions: {\n  'scalar.type':  {type:\"cds.String\", length:3 },\n  'struct.type':  {elements:{'foo': {type:\"cds.Integer\"}}},\n  'arrayed.type': {items:{type:\"cds.Integer\"}},\n  'enum.type':    {enum:{ 'asc':{}, 'desc':{} }}\n}})\n```\n",
    " Core Schema Notation (CSN) > Scalar Types\ncsn, JavaScript, scalar types\nDemonstrates scalar type definitions in CSN. Scalar types use the fully qualified type name (e.g., cds.Integer) and support additional parameters such as precision and scale for decimals.\n\n```js\n({definitions: {\n  'Foo': { type:\"cds.Integer\" },\n  'Bar': { type:\"cds.Decimal\", precision:11, scale:3 },\n}})\n```\n",
    " Core Schema Notation (CSN) > Structured Types\ncsn, JavaScript, structured types\nIllustrates a structured type in CSN with an 'elements' dictionary describing fields, each being a type definition themselves.\n\n```js\n({definitions:{\n  'structured.type': {elements:{\n    'foo': {type:\"cds.Integer\"},\n    'bar': {type:\"cds.String\"}\n  }}\n}})\n```\n",
    " Core Schema Notation (CSN) > Arrayed Types\ncsn, JavaScript, arrayed types\nShows how to define arrayed types in CSN using the 'items' property, describing each array item's type.\n\n```js\n({definitions:{\n  'arrayed.type': {items:{type:\"cds.Integer\"}}\n}})\n```\n",
    " Core Schema Notation (CSN) > Enumeration Types\ncsn, JavaScript, enum types\nDefines various enumeration types in CSN, including enums with and without explicit values and an enum type based on cds.Decimal. Enum members can have a 'val' property for constants.\n\n```js\n({definitions:{\n  'Gender': {enum:{\n    'male':{},\n    'female':{},\n    'non_binary': {\n          val: 'non-binary'\n        }\n  }},\n  'Status': {enum:{\n    'submitted': {val:1},\n    'fulfilled': {val:2}\n  }},\n  'Rating': {type:\"cds.Decimal\", enum:{\n    'low':    {val:0},\n    'medium': {val:50},\n    'high':   {val:100}\n  }}\n}})\n```\n",
    " Core Schema Notation (CSN) > Entity Definitions\ncsn, JavaScript, entity, primary key\nDefines an entity 'Products' in CSN with elements, where 'ID' is the primary key, 'title' is not null, and 'price' is a virtual field not persisted to storage.\n\n```js\n({definitions:{\n  'Products': {kind:\"entity\", elements:{\n    'ID':     {type:\"cds.Integer\", key:true},\n    'title':  {type:\"cds.String\", notNull:true},\n    'price':  {type:\"Amount\", virtual:true},\n  }}\n}})\n```\n",
    " Core Schema Notation (CSN) > View Definitions\ncsn, JavaScript, entity, view, projection\nDefines an entity view in CSN using the 'query' property with a CQN SELECT expression. This allows modeling database views as projections over base entities.\n\n```js\n({definitions:{\n  'Foo': { kind:\"entity\", query: {\n    SELECT:{\n      from: {ref:['Bar']},\n      columns: [ {ref:['title']}, {ref:['price']} ]\n    }\n  }}\n}})\n```\n",
    " Core Schema Notation (CSN) > Projections\ncsn, JavaScript, entity, projection\nShows the use of the 'projection' property to define a simplified view in CSN, modeling a view as a projection over an underlying entity.\n\n```js\n({ definitions: {\n  'Foo': { kind: \"entity\",\n    projection: {\n      from: { ref: ['Bar'] },\n      columns: [ '*' ]\n    }\n  }\n}})\n```\n",
    " Core Schema Notation (CSN) > Associations > Basic to-one Associations\ncsn, JavaScript, association\nDefines basic to-one associations in CSN, both inline as an entity element and as a reusable association type definition, using 'type' cds.Association and a 'target'.\n\n```js\n({definitions:{\n  'Books': { kind:\"entity\", elements:{\n    'author': { type:\"cds.Association\", target:\"Authors\" },\n  }},\n  //> an association type-def\n  'Currency': { type:\"cds.Association\", target:\"Currencies\" },\n}})\n```\n",
    " Core Schema Notation (CSN) > Associations > With Specified cardinality\ncsn, JavaScript, association, cardinality\nDefines a to-many association in CSN using the 'cardinality' property (max: '*') to indicate multiple targets are possible in the relationship.\n\n```js\n({definitions:{\n  'Authors': { kind:\"entity\", elements:{\n    'books': { type:\"cds.Association\", target:\"Books\", cardinality:{max:\"*\"} },\n  }},\n}})\n```\n",
    " Core Schema Notation (CSN) > Associations > With Specified on Condition\ncsn, JavaScript, association, unmanaged association, on condition\nShows an unmanaged association in CSN with an explicit 'on' condition for join logic. The 'on' clause is an array representing a condition in CQN style.\n\n```js\n({definitions:{\n  'Authors': { kind:\"entity\", elements:{\n    'books': { type:\"cds.Association\", target:\"Books\", cardinality{max:\"*\"},\n      on: [{ref:['books', 'author']}, '=', {ref:['$self']}]\n    },\n  }}\n }})\n```\n",
    " Core Schema Notation (CSN) > Associations > With Specified keys\ncsn, JavaScript, association, keys\nDemonstrates the use of the 'keys' property to override the keys used in a managed association, specifying projection paths for association joins in CSN.\n\n```js\n({definitions:{\n  'Books': {kind:\"entity\", elements:{\n    'genre': {type:\"cds.Association\", target:\"Genres\", keys:[\n      {ref:[\"category\"], as:\"cat\"},\n      {ref:[\"name\"]},\n    ]},\n  }},\n}})\n```\n",
    " Core Schema Notation (CSN) > Annotations\ncsn, JavaScript, annotation\nAn entity with type- and element-level annotations using the '@' prefix in CSN. Annotations add metadata for UI, documentation, or custom processing.\n\n```js\n({definitions:{\n  'Employees': {kind:\"entity\",\n    '@title':\"Mitarbeiter\",\n    '@readonly':true,\n    elements:{\n      'firstname': {type:\"cds.String\", '@title':\"Vorname\"},\n      'surname':   {type:\"cds.String\", '@title':\"Nachname\"},\n    }\n  },\n}})\n```\n",
    " Core Schema Notation (CSN) > Aspects > Extend with <named aspect>\ncsn, JavaScript, aspect, extension\nBasic usage of CSN extensions to include a named aspect into a target definition. This allows modularized aspect-oriented model composition.\n\n```js\ncsn = { extensions:[\n  { extend:\"TargetDefinition\", includes:[\"NamedAspect\"]}\n]}\n```\n",
    " Core Schema Notation (CSN) > Aspects > Extend with <anonymous aspect>\ncsn, JavaScript, aspect, extension\nShows how to extend a definition (Foo) with new elements and annotations using an anonymous aspect in CSN, modeling advanced extension logic.\n\n```js\ncsn = { extensions:[\n\n  // extend Foo with @foo { ..., bar: String; }\n  {\n    extend: \"Foo\",\n    '@foo': true,\n    elements: {\n      // adds a new element 'bar'\n      bar: { type: \"cds.String\", '@bar': true },\n    }\n  },\n\n]}\n```\n",
    " Core Schema Notation (CSN) > Aspects > annotate with <anonymous aspect>\ncsn, JavaScript, aspect, annotation\nDemonstrates annotating a definition and its elements in CSN using anonymous aspects. The 'annotate' property allows nested element annotations.\n\n```js\ncsn = {extensions:[\n\n  // annotate Foo with @foo;\n  { annotate:\"Foo\", '@foo':true },\n\n  // annotate Foo with @foo { boo @boo }\n  { annotate:\"Foo\", '@foo':true, elements: {\n    // annotates existing element 'boo'\n    boo: {'@boo':true },\n  }},\n\n]}\n```\n",
    " Core Schema Notation (CSN) > Services\ncsn, JavaScript, service\nA minimal CSN service definition, showing how to declare a top-level service entry (kind: 'service').\n\n```js\n({definitions:{\n  'MyOrders': {kind:\"service\"}\n}})\n```\n",
    " Core Schema Notation (CSN) > Services > Actions / Functions\ncsn, JavaScript, service, actions\nDefines a service and includes both bound and unbound actions/functions in CSN. Shows the use of 'actions', 'params', and 'returns' properties as used for OData service modeling.\n\n```js\n({definitions:{\n  'OrderService': {kind:\"service\"},\n  'OrderService.Orders': {kind:\"entity\", elements:{...}, actions:{\n    'validate': {kind:\"function\",\n      returns: {type: \"cds.Boolean\"}\n    }\n  }},\n  'OrderService.cancelOrder': {kind:\"action\",\n      params:{\n        'orderID': {type:\"cds.Integer\"},\n        'reason':  {type:\"cds.String\"},\n      },\n      returns: {elements:{\n        'ack': {enum:{ 'succeeded':{}, 'failed':{} }},\n        'msg': {type:\"cds.String\"},\n      }}\n    }\n  }\n}})\n```\n",
    " Core Schema Notation (CSN) > Imports\ncsn, JavaScript, import\nShows how to specify model imports in CSN using the 'requires' array. Dependencies can be npm modules or relative local files.\n\n```js\n({\n  requires: [ '@sap/cds/common', './db/schema' ],\n  // [...]\n})\n```\n",
    " Core Schema Notation (CSN) > i18n\ncsn, JavaScript, i18n\nIllustrates the CSN 'i18n' property for including language-specific text translations as a dictionary. Intended for use by consuming applications.\n\n```js\n({\n  i18n: {\n    'language-key': {\n      'text-key': \"some string\"\n    }\n  }\n})\n```\n",
    " Query Notation (CQN) > Introduction\nCQN, CQL, query builder, plain object, query parsing, cds.ql, SELECT\nConstructs a CQN query object using a tagged template string with cds.ql, parsing the CQL statement. Useful for concise query definitions in JavaScript.\n\n```js\nlet query = cds.ql `SELECT from Foo`\n```\n",
    " Query Notation (CQN) > Introduction\nCQN, query builder, SELECT, ref\nBuilds a CQN query object by explicitly referencing the entity 'Foo' using the query builder API. This approach is programmatic and benefits from code completion.\n\n```js\nlet query = SELECT.from (ref`Foo`)\n```\n",
    " Query Notation (CQN) > Introduction\nCQN, plain object, SELECT\nDemonstrates the direct construction of a CQN SELECT query as a plain JavaScript object, specifying the entity 'Foo' as the data source.\n\n```js\nlet query = {SELECT:{from:[{ref:['Foo']}]}}\n```\n",
    " Query Notation (CQN) > Introduction\nCQN, cds.run, execution\nExecutes a previously constructed CQN query object using the cds.run API, returning the query results as a Promise. Applies to SELECT, INSERT, UPDATE, or DELETE CQN queries.\n\n```js\nlet results = await cds.run (query)\n```\n",
    " Query Notation (CQN) > SELECT\nCQN, TypeScript, SELECT, query object\nDefines the structure of a SELECT query object in CQN as a TypeScript class. Lists supported query properties including distinct, count, one, from, columns, and various SQL-like clauses.\n\n```ts\nclass SELECT { SELECT: {\n  distinct?   : true\n  count?      : true\n  one?        : true\n  from        : source\n  columns?    : column[]\n  where?      : xo[]\n  having?     : xo[]\n  groupBy?    : expr[]\n  orderBy?    : order[]\n  limit?      : { rows: val, offset: val }\n}}\n```\n",
    " Query Notation (CQN) > SELECT > .from\nCQN, from, source\nShows how the 'from' property in a SELECT CQN query is defined using the type 'source', which can be a ref, a subquery, or a join object.\n\n```ts\nclass SELECT { SELECT: { //...\n  from : source // [!code focus]\n}}\n```\n",
    " Query Notation (CQN) > SELECT > .from\nCQN, source, join\nDefines the 'source' type for a SELECT query, supporting references, subqueries, or join constructs. Enables complex join queries in CQN format.\n\n```ts\ntype source = ref &as | SELECT | {\n  join : 'inner' | 'left' | 'right'\n  args : [ source, source ]\n  on?  : expr\n}\n```\n",
    " Query Notation (CQN) > SELECT > .columns\nCQN, columns, column, projection, nested\nSpecifies the 'columns' property for a CQN SELECT query, allowing selection and projection of columns, including nested projections and infix filters.\n\n```ts\nclass SELECT { SELECT: { //...\n  columns : column[] // [!code focus]\n}}\n```\n",
    " Query Notation (CQN) > SELECT > .columns\nCQN, column, expand, cast, as\nDescribes the flexible structure of the 'column' type in CQN, enabling selection of all columns ('*'), expressions with alias and type-casting, references, as well as expansion for nested projections.\n\n```ts\ntype column = '*' | expr &as &cast | ref &as &(\n  { expand?: column[] } |\n  { inline?: column[] }\n) &infix\n```\n",
    " Query Notation (CQN) > SELECT > .columns\nCQN, as, cast, infix\nDefines interfaces used in CQN columns: aliasing ('as'), type-casting ('cast'), and infix properties such as orderBy, where, and limit for advanced column projection.\n\n```ts\ninterface as { as?: name }\ninterface cast { cast?: {type:name} }\ninterface infix {\n  orderBy?  : order[]\n  where?    : expr\n  limit?    : { rows: val, offset: val }\n}\n```\n",
    " Query Notation (CQN) > SELECT > .where, .having, .search\nCQN, where, having, search, filter\nIllustrates the usage of where, having, and search clauses in a CQN SELECT query, with each clause defined as an array of 'xo' expressions supporting filtering and full-text search.\n\n```ts\nclass SELECT { SELECT: {\n  where  : xo[] // [!code focus]\n  having : xo[] // [!code focus]\n  search : xo[] // [!code focus]\n}}\n```\n",
    " Query Notation (CQN) > SELECT > .orderBy\nCQN, orderBy, sorting\nShows the 'orderBy' property in CQN SELECT queries for specifying sorting order using an array of 'order' expressions.\n\n```ts\nclass SELECT { SELECT: { //...\n  orderBy : order[] // [!code focus]\n}}\n```\n",
    " Query Notation (CQN) > SELECT > .orderBy\nCQN, order, sorting\nDefines the structure for specifying sort order in CQN 'orderBy' clauses, including ascending/descending sorting and placement of null values.\n\n```ts\ntype order = expr & {\n  sort  : 'asc' | 'desc'\n  nulls : 'first' | 'last'\n}\n```\n",
    " Query Notation (CQN) > INSERT > UPSERT\nCQN, INSERT, UPSERT\nDefines the class structure for CQN INSERT and UPSERT statements, supporting insertion via entries, columns/values, columns/rows, or sub-select queries.\n\n```ts\nclass INSERT { INSERT: UPSERT['UPSERT'] }\nclass UPSERT { UPSERT: {\n  into      : ref\n  entries?  : data[]\n  columns?  : string[]\n  values?   : scalar[]\n  rows?     : scalar[][]\n  from?     : SELECT\n}}\n```\n",
    " Query Notation (CQN) > INSERT > .entries\nCQN, INSERT, entries, deep insert, data\nDemonstrates an INSERT statement with 'entries', specifying one or more records to be inserted into the 'Books' entity. Each entry is a key-value object.\n\n```js\nlet q = {INSERT:{ into: { ref: ['Books'] }, entries: [\n  { ID:201, title:'Wuthering Heights' },\n  { ID:271, title:'Catweazle' }\n]}}\n```\n",
    " Query Notation (CQN) > INSERT > .entries\nCQN, INSERT, entries, deep insert, data\nShows a deep insert via an INSERT CQN where an author and their related books are inserted in a nested fashion in one statement.\n\n```js\nlet q = {INSERT:{ into: { ref: ['Authors'] }, entries: [\n  { ID:150, name:'Edgar Allen Poe', books: [\n    { ID:251, title:'The Raven' },\n    { ID:252, title:'Eleonora' }\n  ]}\n]}}\n```\n",
    " Query Notation (CQN) > INSERT > .values\nCQN, INSERT, values, columns\nIllustrates an INSERT CQN query using 'columns' and 'values' arrays, directly mapping SQL's VALUES clause. Useful for single-row inserts.\n\n```js\nlet q = {INSERT:{ into: { ref: ['Books'] },\n  columns: [ 'ID', 'title', 'author_id', 'stock' ],\n  values: [ 201, 'Wuthering Heights', 101, 12 ]\n}}\n```\n",
    " Query Notation (CQN) > INSERT > .rows\nCQN, INSERT, rows, bulk insert\nShows usage of 'rows' with columns in an INSERT CQN, allowing efficient bulk-insert of multiple records with ordered value arrays.\n\n```js\nlet q = {INSERT:{ into: { ref: ['Books'] },\n  columns: [\n    'ID', 'title', 'author_id', 'stock'\n  ],\n  rows: [\n    [ 201, 'Wuthering Heights', 101, 12 ],\n    [ 252, 'Eleonora', 150, 234 ]\n  ]\n}}\n```\n",
    " Query Notation (CQN) > UPDATE\nCQN, UPDATE, data\nTypeScript definition for UPDATE CQN queries, supporting targeted updates using entity references, filter expressions, and either direct data or change expressions.\n\n```ts\nclass UPDATE { UPDATE: {\n  entity  : ref\n  where?  : expr\n  data    : data\n  with    : changes\n}}\n```\n",
    " Query Notation (CQN) > UPDATE > .data\nCQN, UPDATE, data\nDefines the structure for the 'data' property in UPDATE and INSERT CQN queries, allowing scalar values or nested objects for deep modification.\n\n```ts\ninterface data  { [element:name]: scalar | data | data[] }\n```\n",
    " Query Notation (CQN) > UPDATE > .with\nCQN, UPDATE, with, changes\nDescribes the changes interface for the UPDATE.with property, allowing for new values to be expressions or nested changes, for advanced set operations.\n\n```ts\ninterface changes { [element:name]: scalar | expr | changes | changes[] }\n```\n",
    " Query Notation (CQN) > DELETE\nCQN, DELETE\nCQN class definition for DELETE statements, with optional 'where' filter and mandatory 'from' indicating the target entity.\n\n```js\nclass DELETE { DELETE: {\n  from    : ref\n  where?  : expr\n}}\n```\n",
    " Query Notation (CQN) > Expressions\nCQN, expressions, expr, ref, xpr, func, param, SELECT\nSummarizes the types supported for CQN expressions, including references, literals, expressions lists, function calls, parameters, and sub-selects.\n\n```ts\ntype expr  = ref | val | xpr | list | func | param | SELECT\n```\n",
    " Query Notation (CQN) > Expressions\nCQN, ref, val, xpr, list, func, param\nDefines the various expression forms in CQN including references, values, compound expressions, function invocations, and query parameters.\n\n```ts\ntype ref   = { ref: ( name | { id:name &infix })[] }\ntype val   = { val: scalar }\ntype xpr   = { xpr: xo[] }\ntype list  = { list: expr[] }\ntype func  = { func: string, args: expr[] }\ntype param = { ref: [ '?' | number | string ], param: true }\n```\n",
    " Query Notation (CQN) > Expressions\nCQN, xo, operator, keyword, scalar, name\nSpecifies auxiliary types in CQN expressions: xo as a union of expressions, keywords, and operators. Also defines valid scalar values and names.\n\n```ts\ntype xo       = expr | keyword | operator\ntype operator = '=' | '==' | '!=' | '<' | '<=' | '>' | '>='\ntype keyword  = 'in' | 'like' | 'and' | 'or' | 'not'\ntype scalar   = number | string | boolean | null\ntype name     = string\n```\n",
    " Query Notation (CQN) > Full `cqn.d.ts` File\nCQN, cqn.d.ts, typescript, full definition\nThe full TypeScript declaration file (cqn.d.ts) of the CQN query notation. Defines CQN representations for all core query types (SELECT, INSERT, UPSERT, UPDATE, DELETE), their properties and expression types used for programmatic query construction and validation.\n\n```ts\n/**\n * `INSERT` and `UPSERT` queries are represented by the same internal\n * structures. The `UPSERT` keyword is used to indicate that the\n * statement should be updated if the targeted data exists.\n * The `into` property specifies the target entity.\n *\n * The data to be inserted or updated can be specified in different ways:\n *\n * - in the `entries` property as deeply nested records.\n * - in the `columns` and `values` properties as in SQL.\n * - in the `columns` and `rows` properties, with `rows` being array of `values`.\n * - in the `from` property with a `SELECT` query to provide the data to be inserted.\n *\n * The latter is the equivalent of SQL's `INSERT INTO ... SELECT ...` statements.\n */\nexport class INSERT { INSERT: UPSERT['UPSERT'] }\nexport class UPSERT { UPSERT: {\n  into      : ref\n  entries?  : data[]\n  columns?  : string[]\n  values?   : scalar[]\n  rows?     : scalar[][]\n  from?     : SELECT\n}}\n\n\n/**\n * `UPDATE` queries are used to capture modifications to existing data.\n * They support a `where` clause to specify the rows to be updated,\n * and a `with` clause to specify the new values. Alternatively, the\n * `data` property can be used to specify updates with plain data only.\n */\nexport class UPDATE { UPDATE: {\n  entity  : ref\n  where?  : expr\n  data    : data\n  with    : changes\n}}\n\n\n/**\n * `DELETE` queries are used to remove data from a target datasource.\n * They support a `where` clause to specify the rows to be deleted.\n */\nexport class DELETE { DELETE: {\n  from    : ref\n  where?  : expr\n}}\n\n\n/**\n * `SELECT` queries are used to retrieve data from a target datasource,\n * and very much resemble SQL's `SELECT` statements, with these noteworthy\n * additions:\n *\n * - The `from` clause supports `{ref}` paths with infix filters.\n * - The `columns` clause supports deeply nested projections.\n * - The `count` property requests the total count, similar to OData's `$count`.\n * - The `one` property indicates that only a single record object shall be\n *   returned instead of an array.\n *\n * Also, CDS, and hence CQN, supports minimalistic `SELECT` statements with a `from`\n * as the only mandatory property, which is equivalent to SQL's `SELECT * from ...`.\n */\nexport class SELECT { SELECT: {\n  distinct?   : true\n  count?      : true\n  one?        : true\n  from        : source\n  columns?    : column[]\n  where?      : xo[]\n  having?     : xo[]\n  groupBy?    : expr[]\n  orderBy?    : order[]\n  limit?      : { rows: val, offset: val }\n}}\n\ntype source = OneOf< ref &as | SELECT | {\n  join : 'inner' | 'left' | 'right'\n  args : [ source, source ]\n  on?  : expr\n}>\n\ntype column = OneOf< '*' | expr &as &cast | ref &as & OneOf<(\n  { expand?: column[] } |\n  { inline?: column[] }\n)> &infix >\n\ntype order = expr & {\n  sort  : 'asc' | 'desc'\n  nulls : 'first' | 'last'\n}\n\n\ninterface changes { [elm:string]: OneOf< scalar | expr | changes | changes[]>}\ninterface data { [elm:string]: OneOf< scalar | data | data[]>}\ninterface as { as?: name }\ninterface cast { cast?: {type:name} }\n\ninterface infix {\n  orderBy?  : order[]\n  where?    : expr\n  limit?    : { rows: val, offset: val }\n}\n\n\n/**\n * Expressions can be entity or element references, query parameters,\n * literal values, lists of all the former, function calls, sub selects,\n * or compound expressions.\n */\nexport type expr  = OneOf< ref | val | xpr | list | func | param | SELECT >\nexport type ref   = { ref: OneOf< name | { id:name &infix } >[] }\nexport type val   = { val: scalar }\nexport type xpr   = { xpr: xo[] }\nexport type list  = { list: expr[] }\nexport type func  = { func: string, args: expr[] }\nexport type param = { ref: [ '?' | number | string ], param: true }\n\n/**\n * This is used in `{xpr}` objects as well as in `SELECT.where` clauses to\n * represent compound expressions as flat `xo` sequences.\n * Note that CQN by intent does not _understand_ expressions and therefore\n * keywords and operators are just represented as plain strings.\n * This allows us to translate to and from any other query languages,\n * including support for native SQL features.\n */\ntype xo       = OneOf< expr | keyword | operator >\ntype operator = '=' | '==' | '!=' | '<' | '<=' | '>' | '>='\ntype keyword  = 'in' | 'like' | 'and' | 'or' | 'not'\ntype scalar   = number | string | boolean | null\ntype name     = string\n\n\n\n// ---------------------------------------------------------------------------\n//  maybe coming later...\n\ndeclare class CREATE { CREATE: {} }\ndeclare class DROP { DROP: {} }\n\n\n// ---------------------------------------------------------------------------\n//  internal helpers...\n\ntype OneOf<U> = Partial<(U extends any ? (k:U) => void : never) extends (k: infer I) => void ? I : never>\n```\n",
    " Common Types and Aspects > Why Use @sap/cds/common?\ncds modeling, domain model, reuse, import, Country, common types, @sap/cds/common\nDemonstrates how to import and use the 'Country' type from @sap/cds/common in an entity definition. This approach helps create interoperable, concise, and maintainable models by leveraging predefined common types.\n\n```cds\nusing { Country } from '@sap/cds/common';\nentity Addresses {\n  street  : String;\n  town    : String;\n  country : Country; //> using reuse type\n}\n```\n",
    " Common Types and Aspects > Aspect cuid\naspect-oriented modeling, aspects, cuid, canonical key, UUID, entity, @sap/cds/common\nUses the 'cuid' aspect from @sap/cds/common to add a canonical UUID-based primary key to the entity 'Foo'. This is a best-practice shortcut to ensure each entity has a universally unique key.\n\n```cds\nentity Foo : cuid {...}\n```\n",
    " Common Types and Aspects > Aspect cuid\nentity, UUID, primary key, canonical key\nEquivalent definition to using the 'cuid' aspect, explicitly defining an 'ID' primary key of type 'UUID'.\n\n```cds\nentity Foo {\n  key ID : UUID;\n  [...]\n}\n```\n",
    " Common Types and Aspects > Aspect managed\naspect-oriented modeling, aspects, managed, audit fields, createdAt, createdBy, modifiedAt, modifiedBy, entity, @sap/cds/common\nUses the 'managed' aspect to automatically add audit fields for creation and modification tracking within the entity 'Foo'. This promotes best practices for record management.\n\n```cds\nentity Foo : managed {...}\n```\n",
    " Common Types and Aspects > Aspect managed\nentity, audit fields, CDS annotations, @cds.on.insert, @cds.on.update, createdAt, createdBy, modifiedAt, modifiedBy\nShows manual definition and annotation of audit fields for entity 'Foo', equivalent to using the 'managed' aspect. The annotations automate population of audit data.\n\n```cds\nentity Foo {\n  createdAt  : Timestamp @cds.on.insert : $now;\n  createdBy  : User      @cds.on.insert : $user;\n  modifiedAt : Timestamp @cds.on.insert : $now  @cds.on.update : $now;\n  modifiedBy : User      @cds.on.insert : $user @cds.on.update : $user;\n  [...]\n}\n```\n",
    " Common Types and Aspects > Aspect temporal\naspect-oriented modeling, aspects, temporal, temporal data, entity, @sap/cds/common\nApplies the 'temporal' aspect to an entity, enabling built-in handling of validity periods and temporal history (e.g., time travel queries).\n\n```cds\nentity Contract : temporal {...}\n```\n",
    " Common Types and Aspects > Common Reuse Types\ntype definition, Country, association, code list, reuse type, @sap/cds/common\nDefines the 'Country' type as an association to the common 'Countries' code list entity. Enables strong-typed, interoperable references for country data.\n\n```cds\ntype Country : Association to sap.common.Countries;\n```\n",
    " Common Types and Aspects > Common Reuse Types\ntype definition, Currency, association, code list, reuse type, @sap/cds/common\nDefines the 'Currency' type as an association to 'sap.common.Currencies', allowing easy reference to standardized currency codes.\n\n```cds\ntype Currency : Association to sap.common.Currencies;\n```\n",
    " Common Types and Aspects > Common Reuse Types\ntype definition, Language, association, code list, reuse type, @sap/cds/common\nDefines the 'Language' type as an association to the languages code list for standardized language handling.\n\n```cds\ntype Language : Association to sap.common.Languages;\n```\n",
    " Common Types and Aspects > Common Reuse Types\ntype definition, Timezone, association, code list, reuse type, @sap/cds/common\nDefines the 'Timezone' type as an association to the common timezones code list.\n\n```cds\ntype Timezone : Association to sap.common.Timezones;\n```\n",
    " Common Types and Aspects > Aspect CodeList\nentity, aspect, CodeList, base entity, localized, @sap/cds/common\nDefines a reusable aspect containing localizable fields 'name' and 'descr' for standardized code lists. Serves as a base for entities like Countries, Currencies, etc.\n\n```cds\naspect sap.common.CodeList {\n  name  : localized String(111);\n  descr : localized String(1111);\n}\n```\n",
    " Common Types and Aspects > Entity Countries\nentity, Countries, code list, ISO 3166-1, primary key, reuse, @sap/cds/common\nDeclares the standardized Countries entity for code list patterns, supporting both two-letter and three-letter country codes as per ISO 3166-1.\n\n```cds\nentity sap.common.Countries : CodeList {\n  key code : String(3); //> ISO 3166-1 alpha-2 codes (or alpha-3)\n}\n```\n",
    " Common Types and Aspects > Entity Currencies\nentity, Currencies, code list, ISO 4217, @sap/cds/common\nDefines the Currencies code list entity with ISO currency codes, symbols, and minor units for standardized financial models.\n\n```cds\nentity sap.common.Currencies : CodeList {\n  key code  : String(3); //> ISO 4217 alpha-3 codes\n  symbol    : String(5); //> for example, $, €, £, ₪, ...\n  minorUnit : Int16;     //> for example, 0 or 2\n}\n```\n",
    " Common Types and Aspects > Entity Languages\nentity, Languages, code list, locale, @sap/cds/common\nDefines Languages entity for storing language locale codes as per ISO/IEC 15897 convention.\n\n```cds\nentity sap.common.Languages : CodeList {\n  key code : sap.common.Locale; //> for example, en_GB\n}\n```\n",
    " Common Types and Aspects > Entity Timezones\nentity, Timezones, code list, timezone, @sap/cds/common\nRepresents time zone codes as per IANA tz database, supporting long keys for detailed location information.\n\n```cds\nentity sap.common.Timezones : CodeList {\n  key code : String(100); //> for example, Europe/Berlin\n}\n```\n",
    " Common Types and Aspects > SQL Persistence\nSQL, persistence, code list, Countries, table definition\nShows resulting SQL persistence structure for the Countries code list, mapping CDS model definitions to database schema.\n\n```sql\nCREATE TABLE sap_common_Countries (\n  name NVARCHAR(255),\n  descr NVARCHAR(1000),\n  code NVARCHAR(3),\n  PRIMARY KEY(code)\n);\n```\n",
    " Common Types and Aspects > Aspects for Localized Data\ncds modeling, localized data, entity, texts entity, unfold localized\nExample of an entity with localized fields. CDS will unfold these into additional '.texts' entities and tables for handling translations.\n\n```cds\nentity Foo {\n  key ID : UUID;\n  name   : localized String;\n  descr  : localized String;\n}\n```\n",
    " Common Types and Aspects > Aspects for Localized Data\nlocalized data, entity, texts entity, Locale, UUID\nThe unfolded '.texts' entity for storing translations of the localized fields for each main entity record.\n\n```cds\nentity Foo.texts {\n  key locale : sap.common.Locale;\n  key ID : UUID;\n  name   : String;\n  descr  : String;\n}\n```\n",
    " Common Types and Aspects > Aspect TextsAspect\naspect, localized data, TextsAspect, Locale, @sap/cds/common\nAspect used as the base for all generated '.texts' entities that capture localized data. Can be extended to influence all texts tables.\n\n```cds\naspect sap.common.TextsAspect {\n  key locale: sap.common.Locale;\n}\n```\n",
    " Common Types and Aspects > Type Locale\ntype definition, Locale, language code, @sap/cds/common\nDefines a locale type based on String(14), used for language/country variants in i18n scenarios.\n\n```cds\ntype sap.common.Locale : String(14) @title: '{i18n>LanguageCode}';\n```\n",
    " Common Types and Aspects > SQL Persistence\nSQL, localized data, texts table, translations\nDatabase table definition for storing translations for each record and locale. Used in implementation of localized entities.\n\n```sql\n-- _texts table for translations\nCREATE TABLE Foo_texts (\n  ID NVARCHAR(36),\n  locale NVARCHAR(14),\n  name NVARCHAR(255),\n  descr NVARCHAR(1000),\n  PRIMARY KEY(ID, locale)\n);\n```\n",
    " Common Types and Aspects > SQL Persistence\nSQL, localized data, view, fallback, translations\nSQL view for reading localized fields with automatic fallback to default language if no translation is available for the current session locale.\n\n```sql\n-- view to easily read localized texts with automatic fallback\nCREATE VIEW localized_Foo AS SELECT\n  code,\n  COALESCE (localized.name, name) AS name,\n  COALESCE (localized.descr, descr) AS descr\nFROM Foo (\n  LEFT JOIN Foo_texts AS localized\n    ON localized.code= code\n    AND localized.locale = SESSION_CONTEXT('locale')\n)\n```\n",
    " Common Types and Aspects > Providing Initial Data\ncsv, initial data, Countries, code list, sample data\nSample CSV data for prepopulating the Countries code list entity. Used for providing initial data to the database.\n\n```csv\ncode;name;descr\nAU;Australia;Commonwealth of Australia\nCA;Canada;Canada\nCN;China;People's Republic of China (PRC)\nFR;France;French Republic\nDE;Germany;Federal Republic of Germany\nIN;India;Republic of India\nIL;Israel;State of Israel\nMM;Myanmar;Republic of the Union of Myanmar\nGB;United Kingdom;United Kingdom of Great Britain and Northern Ireland\nUS;United States;United States of America (USA)\nEU;European Union;European Union\n```\n",
    " Common Types and Aspects > Add Translated Texts\ncsv, translations, Countries_texts, localized data, sample data\nSample CSV file structure for providing German translations for entries in the Countries_texts entity.\n\n```csv\ncode;locale;name;descr\nAU;de;Australien;Commonwealth Australien\nCA;de;Kanada;Canada\nCN;de;China;Volksrepublik China\nFR;de;Frankreich;Republik Frankreich\nDE;de;Deutschland;Bundesrepublik Deutschland\nIN;de;Indien;Republik Indien\nIL;de;Israel;Staat Israel\nMM;de;Myanmar;Republik der Union Myanmar\nGB;de;Vereinigtes Königreich;Vereinigtes Königreich Großbritannien und Nordirland\nUS;de;Vereinigte Staaten;Vereinigte Staaten von Amerika\nEU;de;Europäische Union;Europäische Union\n```\n",
    " Common Types and Aspects > Using Prebuilt Content Package\nnpm, installation, initial data, @sap/cds-common-content, reuse package\nInstalls the @sap/cds-common-content package which provides prebuilt code list data. Used for seeding databases with standard code lists.\n\n```shell\nnpm add @sap/cds-common-content --save\n```\n",
    " Common Types and Aspects > Using Prebuilt Content Package\nimport, common content, code list, @sap/cds-common-content\nImports all model definitions provided by the @sap/cds-common-content package for use within CDS models.\n\n```cds\nusing from '@sap/cds-common-content';\n```\n",
    " Common Types and Aspects > Adding Detailed Fields as of [ISO 3166-1]\nextend, Countries, ISO 3166-1, entity extension\nExtends the Countries code list with additional fields for more detailed ISO codes and country attributes. Demonstrates flexibility in adapting minimalistic code lists.\n\n```cds\nusing { sap.common.Countries } from '@sap/cds/common';\nextend Countries {\n  numcode : Integer; //> ISO 3166-1 three-digit numeric codes\n  alpha3 : String(3); //> ISO 3166-1 three-letter alpha codes\n  alpha4 : String(4); //> ISO 3166-3 four-letter alpha codes\n  independent : Boolean;\n  status : String(111);\n  statusRemark : String(1111);\n  remarkPart3 : String(1111);\n}\n```\n",
    " Common Types and Aspects > Protecting Certain Entries > Programmatic Solution\nentity, code list, custom logic, handler, DELETE, protection\nCustom JavaScript handler to prevent deletion of critical PaymentMethods code list entries. Demonstrates programmatic protection of code list data.\n\n```js\nsrv.on ('DELETE', 'PaymentMethods', req=>{\n  const entry = req.query.DELETE.where[2].val\n  if (['Main','Travel'].includes(entry))\n    return req.reject(403, 'these entries must not be deleted')\n})\n```\n",
    " Common Types and Aspects > Using Different Foreign Keys\nentity, extend, code list, foreign key, Country, customization\nShows how to extend the standard Countries code list to use numeric ISO codes as foreign keys and define a custom Country type. Enables backward-compatible model changes.\n\n```cds\nnamespace your.common;\nusing { sap.common.Countries } from '@sap/cds/common';\n\n// Extend Countries code list with fields for numeric codes\nextend Countries {\n  numcode : Integer; //> ISO 3166-1 three-digit numeric codes\n}\n\n// Define an own Country type using numcodes for foreign keys\ntype Country : Association to Countries { numcode };\n```\n",
    " Common Types and Aspects > Using Different Foreign Keys\nentity, custom type, association, your.common.Country\nDemonstrates the use of a custom-defined Country type in a model, promoting flexibility and reuse.\n\n```cds\nusing { your.common.Country } from './your-common.2';\n\nentity Addresses {\n  //...\n  country : Country;\n}\n```\n",
    " Common Types and Aspects > Mapping to SAP S/4HANA or ABAP Table Signatures\nprojection, mapping, entity, Countries, S/4HANA, ABAP\nProvides projections to expose standard Countries entity under fields compatible with SAP S/4HANA or ABAP table signatures, allowing seamless integration.\n\n```cds\nusing { sap.common.Countries } from '@sap/cds/common';\nentity Countries4GFN as projection on Countries {\n  code as CountryCodeAlpha2,\n  name as CountryShortName,\n  // ...\n}\nentity Countries4ABAP as projection on Countries {\n  code as LAND,\n  // ...\n}\n```\n",
    " Common Types and Aspects > Defining a New Code List Entity\nentity, code list, custom code list, Regions, extend, composition, @sap/cds/common\nDefines a custom Regions code list entity and extends Countries to establish a bi-directional composition for country subdivisions.\n\n```cds\nusing sap from '@sap/cds/common';\n\n// new code list for regions\nentity Regions : sap.common.CodeList {\n  key code : String(5); // ISO 3166-2 alpha5 codes, like DE-BW\n  country  : Association to sap.common.Countries;\n}\n\n// bi-directionally associate Regions with Countries\nextend sap.common.Countries {\n  regions : Composition of many Regions on regions.country = $self;\n}\n```\n",
    " Common Types and Aspects > Defining a New Reuse Type\ntype definition, custom type, Region, association, Regions\nDefines a new reuse type 'Region' as an association to the custom Regions entity, following the reuse pattern of @sap/cds/common.\n\n```cds\ntype Region : Association to Regions;\n```\n",
    " Common Types and Aspects > Using the New Reuse Type and Code List\nentity, reuse type, Region, custom code list, Addresses\nIllustrates usage of predefined and custom reuse types in an entity, enabling standardized and extendable references to code lists.\n\n```cds\nusing { Country, Region } from './your-common.4.2';\nentity Addresses {\n  street  : String;\n  town    : String;\n  country : Country; //> pre-defined reuse type\n  region  : Region; //> your custom reuse type\n}\n```\n",
    " Common Types and Aspects > Exclude Outdated Entries from Pick Lists (Optional)\nextend, Countries, validity, validTo, code list\nExtends the Countries entity to add a validity end date, supporting code list items that may become obsolete.\n\n```cds\nusing { sap.common.Countries } from '@sap/cds/common';\nextend Countries with { validTo: Date default '9999-12-31'; }\n```\n",
    " Common Types and Aspects > Model Pick List Entity\nprojection, Countries, pick list, validity\nDefines a pick list projection for Countries, excluding entries which are expired. Used for dynamic UI value helps.\n\n```cds\nentity CountriesPickList as projection on sap.common.Countries where validTo >= $now;\n```\n",
    " Common Types and Aspects > Include Pick List with Validity on the UI\nannotation, UI, OData, ValueList, pick list\nCDS annotations configuring a UI field with a value help (pick list) referencing a filtered countries entity, typically for Fiori UI integration.\n\n```cds\nannotate YourService.EntityName with {\n\n  countries @(\n    Common: {\n      Text: country.name , // TextArrangement: #TextOnly,\n      ValueList: {\n        Label: 'Country Value Help',\n        CollectionPath: 'CountriesPickList',\n        Parameters: [\n          { $Type: 'Common.ValueListParameterInOut',\n            LocalDataProperty: country_code,\n            ValueListProperty: 'code'\n          },\n          { $Type: 'Common.ValueListParameterDisplayOnly',\n            ValueListProperty: 'name'\n          }\n      ]\n      }\n    },\n  );\n}\n```\n",
    " Compiler Messages > anno-duplicate-unrelated-layer > Example\ncds, annotation, layers, error, compiler\nThis composite example demonstrates a scenario where annotations are defined in two unrelated layers, resulting in a compiler warning about duplicate annotations. The fourth file attempts to aggregate both annotations leading to ambiguity since the compiler cannot decide precedence.\n\n```cds\n// (1) Base.cds: Contains the artifact that should be annotated\nentity FooBar {  }\n\n// (2) FooAnnotate.cds: First unrelated layer to Base.cds\nusing from './Base';\nannotate FooBar with @Anno: 'Foo';\n\n// (3) BarAnnotate.cds: Second unrelated layer to Base.cds\nusing from './Base';\nannotate FooBar with @Anno: 'Bar';\n\n// (4) All.cds: Combine all files ❌\nusing from './FooAnnotate';\nusing from './BarAnnotate';\n```\n",
    " Compiler Messages > anno-duplicate-unrelated-layer > How to Fix\ncds, annotation, layers, fix\nThis code shows how to resolve the duplicate annotation error by assigning a new annotation to the combined file, which gives it precedence and eliminates ambiguity in unrelated layers.\n\n```cds\n// (4) All.cds: Combine all files\nusing from './FooAnnotate';\nusing from './BarAnnotate';\n// This annotation has precedence.\nannotate FooBar with @Anno: 'Bar';\n```\n",
    " Compiler Messages > anno-duplicate-unrelated-layer > How to Fix\ncds, annotation, layers, dependency\nThis code shows how making one annotation file depend on another establishes a relationship, resolving the unrelated layers issue and allowing the compiler to determine annotation precedence.\n\n```cds\n// (3) BarAnnotate.cds: Now depends on (2)\nusing from './FooAnnotate';\nannotate FooBar with @Anno: 'Bar';\n```\n",
    " Compiler Messages > anno-missing-rewrite > Example\ncds, annotation, propagation, error\nPropagating annotation with an expression referencing an element that becomes unavailable in a derived type results in a compiler error. Demonstrates invalid annotation path propagation.\n\n```cds\ntype T : {\n    @anno: (sibling)\n    elem: String;\n    sibling: String;\n};\ntype TString : T:elem; // ❌ there is no `sibling`\n```\n",
    " Compiler Messages > anno-missing-rewrite > How to Fix\ncds, annotation, fix\nTo resolve propagation errors for annotations with expressions, override the annotation by setting its value to null or assigning a new value using direct annotation or annotate statements.\n\n```cds\n// (1) direct annotation\n@anno: null\ntype TString : T:elem;\n\n// (2) annotate statement\ntype TString : T:elem;\nannotate TString with @(anno: null);\n```\n",
    " Compiler Messages > check-proper-type-of > Example\ncds, type of, calculated field, missing type, error\nShows an error when using 'type of' on a calculated field that lacks an explicit type, resulting in an element without proper type information required by some backend renderers.\n\n```cds\nentity Foo {\n  key id : Integer;\n};\nview ViewFoo as select from Foo {\n  1+1 as calculatedField @(anno)\n};\nentity Bar {\n  // ❌ `e` has no proper type but has the annotation `@anno`.\n  e : ViewFoo:calculatedField;\n};\n```\n",
    " Compiler Messages > check-proper-type-of > How to Fix\ncds, type of, fix, type\nFix the missing type error by explicitly assigning a type to the calculated field in the CDS view projection.\n\n```cds\nview ViewFoo as select from Foo {\n  1+1 as calculatedField @(anno) : Integer\n};\n```\n",
    " Compiler Messages > def-duplicate-autoexposed > Example\ncds, auto-expose, service, namespace collision, error\nDemonstrates a name collision error due to auto-exposing multiple entities with the same name (ignoring namespaces) within a single service. The compiler cannot resolve which entity to expose.\n\n```cds\n// (1)\nentity ns.first.Foo {\n  key parent : Association to one ns.Base;\n};\n// (2)\nentity ns.second.Foo {\n  key parent : Association to one ns.Base;\n};\n// (3)\nentity ns.Base {\n  key id    : UUID;\n  to_first  : Composition of many  ns.first.Foo;\n  to_second : Composition of many ns.second.Foo;\n}\nservice ns.MyService {\n  // (4) ❌\n  entity BaseView as projection on ns.Base;\n};\n```\n",
    " Compiler Messages > def-duplicate-autoexposed > How to Fix\ncds, auto-expose, service, fix\nFixes entity name collisions by explicitly exposing entities under unique names (using their sub-namespaces) within the service, enabling the compiler to redirect associations correctly.\n\n```cds\nentity first.Foo as projection on ns.first.Foo;   // (5)\nentity second.Foo as projection on ns.second.Foo; // (6)\n```\n",
    " Compiler Messages > def-missing-type > Example\njson, CSN, type, missing type, error\nCSN definition of a type artifact without explicit type information results in missing-type error. This lacks the required 'elements' or 'type' property.\n\n```json\n{\n  \"definitions\": {\n    \"MainType\": {\n      \"kind\": \"type\"\n    }\n  }\n}\n```\n",
    " Compiler Messages > def-missing-type > How to Fix\njson, CSN, type, fix\nTo resolve the missing-type error in CSN artifacts, add 'elements' or provide specific type information, creating a structured type.\n\n```json\n{\n  \"definitions\": {\n    \"MainType\": {\n      \"kind\": \"type\",\n      \"elements\": {\n        \"id\": {\n          \"type\": \"cds.String\"\n        }\n      }\n    }\n  }\n}\n```\n",
    " Compiler Messages > def-upcoming-virtual-change > Example\ncds, projection, virtual field, compiler warning\nShows an upcoming behavioral change in how virtual fields are treated in projections. In v6, 'Proj:a' becomes a new element, not a reference. May affect runtime expectations.\n\n```cds\nentity Source {\n  key ID : String;\n  a : String;\n};\n\nentity Proj as projection on Source {\n  ID,\n  virtual a, // ❌ behavior will change in v6\n};\n```\n",
    " Compiler Messages > def-upcoming-virtual-change > How to Fix\ncds, projection, virtual field, fix\nFix: Retain the reference to the original element by prepending a table alias in the projection, so that it's not treated as a newly introduced field in newer compiler versions.\n\n```cds\n// (1) prepend a table alias\nentity V as projection on E {\n  ID,\n  virtual E.a, // ok\n};\n```\n",
    " Compiler Messages > def-upcoming-virtual-change > How to Fix\ncds, projection, virtual field, fix\nAlternative fix: Preserve the original reference by adding a column alias, keeping projections stable after the v6 compiler change.\n\n```cds\n// (2) add an alias\nentity V as projection on E {\n  ID,\n  virtual a as a, // ok\n};\n```\n",
    " Compiler Messages > extend-repeated-intralayer > Example\ncds, extend, cyclic dependency, error\nCyclic dependencies cause multiple extensions in the same artifact layer, leading to unstable element ordering. The compiler warns about this situation.\n\n```cds\n// (1) Definition.cds\nusing from './Extension.cds';\nentity FooBar { };\nextend FooBar { foo: Integer; }; // ❌\n\n// (2) Extension.cds\nusing from './Definition.cds';\nextend FooBar { bar: Integer; }; // ❌\n```\n",
    " Compiler Messages > extend-repeated-intralayer > How to Fix\ncds, extend, cyclic dependency, fix\nFix: Combine all extensions for the same artifact in a single extension block to ensure stable element order and avoid compiler warnings.\n\n```cds\n// (2) Extension.cds : Now contains both extensions\nusing from './Definition.cds';\nextend FooBar {\n  foo : Integer;\n  bar : Integer;\n}\n```\n",
    " Compiler Messages > extend-unrelated-layer > Example\ncds, extend, layers, error\nUnrelated layers extending the same artifact can result in unstable element ordering. The example demonstrates the scenario where 'FooBar' is extended in two unrelated places.\n\n```cds\n// (1) Base.cds: Contains the artifact that should be extended\nentity FooBar {  }\n\n// (2) FooExtend.cds: First unrelated layer to Base.cds\nusing from './Base';\nextend FooBar { foo : Integer; }\n\n// (3) BarExtend.cds: Second unrelated layer to Base.cds\nusing from './Base';\nextend FooBar { bar : Integer; }\n\n// (4) ❌ All.cds: Combine all files\nusing from './FooExtend';\nusing from './BarExtend';\n```\n",
    " Compiler Messages > extend-unrelated-layer > How to Fix\ncds, extend, layers, fix\nFix: Move all extensions for the same artifact into the same layer/file to establish a defined order and avoid ambiguity.\n\n```cds\n// (2) FooExtend.cds\nusing from './Base';\nextend FooBar {\n  foo : Integer;\n  bar : Integer;\n}\n```\n",
    " Compiler Messages > file-unexpected-case-mismatch > Example\ncds, using, filename, case sensitivity, error\nDemonstrates a case-mismatch error where the 'using' filename does not match the file's case on disk, leading to portability issues on case-sensitive filesystems.\n\n```cds\n// index.cds\nusing from './Model';\n\n// Directory tree:\n// ├── index.cds\n// └── model.cds\n```\n",
    " Compiler Messages > redirected-to-ambiguous > Example\ncds, redirected association, view, ambiguous\nShows how redirecting an association in a view where the target entity appears multiple times (directly or as an alias) causes ambiguity and a compiler error.\n\n```cds\nentity Main {\n      key id : Integer;\n    toTarget : Association to Target;\n}\n\nentity Target {\n    key id : Integer;\n}\n\nview View as select from\n    Main,\n    Target,\n    Target as Duplicate\n{\n    // ❌ This redirection can't be resolved:\n    Main.toTarget : redirected to View\n};\n```\n",
    " Compiler Messages > redirected-to-ambiguous > How to Fix\ncds, redirected association, view, fix\nFix: Ensure that the original target appears only once in the sources, removing ambiguous aliases to allow correct association redirection.\n\n```cds\nview View as select from Main, Target {\n    Main.toTarget : redirected to View\n};\n```\n",
    " Compiler Messages > redirected-to-ambiguous > How to Fix\ncds, redirected association, view, fix, mixin\nAlternatively, resolve ambiguity by defining a mixin association with an explicit ON condition to guide the redirection logic.\n\n```cds\nview View as select from Main, Target mixin {\n    toMain : Association to View on Main.id = Target.id;\n} into {\n    Main.id   as mainId,\n    Target.id as targetId,\n    toMain\n};\n```\n",
    " Compiler Messages > redirected-to-complex > Example\ncds, redirected association, complex view, cross join\nDemonstrates that redirecting an association to a complex view (e.g., cross join or join, union) may unintentionally change to-many/to-one cardinality and triggers a compiler 'info' message.\n\n```cds\nentity Main {\n    key id : Integer;\n    // self association for example purpose only\n    toMain : Association to one Main;\n}\nentity Secondary {\n    content: String;\n};\nentity CrossJoin as SELECT from Main, Secondary;\nentity RedirectToComplex as projection on Main {\n    id,\n    toMain: redirected to CrossJoin, // ❌\n};\n```\n",
    " Compiler Messages > redirected-to-unrelated > Example\ncds, redirected association, projection, unrelated\nProjection tries to redirect an association to an entity (Secondary) without any relationship to the original association’s target, leading to a compiler error about unrelated redirection.\n\n```cds\nentity Main {\n    key id : Integer;\n    // self association for example purpose only\n    toMain : Association to Main;\n}\nentity Secondary {\n    key id : Integer;\n}\nentity InvalidRedirect as projection on Main {\n    id,\n    // ❌ Invalid redirection\n    toMain: redirected to Secondary,\n};\n```\n",
    " Compiler Messages > redirected-to-unrelated > Example\ncds, redirected association, multiple redirections, error\nMultiple layers of redirection create ambiguity—SecondRedirect incorrectly tries to redirect to Main, which is not the original association’s target at this point. Raises an error.\n\n```cds\nentity Main {\n    key id : Integer;\n    toMain : Association to Main;\n}\nentity FirstRedirect as projection on Main {\n    id,\n    toMain: redirected to FirstRedirect,\n}\nentity SecondRedirect as projection on FirstRedirect {\n    id,\n    // Invalid redirection\n    toMain: redirected to Main,\n}\n```\n",
    " Compiler Messages > redirected-to-unrelated > How to Fix\ncds, redirected association, mixin, fix\nFix: Use a mixin with an explicit ON condition to redefine the association when redirection is not feasible due to lack of connection.\n\n```cds\nview SecondRedirect as select from FirstRedirect mixin {\n    toMain : Association to Main on id = $self.id;\n} into {\n    FirstRedirect.id as id,\n    toMain\n};\n```\n",
    " Compiler Messages > rewrite-not-supported > Example\ncds, ON condition, association, rewrite not supported\nIllustrates how the compiler cannot automatically rewrite ON-conditions when projecting unmanaged associations, obligating explicit definition from the user for correct association logic.\n\n```cds\nentity Base {\n  key id     : Integer;\n  primary    : Association to Primary on primary.id = primary_id;\n  primary_id : Integer;\n}\n\nentity Primary {\n  key id       : Integer;\n  secondary    : Association to Secondary on secondary.id = secondary_id;\n  secondary_id : Integer;\n}\n\nentity Secondary {\n  key id : Integer;\n  text   : LargeString;\n}\n\nentity View as select from Base {\n  id,\n  primary.secondary // ❌ The ON condition isn't rewritten here\n};\n```\n",
    " Compiler Messages > rewrite-not-supported > How to Fix\ncds, ON condition, association, rewrite, fix\nFix: Add an explicit ON condition to associations in view projections where automatic rewriting is not supported, ensuring correct join logic.\n\n```cds\nentity View as select from Base {\n  id,\n  primary.secondary_id,\n  primary.secondary: redirected to Secondary on\n    secondary.id = secondary_id\n};\n```\n",
    " Compiler Messages > rewrite-undefined-key > Example\ncds, managed association, projection, foreign key missing, error\nError shown when a projection omits foreign key fields required by a managed association, preventing the compiler from redirecting the association correctly within the service.\n\n```cds\nentity model.Base {\n  key ID : UUID;\n  toTarget : Association to model.Target; // (1)\n}\nentity model.Target {\n  key ID : UUID; // (2)\n  field : String;\n}\n\nservice S {\n  entity Base as projection on model.Base; // ❌ (3) Can't redirect 'toTarget'\n\n  entity Target as projection on model.Target {\n    field, // (4) No 'ID'\n  };\n}\n```\n",
    " Compiler Messages > rewrite-undefined-key > How to Fix\ncds, managed association, projection, excluding, fix\nFix: Exclude the problematic association from the projection to avoid the error, if its exposure is not required in the service.\n\n```cds\nservice S {\n  entity Base as projection on model.Base\n    excluding { toTarget };\n  // ...\n}\n```\n",
    " Compiler Messages > rewrite-undefined-key > How to Fix\ncds, managed association, projection, fix\nFix: Add the required foreign key field(s) (e.g., ID) to the projected entity to enable correct redirection of managed associations.\n\n```cds\nservice S {\n  // ...\n  entity Target as projection on model.Target {\n    field, ID, // Explicitly select element ID\n  };\n}\n```\n",
    " Compiler Messages > rewrite-undefined-key > How to Fix\ncds, managed association, projection, explicit redirection, fix\nAlternative fix: Map foreign key to a differently-named or derived element by explicitly redirecting the association and reconciling keys as needed.\n\n```cds\nservice S {\n  entity Base as projection on model.Base {\n    ID,\n    toTarget : redirected to Target { fakeID as ID }, // (1)\n  };\n  entity Target as projection on model.Target {\n    calculateKey() as fakeID : UUID,                  // (2)\n    field,\n  };\n}\n```\n",
    " Compiler Messages > syntax-expecting-unsigned-int > Example\ncds, syntax, safe integer, error\nDemonstrates errors triggered by using unsafe or non-integer values (exceeding max safe integer, or decimal) for type declarations requiring unsigned integers.\n\n```cds\ntype LengthIsUnsafe : String(9007199254740992); // ❌\ntype NotAnInteger : String(42.1);               // ❌\n```\n",
    " Compiler Messages > syntax-expecting-unsigned-int > How to Fix\ncds, syntax, safe integer, fix\nFix: Provide safe, valid unsigned integer values for type parameters to silence compiler errors regarding range and format.\n\n```cds\ntype LengthIsSafe : String(9007199254740991);\ntype AnInteger : String(42);\n```\n",
    " Compiler Messages > type-missing-enum-value > Example\ncds, enum, explicit value, warning\nShows a warning raised for integer enums missing explicit values. Unlike string-based enums, integer-based enums require explicit values for each entry.\n\n```cds\nentity Books {\n  // …\n  category: Integer enum {\n    Fiction; // ❌\n    Action;  // ❌\n    // …\n  } default #Action;\n};\n```\n",
    " Compiler Messages > type-missing-enum-value > How to Fix\ncds, enum, explicit value, fix\nFix: Assign explicit numeric values to integer-enum entries to ensure reliable deserialization and avoid compiler warnings.\n\n```cds\nentity Books {\n  // …\n  category: Integer enum {\n    Fiction = 1;\n    Action = 2;\n    // …\n  } default #Action;\n};\n```\n",
    " Compiler Messages > type-unexpected-foreign-keys > Example\ncds, aspect, composition, foreign key, error\nShows an error when specifying a foreign key list in a composition of an aspect. Only entity compositions support explicit foreign keys.\n\n```cds\naspect Item {\n  key ID : UUID;\n  field : String;\n};\nentity Model {\n  key ID : UUID;\n  Item : Composition of Item { ID }; // ❌\n};\n```\n",
    " Compiler Messages > type-unexpected-foreign-keys > How to Fix\ncds, aspect, composition, entity, fix\nFix: Use a user-defined entity based on the aspect when explicit foreign keys are needed in a composition, which allows the compiler to manage keys properly.\n\n```cds\naspect Item {\n  key ID : UUID;\n  field : String;\n};\nentity Model {\n  key ID : UUID;\n  Item : Composition of Model.Item { ID }; // ok\n};\nentity Model.Item : Item { };\n```\n",
    " Compiler Messages > type-unexpected-on-condition > Example\ncds, aspect, composition, ON condition, error\nShows an error when specifying an ON condition in a composition of an aspect, which only entities, not aspects, support.\n\n```cds\naspect Item {\n  key ID : UUID;\n  field : String;\n};\nentity Model {\n  key ID : UUID;\n  Item : Composition of Item on Item.ID = ID; // ❌\n};\n```\n",
    " Compiler Messages > type-unexpected-on-condition > How to Fix\ncds, aspect, composition, entity, fix\nFix: Use a user-defined entity extending the aspect to allow explicit ON-conditions in compositions, which aligns with compiler requirements.\n\n```cds\naspect Item {\n  key ID : UUID;\n  field : String;\n};\nentity Model {\n  key ID : UUID;\n  Item : Composition of Model.Item on Item.ID = ID; // ok\n};\nentity Model.Item : Item { };\n```\n",
    " Compiler Messages > wildcard-excluding-one > Example\ncds, projection, wildcard, excluding, info\nThe example demonstrates a warning that's triggered when you replace an element included via a wildcard in a projection. The 'id' column is duplicated by a new assignment.\n\n```cds\nentity Book {\n  key  id : String;\n     isbn : String;\n  content : String;\n};\nentity IsbnBook as projection on Book {\n  *,\n  isbn as id, // ❌\n};\n```\n",
    " Compiler Messages > wildcard-excluding-one > How to Fix\ncds, projection, wildcard, excluding, fix\nFix: Explicitly exclude the replaced element (id) from the wildcard in the projection, preventing warnings about shadowed or re-assigned elements.\n\n```cds\nentity IsbnBook as projection on Book {\n  *,\n  isbn as id\n} excluding { id };\n```\n",
    " On The Nature of Models > What is a CDS Model? > In Plain Coding at Runtime\nJavaScript, model creation, CSN, in-memory, runtime, plain object, cds modeling\nThis JavaScript code snippet demonstrates how to define a CDS model manually as an in-memory CSN JavaScript object. The model comprises two entities: Products (with localized fields) and Orders (with an association to Products). It is then compiled and printed as YAML using the CDS compiler API. Useful for dynamically constructing models at runtime or in tests.\n\n```js\nconst cds = require('@sap/cds')\n\n// define the model\nvar model = {definitions:{\n    Products: {kind:'entity', elements:{\n        ID: {type:'Integer', key:true},\n        title: {type:'String', length:11, localized:true},\n        description: {type:'String', localized:true},\n    }},\n    Orders: {kind:'entity', elements:{\n        product: {type:'Association', target:'Products'},\n        quantity: {type:'Integer'},\n    }},\n}}\n\n// do something with it\nconsole.log (cds.compile.to.yaml (model))\n```\n",
    " On The Nature of Models > What is a CDS Model? > Parsed at Runtime\nJavaScript, model parsing, CDL, parse at runtime, cds modeling\nThis JavaScript sample shows how to parse a CDS model from a CDL string at runtime using `cds.parse`. The model string defines two entities (Products and Orders), which are parsed to a CSN object, compiled to YAML, and printed. This is ideal for scenarios where you have CDS definitions as text or need to process models dynamically.\n\n```js\nconst cds = require('@sap/cds')\n\n// define the model\nvar model = cds.parse (`\n    entity Products {\n        key ID: Integer;\n        title: localized String(11);\n        description: localized String;\n    }\n    entity Orders {\n        product: Association to Products;\n        quantity: Integer;\n    }\n`)\n\n// do something with it\nconsole.log (cds.compile.to.yaml (model))\n```\n",
    " On The Nature of Models > What is a CDS Model? > From _.cds_ Source Files\ncds, project setup, model definition, CDL, cds modeling, .cds file\nExample of a CDS source file (.cds) defining two entities, Products and Orders. This shows the canonical way to express a model using CDS Language (CDL) and is meant to be parsed or loaded into the CDS runtime using APIs, CLI, or for static project modeling.\n\n```cds\n// some.cds source file\nentity Products {\n    key ID: Integer;\n    title: localized String(11);\n    description: localized String;\n}\nentity Orders {\n    product: Association to Products;\n    quantity: Integer;\n}\n```\n",
    " On The Nature of Models > What is a CDS Model? > From _.cds_ Source Files\nJavaScript, cds, model loading, .cds file, project setup, CLI\nJavaScript code that loads and parses a CDS model from an external .cds source file using `cds.get`, compiles it to YAML, and prints the result. This is equivalent to running `cds ./some.cds -2 yaml` on the CLI. Useful for programmatically converting CDS definitions to other formats or processing them in scripts or tools.\n\n```js\nconst cds = require('@sap/cds')\ncds.get('./some.cds') .then (cds.compile.to.yaml) .then (console.log)\n```\n",
    " On The Nature of Models > What is a CDS Model? > From _.json_ Files\njson, model definition, CSN, cds modeling, .json file\nThis JSON snippet defines a CDS model in CSN (Core Schema Notation) format, mirroring the previous examples (Products and Orders). It can be loaded into the CDS runtime using the `cds.get` function for further processing, compilation, or transformation. Useful for sharing, serialization, or manipulation of CDS models as plain data.\n\n```json\n{\"definitions\": {\n    \"Products\": {\n        \"kind\": \"entity\",\n        \"elements\": {\n            \"ID\": { \"type\": \"Integer\", \"key\": true },\n            \"title\": { \"type\": \"String\", \"length\": 11, \"localized\": true },\n            \"description\": { \"type\": \"String\", \"localized\": true }\n        }\n    },\n    \"Orders\": {\n        \"kind\": \"entity\",\n        \"elements\": {\n            \"product\": { \"type\": \"Association\", \"target\": \"Products\" },\n            \"quantity\": { \"type\": \"Integer\" }\n        }\n    }\n}}\n```\n",
    " On The Nature of Models > What is a CDS Model? > From _.json_ Files\nJavaScript, cds, model loading, .json file, CSN\nJavaScript code to load a CSN model from a JSON file using `cds.get`, compile it to YAML, and print. This approach is suited for scenarios where the model is stored or exchanged as JSON (machine-readable), and needs conversion for other backends or examination.\n\n```js\nconst cds = require('@sap/cds')\ncds.get('./some.json') .then (cds.compile.to.yaml) .then (console.log)\n```\n",
    " CAP Service SDK for Node.js\nservice definition, cds modeling, custom logic, Node.js, event handler, implementation, CAP Service\nDefines a service in CDS and implements custom logic in Node.js by registering an event handler with srv.on. This is the canonical pattern for extending CAP services with domain-specific logic using the CAP Service SDK for Node.js.\n\n```js\n// my-service.cds\nservice MyService {\n  entity Books as projection on my.Books;\n}\n\n// my-service.js\nmodule.exports = srv => {\n  srv.on('myCustomAction', async (req) => {\n    // custom logic here\n    return await someAsyncFunction(req.data);\n  });\n};\n```\n",
    " CAP Service SDK for Node.js\ndatabase, read/write, cds.DatabaseService, cds.ql, data access, query\nPerforms a read operation from the main database using cds.DatabaseService and SELECT from cds.ql in a CAP service handler. Illustrates data access in Node.js event handlers for CAP services.\n\n```js\nconst cds = require('@sap/cds');\n\nmodule.exports = cds.service.impl(function () {\n  this.on('READ', 'Books', async (req) => {\n    const tx = cds.transaction(req);\n    const books = await tx.run(SELECT.from('my.Books'));\n    return books;\n  });\n});\n```\n",
    " CAP Service SDK for Node.js\nremote service, consume service, cds.RemoteService, integration, read, write\nShows how to connect to and proxy operations to a remote service in a CAP Node.js service implementation, using cds.RemoteService.\n\n```js\nconst cds = require('@sap/cds');\n\nmodule.exports = cds.service.impl(async function () {\n  const remoteService = await cds.connect.to('SomeRemoteService');\n  this.on('READ', 'ExternalData', req => remoteService.run(req.query));\n});\n```\n",
    " CAP Service SDK for Node.js\nmessaging, event emission, asynchronous event, cds.MessagingService, emit\nEmits an asynchronous event using cds.MessagingService within a custom CAP service handler. Required for event-driven architectures in CAP with Node.js.\n\n```js\nconst cds = require('@sap/cds');\n\nmodule.exports = cds.service.impl(function () {\n  this.on('myAction', async req => {\n    await cds.emit('my.topic.MyEvent', { id: req.data.ID });\n  });\n});\n```\n",
    " CAP Service SDK for Node.js\nserver, CAP application, bootstrap, cds.server\nBootstraps a CAP Node.js application server using cds.server(), automatically serving all declared services and handlers.\n\n```js\nconst cds = require('@sap/cds');\ncds.server();\n```\n",
    " The *cds* Façade Object\ncds, require, compile, CAP Node.js API, CSN\nShows how to import the cds facade object and use its compile method to compile a CDS entity definition to CSN at runtime. Demonstrates the central entry point to all CAP Node.js APIs.\n\n```js\nconst cds = require('@sap/cds')\nlet csn = cds.compile(`entity Foo {}`)\n```\n",
    " The *cds* Façade Object\nrepl, cds repl, CSN, demo, try out\nDemonstrates use of the interactive cds repl shell to compile and inspect a CDS entity's CSN (Core Schema Notation) output. Useful for quickly trying out CDS expressions and receiving immediate results.\n\n```shell\n[dev] cds repl\nWelcome to cds repl v 7.3.0\n> cds.compile(`entity Foo { key ID : UUID }`)\n{ definitions: {\n  Foo: { kind: 'entity', elements: { ID: { key: true, type: 'cds.UUID' } } }\n}}\n```\n",
    " The *cds* Façade Object > Import classes and functions through the facade object only > **Good:**\nimport, best practice, cds toolkit, Request\nRecommended way to import classes and functions from the @sap/cds package via the facade. Ensures future compatibility and lazily loaded modules.\n\n```js\nconst { Request } = require('@sap/cds')\n```\n",
    " The *cds* Façade Object > Import classes and functions through the facade object only > **Bad:**\nimport, bad practice, cds toolkit, Request\nShows a discouraged practice of importing modules directly from inside @sap/cds's internal paths, which is not stable and may break in future versions.\n\n```js\nconst Request = require('@sap/cds/lib/.../Request')\n```\n",
    " The *cds* Façade Object > Properties > cds. version\nversion, cds, property, conditional code\nDemonstrates how to retrieve the current version of the @sap/cds package and use it for writing version-specific logic in your code.\n\n```js\nconst [major, minor] = cds.version.split('.').map(Number)\nif (major < 6) // code for pre cds6 usage\n```\n",
    " The *cds* Façade Object > Properties > cds. home\nhome, property, installation folder, cds\nShows how to retrieve the installation folder path of the currently loaded @sap/cds module instance from a cds repl environment.\n\n```shell\n[dev] cds repl\n> cds.home // [!code focus]\n~/.npm/lib/node_modules/@sap/cds\n```\n",
    " The *cds* Façade Object > Properties > cds. root\nroot, property, project root, cds\nUses cds.root to programmatically resolve the project root directory to access files like package.json. Demonstrates working with project-local files regardless of the working directory.\n\n```js\n// Print current project's package name\nlet package_json = path.join (cds.root,'package.json')\nlet { name, description } = require(package_json)\nconsole.log ({ name, description })\n```\n",
    " The *cds* Façade Object > Properties > cds. cli\ncli, cds, command, argument parsing\nExample output showing the structure of cds.cli, which exposes the current cds command, arguments, and options. This can be used by plugins or custom servers for context-aware behavior.\n\n```json\nTrace : {\n  command: 'serve',\n  argv: [ 'all' ],\n  options: {\n    'with-mocks': true,\n    'in-memory?': true\n  }\n}\n```\n",
    " The *cds* Façade Object > Properties > cds. env\nenv, property, configuration, auth, cds\nShows accessing the current configuration for authentication requirements from cds.env. Useful for debugging or customizing behavior based on effective settings from multiple sources.\n\n```js\n[dev] cds repl\n> cds.env.requires.auth // [!code focus]\n{\n  kind: 'basic-auth',\n  strategy: 'mock',\n  users: {\n    alice: { tenant: 't1', roles: [ 'admin' ] },\n    bob: { tenant: 't1', roles: [ 'cds.ExtensionDeveloper' ] },\n    # ...,\n    '*': true\n  },\n  tenants: {\n    t1: { features: [ 'isbn' ] },\n    t2: { features: '*' }\n  }\n}\n```\n",
    " The *cds* Façade Object > Properties > cds. requires\nrequires, configuration, overlay, service lookup\nDemonstrates querying the configuration overlay for services using cds.env.requires. Shows that definition names not explicitly mapped will be undefined.\n\n```js\n[dev] cds repl\n> cds.env.requires.db              //> the effective config for db\n> cds.env.requires.reviews         //> the effective config for reviews\n> cds.env.requires.ReviewsService  //> undefined\n```\n",
    " The *cds* Façade Object > Properties > cds. requires\nrequires, configuration, overlay, service lookup\nAccessing the overlay with cds.requires shows both lookup names and definition names are supported, facilitating secure service access by definition name.\n\n```js\n[dev] cds repl\n> cds.requires.db                  //> the effective config for db\n> cds.requires.reviews             //> the effective config for reviews\n> cds.requires.ReviewsService      //> same as cds.requires.reviews\n```\n",
    " The *cds* Façade Object > Properties > cds. requires\nrequires, service overlay, Object.keys(), prototype chain\nDemonstrates the difference in own-property enumeration between cds.env.requires and the overlay cds.requires, highlighting prototype chain differences and their impact on lookups.\n\n```js\n[dev] cds repl\n> Object.keys(cds.env.requires) //> [ 'db', 'reviews' ]\n> Object.keys(cds.requires)     //> [ 'ReviewsService' ]\n```\n",
    " The *cds* Façade Object > Properties > cds. services\nservices, cds, service cache, iteration\nIllustrates several methods to access and iterate over cds.services: destructuring, array expansion, for-in, and for-of loops. Used to retrieve or process all defined service instances.\n\n```js\nlet { CatalogService, db } = cds.services\nlet all_services = [ ... cds.services ]\nfor (let k in cds.services) //... k is a services's name\nfor (let s of cds.services) //... s is an instance of cds.Service\n```\n",
    " The *cds* Façade Object > Properties > cds. model\nmodel, CDS model, bootstrapping\nShows how the effective CDS model is loaded during application bootstrapping using cds.load('*'), populating all defined services and entities into cds.model.\n\n```js\ncds.model = await cds.load('*')\n```\n",
    " The *cds* Façade Object > Properties > cds. app\napp, property, express, application\nInitializes the cds.app property by creating a new Express.js application, allowing middleware and routes registration during CAP server startup.\n\n```js\ncds.app = require('express')()\n```\n",
    " The *cds* Façade Object > Properties > cds. db\ndb, service, bootstrapping, connect, database\nEstablishes the primary database connection using cds.connect.to('db'), making it globally available as cds.db for data access throughout the CAP application.\n\n```js\ncds.db = await cds.connect.to('db')\n```\n",
    " The *cds* Façade Object > Properties > cds. db\nql, db, shortcut, query, Books\nShows that the global SELECT CQL operation is a shortcut for running the same query via cds.db.run, simplifying typical data access code in CAP Node.js.\n\n```js\nlet books = await SELECT.from(Books) // is a shortcut for:\nlet books = await cds.db.run ( SELECT.from(Books) )\n```\n",
    " The *cds* Façade Object > Methods > cds. error()\nerror, cds.error, error construction, helper, throw\nDemonstrates various ways to construct error objects using cds.error. Allows for quick and uniform error creation with optional details payload.\n\n```js\nlet e = new cds.error ('message')\nlet e = new cds.error ('message', { code, ... })\nlet e = new cds.error ({ message, code, ... })\n```\n",
    " The *cds* Façade Object > Methods > cds. error()\nerror, cds.error, throw, no new\nShows that cds.error, when called as a function, will throw immediately. Useful for asserting conditions and reducing boilerplate for error handling.\n\n```js\nlet e = foo || cds.error (`Expected 'foo' to be truthy, but got: ${foo}`)\n```\n",
    " The *cds* Façade Object > Methods > cds. error()\nerror, cds.error, template, util.format\nAllows use of tagged template strings with cds.error for readable and efficiently formatted error messages, taking advantage of Node's util.format.\n\n```js\nlet e = foo || cds.error `Expected 'foo' to be truthy, but got: ${foo}`\n```\n",
    " The *cds* Façade Object > Methods > cds. error()\nerror, cds.error.expected, expected, assertion\nUses cds.error.expected for succinct, intention-revealing error messages in code assertions. Suitable for testing and contract validation patterns.\n\n```js\nlet e = foo || cds.error.expected `${{foo}} to be truthy`\n```\n",
    " The *cds* Façade Object > Methods > cds. exit()\nexit, shutdown, graceful, event, cds\nShows how to register async shutdown handlers using cds.on('shutdown') to perform cleanup tasks before the process exits via cds.exit(). Important for graceful server termination.\n\n```js\ncds.on('shutdown', async()=> fs.promises.rm('some-file.json'))\ncds.on('shutdown', ()=> console.log('shutdown'))\ncds.exit() //> will rune above handlers before stopping the server\n```\n",
    " The *cds* Façade Object > Lifecycle Events\nevent, lifecycle, cds.on, EventEmitter, bootstrap, served, listening\nRegisters event handlers for core lifecycle events emitted by the cds object during CAP server initialization and operation. Enables hooks at defined points such as bootstrap or when serving starts.\n\n```js\nconst cds = require('@sap/cds')\ncds.on('bootstrap', ...)\ncds.on('served', ...)\ncds.on('listening', ...)\n```\n",
    " Providing Services > Service Definitions > Services as APIs\nservice definition, cds modeling\nDefines a CDS service named BookshopService, with Books and Authors entities and an action. Illustrates basic service modeling API exposure.\n\n```cds\nservice BookshopService {\n\n  entity Books {\n    key ID : UUID;\n    title  : String;\n    author : Association to Authors;\n  }\n\n  entity Authors {\n    key ID : UUID;\n    name   : String;\n    books  : Association to many Books on books.author = $self;\n  }\n\n  action submitOrder (book : Books:ID, quantity : Integer);\n\n}\n```\n",
    " Providing Services > Service Definitions > Services as Facades\nservice definition, projection, facade, cds modeling\nDefines a BookshopService with entity projections as facades on a domain model. Used to tailor data access per use case.\n\n```cds\nusing { sap.capire.bookshop as my } from '../db/schema';\nservice BookshopService {\n  entity Books as projection on my.Books;\n  entity Authors as projection on my.Authors;\n  action submitOrder (book : Books:ID, quantity : Integer);\n}\n```\n",
    " Providing Services > Service Definitions > Denormalized Views\nview, projection, readonly, cds modeling\nCreates a service exposing denormalized, readonly views on Books for distinct frontend use cases. Excludes sensitive fields and uses entity projection.\n\n```cds\nusing { sap.capire.bookshop as my } from '../db/schema';\n/** For serving end users */\nservice CatalogService @(path:'/browse') {\n\n  /** For displaying lists of Books */\n  @readonly entity ListOfBooks as projection on Books\n  excluding { descr };\n\n  /** For display in details pages */\n  @readonly entity Books as projection on my.Books { *,\n    author.name as author\n  } excluding { createdBy, modifiedBy };\n\n}\n```\n",
    " Providing Services > Service Definitions > Auto-Exposed Entities\nautoexpose, association, cds modeling\nShows use of @cds.autoexpose for code lists, so they are included in autoexposed services when referenced by associations.\n\n```cds\nservice Zoo {\n  entity Foo { //...\n    code : Association to SomeCodeList;\n  }\n}\n@cds.autoexpose entity SomeCodeList {...}\n```\n",
    " Providing Services > Service Definitions > Redirected Associations\nassociation, projection, redirected associations, cds modeling\nExposes Books and Authors as projections and demonstrates how associations are automatically redirected for navigation in the service layer.\n\n```cds\nservice AdminService {\n  entity Books as projection on my.Books;\n  entity Authors as projection on my.Authors;\n  //> AdminService.Authors.books refers to AdminService.Books\n}\n```\n",
    " Providing Services > Generic Providers > Serving CRUD Requests\nCRUD, generic service provider, http\nExamples of generic CRUD HTTP requests auto-handled by CAP generic runtime handlers. Standard API highlights automatic database logic.\n\n```http\nGET /Books/201          // reading single data entity\nGET /Books?...           // query with options\nPOST /Books {....}       // create entity\nPUT/PATCH /Books/201 {...}  // update entity\nDELETE /Books/201        // delete entity\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Deep READ\ndeep reads, http, OData, cds.ql\nHTTP OData deep read using $expand for retrieving nested associations/compositions, e.g., Orders > header > items.\n\n```http\nGET .../Orders?$expand=header($expand=items)\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Deep READ\ndeep reads, cds.ql, JavaScript\nJS query using cds.ql for reading deeply nested associated entities (e.g., Orders with header and items).\n\n```js\nSELECT.from ('Orders', o => {\n  o.ID, o.title, o.header (h => {\n    h.ID, h.status, h.items('*')\n  })\n})\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Deep READ\ndeep reads, response structure, JavaScript\nSample result structure for a deep read showing nested JSON objects returned by expand queries.\n\n```js\n[{\n    ID:1, title: 'first order', header: { // to-one\n      ID:2, status: 'open', items: [{     // to-many\n        ID:3, description: 'first order item'\n      },{\n        ID:4, description: 'second order item'\n      }]\n    }\n  },\n  ...\n]\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Deep INSERT\ndeep insert, http\nDeep insert: HTTP POST including parent and nested child entities. Used for document-style data modeling in CAP.\n\n```http\nPOST .../Orders {\n  ID:1, title: 'new order', header: { // to-one\n    ID:2, status: 'open', items: [{   // to-many\n      ID:3, description: 'child of child entity'\n    },{\n      ID:4, description: 'another child of child entity'\n    }]\n  }\n}\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Deep INSERT\nassociation, deep insert, http\nShows association handling in deep inserts (reference to existing Author by ID); only foreign keys are filled for associations.\n\n```http\nPOST .../Books {\n  ID:121, title: 'Jane Eyre', author: {ID:12}\n}\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Deep UPDATE\ndeep update, http\nDeep update: HTTP PUT to update parent and children entities in one request. Demonstrates upsert/merge semantics in CAP.\n\n```http\nPUT .../Orders/1 {\n  title: 'changed title of existing order', header: {\n    ID:2, items: [{\n      ID:3, description: 'modified child of child entity'\n    },{\n      ID:5, description: 'new child of child entity'\n    }]\n  }]\n}\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Deep DELETE\ndeep delete, sql\nSQL example illustrating a cascaded deep delete; deletes the root and all composed children.\n\n```sql\nDELETE .../Orders/1  -- would also delete all headers and items\n```\n",
    " Providing Services > Generic Providers > Deep Reads and Writes > Limitations\ncomposition, deep write limitation, cds\nShows a valid and invalid composition on conditions for deep write. Only ANDed equalities to $self are supported out-of-the-box.\n\n```cds\nentity Orders {\n  key ID : UUID;\n  title  : String;\n  Items  : Composition of many OrderItems on substring(title, 0, 1) <= 'F' or Items.pos > 12; // [!code --]\n  Items  : Composition of many OrderItems on Items.order = $self; // [!code ++]\n}\nentity OrderItems {\n  key order : Association to Orders;\n  key pos  : Integer;\n  descr: String;\n}\n```\n",
    " Providing Services > Generic Providers > Auto-Generated Keys\nauto-generated keys, deep insert, cds\nDefines entities where UUID keys are auto-generated on CREATE. Child foreign keys are filled during deep inserts/upserts.\n\n```cds\nentity Orders {\n  key ID : UUID;\n  title  : String;\n  Items  : Composition of many OrderItems on Items.order = $self;\n}\nentity OrderItems {\n  key order : Association to Orders;\n  key pos  : Integer;\n  descr: String;\n}\n```\n",
    " Providing Services > Generic Providers > Auto-Generated Keys\nauto-generated keys, deep insert, http\nPOST example for deep insert where parent receives generated UUID and children auto-populated foreign key. CAP fills IDs.\n\n```http\nPOST .../Orders {\n  title: 'Order #1', Items: [\n    { pos:1, descr: 'Item #1' },\n    { pos:2, descr: 'Item #2' }\n  ]\n}\n```\n",
    " Providing Services > Generic Providers > Searching Data\nsearch, http\nHTTP search request on Books for 'Heights'. Triggers database-level search in text fields.\n\n```http\nGET .../Books?$search=Heights\n```\n",
    " Providing Services > Generic Providers > Searching Data > Including Fields\nannotation, search, cds\nUsing @cds.search to restrict searchability to a single field. Only title is searched for this entity.\n\n```cds\n@cds.search: { title }\nentity Books { ... }\n```\n",
    " Providing Services > Generic Providers > Searching Data > Extend Search to Associated Entities\nannotation, search, association, cds\nExtends search from Books to its associated Authors' fields via @cds.search. Explicitly excludes Authors.biography in search.\n\n```cds\n@cds.search: { author }\nentity Books { ... }\n\n@cds.search: { biography: false }\nentity Authors { ... }\n```\n",
    " Providing Services > Generic Providers > Searching Data > Extend to Individual Elements in Associated Entities\nannotation, search, association, cds\nRestricts search for Books to a single field within an associated entity (author.name).\n\n```cds\n@cds.search: { author.name }\nentity Books { ... }\n```\n",
    " Providing Services > Generic Providers > Searching Data > Excluding Fields\nannotation, search, exclude field, cds\nOmits isbn field from list of searchable fields using @cds.search. Remaining String fields are searched.\n\n```cds\n@cds.search: { isbn: false }\nentity Books { ... }\n```\n",
    " Providing Services > Generic Providers > Searching Data > Fuzzy Search on SAP HANA Cloud\nfuzzy search, hana, annotation, cds\nEnables fuzzy search for title field with a specific threshold, e.g., on SAP HANA Cloud. Allows typo-tolerant queries.\n\n```cds\nentity Books {\n   @Search.fuzzinessThreshold: 0.7\n   title : String;\n}\n```\n",
    " Providing Services > Generic Providers > Searching Data > Fuzzy Search on SAP HANA Cloud\nsearch, ranking, annotation, cds\nAdjusts the relative weight of searchable fields for full-text search matching. title has high, publisherName low ranking.\n\n```cds\nentity Books {\n   @Search.ranking: HIGH\n   title         : String;\n\n   @Search.ranking: LOW\n   publisherName : String;\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Implicit Pagination\npagination, odata, http\nIllustrates implicit server-side OData pagination in responses, with nextLink for additional data fetch.\n\n```http\nGET .../Books\n>{\n  value: [\n    {... first record ...},\n    {... second record ...},\n    ...\n  ],\n  @odata.nextLink: \"Books?$skiptoken=1000\"\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Implicit Pagination\npagination, odata, http\nClient-side follow-up request using @odata.nextLink for server-driven paging in OData.\n\n```http\nGET .../Books?$skiptoken=1000\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Paging Limits\npagination, configuration, json\nConfigures default and maximum query result page sizes for pagination in CDS project configuration.\n\n```json\n{\n  \"cds\": {\n    \"query\": {\n      \"limit\": {\n        \"default\": 20, //> no default\n        \"max\": 100     //> default 1000\n      }\n    }\n  }\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Paging Limits\npagination, annotation, cds\nOverrides global paging defaults for specific services using @cds.query.limit annotations.\n\n```cds\n@cds.query.limit.default: 20\n@cds.query.limit.max: 100\nservice CatalogService {\n  // ...\n}\n@cds.query.limit: { default: 20, max: 100 }\nservice AdminService {\n  // ...\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Paging Limits\npagination, annotation, cds\nDemonstrates entity- and service-level control over max page size using shorthand and detailed notation.\n\n```cds\n@cds.query.limit: 100\nservice CatalogService {\n  entity Books as projection on my.Books;     //> pages at 100\n  @cds.query.limit: 20\n  entity Authors as projection on my.Authors; //> pages at 20\n}\nservice AdminService {\n  entity Books as projection on my.Books;     //> pages at 1000 (default)\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Paging Limits\npagination, precedence, cds\nShows how the closest paging limit annotation applies (entity > service > global). Setting to 0 disables limit at level.\n\n```cds\n@cds.query.limit.default: 20\nservice CatalogService {\n  @cds.query.limit.max: 100\n  entity Books as projection on my.Books;     //> default = 20 (from CatalogService), max = 100\n  @cds.query.limit: 0\n  entity Authors as projection on my.Authors; //> no default, max = 1,000 (from environment)\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Implicit Sorting\nsorting, SQL, cds\nSimple service definition enabling default implicit ordering by primary key for paged queries.\n\n```cds\nservice CatalogService {\n  entity Books as projection on my.Books;\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Implicit Sorting\nsorting, SQL\nAuto-generated query ordering by entity primary key, used for paging consistency.\n\n```sql\nSELECT ... from my_Books\nORDER BY ID; -- default: order by the entity's primary key\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Implicit Sorting\nsorting, SQL\nSQL shows request-provided $orderby param (author) takes precedence, but key order is added for stability.\n\n```sql\nSELECT ... from my_Books ORDER BY\n  author,     -- request-specific order has precedence\n  ID;         -- default order still applied in addition\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Implicit Sorting\nsorting, SQL, cds\nCDS sets a default order by title ascending. Compliments implicit primary key ordering for paging.\n\n```cds\nservice CatalogService {\n  entity Books as projection on my.Books order by title asc;\n}\n```\n",
    " Providing Services > Generic Providers > Pagination & Sorting > Implicit Sorting\nsorting, SQL\nShows SQL resulting from CDS-ordered entity definition. Default and explicit orders combine.\n\n```sql\nSELECT ... from my_Books ORDER BY\n  title asc,  -- from entity definition\n  ID;         -- default order still applied in addition\n```\n",
    " Providing Services > Generic Providers > Concurrency Control > Conflict Detection Using ETags\nconcurrency, etag, annotation, cds\nEnables ETag-based optimistic concurrency control using managed aspect's modifiedAt property as the version key.\n\n```cds\nusing { managed } from '@sap/cds/common';\nentity Foo : managed {...}\nannotate Foo with { modifiedAt @odata.etag }\n```\n",
    " Providing Services > Generic Providers > Concurrency Control > Conflict Detection Using ETags\nconcurrency, etag, http\nHTTP POST creates a record and returns a generated ETag. The client must use the ETag for subsequent writes.\n\n```http\nPOST Employees { ID:111, name:'Name' }\n> 201 Created {'@odata.etag': 'W/\"2000-01-01T01:10:10.100Z\"',...}\n//> Got new ETag to be used for subsequent requests...\n```\n",
    " Providing Services > Generic Providers > Concurrency Control > Conflict Detection Using ETags\nconcurrency, etag, http\nHTTP GET with If-None-Match for caching and conditional responses using ETags.\n\n```http\nGET Employees/111\nIf-None-Match: \"2000-01-01T01:10:10.100Z\"\n> 304 Not Modified // Record was not changed\n```\n",
    " Providing Services > Generic Providers > Concurrency Control > Conflict Detection Using ETags\nconcurrency, etag, http\nGET with If-Match returns 412 if ETag does not match current state, preventing lost updates.\n\n```http\nGET Employees/111\nIf-Match: \"2000-01-01T01:10:10.100Z\"\n> 412 Precondition Failed // Record was changed by another user\n```\n",
    " Providing Services > Generic Providers > Concurrency Control > Conflict Detection Using ETags\nconcurrency, etag, http\nUPDATE with correct ETag does the update and returns updated ETag. Used for optimistic concurrency.\n\n```http\nUPDATE Employees/111\nIf-Match: \"2000-01-01T01:10:10.100Z\"\n> 200 Ok {'@odata.etag': 'W/\"2000-02-02T02:20:20.200Z\"',...}\n//> Got new ETag to be used for subsequent requests...\n```\n",
    " Providing Services > Generic Providers > Concurrency Control > Conflict Detection Using ETags\nconcurrency, etag, http\nUPDATE fails with 412 error if ETag is already changed (prevents concurrent updates).\n\n```http\nUPDATE Employees/111\nIf-Match: \"2000-02-02T02:20:20.200Z\"\n> 412 Precondition Failed // Record was modified by another user\n```\n",
    " Providing Services > Generic Providers > Concurrency Control > Conflict Detection Using ETags\nconcurrency, etag, http\nDELETE requires matching ETag for entity to be deleted, ensuring no concurrent change. If changed, returns 412.\n\n```http\nDELETE Employees/111\nIf-Match: \"2000-02-02T02:20:20.200Z\"\n> 412 Precondition Failed // Record was modified by another user\n```\n",
    " Providing Services > Input Validation > @mandatory\ninput validation, readonly, annotation, cds\nUse @mandatory to require non-empty title input. CDS emits corresponding OData annotations for frontend validation.\n\n```cds\nservice Sue {\n  entity Books {\n    key ID : UUID;\n    title  : String @mandatory;\n  }\n}\n```\n",
    " Providing Services > Input Validation > @mandatory\ninput validation, mandatory, OData, xml\nGenerated OData annotation for required field. Helps UIs enforce mandatory rule at the client.\n\n```xml\n<Annotations Target=\"Sue.Books/title\">\n  <Annotation Term=\"Common.FieldControl\" EnumMember=\"Common.FieldControlType/Mandatory\"/>\n</Annotations>\n```\n",
    " Providing Services > Input Validation > @assert .format\ninput validation, assert format, annotation, cds\nApplies a regex format constraint to bar property. Input must match provided pattern.\n\n```cds\nentity Foo {\n  bar : String @assert.format: '[a-z]ear';\n}\n```\n",
    " Providing Services > Input Validation > @assert .range\ninput validation, assert range, annotation, cds\nDemonstrates use of @assert.range for numeric, date/time, and enum constraints. Restricts valid input range.\n\n```cds\nentity Foo {\n  bar : Integer  @assert.range: [ 0, 3 ];\n  boo : Decimal  @assert.range: [ 2.1, 10.25 ];\n  car : DateTime @assert.range: ['2018-10-31', '2019-01-15'];\n  zoo : String   @assert.range enum { high; medium; low; };\n}\n```\n",
    " Providing Services > Input Validation > ... with open intervals\ninput validation, open interval, annotation, cds\nConfigures open/closed interval boundaries for @assert.range using parenthesis notation.\n\n```cds\n@assert.range: [(0),100]    // 0 < input ≤ 100\n@assert.range: [0,(100)]    // 0 ≤ input < 100\n@assert.range: [(0),(100)]  // 0 < input < 100\n```\n",
    " Providing Services > Input Validation > ... with open intervals\ninput validation, range infinity, annotation, cds\nUses _ as representation of infinity in range assertions for input validation.\n\n```cds\n@assert.range: [(0),_]  // positive numbers only, _ means +Infinity here\n@assert.range: [_,(0)]  // negative number only, _ means -Infinity here\n```\n",
    " Providing Services > Input Validation > @assert .target > Example\ninput validation, assert target, association, cds\nUses @assert.target on managed association to validate existence of target before accepting input.\n\n```cds\nentity Books {\n  key ID : UUID;\n  title  : String;\n  author : Association to Authors @assert.target;\n}\n\nentity Authors {\n  key ID : UUID;\n  name   : String;\n  books  : Association to many Books on books.author = $self;\n}\n```\n",
    " Providing Services > Input Validation > @assert .target > Example\ninput validation, assert target, http\nHTTP POST showing check on author_ID using @assert.target which throws error if target does not exist.\n\n```http\nPOST Books HTTP/1.1\nAccept: application/json;odata.metadata=minimal\nPrefer: return=minimal\nContent-Type: application/json;charset=UTF-8\n\n{\"author_ID\": \"796e274a-c3de-4584-9de2-3ffd7d42d646\"}\n```\n",
    " Providing Services > Input Validation > @assert .target > Example\ninput validation, assert target, http\nHTTP response when @assert.target constraint fails on association input validation.\n\n```http\nHTTP/1.1 400 Bad Request\nodata-version: 4.0\ncontent-type: application/json;odata.metadata=minimal\n\n{\"error\": {\n  \"@Common.numericSeverity\": 4,\n  \"code\": \"400\",\n  \"message\": \"Value doesn't exist\",\n  \"target\": \"author_ID\"\n}}\n```\n",
    " Providing Services > Custom Logic\ncustom logic, service implementation, Node.js, cds toolkit\nProject structure convention for Node.js: place service handler JS file next to .cds service definition.\n\n```shell\n./srv\n  - cat-service.cds  # service definitions\n  - cat-service.js   # service implementation\n...\n```\n",
    " Providing Services > Custom Logic\ncustom logic, service implementation, Java, event handler\nJava: Register a service handler implementation class with @ServiceName annotation for a specific CDS service.\n\n```java\n@Component\n@ServiceName(\"org.acme.Foo\")\npublic class FooServiceImpl implements EventHandler {...}\n```\n",
    " Providing Services > Custom Logic > Custom Event Handlers\nevent handler, custom handler, JavaScript\nRegisters CRUD and custom event handlers in Node.js services using on, before, after hooks.\n\n```js\nmodule.exports = function (){\n  this.on ('submitOrder', (req)=>{...}) //> custom actions\n  this.on ('CREATE',`Books`, (req)=>{...})\n  this.before ('UPDATE',`*`, (req)=>{...})\n  this.after ('READ',`Books`, (books)=>{...})\n}\n```\n",
    " Providing Services > Custom Logic > Custom Event Handlers\nevent handler, custom handler, Java\nJava implementation of event handler classes that handle CRUD and custom events with Before/After/On annotations.\n\n```java\n@Component\n@ServiceName(\"BookshopService\")\npublic class BookshopServiceImpl implements EventHandler {\n  @On(event=\"submitOrder\") public void onSubmitOrder (EventContext req) {...}\n  @On(event=\"CREATE\", entity=\"Books\") public void onCreateBooks (EventContext req) {...}\n  @Before(event=\"UPDATE\", entity=\"*\") public void onUpdate (EventContext req) {...}\n  @After(event=\"READ\", entity=\"Books\") public void onReadBooks (EventContext req) {...}\n}\n```\n",
    " Providing Services > Actions & Functions\nactions, functions, cds modeling\nCDS syntax for declaring actions (data changing) and functions (data retrieval), both unbound and bound to entities.\n\n```cds\nservice Sue {\n  // unbound actions & functions\n  function sum (x:Integer, y:Integer) returns Integer;\n  function stock (id : Foo:ID) returns Integer;\n  action add (x:Integer, to: Integer) returns Integer;\n\n  // bound actions & functions\n  entity Foo { key ID:Integer } actions {\n    function getStock() returns Integer;\n    action order (x:Integer) returns Integer;\n    //bound to the collection and not a specific instance of Foo\n    action customCreate (in: many $self, x: String) returns Foo;\n    // All parameters are optional by default, unless marked with `not null`:\n    action discard (reason: String not null);\n  }\n}\n```\n",
    " Providing Services > Actions & Functions > Implementing Actions / Functions\nactions, functions, event handler, JavaScript\nNode.js custom handler implementations for actions/functions defined in CDS service. Data manipulation and retrieval.\n\n```js\nmodule.exports = function Sue(){\n  this.on('sum', ({data:{x,y}}) => x+y)\n  this.on('add', ({data:{x,to}}) => stocks[to] += x)\n  this.on('stock', ({data:{id}}) => stocks[id])\n  this.on('getStock','Foo', ({params:[id]}) => stocks[id])\n  this.on('order','Foo', ({params:[id],data:{x}}) => stocks[id] -= x)\n}\n```\n",
    " Providing Services > Actions & Functions > Implementing Actions / Functions\nactions, functions, event handler, JavaScript, class based\nAlternative JS class-based style: use class methods to implement actions/functions for CDS services.\n\n```js\nmodule.exports = class Sue extends cds.Service {\n  sum(x,y) { return x+y }\n  add(x,to) { return stocks[to] += x }\n  stock(id) { return stocks[id] }\n  getStock(Foo,id) { return stocks[id] }\n  order(Foo,id,x) { return stocks[id] -= x }\n}\n```\n",
    " Providing Services > Actions & Functions > Calling Actions / Functions\nactions, functions, http, OData\nHTTP requests for invoking actions/functions as defined in CDS, both bound and unbound. OData-compliant syntax.\n\n```http\nGET .../sue/sum(x=1,y=2)              // unbound function\nGET .../sue/stock(id=2)               // unbound function\nPOST .../sue/add {\"x\":11,\"to\":2}      // unbound action\nGET .../sue/Foo(2)/Sue.getStock()     // bound function\nPOST .../sue/Foo(2)/Sue.order {\"x\":3} // bound action\n```\n",
    " Providing Services > Actions & Functions > Calling Actions / Functions\nactions, functions, Node.js, programmatic API\nProgrammatic Node.js usage of service.send for dynamic invocation of actions/functions (unbound, bound to entities/collections).\n\n```js\n// unbound actions/functions\nawait srv.send('sum',{x:1,y:2})\nawait srv.send('stock',{id:2})\nawait srv.send('add',{x:11,to:2})\n// actions/functions bound to collection\nawait srv.send('getStock','Foo',{id:2})\n// for actions/functions bound to entity instance, use this syntax\nawait srv.send({ event: 'order', entity: 'Foo', data: {x:3}, params: [{id:2}]})\n```\n",
    " Providing Services > Actions & Functions > Calling Actions / Functions\nactions, functions, Node.js, typed API\nNode.js: Programmatic type-safe invocation of actions/functions using typed service client API.\n\n```js\n// unbound actions/functions\nsrv.sum(1,2)\nsrv.stock(2)\nsrv.add(11,2)\n// bound actions/functions\nsrv.getStock('Foo',2)\nsrv.order('Foo',2,3)\n```\n",
    " Providing Services > Serving Media Data > Annotating Media Elements\nmedia, annotation, cds\nMarks image as binary property with static MIME type for media streaming. Used for serving in OData/Fiori clients.\n\n```cds\nentity Books { //...\n  image : LargeBinary @Core.MediaType: 'image/png';\n}\n```\n",
    " Providing Services > Serving Media Data > Annotating Media Elements\nmedia, annotation, cds\nStores and annotates media with dynamic/variable MIME type for flexible media handling.\n\n```cds\nentity Books { //...\n  image : LargeBinary @Core.MediaType: imageType;\n  imageType : String  @Core.IsMediaType;\n}\n```\n",
    " Providing Services > Serving Media Data > Annotating Media Elements\nmedia, annotation, external url, cds\nDefines reference to externally hosted media resource via imageUrl, with associated MIME type.\n\n```cds\nentity Books { //...\n  imageUrl  : String @Core.IsURL @Core.MediaType: imageType;\n  imageType : String @Core.IsMediaType;\n}\n```\n",
    " Providing Services > Serving Media Data > Annotating Media Elements\nmedia, annotation, content disposition, cds\nCDS showing media property with associated file download name (suggested for browser download behavior).\n\n```cds\nentity Authors { //...\n  image : LargeBinary @Core.MediaType: imageType @Core.ContentDisposition.Filename: fileName;\n  fileName : String;\n}\n```\n",
    " Providing Services > Serving Media Data > Annotating Media Elements\nmedia, annotation, inline content disposition, cds\nSpecifies that file should be suggested as inline display (not attachment), with filename.\n\n```cds\nentity Authors { //...\n  image : LargeBinary @Core.MediaType: imageType @Core.ContentDisposition.Filename: fileName @Core.ContentDisposition.Type: 'inline';\n  fileName : String;\n}\n```\n",
    " Providing Services > Serving Media Data > Reading Media Resources\nmedia, OData, http\nAPI call to retrieve entity's binary media resource using OData navigation. Content type is set based on annotation/MIME.\n\n```http\nGET ../Books(201)/image\n> Content-Type: application/octet-stream\n```\n",
    " Providing Services > Serving Media Data > Reading Media Resources\nmedia, OData, http\nReturns Content-Disposition so browsers suggest a filename on download of streamed binary data.\n\n```http\nGET ../Authors(201)/image\n> Content-Disposition: 'attachment; filename=\"foo.jpg\"'\n```\n",
    " Providing Services > Serving Media Data > Creating a Media Resource\nmedia, OData, POST, PUT, http\nShows creation/attachment of binary media data to an entity in two steps; MIME type set via Content-Type.\n\n```http\nPOST ../Books\nContent-Type: application/json\n{ <JSON> }\n\nPUT ../Books(201)/image\nContent-Type: image/png\n<MEDIA>\n```\n",
    " Providing Services > Serving Media Data > Updating Media Resources\nmedia, OData, PUT, http\nAPI usage for updating media data stream by overwriting entity's binary property.\n\n```http\nPUT ../Books(201)/image\nContent-Type: image/png\n<MEDIA>\n```\n",
    " Providing Services > Serving Media Data > Deleting Media Resources\nmedia, OData, DELETE, http\nDelete entity and all associated media data.\n\n```http\nDELETE ../Books(201)\n```\n",
    " Providing Services > Serving Media Data > Deleting Media Resources\nmedia, OData, DELETE, http\nDelete only media (binary) property of specific entity, not the entity itself.\n\n```http\nDELETE ../Books(201)/image\n```\n",
    " Providing Services > Serving Media Data > Using External Resources\nmedia, external url, OData, http\nResponse for externally hosted media data using OData conventions (mediaReadLink, mediaContentType, etc).\n\n```http\nGET: ../Books(201)\n>{ ...\n    image@odata.mediaReadLink: \"http://other-server/image.jpeg\",\n    image@odata.mediaContentType: \"image/jpeg\",\n    imageType: \"image/jpeg\"\n}\n```\n",
    " Providing Services > Serving Media Data > Conventions & Limitations > General Conventions\nmedia, OData, binary\nOData query filtering by binary property in base64 encoded format.\n\n```http\nGET $filter=ID eq binary'Q0FQIE5vZGUuanM='\n```\n",
    " Reflecting CDS Models > cds. linked ([csn])\nreflection, cds.linked, cds.reflect, linked model, model transformation, CDS, JavaScript\nDemonstrates transforming a compiled CSN model into a linked model using cds.linked, which wraps all definitions as LinkedDefinitions and LinkedCSN for reflective access. The linked model is actually the modified input CSN.\n\n```js\nlet csn = cds.load('some-model.cds')\nlet linked = cds.linked(csn) // linked === csn\n```\n",
    " Reflecting CDS Models > cds. linked ([csn])\nreflection, cds.linked, CDL string, dynamic model, JavaScript\nShows cds.linked used as a tag function for template literals, creating a linked model directly from embedded CDL source code. Enables dynamic reflection on the fly.\n\n```js\nlet linked = cds.linked`\n  entity Books {\n   key ID: UUID;\n   title: String;\n   author: Association to Authors;\n  }\n  entity Authors {\n   key ID: UUID;\n   name: String;\n  }\n`\n```\n",
    " Reflecting CDS Models > LinkedCSN\nreflection, linked model, services, entities, namespace, convenience access, JavaScript\nExemplifies multiple usages of the entities and services properties from a linked model: as objects, arrays, or functions with namespace arguments. Illustrates reflective access to definitions within a CDS model.\n\n```js\nlet m = cds.linked`\n  namespace my.bookshop;\n  entity Books {...}\n  entity Authors {...}\n  service CatalogService {\n    entity ListOfBooks as projection on Books {...}\n  }\n`\n\n// Object nature\nlet { CatalogService, AdminService } = m.services\nlet { Books, Authors } = m.entities\n\n// Array nature\nfor (let each of m.entities) console.log(each.name)\n\n// Function nature\nlet { ListOfBooks } = m.entities ('my.bookshop.CatalogService')\n```\n",
    " Reflecting CDS Models > LinkedCSN > each()\nreflection, iteration, definition filtering, cds.reflect, each, JavaScript\nShows how to iterate over all entity definitions in a linked model using the each method, which yields definitions of a given kind (here, 'entity'). Useful for programmatically processing model contents.\n\n```js\nlet m = cds.reflect (csn)\nfor (let d of m.each('entity')) {\n  console.log (d.kind, d.name)\n}\n```\n",
    " Reflecting CDS Models > LinkedCSN > all()\nreflection, definition filtering, all, each, shortcut, JavaScript\nIllustrates two equivalent ways to fetch all entity definitions from a linked model: using the all shortcut method or spreading the iterator from each.\n\n```js\nm.all('entity')        //> using shortcut\n[...m.each('entity')]  //> using spread operator\n```\n",
    " Reflecting CDS Models > LinkedCSN > find()\nreflection, definition filtering, find, shortcut, JavaScript\nRetrieves the first service definition (if any) from a linked model using the find method, a convenience wrapper for quickly locating a definition by kind.\n\n```js\nlet service = m.find('service')\n```\n",
    " Reflecting CDS Models > LinkedCSN > foreach()\nreflection, foreach, filter, visitor pattern, JavaScript\nShows foreach used to visit each service definition in a linked model and print its name. Visitor pattern enables actions per matching definition.\n\n```js\n// print the names of all services\nlet m = cds.reflect(csn)\nm.foreach ('service', s => console.log(s.name))\n```\n",
    " Reflecting CDS Models > LinkedCSN > foreach()\nreflection, foreach, elements, Association, filter, JavaScript\nUses foreach to find and print all association elements within the Books entity, showing filtering and visitor pattern over a subset of the model.\n\n```js\n// print the names of all Associations in Books element\nlet { Books } = m.entities()\nm.foreach ('Association', a => console.log(a.name), Books.elements)\n```\n",
    " Reflecting CDS Models > LinkedDefinitions\nlinked definitions, object destructuring, array destructuring, iteration, JavaScript\nExplains two ways to access definitions in LinkedDefinitions: by object property or array index. Both extract definitions by name or position for convenience.\n\n```js\nlet linked = cds.linked (model)\nlet { Books, Authors } = linked.entities // object-like\nlet [ Books, Authors ] = linked.entities // array-like\n```\n",
    " Reflecting CDS Models > LinkedDefinitions\nlinked definitions, linked entities, iteration, JavaScript\nIterates over all definitions in a linked model using for..of, leveraging the array-like nature of LinkedDefinitions for reflective listing.\n\n```js\nfor (let each of linked.definitions) console.log (each.name)\n```\n",
    " Reflecting CDS Models > LinkedDefinitions\nlinked definitions, legacy iteration, for..in, JavaScript\nShows classic for..in looping over definitions. Not recommended as order may change; prefer for..of or destructuring.\n\n```js\nfor (let each in linked.definitions) {\n  let d = linked.definitions [each]\n  console.log (d.name)\n}\n```\n",
    " Reflecting CDS Models > LinkedDefinition\ninstanceof, linked definitions, type checking, JavaScript, cds.entity\nDemonstrates using instanceof to determine if a reflected definition is an entity using the cds.entity class.\n\n```js\nlet { Foo } = cds.linked(csn).entities\nif (Foo instanceof cds.entity) console.log (\"it's an entity\")\n```\n",
    " Reflecting CDS Models > cds. linked .classes\ncds.linked.classes, mixin, extension, built-in classes, CDL, JavaScript\nIllustrates enhancing built-in CDS reflection classes with additional methods (here, toCDL for serialization), using the mixin feature on cds.linked.classes.\n\n```js\ncds.linked.classes .mixin (\n  class type {\n    toCDL(){ return `${this.kind} ${this.name} : ${this.typeAsCDL()};\\n` }\n    typeAsCDL(){ return `${this.type.replace(/^cds\\./,'')}` }\n  },\n  class struct {\n    typeAsCDL() { return `{\n${ Object.values(this.elements).map (\n      e => `  ${e.toCDL()}`\n    ).join('')}}`}\n  },\n  class entity extends cds.struct {\n    typeAsCDL() { return (\n      this.includes ? this.includes+' ' : ''\n    ) + super.typeAsCDL() }\n  },\n  class Association {\n    typeAsCDL(){ return `Association to ${this.target}` }\n  },\n)\n```\n",
    " Reflecting CDS Models > cds. linked .classes\ncds.linked.classes, mixin, testing, CDL output, JavaScript\nDemonstrates usage of the above 'toCDL' mixin method to output CDL for every definition in a model created from inline CDL. Useful for debugging or serialization.\n\n```js\nlet m = cds.linked`\n  entity Books : cuid { title:String; author: Association to Authors }\n  entity Authors : cuid { name:String; }\n  aspect cuid : { key ID:UUID; }\n`\nm.foreach (d => console.log(d.toCDL()))\n```\n",
    " Reflecting CDS Models > cds. builtin. types\ncds.builtin.types, built-in types, linked model, CDL, JavaScript\nShows how the built-in CDS types are constructed as a linked model from inline CDL, forming cds.builtin.types for reference and reflection. All type definitions are available in a LinkedDefinitions object.\n\n```js\ncds.builtin.types = cds.linked`\n  using from './roots';\n  context cds {\n    type UUID         : String(36);\n    type Boolean      : boolean;\n    type Integer      : number;\n    type UInt8        : Integer;\n    type Int16        : Integer;\n    type Int32        : Integer;\n    type Int64        : Integer;\n    type Integer64    : Integer;\n    type Decimal      : number;\n    type Double       : number;\n    type Date         : date;\n    type Time         : date;\n    type DateTime     : date;\n    type Timestamp    : date;\n    type String       : string;\n    type Binary       : string;\n    type LargeString  : string;\n    type LargeBinary  : string;\n    type Map          : struct;\n  }\n`.definitions\n```\n",
    " Reflecting CDS Models > cds. builtin. types\ncds.builtin.types, roots module, CDS core, runtime, JavaScript\nDisplays the JavaScript construction of the CDS core type hierarchy as used in the ./roots module, supporting the reflection system and cds.builtin.types. Each class receives its type association according to inheritance.\n\n```js\nconst { any, context, service ,\n  type, scalar, string, number, boolean, date,\n  array, struct, entity, event, aspect\n  Association, Composition\n} = cds.linked.classes\n\nconst roots = module.exports = {definitions:{\n  any: new any,\n  context: new context ({type:'any'}),\n  type: new type ({type:'any'}),\n    scalar: new scalar ({type:'type'}),\n      string: new string ({type:'scalar'}),\n      number: new number ({type:'scalar'}),\n      boolean: new boolean ({type:'scalar'}),\n      date: new date ({type:'scalar'}),\n    array: new array ({type:'type'}),\n    struct: new struct ({type:'type'}),\n      entity: new entity ({type:'struct'}),\n      event: new event ({type:'struct'}),\n      aspect: new aspect ({type:'struct'}),\n    Association: new Association ({type:'type'}),\n      Composition: new Composition ({type:'Association'}),\n  service: new service ({type:'context'}),\n}}\n```\n",
    " Serving Provided Services > cds. serve (...) {.method}\ncds.serve, service provider, initialization, project setup\nConstructs a service provider from 'my-services' using cds.serve and retrieves CatalogService as a result. This is a common way to get specific service providers from CDS model definitions.\n\n```js\nconst { CatalogService } = await cds.serve('my-services')\n```\n",
    " Serving Provided Services > cds. serve (...) {.method}\ncds.serve, express, custom server, project setup\nAdds all service providers to a given express application, useful for bootstrapping a CAP Node.js app programmatically. This is typically done in a custom server.js.\n\n```js\nconst app = require('express')()\ncds.serve('all').in(app)\n```\n",
    " Serving Provided Services > cds. serve (...) {.method} > Arguments\ncds.serve, single service, project setup\nDemonstrates serving a single named service or all services found in the CDS model. Use 'all' or a specific service name as the first argument to cds.serve.\n\n```js\ncds.serve('CatalogService')  //> serve a single service\ncds.serve('all')             //> serve all services found\n```\n",
    " Serving Provided Services > .from (model) {.method}\ncds.serve, model, from, CSN, project setup\nLoads a CDS model as CSN and serves all service definitions from that model. Useful for advanced scenarios where models are pre-parsed or manipulated programmatically before serving.\n\n```js\nconst csn = await cds.load('my-services.cds')\ncds.serve('all').from(csn)...\n```\n",
    " Serving Provided Services > .to (protocol) {.method}\ncds.serve, protocol, to, REST, OData, Fiori\nSpecifies the protocol through which to expose the services (REST, OData, or Fiori-specific OData with draft enabled). By default, 'fiori' is used.\n\n```js\ncds.serve('all').to('rest')\ncds.serve('all').to('odata')\ncds.serve('all').to('fiori')\n```\n",
    " Serving Provided Services > .at (path) {.method}\ncds.serve, mount point, at, endpoint\nDemonstrates how to programmatically set the mount point (endpoint path) for a single service. Using .at() with multiple services is not supported and will result in an error.\n\n```js\ncds.serve('CatalogService').at('/cat')\ncds.serve('all').at('/cat') //> error\n```\n",
    " Serving Provided Services > .in ([express app]) {.method}\ncds.serve, express, mount, in\nMounts all served services onto a custom Express app and starts the server. This demonstrates a typical application server entry point.\n\n```js\nconst app = require('express')()\ncds.serve('all').in(app)\napp.listen()\n```\n",
    " Serving Provided Services > .with (impl) {.method}\ncds.serve, implementation, with, event handler\nSpecifies the implementation for a service definition by linking a CDS model file to its Node.js implementation module. This is the canonical way to bind service logic to a definition.\n\n```js\ncds.serve('./srv/cat-service.cds').with('./srv/cat-service.js')\n```\n",
    " Serving Provided Services > .with (impl) {.method}\ncds.serve, implementation, with, inline, event handler\nSpecifies an inline function as the implementation and adds an event handler for the 'READ' event on 'Books'. Useful for quick or ad-hoc service logic without an external module.\n\n```js\ncds.serve('./srv/cat-service').with(srv => {\n  srv.on('READ', 'Books', (req) => req.reply([...]))\n})\n```\n",
    " Serving Provided Services > .with (impl) {.method}\ncds.serve, event handler, with, annotation\nShows how to use the @impl annotation in a CDS service definition to point to the implementation file that should be used, as an alternative to providing it explicitly via code.\n\n```cds\nservice MyService @(impl:'cat-service.js'){...}\n```\n",
    " Serving Provided Services > .with (impl) {.method}\ncds.serve, project structure, implementation, defaults\nDemonstrates the default project structure and naming conventions: a .cds service model and a .js implementation with the same base name. Used when implementation is not specified explicitly.\n\n```txt\nsrv/cat-service.cds  #> CDS model with service definition\nsrv/cat-service.js   #> service implementation used by default\n```\n",
    " Serving Provided Services > cds. middlewares\ncds.middlewares, Express, middleware, default order\nLists the default order of built-in Express middlewares registered before protocol processing in a CAP application. Order matters due to dependencies between context, authentication, and model availability.\n\n```js\ncds.middlewares.before = [\n  context(),   // provides cds.context\n  trace(),     // performance tracing\n  auth(),      // user and tenant\n  ctx_model()  // cds.context.model\n]\n```\n",
    " Serving Provided Services > cds. middlewares > .add(mw, pos?) {.method}\ncds.middlewares, add, middleware, customization\nShows how to register custom middlewares at various positions in the CAP middleware chain using cds.middlewares.add. Supports placement by index or relative to specific built-in middleware names.\n\n```js\ncds.middlewares.add(mw, {at:0}) // to the front\ncds.middlewares.add(mw, {at:2})\ncds.middlewares.add(mw, {before:'auth'})\ncds.middlewares.add(mw, {after:'auth'})\ncds.middlewares.add(mw) // to the end\n```\n",
    " Serving Provided Services > cds. middlewares > Customization of cds.context.user\ncds.middlewares, custom middleware, context.user, authentication\nRegisters a custom middleware that modifies cds.context.user.id after authentication but before cds.context.model is set. Useful for customizing identity context (e.g. prefixing user IDs with IDP info).\n\n```js\ncds.middlewares.before = [\n  cds.middlewares.context(),\n  cds.middlewares.trace(),\n  cds.middlewares.auth(),\n  function ctx_user (_,__,next) {\n    const ctx = cds.context\n    ctx.user.id = '<my-idp>' + ctx.user.id\n    next()\n  },\n  cds.middlewares.ctx_model()\n]\n```\n",
    " Serving Provided Services > cds. middlewares > Enabling Feature Flags\ncds.middlewares, feature flags, custom middleware\nDemonstrates how to inject feature flags into req.features in a custom middleware, before model context is set. Supports enablement of selective features for a request.\n\n```js\ncds.middlewares.before = [\n  cds.middlewares.context(),\n  cds.middlewares.trace(),\n  cds.middlewares.auth(),\n  function req_features (req,_,next) {\n    req.features = ['<feature-1>', '<feature-2>']\n    next()\n  },\n  cds.middlewares.ctx_model()\n]\n```\n",
    " Serving Provided Services > cds. protocols > @protocol\ncds.protocols, annotation, protocol, OData, REST, GraphQL\nShows how to expose a CDS service at multiple protocols (OData V4, REST, GraphQL) using the @protocol annotation, and provides the resulting endpoints for each protocol.\n\n```cds\n@protocol: ['odata', 'rest', 'graphql']\nservice CatalogService {}\n//> serves CatalogService at: /odata/v4/catalog, /rest/catalog and /graphql\n```\n",
    " Serving Provided Services > cds. protocols > @protocol\ncds.protocols, annotation, protocol, custom path\nIllustrates how to configure a custom path for a protocol when serving a service using @protocol annotation with an object specifying both kind and path.\n\n```cds\n@protocol: [{ kind: 'odata', path: 'some/path' }]\nservice CatalogService {}\n//> serves CatalogService at: /odata/v4/some/path\n```\n",
    " Serving Provided Services > cds. protocols > @path\ncds.protocols, annotation, path, custom path\nDemonstrates the usage of @path annotation to serve a service directly at a specified custom endpoint path.\n\n```cds\n@path: '/browse'\nservice CatalogService {}\n//> serves CatalogService at: /browse\n```\n",
    " Serving Provided Services > cds. protocols > Custom Protocol Adapter\ncds.env, custom protocol, adapter, configuration\nConfigures a custom protocol adapter programmatically in CAP environment config, specifying the mounting path and implementation for the custom protocol logic.\n\n```js\ncds.env.protocols = {\n  'custom-protocol': { path: '/custom', impl: '<custom-impl.js>', ...options }\n}\n```\n",
    " Connecting to Required Services > cds. connect.to ()\ncds connect, service consumer, cds.connect.to, service connection, API, proxy\nThis snippet shows how to connect to a required service (for example, 'ReviewsService') using cds.connect.to(). It returns a Service instance proxy for remote/local services (OData, SQL, etc.), enabling direct API calls.\n\n```js\nconst ReviewsService = await cds.connect.to('ReviewsService')\n```\n",
    " Connecting to Required Services > cds. connect.to ()\nservice consumer, cds.Service API, read, cds.connect.to\nReads entities from the 'Reviews' collection of the connected ReviewsService. Illustrates usage after cds.connect.to().\n\n```js\nlet reviews = await ReviewsService.read ('Reviews')\n```\n",
    " Connecting to Required Services > cds. connect.to ()\ncds connect, typed API, API signature, service options, cds.connect.to\nTypeScript signature for cds.connect.to(). Shows accepted arguments: service name, and optional options such as kind and impl for direct connection and implementation override.\n\n```ts\nasync function cds.connect.to (\n  name? : string,  // reference to an entry in `cds.requires` config\n  options? : {\n    kind : string  // reference to a preset in `cds.requires.kinds` config\n    impl : string  // module name of the implementation\n  }\n) : Promise<Service>\n```\n",
    " Connecting to Required Services > cds. connect.to ()\ncds connect, service options, service consumer, credentials, cds.connect.to, SQLite\nDemonstrates programmatic connection to a SQLite database without a pre-configured service binding, by specifying kind and credentials directly.\n\n```js\nconst db2 = await cds.connect.to ({\n  kind: 'sqlite', credentials: { url: 'db2.sqlite' }\n})\n```\n",
    " Connecting to Required Services > cds. services\ncds services, service cache, service instance, API\nAccesses the cached service instance from cds.services, instead of always calling cds.connect.to(). Only works for services configured in or served by the current process.\n\n```js\nconst { ReviewsService } = cds.services\n```\n",
    " Connecting to Required Services > Configuring Required Services\nconfiguration, service configuration, cds.requires, package.json, yaml\nAn example cds.requires service configuration in package.json, defining local (sqlite) and remote (OData) services with kind, credentials, and model.\n\n```json\n{\n  \"cds\":{\n    \"requires\": {\n      \"db\": { \"kind\": \"sqlite\", \"credentials\": { \"url\":\"db.sqlite\" }},\n      \"ReviewsService\": {\n        \"kind\": \"odata\", \"model\": \"@capire/reviews\"\n      },\n      \"OrdersService\": {\n        \"kind\": \"odata\", \"model\": \"@capire/orders\"\n      }\n    }\n  }\n}\n```\n",
    " Connecting to Required Services > Configuring Required Services\nconfiguration, service configuration, cds.requires, yaml\nA .cdsrc.yaml formatted configuration for cds.requires, declaring both local SQLite and remote OData services using YAML.\n\n```yaml\ncds:\n  requires:\n    db:\n      kind: sqlite\n      credentials:\n        url: db.sqlite\n    ReviewsService:\n      kind: odata,\n      model: @capire/reviews\n    OrdersService:\n      kind: odata,\n      model: @capire/orders\n```\n",
    " Connecting to Required Services > cds.requires.<i>\\<srv\\></i>`.impl`\nconfiguration, service implementation, cds.requires, impl\nService implementation declaration in cds.requires: sets the node module/file to load for given services via 'impl'. Used to tell cds.connect.to which implementation module to load.\n\n```json\n\"cds\": { \"requires\": {\n  \"some-service\": { \"impl\": \"some/node/module/path\" },\n  \"another-service\": { \"impl\": \"./local/module/path\" }\n}}\n```\n",
    " Connecting to Required Services > cds.requires.<i>\\<srv\\></i>`.kind`\nconfiguration, service configuration, kind, cds.requires\nDefines the 'kind' for services in cds.requires—'sqlite' for db, and 'odata' for a remote service. Enables configuration inheritance and default behavior.\n\n```json\n\"cds\": { \"requires\": {\n  \"db\": { \"kind\": \"sqlite\" },\n  \"remote-service\": { \"kind\": \"odata\" }\n}}\n```\n",
    " Connecting to Required Services > cds.requires.<i>\\<srv\\></i>`.kind`\ndefault configuration, service implementation, kind, cds.requires\nShows the default configurations mapping kinds (sqlite, odata) to their respective implementation modules in cds.requires.\n\n```json\n\"cds\": { \"requires\": {\n  \"sqlite\": { \"impl\": \"[...]/sqlite/service\" },\n  \"odata\": { \"impl\": \"[...]/odata/service\" },\n}}\n```\n",
    " Connecting to Required Services > cds.requires.<i>\\<srv\\></i>`.model`\nconfiguration, remote model, cds.requires, model\nSpecifies a CDS model for a remote service (e.g., OData). Used for reflecting on remote API to enable generic features. Value is the model/module/relative path.\n\n```json\n\"cds\": { \"requires\": {\n  \"remote-service\": { \"kind\": \"odata\", \"model\":\"some/imported/model\" }\n}}\n```\n",
    " Connecting to Required Services > cds.requires.<i>\\<srv\\></i>`.service`\nconfiguration, service definition, cds.requires, service\nOverrides the model’s service name for the given remote service configuration. Sets an explicit service name to search for in the loaded model.\n\n```json\n\"cds\": { \"requires\": {\n  \"remote-service\": { \"kind\": \"odata\", \"model\":\"some/imported/model\", \"service\": \"BusinessPartnerService\" }\n}}\n```\n",
    " Connecting to Required Services > Service Bindings\nservice binding, credentials, cds.requires\nExample of service binding configuration in cds.requires, with credentials object filled from environment or service bindings, typically for Cloud-Foundry and cloud deployments.\n\n```jsonc\n{\n  \"requires\": {\n    \"db\": {\n      \"kind\": \"hana\",\n      \"credentials\": { /* from service binding */ }\n    }\n  }\n}\n```\n",
    " .env file\nenvironment, credentials, .env file, local testing\nDefines service credentials for 'remote-service' as a JSON object in a .env file. This is used for local testing or development to provide service endpoints and authentication information. Do not use this for production and do not commit secrets to source control.\n\n```properties\ncds.requires.remote-service.credentials = { \"url\":\"http://...\", ... }\n```\n",
    "Basic Mechanism\nconfiguration, cds.env, service bindings\nConfigures a required service (ReviewsService) within the cds.requires section in the configuration (e.g., package.json or .cdsrc.json). This makes the service available to the CAP Node.js runtime.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"ReviewsService\": { ... }\n    }\n  }\n}\n```\n",
    "Basic Mechanism\nJavaScript, configuration access, cds.env, service bindings\nDestructures and accesses ReviewsService configuration from cds.env.requires at runtime. Used to programmatically access service binding data in Node.js.\n\n```js\nconst { ReviewsService } = cds.env.requires\n```\n",
    "Basic Mechanism\nJavaScript, credentials, service bindings\nProgrammatically assigns credentials (in this case, a URL) for ReviewsService. Suitable for test environments where credentials are injected at runtime.\n\n```js\nconst { ReviewsService } = cds.env.requires\nReviewsService.credentials = {\n  url: \"http://localhost:4005/reviews\"\n}\n```\n",
    "Through `VCAP_SERVICES` env var\nCloud Foundry, VCAP_SERVICES, service bindings, environment variable\nAn example VCAP_SERVICES environment variable value, showing the credentials and metadata for a HANA service bound as 'db'. Used by Cloud Foundry to provide service bindings to CAP applications.\n\n```json\n{\n  \"VCAP_SERVICES\": {\n    \"hana\": [{\n      \"name\": \"db\", ...\n    }]\n  }\n}\n```\n",
    "Through `VCAP_SERVICES` env var\nCloud Foundry, configuration, service bindings\nConfigures a required HANA service for CAP by specifying its kind in the cds.requires section. Used to map service bindings via Cloud Foundry or environment variables.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": { \"kind\": \"hana\" }\n    }\n  }\n}\n```\n",
    "In Kubernetes / Kyma\nKubernetes, Kyma, service binding, environment variable, servicebinding.io\nDefines the SERVICE_BINDING_ROOT environment variable in a Kubernetes pod template, instructing CAP where to look for mounted service bindings (usually injected as files or secrets). Required for service binding conventions in Kubernetes or Kyma.\n\n```yaml\nspec:\n  containers:\n  - name: bookshop-srv\n    env:\n    # ...\n    - name: SERVICE_BINDING_ROOT\n      value: /bindings\n```\n",
    "In Kubernetes / Kyma\nKubernetes, service binding, SAP BTP, secret\nDefines a custom resource (ServiceBinding) in Kubernetes for the SAP BTP Service Operator, which creates a secret with service credentials to be consumed by the application.\n\n```yaml\napiVersion: services.cloud.sap.com/v1alpha1\nkind: ServiceBinding\nmetadata:\n  name: bookshop-xsuaa-binding\nspec:\n  serviceInstanceName: bookshop-xsuaa-binding\n  externalName: bookshop-xsuaa-binding\n  secretName: bookshop-xsuaa-secret\n```\n",
    "In Kubernetes / Kyma\nKubernetes, secret, volume mount, service credentials\nDescribes how to mount a Kubernetes secret (generated from a service binding) into the container at a specific path, so CAP can read credentials from the filesystem.\n\n```yaml\nspec:\n  containers:\n  - name: bookshop-srv\n    # ...\n    volumeMounts:\n    - name: bookshop-auth\n      mountPath: \"/bindings/auth\"\n      readOnly: true\n  volumes:\n  - name: bookshop-auth\n    secret:\n      secretName: bookshop-xsuaa-secret\n```\n",
    "Through environment variables\nKubernetes, environment variable, service binding\nShows injecting secret values as environment variables into the pod, with a specific prefix so CAP can map them correctly to cds.requires.<service>.credentials. Underscore must be used as delimiter.\n\n```yaml\nspec:\n  containers:\n  - name: app-srv\n    # ...\n    envFrom:\n      - prefix: cds_requires_db_credentials_\n        secretRef:\n          name: app-db\n```\n",
    "Through the file system\nKubernetes, file system, service credentials, CDS_CONFIG\nShows how to mount a secret as a file system directory and set CDS_CONFIG to instruct CAP where to load configuration from. Secrets are accessed at /requires/<service>/credentials for each service.\n\n```yaml\nspec:\n  volumes:\n    - name: app-db-secret-vol\n      secret:\n        secretName: app-db\n  containers:\n  - name: app-srv\n    # ...\n    env:\n      - name: CDS_CONFIG\n        value: /etc/secrets/cds\n    volumeMounts:\n      - name: app-db-secret-vol\n        mountPath: /etc/secrets/cds/requires/db/credentials\n        readOnly: true\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, compatibility, VCAP_SERVICES, cds features\nEnables the feature to emulate VCAP_SERVICES in production profile via CAP's features.emulate_vcap_services configuration. Useful for backward compatibility or when libraries require VCAP_SERVICES even outside Cloud Foundry.\n\n```json\n{\n  \"cds\": {\n    \"features\": {\n      \"[production]\": {\n        \"emulate_vcap_services\": true\n      }\n    }\n  }\n}\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, VCAP_SERVICES, service credentials\nCAP configuration entry to define a service named 'auth' of kind xsuaa, providing credentials explicitly. Used in conjunction with VCAP_SERVICES emulation.\n\n```json\n{\n  \"requires\": {\n    \"auth\": {\n      \"kind\": \"xsuaa\",\n      \"credentials\": {\n        \"clientid\": \"cpapp\",\n        \"clientsecret\": \"dlfed4XYZ\"\n      }\n    }\n  }\n}\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, VCAP_SERVICES, service credentials\nShows the structure of a generated VCAP_SERVICES variable for an xsuaa (auth) service after enabling emulate_vcap_services. Used by CAP and SAP SDKs requiring VCAP_SERVICES.\n\n```json\n{\n  \"xsuaa\": [\n    {\n      \"label\": \"xsuaa\",\n      \"tags\": [ \"auth\" ],\n      \"credentials\": {\n        \"clientid\": \"cpapp\",\n        \"clientsecret\": \"dlfed4XYZ\"\n      }\n    }\n  ]\n}\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, command line, environment variable\nCommand to print out the value of the VCAP_SERVICES variable as seen by the CAP process, including any emulated values. Used for debugging service bindings.\n\n```shell\ncds env get VCAP_SERVICES --process-env\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, command line, service configuration\nCommand to filter and list all preconfigured vcap.label properties in the current CAP environment configuration. Useful for checking which services will be included in VCAP_SERVICES.\n\n```shell\ncds env | grep vcap.label\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, service configuration, vcap.label\nShows how to add a custom vcap.label to a CAP service configuration so it can be included in VCAP_SERVICES for integration with supporting libraries.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"myservice\": {\n        \"vcap\": {\n          \"label\": \"myservice-label\"\n        }\n      }\n    }\n  }\n}\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, environment variable, credentials\nDefines environment variables for a service's credentials, mapped by CAP to cds.requires.<service>.credentials.<prop>. Used for local, CI, or test configuration.\n\n```shell\ncds_requires_myservice_credentials_user=test-user\ncds_requires_myservice_credentials_password=test-password\n```\n",
    "Provide Service Bindings (`VCAP_SERVICES`)\nCloud Foundry, VCAP_SERVICES, service credentials\nShows the resulting VCAP_SERVICES entry generated for a custom service with label 'myservice-label', including user and password credentials.\n\n```json\n{\n  \"myservice-label\": [\n    {\n      \"label\": \"myservice-label\",\n      \"credentials\": {\n        \"user\": \"test-user\",\n        \"password\": \"test-password\"\n      }\n    }\n  ]\n}\n```\n",
    "Through _.cdsrc-private.json_ File for Hybrid Testing\ncdsrc-private.json, hybrid testing, credentials\nConfiguration file for hybrid/local testing. .cdsrc-private.json can securely host credentials for required services. It is excluded from version control and not intended for deployment.\n\n```json\n{\n  \"requires\": {\n    \"ReviewsService\": {\n      \"credentials\": {\n        \"url\": \"http://localhost:4005/reviews\"\n      }\n    },\n    \"db\": {\n      \"credentials\": {\n        \"url\": \"db.sqlite\"\n      }\n    }\n  }\n}\n```\n",
    "Through `process.env` Variables\nprocess.env, environment variable, service credentials, test\nExports environment variables to provide service credentials for ReviewsService and db before starting the CAP development server. Useful for ad-hoc local tests.\n\n```shell\nexport cds_requires_ReviewsService_credentials_url=http://localhost:4005/reviews\nexport cds_requires_db_credentials_database=sqlite.db\ncds watch fiori\n```\n",
    "In _.env_ Files for Local Testing\n.env file, local testing, credentials, environment variable\nExample of adding service credentials to a .env file for repeated local tests. Not to be checked into source control; only for local development.\n\n```properties\ncds.requires.ReviewsService.credentials = { \"url\": \"http://localhost:4005/reviews\" }\ncds.requires.db.credentials.database = sqlite.db\n```\n",
    " Remote Services <Concept /> > CSRF-Token Handling > Basic Configuration\ncds.RemoteService, configuration, CSRF, security, OData\nEnables CSRF-token handling for the API_BUSINESS_PARTNER remote OData service with both regular and batch request protection. Used in cds configuration to enhance security for services requiring CSRF.\n\n```json\n\"cds\": {\n    \"requires\": {\n        \"API_BUSINESS_PARTNER\": {\n            \"kind\": \"odata\",\n            \"model\": \"srv/external/API_BUSINESS_PARTNER\",\n            \"csrf\": true,\n            \"csrfInBatch\": true\n        }\n    }\n}\n```\n",
    " Remote Services <Concept /> > CSRF-Token Handling > Advanced Configuration\ncds.RemoteService, configuration, CSRF, advanced, OData\nProvides an advanced configuration for CSRF-token handling. Allows customizing the HTTP method and the URL used for token retrieval instead of the default behavior. Enhances flexibility for remote service integration.\n\n```json\n\"cds\": {\n    \"requires\": {\n        \"API_BUSINESS_PARTNER\": {\n            ...\n            \"csrf\": {  // [!code focus]\n              \"method\": \"get\",  // [!code focus]\n              \"url\": \"...\"  // [!code focus]\n            }\n        }\n    }\n}\n```\n",
    " Remote Services <Concept /> > Timeout Handling > Configuration Option\ncds.RemoteService, configuration, timeout, requestTimeout\nConfigures the requestTimeout for a remote OData service connection. This sets a maximum waiting time in milliseconds for remote calls before aborting, useful for custom response time requirements.\n\n```json\n{\n  \"API_BUSINESS_PARTNER\": {\n    \"kind\": \"odata\",\n    \"credentials\": {\n      ...\n      \"requestTimeout\": 1000000 // [!code focus]\n    }\n  }\n}\n```\n",
    " Messaging > Declaring Events\nconfiguration, package.json, messaging, event declaration\nConfigures an external OData service and the messaging channel in package.json for event declaration and communication in a CAP project.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"ExternalService\": {\n        \"kind\": \"odata\",\n        \"model\": \"srv/external/external.cds\"\n      },\n      \"messaging\": {\n        \"kind\": \"enterprise-messaging\"\n      }\n    }\n  }\n}\n```\n",
    " Messaging > Declaring Events\ncds modeling, service definition, event\nDefines an external service and declares an event (ExternalEvent) with fields in a CDS model file.\n\n```cds\nservice ExternalService {\n    event ExternalEvent {\n        ID: UUID;\n        name: String;\n    }\n}\n```\n",
    " Messaging > Declaring Events\ncds modeling, service definition, event\nDefines an own service and declares an event (OwnEvent) for messaging, enabling emission of custom events.\n\n```cds\nservice OwnService {\n    event OwnEvent {\n        ID: UUID;\n        name: String;\n    }\n}\n```\n",
    " Messaging > Declaring Events\nJavaScript, service consumer, emit event, event handler\nListens to ExternalEvent events on an external service, and then emits OwnEvent on the current service using received message data. Illustrates event relay pattern in JavaScript service implementation.\n\n```js\nmodule.exports = async srv => {\n  const externalService = await cds.connect.to('ExternalService')\n  externalService.on('ExternalEvent', async msg => {\n    await srv.emit('OwnEvent', msg.data)\n  })\n}\n```\n",
    " Messaging > Declaring Events > Custom Topics with Declared Events\ncds modeling, event, custom topic, annotation\nDeclares an event with a custom topic using the @topic annotation so that messaging uses a specified topic string instead of default.\n\n```cds\nservice OwnService {\n    @topic: 'my.custom.topic'\n    event OwnEvent { ID: UUID; name: String; }\n}\n```\n",
    " Messaging > Emitting Events\nJavaScript, emit event, transaction, event emission\nEmits an event to a message broker via the 'messaging' technical service after certain database actions. Demonstrates sending both simple and custom-message formats with headers.\n\n```js\nconst messaging = await cds.connect.to('messaging')\n\nthis.after(['CREATE', 'UPDATE', 'DELETE'], 'Reviews', async (_, req) => {\n  const { subject } = req.data\n  const { rating } = await cds.run(\n    SELECT.one(['round(avg(rating),2) as rating'])\n    .from(Reviews)\n    .where({ subject }))\n\n  // send to a topic\n  await messaging.emit('cap/msg/system/review/reviewed',\n   { subject, rating })\n\n  // alternative if you want to send custom headers\n  await messaging.emit({ event: 'cap/msg/system/review/reviewed',\n    data: { subject, rating },\n    headers: { 'X-Correlation-ID': req.headers['X-Correlation-ID'] }})\n})\n```\n",
    " Messaging > Receiving Events\nJavaScript, event listener, receive event, topic subscription\nSubscribes to a specific topic, receives incoming events, and performs an update to the Books entity using received data. Illustrates event-driven data processing.\n\n```js\nconst messaging = await cds.connect.to('messaging')\n\n// listen to a topic\nmessaging.on('cap/msg/system/review/reviewed', msg => {\n  const { subject, rating } = msg.data\n  return cds.run(UPDATE(Books, subject).with({ rating }))\n})\n```\n",
    " Messaging > Receiving Events\nJavaScript, event listener, catch all, dead letter queue\nRegisters a global event handler to receive all messages from the message broker, useful for dead letter queue processing or debugging.\n\n```js\nmessaging.on('*', async msg => { /*...*/ })\n```\n",
    " Messaging > Inbox <Beta />\nconfiguration, package.json, messaging, inbox, beta\nEnables inboxing of received messages for reliable asynchronous processing in CAP applications by setting 'inboxed' to true.\n\n```js\n{\n  cds: {\n    requires: {\n      messaging: {\n        kind: 'enterprise-messaging',\n        inboxed: true\n      }\n    }\n  }\n}\n```\n",
    " Messaging > CloudEvents Protocol\nCloudEvents, configuration, messaging, protocol\nConfigures the CAP application to use the CloudEvents protocol as the message format for event emission and reception.\n\n```js\n{\n  cds: {\n    requires: {\n      messaging: {\n        kind: 'enterprise-messaging-shared',\n        format: 'cloudevents'\n      }\n    }\n  }\n}\n```\n",
    " Messaging > CloudEvents Protocol\nCloudEvents, json, event, example\nDemonstrates a typical CloudEvents JSON message structure as used in SAP/cap eventing with protocol support.\n\n```json\n{\n  \"type\": \"sap.s4.beh.salesorder.v1.SalesOrder.Created.v1\",\n  \"specversion\": \"1.0\",\n  \"source\": \"/default/sap.s4.beh/ER9CLNT001\",\n  \"id\": \"0894ef45-7741-1eea-b7be-ce30f48e9a1d\",\n  \"time\": \"2020-08-14T06:21:52Z\",\n  \"datacontenttype\": \"application/json\",\n  \"data\": {\n    \"SalesOrder\":\"3016329\"\n  }\n}\n```\n",
    " Messaging > CloudEvents Protocol > Topic Prefixes\nconfiguration, messaging, topic prefix\nShows how to set custom topic prefixes for publishing and subscribing in a CAP messaging configuration.\n\n```js\n{\n  cds: {\n    requires: {\n      messaging: {\n        kind: 'enterprise-messaging-shared',\n        publishPrefix: 'default/sap.cap/books/',\n        subscribePrefix: 'default/sap.cap/reviews/'\n      }\n    }\n  }\n}\n```\n",
    " Messaging > Message Brokers > SAP Event Mesh (Shared)\nconfiguration, messaging, SAP Event Mesh, shared, queue\nConfigures a shared SAP Event Mesh message broker with a custom queue and advanced amqp settings in CAP.\n\n```json\n{\n    \"requires\": {\n        \"messaging\": {\n            \"kind\": \"enterprise-messaging-shared\",\n            \"queue\": {\n               \"name\": \"my/enterprise/messaging/queue\",\n               \"accessType\": \"EXCLUSIVE\",\n               \"maxMessageSizeInBytes\": 19000000\n            },\n            \"amqp\": {\n              \"incomingSessionWindow\": 100\n            }\n        }\n    }\n}\n```\n",
    " Messaging > Message Brokers > SAP Event Mesh\nconfiguration, messaging, SAP Event Mesh, HTTP webhook\nSets up SAP Event Mesh message broker using HTTP webhook integration, with advanced queue and webhook configuration.\n\n```json\n{\n    \"requires\": {\n        \"messaging\": {\n            \"kind\": \"enterprise-messaging\",\n            \"queue\": {\n               \"name\": \"my/enterprise/messaging/queue\",\n               \"accessType\": \"EXCLUSIVE\",\n               \"maxMessageSizeInBytes\": 19000000\n            },\n            \"webhook\": {\n              \"waitingPeriod\": 7000\n            }\n        }\n    }\n}\n\n```\n",
    " Messaging > Message Brokers > SAP Event Mesh\nauthorization, xs-security.json, SAP Event Mesh\nGrants SAP Event Mesh callback scope in xs-security.json so the broker can trigger handshake/auth and send messages to the CAP application.\n\n```json\n{\n  ...,\n  \"scopes\": [\n    ...,\n    {\n      \"name\": \"$XSAPPNAME.emcallback\",\n      \"description\": \"Event Mesh Callback Access\",\n      \"grant-as-authority-to-apps\": [\n        \"$XSSERVICENAME(<SERVICE_NAME_OF_YOUR_EVENT_MESH_INSTANCE>)\"\n      ]\n    }\n  ]\n}\n```\n",
    " Messaging > Message Brokers > SAP Event Mesh\nauthorization, SAP Event Mesh, service descriptor\nLets the SAP Event Mesh service descriptor accept the necessary authority for handshake and event communication with the app.\n\n```json\n{\n  ...,\n  \"authorities\": [\n    \"$ACCEPT_GRANTED_AUTHORITIES\"\n  ]\n}\n```\n",
    " Messaging > Message Brokers > File Based\nconfiguration, messaging, file-based\nConfigures local file-based messaging for testing/development, specifying the message storage file.\n\n```json\n{\n    \"requires\": {\n        \"messaging\": {\n            \"kind\": \"file-based-messaging\",\n            \"file\": \"../msg-box\"\n        }\n    }\n}\n```\n",
    " Messaging > Message Brokers > Composite-Messaging\nconfiguration, messaging, composite-messaging, routing\nConfigures composite-messaging in CAP, routing topics to specific enterprise-messaging backends via glob patterns. Facilitates multi-backend event processing.\n\n```json\n{\n  \"requires\": {\n    \"messaging\": {\n      \"kind\": \"composite-messaging\",\n      \"routes\": {\n        \"myEnterpriseMessagingReview\": [\"cap/msg/system/review/*\"],\n        \"myEnterpriseMessagingBook\": [\"**/book/*\"]\n      }\n    },\n    \"myEnterpriseMessagingReview\": {\n      \"kind\": \"enterprise-messaging\",\n      \"queue\": {\n        \"name\": \"cap/msg/system/review\"\n      }\n    },\n    \"myEnterpriseMessagingBook\": {\n      \"kind\": \"enterprise-messaging\",\n      \"queue\": {\n        \"name\": \"cap/msg/system/book\"\n      }\n    }\n  }\n}\n```\n",
    " Messaging > Message Brokers > Composite-Messaging\nJavaScript, composite-messaging, event handler\nShows how topic routing works for composite-messaging where each handler is mapped to a particular backend configuration.\n\n```js\nmodule.exports = async srv => {\n  const messaging = await cds.connect.to('messaging')\n\n  messaging.on('book/repository/book/modified', msg => {\n    // comes from myEnterpriseMessagingBook\n  })\n\n  messaging.on('cap/msg/system/review/reviewed', msg => {\n    // comes from myEnterpriseMessagingReview\n  })\n}\n```\n",
    " Database Services > cds.**DatabaseService**  <i>  class </i> { cds-db-service} > <span>srv</span>.begin <i> () → this </i> {db-begin }\ncds.DatabaseService, transaction, db connection\nStarts a new database transaction by explicitly acquiring a physical connection from the pool. Typically not called directly; the framework does this automatically on first query. Shown for edge cases where manual transaction control is needed.\n\n```js\nconst tx = srv.begin();\n```\n",
    " Database Services > cds.DatabaseService — Consumption {databaseservice-consumption }\nInsertResult, insert, affectedRows, result keys, DatabaseService\nDemonstrates how to use the InsertResult object returned by a cds.DatabaseService insert call. You can iterate over result for inserted keys, access affectedRows, and use valueOf() for comparisons.\n\n```js\nconst result = await cds.db.insert.into('Books').entries([{ title: 'X' }, { title: 'Y' }]);\nconsole.log([...result]);                // e.g. [ { ID: 1 }, { ID: 2 } ]\nconsole.log(result.affectedRows);         // e.g. 2\nconsole.log(result.valueOf() > 0);        // true\n```\n",
    " Database Services > cds.DatabaseService — Configuration {databaseservice-configuration }\nconfiguration, database, connection pool, pool options, generic-pool\nDefault pool configuration for database connections in cds.DatabaseService, as implemented with generic-pool (not used by @cap-js drivers). Parameters control pool sizing, eviction, and borrowing strategy.\n\n```json\n{\n  \"acquireTimeoutMillis\": 10000,\n  \"evictionRunIntervalMillis\": 60000,\n  \"min\": 0,\n  \"max\": 100,\n  \"numTestsPerEvictionRun\": 33,\n  \"softIdleTimeoutMillis\": 30000,\n  \"idleTimeoutMillis\": 30000,\n  \"testOnBorrow\": true,\n  \"fifo\": false\n}\n```\n",
    " Database Services > cds.DatabaseService — Configuration {databaseservice-configuration }\nconfiguration, database, connection pool, pool options, package.json, cds.requires\nShows how to set a custom pool configuration for the database service in your project settings (e.g., package.json or .cdsrc.json) under cds.requires.db.pool. Adjusts connection pool properties such as max, min, acquireTimeoutMillis, and fifo.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"kind\": \"hana\",\n        \"pool\": {\n          \"acquireTimeoutMillis\": 5000,\n          \"min\": 0,\n          \"max\": 100,\n          \"fifo\": true\n        }\n      }\n    }\n  }\n}\n```\n",
    " Database Services > cds.DatabaseService — UPSERT {databaseservice-upsert }\nUPSERT, upsert, CQN, database write, data replication\nCreates a CQN UPSERT statement to insert or update the 'db.Books' entity by its key. If the row exists, it is updated; otherwise, a new one is inserted. Data must supply all key elements for the target entity.\n\n```js\nUPSERT.into('db.Books')\n  .entries({ ID: 4711, title: 'Wuthering Heights', stock: 100 })\n```\n",
    " Fiori Support > Lean Draft > Handlers Registration\nCRUD, draft, event handler, service implementation, JavaScript, lean draft, handlers registration, Fiori, ApplicationService\nRegisters event handlers for CRUD operations and actions/functions on active and draft entities using CAP's service API. Shows array and single entity registration for lean draft with ApplicationService, applicable to .on/.before/.after handlers.\n\n```js\n// only active entities\nsrv.on(['CREATE', 'READ', 'UPDATE', 'DELETE'], 'MyEntity', /*...*/)\n// only draft entities\nsrv.on(['CREATE', 'READ', 'UPDATE', 'DELETE'], 'MyEntity.drafts', /*...*/)\n// bound action/function on active entity\nsrv.on('boundActionOrFunction', 'MyEntity', /*...*/)\n// bound action/function on draft entity\nsrv.on('boundActionOrFunction', 'MyEntity.drafts', /*...*/)\n\n// Register for both entities\n// srv.on('boundActionOrFunction', ['MyEntity', 'MyEntity.drafts'], /*...*/)\n```\n",
    " Fiori Support > Lean Draft > Handlers Registration\ndraft-specific events, event handler, Fiori, JavaScript, CANCEL, EDIT, NEW, SAVE\nIllustrates how to add custom logic for specific draft events: NEW, CANCEL, EDIT, and SAVE. These let you react to various points in the Fiori draft process, including draft creation, discard, editing, and persisting changes.\n\n```js\n// When a new draft is created\nsrv.on('NEW', 'MyEntity.drafts', /*...*/)\n// When a draft is discarded\nsrv.on('CANCEL', 'MyEntity.drafts', /*...*/)\n// When a new draft is created from an active instance\nsrv.on('EDIT', 'MyEntity', /*...*/)\n// When the active entity is changed\nsrv.on('SAVE', 'MyEntity', /*...*/)\n```\n",
    " Fiori Support > Lean Draft > Draft Locks\nconfiguration, cds.env, draft lock, timeout, properties, Fiori, draft\nSets the lock timeout for Fiori draft entities. Prevents other users from modifying a draft for the configured period. Supports hours, minutes, or milliseconds. Default is 15 minutes.\n\n```properties\ncds.fiori.draft_lock_timeout=30min\n```\n",
    " Fiori Support > Lean Draft > Garbage Collection of Stale Drafts\ngarbage collection, stale drafts, configuration, cds.env, json, timeout, Fiori, draft\nConfigures the timeout for automatic deletion of inactive Fiori drafts. Value can be a string (days, hours, milliseconds) or false (to disable cleanup). Automatic cleanup is performed as a side effect of new draft creation.\n\n```json\n{\n  \"cds\": {\n    \"fiori\": {\n      \"draft_deletion_timeout\": \"28d\"\n    }\n  }\n}\n```\n",
    " Fiori Support > Lean Draft > Bypassing the SAP Fiori Draft Flow\nconfiguration, bypass, draft, Fiori, feature flag, json, active entity modification\nEnables direct creation and modification of active instances without using the draft mechanism. Useful for programmatic or technical scenarios (e.g. Fiori Elements Mass Edit).\n\n```json\n{\n  \"cds\": {\n    \"fiori\": {\n      \"bypass_draft\": true\n    }\n  }\n}\n```\n",
    " Fiori Support > Lean Draft > Bypassing the SAP Fiori Draft Flow\nhttp, bypass, POST, PATCH, Fiori, active entity write, draft\nShows example HTTP requests for directly creating and updating active entity instances in a draft-enabled model when 'bypass_draft' is enabled.\n\n```http\nPOST /Books\n\n{\n  \"ID\": 123,\n  \"IsActiveEntity\": true\n}\n\n---\n\nPATCH /Books(ID=123,IsActiveEntity=true)\n\n{\n  \"title\": \"How to be more active\"\n}\n```\n",
    " Fiori Support > Lean Draft > Differences to Previous Version\nCSN, entities, draft, JavaScript, API, schema, model introspection\nShows how draft-enabled entities have corresponding draft CSN entities accessible via the service entity API. Useful for programmatic model inspection.\n\n```js\nconst { MyEntity } = srv.entities\nMyEntity.drafts // points to model.definitions['MyEntity.drafts']\n```\n",
    " Fiori Support > Lean Draft > Differences to Previous Version\nevent handler, draft, READ, testing, req.target, JavaScript, Fiori\nDemonstrates event handler registration for draft entities, verifying the request target inside the handler to distinguish between draft and active entities.\n\n```js\nsrv.on('READ', 'MyEntity.drafts', (req, next) => {\n  assert.equal(req.target.name, 'MyEntity.drafts')\n  return next()\n})\n```\n",
    " Fiori Support > Lean Draft > Programmatic Invocation of Draft Actions <Beta />\nAPI, draft actions, JavaScript, Fiori, programmatic, service implementation\nDemonstrates how to programmatically invoke Fiori draft actions using ApplicationService API: creating, discarding, editing, and saving (activating) drafts.\n\n```js\nawait srv.new(MyEntity.drafts, data)     // create new draft\nawait srv.discard(MyEntity.drafts, keys) // discard draft\nawait srv.edit(MyEntity, keys)           // create draft from active instance\nawait srv.new(MyEntity.drafts).for(keys) // same as above\nawait srv.save(MyEntity.drafts, keys)    // activate draft\n```\n",
    " Minimalistic Logging Facade > cds.log\nlogging, cds log, logger usage, CLI, logging facade\nObtains a logger instance for the 'sql' logger id using cds.log() and writes an info-level log message. Used to log output within custom modules or CAP applications.\n\n```js\nconst LOG = cds.log('sql')\nLOG.info ('whatever', you, 'like...')\n```\n",
    " Minimalistic Logging Facade > cds.log\nlogging, cds log, log level, logger usage\nShows the various ways to set the log level on a logger. Accepts a string or object for the level, with case-insensitivity.\n\n```js\nconst LOG = cds.log('foo', 'warn')  //> shorthand for:\nconst LOG = cds.log('foo', { level: 'warn' })\nconst LOG = cds.log('foo', 'WARN')  //> shorthand for:\nconst LOG = cds.log('foo', { level: 'WARN' })\n```\n",
    " Minimalistic Logging Facade > Logger `id` — cached & shared loggers\nlogger id, logging, cds log, cached loggers, singleton\nDemonstrates that requesting a logger with the same id returns the same cached instance, enabling module-level log-sharing.\n\n```js\nconst LOG1 = cds.log('foo')\nconst LOG2 = cds.log('foo')\nconsole.log (LOG1 === LOG2) //> true\n```\n",
    " Minimalistic Logging Facade > Logger `label` — used to prefix log output\nlogging, label, log output, logger label\nShows how to customize the label prefix for log output by specifying a custom label in the logger options.\n\n```js\nconst LOG = cds.log('foo',{label:'bar'})\nLOG.info(\"it's a foo\")\n//> [bar] - it's a foo\n```\n",
    " Minimalistic Logging Facade > Logger usage → much like `console`\nlogger api, logging, cds log, console like\nThe logger interface mimics the JavaScript console object, exposing a log method for each log level and underscore-prefixed properties for activation status.\n\n```js\ncds.log() → {\n  trace(...), _trace,\n  debug(...), _debug,\n  info(...),  _info, log(...), // alias for info()\n  warn(...),  _warn,\n  error(...), _error,\n}\n```\n",
    " Minimalistic Logging Facade > Recommendations\nlogging, cds log, best practices, performance\nCompares bad and good approaches to logging. Recommends deferring expensive message construction until it is certain the log level is enabled.\n\n```js\n// DONT:\nconst { format } = require('util')\nLOG.debug (`Expected ${arg} to be a string, but got: ${format(value)}`)\n// DO:\nLOG.debug ('Expected', arg, 'to be a string, but got', value)\n```\n",
    " Minimalistic Logging Facade > Recommendations\nlogging, cds log, level check, performance\nShows how to check if a given log level is enabled before logging, reducing unnecessary function calls for disabled log levels.\n\n```js\nconst LOG = cds.log('sql')\nLOG._info && LOG.info ('whatever', you, 'like...')\n```\n",
    " Minimalistic Logging Facade > cds.log.format\nlog format, formatter, cds.log.format, logging\nDefines the default log formatter for new loggers. Allows customization of message format by assigning to cds.log.format.\n\n```js\n// the current default:\ncds.log.format = (id, level, ...args) => [ `[${id}]`, '-', ...args ]\n```\n",
    " Minimalistic Logging Facade > cds.log.format\nlog format, formatter, cds.log.format, logging, verbose\nShows a verbose log formatter that outputs ISO timestamps, log level names, tenant and request context, and logger id as part of each log message.\n\n```js\nconst _levels = [ 'SILENT', 'ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE' ]\ncds.log.format = (id, level, ...args) => [\n  '[', (new Date).toISOString(),\n  '|', _levels[level].padEnd(5),\n  '|', cds.context?.tenant || '-',\n  '|', cds.context?.id || '-',\n  '|', id, '] -', ...args\n]\n```\n",
    " Minimalistic Logging Facade > cds.log.format\nlog format, formatter, setFormat, logging\nDemonstrates using the .setFormat() method to assign a custom formatter to a specific logger instance, affecting newly or previously created loggers.\n\n```js\nconst _levels = [ 'SILENT', 'ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE' ]\nconst LOG = cds.log('foo') .setFormat ((id, level, ...args) => [\n  '[', (new Date).toISOString(),\n  '|', _levels[level].padEnd(5),\n  '|', cds.context?.tenant || '-',\n  '|', cds.context?.id || '-',\n  '|', id, '] -', ...args\n])\n```\n",
    " Minimalistic Logging Facade > cds.log.levels\nlog levels, cds.log.levels, logging\nLists the supported numeric and named log levels for use with cds.log, including aliases such as 'SILLY' and 'VERBOSE' for level 5.\n\n```js\ncds.log.levels = {\n  SILENT: 0,    // all log output switched off\n  ERROR: 1,     // logs errors only\n  WARN: 2,      // logs errors and warnings only\n  INFO: 3,      // logs errors, warnings and general infos\n  DEBUG: 4,     // logs errors, warnings, info, and debug\n                // (and trace when using default logger implementation)\n  TRACE: 5,     // most detailed log level\n  SILLY: 5,     // alias for TRACE\n  VERBOSE: 5    // alias for TRACE\n}\n```\n",
    " Minimalistic Logging Facade > cds.log.levels\nlog level, logger api, logging\nShows programmatic construction of a logger for module 'foo' with the WARN log level, using the predefined numeric level constants.\n\n```js\nconst LOG = cds.log('foo', cds.log.levels.WARN)\n```\n",
    " Minimalistic Logging Facade > cds.log.levels\nlog level, logger configuration, logging, package.json\nConfigures per-logger log levels in package.json under 'cds.log.levels', affecting initial log level settings for specific modules.\n\n```json\n{\n  \"cds\": {\n    \"log\": {\n      \"levels\": {\n        \"sql\": \"debug\",\n        \"cds\": \"info\"\n      }\n    }\n  }\n}\n```\n",
    " Minimalistic Logging Facade > cds.log.levels\nlog level, logger usage, logging, level change, dynamic configuration\nDemonstrates that log levels can be modified dynamically for cached loggers by subsequent `cds.log` calls with a new log level.\n\n```js\n// some-module.js\nconst LOG = cds.log('foo') // using default log level 'info'\n\n// some-other-module.js\nconst LOG = cds.log('foo') // shares the same logger as above\n\n// some-controller-module.js\ncds.log('foo','debug') // switches the 'foo' logger to 'debug' level\n```\n",
    " Minimalistic Logging Facade > Using winston Loggers\ncds.log.Logger, custom logger, winston, logging framework\nReplaces the default logger with a winston-based logger to integrate with the external winston logging framework.\n\n```js\ncds.log.Logger = cds.log.winstonLogger()\n```\n",
    " Minimalistic Logging Facade > Using winston Loggers\ncds.log.Logger, custom logger, winston, logging framework, options\nConfigures winston transports and options using cds.log.winstonLogger, for advanced logging requirements like file and console output.\n\n```js\ncds.log.Logger = cds.log.winstonLogger({\n  format: winston.format.simple(),\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({\n      filename: 'errors.log',\n      level: 'error'\n    })\n  ],\n})\n```\n",
    " Minimalistic Logging Facade > Custom Loggers\ncds.log.Logger, custom logger, winston, api, logger facade\nImplements a custom Logger for cds.log using the winston logging framework and adapts the method names and formatting. This pattern is suited for integrating with external log backends.\n\n```js\nconst winston = require(\"winston\")\nconst util = require('util')\nconst cds = require('@sap/cds')\ncds.log.Logger = (label, level) => {\n  // construct winston logger\n  const logger = winston.createLogger({\n    levels: cds.log.levels, // use cds.log's levels\n    level: Object.keys(cds.log.levels)[level],\n    transports: [new winston.transports.Console()],\n  })\n  // winston's log methods expect single message strings\n  const _fmt = (args) => util.formatWithOptions(\n    {colors:false}, `[${label}] -`, ...args\n  )\n  // map to cds.log's API\n  return Object.assign (logger, {\n    trace: (...args) => logger.TRACE (_fmt(args)),\n    debug: (...args) => logger.DEBUG (_fmt(args)),\n    log:   (...args) => logger.INFO  (_fmt(args)),\n    info:  (...args) => logger.INFO  (_fmt(args)),\n    warn:  (...args) => logger.WARN  (_fmt(args)),\n    error: (...args) => logger.ERROR (_fmt(args)),\n  })\n}\n```\n",
    " Minimalistic Logging Facade > DEBUG env variable\ndebug, env variable, logging\nEnables debug-level output for specified logger ids or all loggers by setting the DEBUG environment variable on the command line.\n\n```shell\nDEBUG=app,sql cds watch\nDEBUG=all cds watch\n```\n",
    " Minimalistic Logging Facade > DEBUG env variable\ndebug, cds.log, alternate ids, logging\nInitializes a logger with multiple alternate ids for matching the DEBUG environment variable, enabling debug mode for additional id aliases.\n\n```js\nconst LOG = cds.log('db|sql')\n```\n",
    " Minimalistic Logging Facade > Configuration\nconfiguration, log level, cds.env, logging, package.json\nShows sample configuration of initial log levels for loggers via cds.env.log.levels in package.json.\n\n```json\n{\n  \"cds\": {\n    \"log\": {\n      \"levels\": {\n        \"sql\": \"debug\",\n        \"cds\": \"info\"\n      }\n    }\n  }\n}\n```\n",
    " Project-Specific Configurations > CLI `cds env` Command\nCLI, verify, cds.env, project settings\nShows how to use the `cds env` CLI command to inspect and print different environment and configuration settings for a CAP project. Demonstrates various ways to get information about configuration, including specific sections or help.\n\n```shell\ncds env               #> shortcut to `cds env ls`\ncds env ls            #> lists all settings in properties format\ncds env ls folders    #> lists the `folders` settings\ncds env get           #> prints all settings in JSON-like format\ncds env get folders   #> prints the `folders` settings\ncds env get defaults  #> prints defaults only\ncds env ?             #> get help\n```\n",
    " Project-Specific Configurations > CLI `cds env` Command\nCLI, verify, cds.env\nDemonstrates the output of `cds env ls requires.db`, listing all settings for 'requires.db' in properties format.\n\n```shell\n> cds env ls requires.db\n\nrequires.db.credentials.url = ':memory:'\nrequires.db.impl = '@cap-js/sqlite'\nrequires.db.kind = 'sqlite'\n```\n",
    " Project-Specific Configurations > CLI `cds env` Command\nCLI, verify, cds.env\nShows JSON-like output of the 'cds env requires.db' command, presenting effective configuration for 'requires.db'.\n\n```shell\n> cds env requires.db\n\n{\n  impl: '@cap-js/sqlite',\n  credentials: { url: ':memory:' },\n  kind: 'sqlite'\n}\n```\n",
    " Project-Specific Configurations > CLI `cds env` Command\nCLI, cds.env, repl\nAccesses cds.env properties using the `cds -e` (eval) CLI command, printing configuration details for 'requires.db'.\n\n```shell\n> cds -e .env.requires.db\n\n{\n  impl: '@cap-js/sqlite',\n  credentials: { url: ':memory:' },\n  kind: 'sqlite'\n}\n```\n",
    " Project-Specific Configurations > CLI `cds env` Command\nCLI, cds.env, repl\nDemonstrates usage of the interactive `cds repl` to access and view the current cds.env configuration for the database.\n\n```shell\n$ cds -r\nWelcome to cds repl ...\n> cds.env.requires.db\n{\n  impl: '@cap-js/sqlite',\n  credentials: { url: ':memory:' },\n  kind: 'sqlite'\n}\n```\n",
    " Project-Specific Configurations > The `cds.env` Module\ncds.env, Node.js, configuration, programmatic API\nShows Node.js code that prints the configuration for the SQL service from cds.env. This is equivalent to the `cds env get requires.sql` CLI command, allowing programmatic access to environment settings.\n\n```js\nconst cds = require('@sap/cds')\nconsole.log (cds.env.requires.sql)\n```\n",
    " Project-Specific Configurations > Sources for `cds.env`\nconfiguration, package.json, cdsrc.json, process environment, project settings, precedence\nExample of project-level configuration in a cdsrc.json file, defining a 'requires.db' setting with a model directory and credentials.\n\n```jsonc\n{\n  \"requires\": {\n    \"db\": {\n      \"kind\": \"sql\",\n      \"model\": \"./db\",\n      \"credentials\": { \"url\": \":memory:\" }\n    }\n  }\n}\n```\n",
    " Project-Specific Configurations > Sources for `cds.env`\nconfiguration, package.json, project settings\nExample of package.json configuration, specifically inside the 'cds' section, overriding the kind of database service.\n\n```jsonc\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"kind\": \"sqlite\"\n      }\n    }\n  }\n}\n```\n",
    " Project-Specific Configurations > Sources for `cds.env`\nconfiguration, .env, process environment\nShows usage of a .env/properties file to set the database credentials.database property in the configuration.\n\n```properties\ncds.requires.db.credentials.database = my.sqlite\n```\n",
    " Project-Specific Configurations > Sources for `cds.env`\ncds.env, runtime, effective configuration\nDemonstrates the resulting cds.env object after merging settings from multiple sources (cdsrc.json, package.json, env). Higher-precedence settings overwrite lower ones.\n\n```js\ncds.env = { ...,\n  requires: {\n    db: {\n      kind: \"sqlite\",\n      model: \"./db\",\n      credentials: { database:\"my.sqlite\" }\n    }\n  }\n}\n```\n",
    " Project-Specific Configurations > Sources for `cds.env` > Programmatic Settings\ncds.env, Node.js, programmatic API, runtime configuration\nDemonstrates how to set or override cds.env properties for the current Node.js process, affecting only the running instance (i.e., not persisted to source files).\n\n```js\nconst cds = require('@sap/cds')\ncds.env.requires.sql.kind = 'sqlite'\ncds.env.requires.sql.credentials = { database:'my.sqlite' }\n```\n",
    " Project-Specific Configurations > Project Configuration > In _./package.json_\npackage.json, configuration, project settings\nAdding a 'cds' configuration section to package.json to statically define a required service (database) for a CAP project.\n\n```json\n\"cds\": {\n  \"requires\": {\n    \"db\": \"sql\"\n  }\n}\n```\n",
    " Project-Specific Configurations > Project Configuration > In _./.cdsrc.json_\ncdsrc.json, configuration, project settings\nStatic project settings for a database service in .cdsrc.json in the project root.\n\n```json\n\"requires\": {\n  \"db\": \"sql\"\n}\n```\n",
    " Project-Specific Configurations > Process Environment > On the Command Line\nprocess environment, command line, environment variable\nSets a process environment variable to configure the database kind for a CAP server invocation on UNIX-based systems.\n\n```shell\nCDS_REQUIRES_DB_KIND=sql cds run\n```\n",
    " Project-Specific Configurations > Process Environment > In _./.env_\n.env, properties, process environment\nSpecifies the database kind in a .env file using underscore-separated (lowercase) syntax.\n\n```properties\ncds_requires_db_kind = sql\n```\n",
    " Project-Specific Configurations > Process Environment > In _./.env_\n.env, properties, process environment\nAlternative .env file syntax to define the required database kind using dot notation.\n\n```properties\ncds.requires.db.kind = sql\n```\n",
    " Project-Specific Configurations > Process Environment > In _./.env_\n.env, properties, process environment\nYou can set an entire object structure as a configuration property using JSON-like syntax in the .env file.\n\n```properties\ncds.requires.db = { \"kind\": \"sql\" }\n```\n",
    " Project-Specific Configurations > Process Environment > `CDS_CONFIG` env variable\nprocess environment, CDS_CONFIG, shell, process.env, configuration\nPasses a JSON object as an environment variable to configure services at runtime using CDS_CONFIG. This approach allows for flexible, shell-based dynamic configuration.\n\n```shell\nCDS_CONFIG='{\"requires\":{\"db\":{\"kind\":\"sqlite\"}}}' cds serve\n```\n",
    " Project-Specific Configurations > Process Environment > `CDS_CONFIG` env variable\nprocess environment, CDS_CONFIG, shell, file, configuration\nSpecifies a JSON file to import configuration through the CDS_CONFIG environment variable. Useful for separating secrets or environment-specific settings from the application code.\n\n```shell\nCDS_CONFIG=./my-cdsrc.json cds serve\n```\n",
    " Project-Specific Configurations > Process Environment > `CDS_CONFIG` env variable\nprocess environment, CDS_CONFIG, directory, yaml, json, configuration\nDemonstrates the directory structure and file contents for dynamic configuration injection using a CDS_CONFIG pointing to a directory with secrets or environment-specific files.\n\n```yaml\n/etc/secrets/cds/requires/auth/kind: xsuaa\n/etc/secrets/cds/requires/auth/credentials/clientid: capapp\n/etc/secrets/cds/requires/auth/credentials/clientsecret: dlfed4XYZ\n/etc/secrets/cds/requires/db:\n  { kind: \"hana\", \"credentials\": { \"user\": \"hana-user\" } }\n```\n",
    " Project-Specific Configurations > Process Environment > `CDS_CONFIG` env variable\nprocess environment, CDS_CONFIG, configuration, example\nShows the resulting configuration object after importing settings from files and directories using the CDS_CONFIG environment variable.\n\n```json\n{\n  \"requires\": {\n    \"auth\": {\n      \"kind\": \"xsuaa\",\n      \"credentials\": {\n        \"clientid\": \"cpapp\",\n        \"clientsecret\": \"dlfed4XYZ\"\n      }\n    },\n    \"db\": {\n      \"kind\": \"hana\",\n      \"credentials\": {\n        \"user\": \"hana-user\"\n      }\n    }\n  }\n}\n```\n",
    " Project-Specific Configurations > Required Services > Prototype-Chained Along `.kind` References\nrequires, service definition, prototype chaining, kind, package.json\nDefines service requirements in package.json with prototype chaining using 'kind'. ServiceA inherits properties from ServiceB and ultimately from the 'hana' built-in kind, demonstrating effective configuration inheritance.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"serviceA\": {\n        \"kind\": \"serviceB\",\n        \"myProperty\": \"my overwritten property\"\n      },\n      \"serviceB\": {\n        \"kind\": \"hana\",\n        \"myProperty\": \"my property\",\n        \"myOtherProperty\": \"my other property\"\n      }\n    }\n  }\n}\n```\n",
    " Project-Specific Configurations > Configuration Profiles\nprofiles, configuration, package.json, environment\nShows how to define environment-specific profiles in the cds configuration inside package.json, allowing settings to differ between development and production (or other custom) environments.\n\n```json\n{\n  \"cds\": {\n    \"requires\": {\n      \"db\": {\n        \"[development]\": { \"kind\": \"sqlite\" },\n        \"[production]\": { \"kind\": \"hana\" }\n      }\n    }\n  }\n}\n```\n",
    " Project-Specific Configurations > Configuration Profiles\nprofiles, CLI, environment, custom profile, cds run\nHow to run cds with a specific profile from the command line, enabling custom configuration sets defined under profile keys in your settings.\n\n```shell\ncds run --profile my-custom-profile\n```\n",
    " Project-Specific Configurations > Configuration Profiles\nprofiles, CLI, environment, custom profile, cds run, Windows, Mac/Linux, Powershell\nAlternative way to select a custom profile via the CDS_ENV environment variable when running the CAP server. (Use appropriate syntax for your OS.)\n\n```shell\nCDS_ENV=my-custom-profile cds run\n```\n",
    " Project-Specific Configurations > App-Specific Settings\npackage.json, app configuration, custom configuration\nShows how to add custom, app-specific settings alongside the standard 'cds' config in package.json, to be consumed by your code.\n\n```json\n\"cds\": { ... },\n\"my-app\": { \"myoption\": \"value\" }\n```\n",
    " Project-Specific Configurations > App-Specific Settings\napp configuration, cds.env, Node.js, custom configuration\nNode.js code to fetch custom app-specific configuration from cds.env using the 'for' method.\n\n```js\nconst { myoption } = cds.env.for('my-app')\n```\n"
  ]
}